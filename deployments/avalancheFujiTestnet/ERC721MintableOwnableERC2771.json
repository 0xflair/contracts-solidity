{
  "address": "0x0d2eA7C1ebe67601F1Fa2C1037305a3E9B98ef52",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        }
      ],
      "name": "mintByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        }
      ],
      "name": "mintByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8163ab9c86baaf71d486c1b309759326e6c7ac647a1988968233a121a37bc761",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x0d2eA7C1ebe67601F1Fa2C1037305a3E9B98ef52",
    "transactionIndex": 1,
    "gasUsed": "755115",
    "logsBloom": "0x
    "blockHash": "0xcb4b0379b0596b85a9aaf4a34fbbb373a0e8c328c36db117b8e136bbfd1e0c0b",
    "transactionHash": "0x8163ab9c86baaf71d486c1b309759326e6c7ac647a1988968233a121a37bc761",
    "logs": [],
    "blockNumber": 17744836,
    "cumulativeGasUsed": "4744723",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "41373eaf12b52d564cbc495cd15332a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:provides-interfaces\":\"IERC721MintableOwnable\",\"custom:required-dependencies\":\"IERC721MintableExtension\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"mintByOwner(address,uint256)\":{\"details\":\"Creates `amount` new tokens for `to`, of token type `id`. See {ERC721-_mint}. Requirements: - the caller must be diamond owner.\"},\"mintByOwner(address,uint256,string[])\":{\"details\":\"Mint new tokens for single address with dedicated tokenURIs.\"},\"mintByOwner(address[],string[])\":{\"details\":\"Mint new tokens for multiple addresses with dedicated tokenURIs.\"},\"mintByOwner(address[],uint256)\":{\"details\":\"Mint constant amount of new tokens for multiple addresses (e.g. 1 nft for each address).\"},\"mintByOwner(address[],uint256[])\":{\"details\":\"Mint new tokens for multiple addresses with dedicated tokenURIs.\"}},\"title\":\"ERC721 - Mint as owner - with meta-transactions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Allow minting as owner via meta transactions, signed by the owner private key. (supports ERC721A)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC721/facets/minting/ERC721MintableOwnableERC2771.sol\":\"ERC721MintableOwnableERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xe2a19d82d7050c0cd1afb542253f65ce34a650d7d99c0ffcdec6b4274fc51e31\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0x1f1b08cba51a05c8cea04e13251f9f8b8fc895017071cb205b0b4170900d1e5b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xaf69959fcc5b87a74426939bc35b8517566494e3ba575b5cfdb1b5c788c0636a\",\"license\":\"MIT\"},\"src/common/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * The caller must be the current contract itself.\\n */\\nerror ErrSenderIsNotSelf();\\n\",\"keccak256\":\"0xd1592cdff5defdc5c2eabccce2fcd663d930338b99dad69567c7054c81711bc9\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./ERC2771ContextStorage.sol\\\";\\n\\nabstract contract ERC2771ContextInternal is Context {\\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78f51039de18500ce56634bfa72f8d8a0510c97dd94f175e1cbd2385d4ae37\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC2771ContextStorage {\\n    struct Layout {\\n        address trustedForwarder;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC2771Context\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb2e9e2c6145ecf4aae84a602ff668269869da26b25924e9b486b5e94936740e\",\"license\":\"MIT\"},\"src/token/ERC721/extensions/mintable/IERC721MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC721A} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC721MintableExtension {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC721A-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Mint new tokens for multiple addresses with different amounts.\\n     */\\n    function mintByFacet(address[] memory tos, uint256[] memory amounts) external;\\n\\n    /**\\n     * @dev Mint constant amount of new tokens for multiple addresses (e.g. 1 nft for each address).\\n     */\\n    function mintByFacet(address[] memory tos, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x1de8e575de50d0ddeb20eba79daa012b22f7f0fcff8c4e1d8b8b26838c861b02\",\"license\":\"MIT\"},\"src/token/ERC721/extensions/supply/ERC721SupplyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC721SupplyStorage {\\n    struct Layout {\\n        // The next token ID to be minted.\\n        uint256 currentIndex;\\n        // The number of tokens burned.\\n        uint256 burnCounter;\\n        // Maximum possible supply of tokens.\\n        uint256 maxSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC721Supply\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda4ffe387a4a1ae9d7ab750a5c8376969e55f1fc9a3e78a68c2a8345bff4d170\",\"license\":\"MIT\"},\"src/token/ERC721/facets/minting/ERC721MintableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../../../access/ownable/OwnableInternal.sol\\\";\\nimport \\\"../../../common/metadata/TokenMetadataAdminInternal.sol\\\";\\nimport \\\"../../../ERC721/extensions/supply/ERC721SupplyStorage.sol\\\";\\nimport \\\"../../extensions/mintable/IERC721MintableExtension.sol\\\";\\nimport \\\"./IERC721MintableOwnable.sol\\\";\\n\\n/**\\n * @title ERC721 - Mint as owner\\n * @notice Allow minting as contract owner with no restrictions (supports ERC721A).\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:required-dependencies IERC721MintableExtension\\n * @custom:provides-interfaces IERC721MintableOwnable\\n */\\ncontract ERC721MintableOwnable is IERC721MintableOwnable, OwnableInternal, TokenMetadataAdminInternal {\\n    using ERC721SupplyStorage for ERC721SupplyStorage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC721MintableOwnable\\n     */\\n    function mintByOwner(address to, uint256 amount) public virtual onlyOwner {\\n        IERC721MintableExtension(address(this)).mintByFacet(to, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721MintableOwnable\\n     */\\n    function mintByOwner(address[] calldata tos, uint256[] calldata amounts) public virtual onlyOwner {\\n        IERC721MintableExtension(address(this)).mintByFacet(tos, amounts);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721MintableOwnable\\n     */\\n    function mintByOwner(address[] calldata tos, uint256 amount) public virtual onlyOwner {\\n        IERC721MintableExtension(address(this)).mintByFacet(tos, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721MintableOwnable\\n     */\\n    function mintByOwner(\\n        address to,\\n        uint256 amount,\\n        string[] calldata tokenURIs\\n    ) public virtual onlyOwner {\\n        uint256 nextTokenId = ERC721SupplyStorage.layout().currentIndex;\\n\\n        IERC721MintableExtension(address(this)).mintByFacet(to, amount);\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            _setURI(nextTokenId + i, tokenURIs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721MintableOwnable\\n     */\\n    function mintByOwner(address[] calldata tos, string[] calldata tokenURIs) public virtual onlyOwner {\\n        uint256 firstTokenId = ERC721SupplyStorage.layout().currentIndex;\\n        uint256 total = tos.length;\\n\\n        IERC721MintableExtension(address(this)).mintByFacet(tos, 1);\\n\\n        for (uint256 i = 0; i < total; i++) {\\n            _setURI(firstTokenId + i, tokenURIs[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda30d6998e0436f859c4cdf69c97c57113613105ec40e3f3c3885a3b3f720dd8\",\"license\":\"MIT\"},\"src/token/ERC721/facets/minting/ERC721MintableOwnableERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../metatx/ERC2771ContextInternal.sol\\\";\\nimport \\\"./ERC721MintableOwnable.sol\\\";\\n\\n/**\\n * @title ERC721 - Mint as owner - with meta-transactions\\n * @notice Allow minting as owner via meta transactions, signed by the owner private key. (supports ERC721A)\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:required-dependencies IERC721MintableExtension\\n * @custom:provides-interfaces IERC721MintableOwnable\\n */\\ncontract ERC721MintableOwnableERC2771 is ERC721MintableOwnable, ERC2771ContextInternal {\\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\\n        return ERC2771ContextInternal._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\\n        return ERC2771ContextInternal._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x2ea59d27913942ee4e5c025c5779957f727b66de204d0acb34e1e17f28b6ceaa\",\"license\":\"MIT\"},\"src/token/ERC721/facets/minting/IERC721MintableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC721} that allows diamond owner to mint tokens.\\n */\\ninterface IERC721MintableOwnable {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC721-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond owner.\\n     */\\n    function mintByOwner(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Mint new tokens for multiple addresses with dedicated tokenURIs.\\n     */\\n    function mintByOwner(address[] calldata tos, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev Mint constant amount of new tokens for multiple addresses (e.g. 1 nft for each address).\\n     */\\n    function mintByOwner(address[] calldata tos, uint256 amount) external;\\n\\n    /**\\n     * @dev Mint new tokens for single address with dedicated tokenURIs.\\n     */\\n    function mintByOwner(\\n        address to,\\n        uint256 amount,\\n        string[] calldata tokenURIs\\n    ) external;\\n\\n    /**\\n     * @dev Mint new tokens for multiple addresses with dedicated tokenURIs.\\n     */\\n    function mintByOwner(address[] calldata tos, string[] calldata tokenURIs) external;\\n}\\n\",\"keccak256\":\"0x1f65f03b8d876b1ad83fe88c3191b8cf28575380913bd9277a74c49ec311eb3b\",\"license\":\"MIT\"},\"src/token/common/metadata/ITokenMetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ITokenMetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0xa10bfaafe098e7fdeba4d74a93515a670eb7151ef06cfe4c3b9e3c8eac4216bc\",\"license\":\"MIT\"},\"src/token/common/metadata/TokenMetadataAdminInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./ITokenMetadataInternal.sol\\\";\\nimport \\\"./TokenMetadataStorage.sol\\\";\\n\\nabstract contract TokenMetadataAdminInternal is ITokenMetadataInternal {\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        require(!TokenMetadataStorage.layout().baseURILocked, \\\"Metadata: baseURI locked\\\");\\n        TokenMetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setFallbackURI(string memory baseURI) internal virtual {\\n        require(!TokenMetadataStorage.layout().fallbackURILocked, \\\"Metadata: fallbackURI locked\\\");\\n        TokenMetadataStorage.layout().fallbackURI = baseURI;\\n    }\\n\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        require(tokenId >= TokenMetadataStorage.layout().lastUnlockedTokenId, \\\"Metadata: tokenURI locked\\\");\\n        TokenMetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n\\n    function _setURISuffix(string memory uriSuffix) internal virtual {\\n        require(!TokenMetadataStorage.layout().uriSuffixLocked, \\\"Metadata: uriSuffix locked\\\");\\n        TokenMetadataStorage.layout().uriSuffix = uriSuffix;\\n    }\\n\\n    function _lockBaseURI() internal virtual {\\n        TokenMetadataStorage.layout().baseURILocked = true;\\n    }\\n\\n    function _lockFallbackURI() internal virtual {\\n        TokenMetadataStorage.layout().fallbackURILocked = true;\\n    }\\n\\n    function _lockURIUntil(uint256 tokenId) internal virtual {\\n        TokenMetadataStorage.layout().lastUnlockedTokenId = tokenId;\\n    }\\n\\n    function _lockURISuffix() internal virtual {\\n        TokenMetadataStorage.layout().uriSuffixLocked = true;\\n    }\\n}\\n\",\"keccak256\":\"0x86aa018965be665fa42afea8228b98ef2099313b99722a06ff96481c26a01f94\",\"license\":\"MIT\"},\"src/token/common/metadata/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary TokenMetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.TokenMetadata\\\");\\n\\n    struct Layout {\\n        string baseURI;\\n        bool baseURILocked;\\n        string fallbackURI;\\n        bool fallbackURILocked;\\n        string uriSuffix;\\n        bool uriSuffixLocked;\\n        uint256 lastUnlockedTokenId;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafa901b11d3ed3e6253df7f86855baef6cf35d53508ff43a59cb140d63d4a192\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cb6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80635393b00d116100505780635393b00d14610094578063914cc31b146100a7578063cb05f4ef146100ba57600080fd5b80632c3d8acb1461006c5780633542aee214610081575b600080fd5b61007f61007a36600461080a565b6100cd565b005b61007f61008f366004610892565b6101d5565b61007f6100a23660046108bc565b6102c2565b61007f6100b536600461080a565b61045a565b61007f6100c836600461090a565b6105a6565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b0316610100610684565b6001600160a01b03161461015b5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b6040517f49142a1400000000000000000000000000000000000000000000000000000000815230906349142a149061019d90879087908790879060040161099d565b600060405180830381600087803b1580156101b757600080fd5b505af11580156101cb573d6000803e3d6000fd5b5050505050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b0316610208610684565b6001600160a01b03161461025e5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610152565b604051632d4f475f60e01b81526001600160a01b0383166004820152602481018290523090632d4f475f90604401600060405180830381600087803b1580156102a657600080fd5b505af11580156102ba573d6000803e3d6000fd5b505050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b03166102f5610684565b6001600160a01b03161461034b5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610152565b60007faa3a0910ce5fb062d392dc5a532ff9d50bb9d0f614a8eda1a3ec786de0b761f354604051632d4f475f60e01b81526001600160a01b0387166004820152602481018690529091503090632d4f475f90604401600060405180830381600087803b1580156103ba57600080fd5b505af11580156103ce573d6000803e3d6000fd5b5050505060005b848110156102ba576104486103ea8284610a1e565b8585848181106103fc576103fc610a36565b905060200281019061040e9190610a4c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061069392505050565b8061045281610a93565b9150506103d5565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031661048d610684565b6001600160a01b0316146104e35760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610152565b7faa3a0910ce5fb062d392dc5a532ff9d50bb9d0f614a8eda1a3ec786de0b761f3546040516392c56e2d60e01b8152849030906392c56e2d9061052f9089908590600190600401610aac565b600060405180830381600087803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b5050505060005b8181101561059d5761058b6105798285610a1e565b8686848181106103fc576103fc610a36565b8061059581610a93565b915050610564565b50505050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b03166105d9610684565b6001600160a01b03161461062f5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610152565b6040516392c56e2d60e01b815230906392c56e2d9061065690869086908690600401610aac565b600060405180830381600087803b15801561067057600080fd5b505af115801561059d573d6000803e3d6000fd5b600061068e610778565b905090565b7f021fe373f7e014154d4f551c37c047b9ed9093c774291911030896b9b2dfef65548210156107045760405162461bcd60e51b815260206004820152601960248201527f4d657461646174613a20746f6b656e555249206c6f636b6564000000000000006044820152606401610152565b60008281527f021fe373f7e014154d4f551c37c047b9ed9093c774291911030896b9b2dfef666020526040902061073b8282610b6b565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8260405161076c9190610c2b565b60405180910390a25050565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f420546000906001600160a01b031633036107b9575060131936013560601c90565b503390565b60008083601f8401126107d057600080fd5b50813567ffffffffffffffff8111156107e857600080fd5b6020830191508360208260051b850101111561080357600080fd5b9250929050565b6000806000806040858703121561082057600080fd5b843567ffffffffffffffff8082111561083857600080fd5b610844888389016107be565b9096509450602087013591508082111561085d57600080fd5b5061086a878288016107be565b95989497509550505050565b80356001600160a01b038116811461088d57600080fd5b919050565b600080604083850312156108a557600080fd5b6108ae83610876565b946020939093013593505050565b600080600080606085870312156108d257600080fd5b6108db85610876565b935060208501359250604085013567ffffffffffffffff8111156108fe57600080fd5b61086a878288016107be565b60008060006040848603121561091f57600080fd5b833567ffffffffffffffff81111561093657600080fd5b610942868287016107be565b909790965060209590950135949350505050565b8183526000602080850194508260005b85811015610992576001600160a01b0361097f83610876565b1687529582019590820190600101610966565b509495945050505050565b6040815260006109b1604083018688610956565b82810360208401528381527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8411156109e957600080fd5b8360051b80866020840137600091016020019081529695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610a3157610a31610a08565b500190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610a6357600080fd5b83018035915067ffffffffffffffff821115610a7e57600080fd5b60200191503681900382131561080357600080fd5b600060018201610aa557610aa5610a08565b5060010190565b604081526000610ac0604083018587610956565b9050826020830152949350505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680610afa57607f821691505b602082108103610b1a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b6657600081815260208120601f850160051c81016020861015610b475750805b601f850160051c820191505b818110156102ba57828155600101610b53565b505050565b815167ffffffffffffffff811115610b8557610b85610ad0565b610b9981610b938454610ae6565b84610b20565b602080601f831160018114610bce5760008415610bb65750858301515b600019600386901b1c1916600185901b1785556102ba565b600085815260208120601f198616915b82811015610bfd57888601518255948401946001909101908401610bde565b5085821015610c1b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b81811015610c5857858101830151858201604001528201610c3c565b81811115610c6a576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212200d35b970efe6e06118ebe6d5a80ed48fbf58e97fb3e3921d207f6e319a389da464736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80635393b00d116100505780635393b00d14610094578063914cc31b146100a7578063cb05f4ef146100ba57600080fd5b80632c3d8acb1461006c5780633542aee214610081575b600080fd5b61007f61007a36600461080a565b6100cd565b005b61007f61008f366004610892565b6101d5565b61007f6100a23660046108bc565b6102c2565b61007f6100b536600461080a565b61045a565b61007f6100c836600461090a565b6105a6565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b0316610100610684565b6001600160a01b03161461015b5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b6040517f49142a1400000000000000000000000000000000000000000000000000000000815230906349142a149061019d90879087908790879060040161099d565b600060405180830381600087803b1580156101b757600080fd5b505af11580156101cb573d6000803e3d6000fd5b5050505050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b0316610208610684565b6001600160a01b03161461025e5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610152565b604051632d4f475f60e01b81526001600160a01b0383166004820152602481018290523090632d4f475f90604401600060405180830381600087803b1580156102a657600080fd5b505af11580156102ba573d6000803e3d6000fd5b505050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b03166102f5610684565b6001600160a01b03161461034b5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610152565b60007faa3a0910ce5fb062d392dc5a532ff9d50bb9d0f614a8eda1a3ec786de0b761f354604051632d4f475f60e01b81526001600160a01b0387166004820152602481018690529091503090632d4f475f90604401600060405180830381600087803b1580156103ba57600080fd5b505af11580156103ce573d6000803e3d6000fd5b5050505060005b848110156102ba576104486103ea8284610a1e565b8585848181106103fc576103fc610a36565b905060200281019061040e9190610a4c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061069392505050565b8061045281610a93565b9150506103d5565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031661048d610684565b6001600160a01b0316146104e35760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610152565b7faa3a0910ce5fb062d392dc5a532ff9d50bb9d0f614a8eda1a3ec786de0b761f3546040516392c56e2d60e01b8152849030906392c56e2d9061052f9089908590600190600401610aac565b600060405180830381600087803b15801561054957600080fd5b505af115801561055d573d6000803e3d6000fd5b5050505060005b8181101561059d5761058b6105798285610a1e565b8686848181106103fc576103fc610a36565b8061059581610a93565b915050610564565b50505050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b03166105d9610684565b6001600160a01b03161461062f5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610152565b6040516392c56e2d60e01b815230906392c56e2d9061065690869086908690600401610aac565b600060405180830381600087803b15801561067057600080fd5b505af115801561059d573d6000803e3d6000fd5b600061068e610778565b905090565b7f021fe373f7e014154d4f551c37c047b9ed9093c774291911030896b9b2dfef65548210156107045760405162461bcd60e51b815260206004820152601960248201527f4d657461646174613a20746f6b656e555249206c6f636b6564000000000000006044820152606401610152565b60008281527f021fe373f7e014154d4f551c37c047b9ed9093c774291911030896b9b2dfef666020526040902061073b8282610b6b565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8260405161076c9190610c2b565b60405180910390a25050565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f420546000906001600160a01b031633036107b9575060131936013560601c90565b503390565b60008083601f8401126107d057600080fd5b50813567ffffffffffffffff8111156107e857600080fd5b6020830191508360208260051b850101111561080357600080fd5b9250929050565b6000806000806040858703121561082057600080fd5b843567ffffffffffffffff8082111561083857600080fd5b610844888389016107be565b9096509450602087013591508082111561085d57600080fd5b5061086a878288016107be565b95989497509550505050565b80356001600160a01b038116811461088d57600080fd5b919050565b600080604083850312156108a557600080fd5b6108ae83610876565b946020939093013593505050565b600080600080606085870312156108d257600080fd5b6108db85610876565b935060208501359250604085013567ffffffffffffffff8111156108fe57600080fd5b61086a878288016107be565b60008060006040848603121561091f57600080fd5b833567ffffffffffffffff81111561093657600080fd5b610942868287016107be565b909790965060209590950135949350505050565b8183526000602080850194508260005b85811015610992576001600160a01b0361097f83610876565b1687529582019590820190600101610966565b509495945050505050565b6040815260006109b1604083018688610956565b82810360208401528381527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8411156109e957600080fd5b8360051b80866020840137600091016020019081529695505050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610a3157610a31610a08565b500190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610a6357600080fd5b83018035915067ffffffffffffffff821115610a7e57600080fd5b60200191503681900382131561080357600080fd5b600060018201610aa557610aa5610a08565b5060010190565b604081526000610ac0604083018587610956565b9050826020830152949350505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680610afa57607f821691505b602082108103610b1a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b6657600081815260208120601f850160051c81016020861015610b475750805b601f850160051c820191505b818110156102ba57828155600101610b53565b505050565b815167ffffffffffffffff811115610b8557610b85610ad0565b610b9981610b938454610ae6565b84610b20565b602080601f831160018114610bce5760008415610bb65750858301515b600019600386901b1c1916600185901b1785556102ba565b600085815260208120601f198616915b82811015610bfd57888601518255948401946001909101908401610bde565b5085821015610c1b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b81811015610c5857858101830151858201604001528201610c3c565b81811115610c6a576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212200d35b970efe6e06118ebe6d5a80ed48fbf58e97fb3e3921d207f6e319a389da464736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:provides-interfaces": "IERC721MintableOwnable",
    "custom:required-dependencies": "IERC721MintableExtension",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "mintByOwner(address,uint256)": {
        "details": "Creates `amount` new tokens for `to`, of token type `id`. See {ERC721-_mint}. Requirements: - the caller must be diamond owner."
      },
      "mintByOwner(address,uint256,string[])": {
        "details": "Mint new tokens for single address with dedicated tokenURIs."
      },
      "mintByOwner(address[],string[])": {
        "details": "Mint new tokens for multiple addresses with dedicated tokenURIs."
      },
      "mintByOwner(address[],uint256)": {
        "details": "Mint constant amount of new tokens for multiple addresses (e.g. 1 nft for each address)."
      },
      "mintByOwner(address[],uint256[])": {
        "details": "Mint new tokens for multiple addresses with dedicated tokenURIs."
      }
    },
    "title": "ERC721 - Mint as owner - with meta-transactions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Allow minting as owner via meta transactions, signed by the owner private key. (supports ERC721A)",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}