{
  "address": "0xd6ebdF16Ca009267bed5EDf73458762dC301A8Fe",
  "abi": [
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a1af8dac1700d36feb8415236e8f86d97c186ae75dae6e0594dd0b4a32e3c36",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xd6ebdF16Ca009267bed5EDf73458762dC301A8Fe",
    "transactionIndex": 0,
    "gasUsed": "526500",
    "logsBloom": "0x
    "blockHash": "0xd8abb0669cc56839313f9dcb4c63c115dff7bfb80536c2b37ad1d6fd4b7418e3",
    "transactionHash": "0x9a1af8dac1700d36feb8415236e8f86d97c186ae75dae6e0594dd0b4a32e3c36",
    "logs": [],
    "blockNumber": 6054527,
    "cumulativeGasUsed": "526500",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e2f42af2f5273c7308f3825761226b47",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decimals()\":{\"returns\":{\"_0\":\"token decimals\"}}},\"title\":\"ERC20 metadata extensions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"return token decimals, generally used only for display purposes\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC20/facets/metadata/ERC20Metadata.sol\":\"ERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/token/ERC20/facets/metadata/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport { Metadata } from \\\"../../../common/metadata/Metadata.sol\\\";\\nimport { IERC20Metadata } from \\\"./IERC20Metadata.sol\\\";\\nimport { ERC20MetadataInternal } from \\\"./ERC20MetadataInternal.sol\\\";\\n\\n/**\\n * @title ERC20 metadata extensions\\n */\\nabstract contract ERC20Metadata is Metadata, IERC20Metadata, ERC20MetadataInternal {\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function decimals() external view returns (uint8) {\\n        return _decimals();\\n    }\\n}\\n\",\"keccak256\":\"0xcd4a3a90eab82c173a1d75420cbea002215b725613ca3c4b3bb0cf5614f80f17\",\"license\":\"MIT\"},\"src/token/ERC20/facets/metadata/ERC20MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport { ERC20MetadataStorage } from \\\"./ERC20MetadataStorage.sol\\\";\\n\\n/**\\n * @title ERC20Metadata internal functions\\n */\\nabstract contract ERC20MetadataInternal {\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function _decimals() internal view virtual returns (uint8) {\\n        return ERC20MetadataStorage.layout().decimals;\\n    }\\n\\n    function _decimalsLocked() internal view virtual returns (bool) {\\n        return ERC20MetadataStorage.layout().decimalsLocked;\\n    }\\n\\n    function _setDecimals(uint8 decimals_) internal virtual {\\n        require(!_decimalsLocked(), \\\"ERC20Metadata: decimals locked\\\");\\n        ERC20MetadataStorage.layout().decimals = decimals_;\\n        ERC20MetadataStorage.layout().decimalsLocked = true;\\n    }\\n\\n    function _setDecimalsLocked(bool decimalsLocked_) internal virtual {\\n        ERC20MetadataStorage.layout().decimalsLocked = decimalsLocked_;\\n    }\\n}\\n\",\"keccak256\":\"0x2078cdc79543f4b5ebb68baf2cc4ab3c07c4887898bf52ff0b095917cdf5cbe4\",\"license\":\"MIT\"},\"src/token/ERC20/facets/metadata/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC20MetadataStorage {\\n    struct Layout {\\n        uint8 decimals;\\n        bool decimalsLocked;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC20Metadata\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62148e2c731baf6badbae460d125fa8b698993013b8e2619966e832d8b437b7c\",\"license\":\"MIT\"},\"src/token/ERC20/facets/metadata/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../common/metadata/IMetadata.sol\\\";\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata is IMetadata {\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x74e8d6b165fc288ba6c1cb2916d22f7411844a8114b808cf24e8882e80a74570\",\"license\":\"MIT\"},\"src/token/common/metadata/IMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IMetadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfb2be5baa663f41de00f7210b19a268b8614fb0bf03b7ab5612c3e449425d2e6\",\"license\":\"MIT\"},\"src/token/common/metadata/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IMetadata.sol\\\";\\nimport \\\"./MetadataStorage.sol\\\";\\n\\n/**\\n * @title Metadata\\n * @notice Provides contract name and symbol.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Tokens\\n * @custom:provides-interfaces IMetadata\\n */\\ncontract Metadata is IMetadata {\\n    function name() external view virtual override returns (string memory) {\\n        return MetadataStorage.layout().name;\\n    }\\n\\n    function symbol() external view virtual override returns (string memory) {\\n        return MetadataStorage.layout().symbol;\\n    }\\n}\\n\",\"keccak256\":\"0x6378dd7744a7cb44851de26ec17e1230329d27451b05afedd75a47b07bd7efe9\",\"license\":\"MIT\"},\"src/token/common/metadata/MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Metadata\\\");\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        bool nameAndSymbolLocked;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc40b23a3c652d05174c270e1a95d402320a5a6e33ae48f78927f3f481ce568c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decimals()": {
        "returns": {
          "_0": "token decimals"
        }
      }
    },
    "title": "ERC20 metadata extensions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "return token decimals, generally used only for display purposes"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}