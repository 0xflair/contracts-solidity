{
  "address": "0xFe9225C81A9991925E626a41d6D3fd21C2e2E479",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "lockNameAndSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "setSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d82c595d03633e9567e5496db18e2dcec574d49467807e039bedca43877abf4",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xFe9225C81A9991925E626a41d6D3fd21C2e2E479",
    "transactionIndex": 1,
    "gasUsed": "364084",
    "logsBloom": "0x
    "blockHash": "0x9fdf3d0cf0c8fdb87b3529178ba9fb9cd5e1ca0d2db275b0882999c8969e9170",
    "transactionHash": "0x9d82c595d03633e9567e5496db18e2dcec574d49467807e039bedca43877abf4",
    "logs": [],
    "blockNumber": 16795613,
    "cumulativeGasUsed": "364084",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e2f42af2f5273c7308f3825761226b47",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"lockNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Tokens\",\"custom:peer-dependencies\":\"IMetadata\",\"custom:provides-interfaces\":\"IMetadataAdmin\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Metadata - Admin - Ownable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Allows diamond owner to change name and symbol, or freeze them forever.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/common/metadata/MetadataOwnable.sol\":\"MetadataOwnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xe2a19d82d7050c0cd1afb542253f65ce34a650d7d99c0ffcdec6b4274fc51e31\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0x1f1b08cba51a05c8cea04e13251f9f8b8fc895017071cb205b0b4170900d1e5b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xaf69959fcc5b87a74426939bc35b8517566494e3ba575b5cfdb1b5c788c0636a\",\"license\":\"MIT\"},\"src/token/common/metadata/IMetadataAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IMetadataAdmin {\\n    function setName(string calldata name) external;\\n\\n    function setSymbol(string calldata symbol) external;\\n\\n    function lockNameAndSymbol() external;\\n}\\n\",\"keccak256\":\"0xb686e8c977095e7b7cdccee09846a0188afd4fbf1a0926a571e5c7ee3dc2a886\",\"license\":\"MIT\"},\"src/token/common/metadata/MetadataAdminInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./MetadataStorage.sol\\\";\\n\\nabstract contract MetadataAdminInternal {\\n    function _setName(string calldata name) internal {\\n        require(!MetadataStorage.layout().nameAndSymbolLocked, \\\"Metadata: name is locked\\\");\\n        MetadataStorage.layout().name = name;\\n    }\\n\\n    function _setSymbol(string calldata symbol) internal {\\n        require(!MetadataStorage.layout().nameAndSymbolLocked, \\\"Metadata: symbol is locked\\\");\\n        MetadataStorage.layout().symbol = symbol;\\n    }\\n\\n    function _lockNameAndSymbol() internal {\\n        MetadataStorage.layout().nameAndSymbolLocked = true;\\n    }\\n}\\n\",\"keccak256\":\"0x612c5f0b1669a8282fa31fe54dcf0d80c68b556415edf1aa1d9bd2f947854af1\",\"license\":\"MIT\"},\"src/token/common/metadata/MetadataOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../../../access/ownable/OwnableInternal.sol\\\";\\n\\nimport \\\"./MetadataAdminInternal.sol\\\";\\nimport \\\"./MetadataStorage.sol\\\";\\nimport \\\"./IMetadataAdmin.sol\\\";\\n\\n/**\\n * @title Metadata - Admin - Ownable\\n * @notice Allows diamond owner to change name and symbol, or freeze them forever.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Tokens\\n * @custom:peer-dependencies IMetadata\\n * @custom:provides-interfaces IMetadataAdmin\\n */\\ncontract MetadataOwnable is IMetadataAdmin, MetadataAdminInternal, OwnableInternal {\\n    function setName(string calldata name) external virtual override onlyOwner {\\n        _setName(name);\\n    }\\n\\n    function setSymbol(string calldata symbol) external virtual override onlyOwner {\\n        _setSymbol(symbol);\\n    }\\n\\n    function lockNameAndSymbol() external virtual override onlyOwner {\\n        _lockNameAndSymbol();\\n    }\\n}\\n\",\"keccak256\":\"0x8920a460eec088fa5537f03a627f5656c6318f638e818c49bd9261e1d29fcf29\",\"license\":\"MIT\"},\"src/token/common/metadata/MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Metadata\\\");\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        bool nameAndSymbolLocked;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc40b23a3c652d05174c270e1a95d402320a5a6e33ae48f78927f3f481ce568c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105a0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636338cb8a14610046578063b84c824614610050578063c47f002714610063575b600080fd5b61004e610076565b005b61004e61005e366004610399565b610134565b61004e610071366004610399565b6101c8565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146101015760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b6101327f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fe805460ff19166001179055565b565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146101ba5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100f8565b6101c48282610258565b5050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff16331461024e5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100f8565b6101c482826102fb565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fe5460ff16156102ca5760405162461bcd60e51b815260206004820152601a60248201527f4d657461646174613a2073796d626f6c206973206c6f636b656400000000000060448201526064016100f8565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fd6102f68284836104a9565b505050565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fe5460ff161561036d5760405162461bcd60e51b815260206004820152601860248201527f4d657461646174613a206e616d65206973206c6f636b6564000000000000000060448201526064016100f8565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc6102f68284836104a9565b600080602083850312156103ac57600080fd5b823567ffffffffffffffff808211156103c457600080fd5b818501915085601f8301126103d857600080fd5b8135818111156103e757600080fd5b8660208285010111156103f957600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061043557607f821691505b60208210810361045557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102f657600081815260208120601f850160051c810160208610156104825750805b601f850160051c820191505b818110156104a15782815560010161048e565b505050505050565b67ffffffffffffffff8311156104c1576104c161040b565b6104d5836104cf8354610421565b8361045b565b6000601f84116001811461050957600085156104f15750838201355b600019600387901b1c1916600186901b178355610563565b600083815260209020601f19861690835b8281101561053a578685013582556020948501946001909201910161051a565b50868210156105575760001960f88860031b161c19848701351681555b505060018560011b0183555b505050505056fea26469706673582212201a4a8cec0961414d4162299280f342be3deb07631bcbf3e1587d984114c78d4764736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80636338cb8a14610046578063b84c824614610050578063c47f002714610063575b600080fd5b61004e610076565b005b61004e61005e366004610399565b610134565b61004e610071366004610399565b6101c8565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146101015760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b6101327f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fe805460ff19166001179055565b565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146101ba5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100f8565b6101c48282610258565b5050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff16331461024e5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100f8565b6101c482826102fb565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fe5460ff16156102ca5760405162461bcd60e51b815260206004820152601a60248201527f4d657461646174613a2073796d626f6c206973206c6f636b656400000000000060448201526064016100f8565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fd6102f68284836104a9565b505050565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fe5460ff161561036d5760405162461bcd60e51b815260206004820152601860248201527f4d657461646174613a206e616d65206973206c6f636b6564000000000000000060448201526064016100f8565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc6102f68284836104a9565b600080602083850312156103ac57600080fd5b823567ffffffffffffffff808211156103c457600080fd5b818501915085601f8301126103d857600080fd5b8135818111156103e757600080fd5b8660208285010111156103f957600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061043557607f821691505b60208210810361045557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102f657600081815260208120601f850160051c810160208610156104825750805b601f850160051c820191505b818110156104a15782815560010161048e565b505050505050565b67ffffffffffffffff8311156104c1576104c161040b565b6104d5836104cf8354610421565b8361045b565b6000601f84116001811461050957600085156104f15750838201355b600019600387901b1c1916600186901b178355610563565b600083815260209020601f19861690835b8281101561053a578685013582556020948501946001909201910161051a565b50868210156105575760001960f88860031b161c19848701351681555b505060018560011b0183555b505050505056fea26469706673582212201a4a8cec0961414d4162299280f342be3deb07631bcbf3e1587d984114c78d4764736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Tokens",
    "custom:peer-dependencies": "IMetadata",
    "custom:provides-interfaces": "IMetadataAdmin",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "Metadata - Admin - Ownable",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Allows diamond owner to change name and symbol, or freeze them forever.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}