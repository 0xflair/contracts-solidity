{
  "address": "0xe0F561A9C77c04092593Ff88370D703F239B4f7f",
  "abi": [
    {
      "inputs": [],
      "name": "ErrWithdrawImpossible",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawModeLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawOnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawOnlyRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawRecipientLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawRecipientNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IWithdrawableInternal.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "WithdrawModeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WithdrawModeLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WithdrawPowerRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "WithdrawRecipientChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WithdrawRecipientLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "claimTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "lockWithdrawMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockWithdrawRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeWithdrawPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IWithdrawableInternal.Mode",
          "name": "mode",
          "type": "uint8"
        }
      ],
      "name": "setWithdrawMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "setWithdrawRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7aa3f64d9c14049905251835847bc6f0b62e6e96e1d6b15a425a8c865e08daa3",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xe0F561A9C77c04092593Ff88370D703F239B4f7f",
    "transactionIndex": 3,
    "gasUsed": "465860",
    "logsBloom": "0x
    "blockHash": "0x617e4aaf6e066f1e602131485a9828aa71dab8538aedeba09b9dba0b2cd1ac3a",
    "transactionHash": "0x7aa3f64d9c14049905251835847bc6f0b62e6e96e1d6b15a425a8c865e08daa3",
    "logs": [],
    "blockNumber": 15778505,
    "cumulativeGasUsed": "826585",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c4fe8eff10d3ecb34ecf7b1b5bda5a68",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrWithdrawImpossible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawModeLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawOnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawOnlyRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawRecipientLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawRecipientNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IWithdrawableInternal.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"WithdrawModeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawModeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawPowerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"WithdrawRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawRecipientLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"claimTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"lockWithdrawMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockWithdrawRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeWithdrawPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IWithdrawableInternal.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"setWithdrawMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setWithdrawRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Finance\",\"custom:peer-dependencies\":\"IWithdrawable\",\"custom:provides-interfaces\":\"IWithdrawableAdmin\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Withdrawable - Admin - Ownable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Allow contract owner to manage who can withdraw funds and how.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/finance/withdraw/WithdrawableOwnable.sol\":\"WithdrawableOwnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xe2a19d82d7050c0cd1afb542253f65ce34a650d7d99c0ffcdec6b4274fc51e31\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0x1f1b08cba51a05c8cea04e13251f9f8b8fc895017071cb205b0b4170900d1e5b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xaf69959fcc5b87a74426939bc35b8517566494e3ba575b5cfdb1b5c788c0636a\",\"license\":\"MIT\"},\"src/finance/withdraw/IWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IWithdrawableInternal.sol\\\";\\n\\ninterface IWithdrawable is IWithdrawableInternal {\\n    function withdraw(address[] calldata claimTokens, uint256[] calldata amounts) external;\\n\\n    function withdrawRecipient() external view returns (address);\\n\\n    function withdrawRecipientLocked() external view returns (bool);\\n\\n    function withdrawPowerRevoked() external view returns (bool);\\n\\n    function withdrawMode() external view returns (Mode);\\n\\n    function withdrawModeLocked() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb998165d9a9f6d2de306c14e4fe31287580b88087d59b4e7059bfe1cfb3e05fe\",\"license\":\"AGPL-3.0\"},\"src/finance/withdraw/IWithdrawableAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IWithdrawable.sol\\\";\\n\\ninterface IWithdrawableAdmin {\\n    function setWithdrawRecipient(address _recipient) external;\\n\\n    function lockWithdrawRecipient() external;\\n\\n    function revokeWithdrawPower() external;\\n\\n    function setWithdrawMode(IWithdrawable.Mode _mode) external;\\n\\n    function lockWithdrawMode() external;\\n}\\n\",\"keccak256\":\"0x5bfb07b9f9662af95db89d7c2972d789bcafa303c6305f5a3b60e68835b7b80d\",\"license\":\"MIT\"},\"src/finance/withdraw/IWithdrawableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\ninterface IWithdrawableInternal {\\n    enum Mode {\\n        OWNER,\\n        RECIPIENT,\\n        ANYONE,\\n        NOBODY\\n    }\\n\\n    error ErrWithdrawOnlyRecipient();\\n    error ErrWithdrawOnlyOwner();\\n    error ErrWithdrawImpossible();\\n    error ErrWithdrawRecipientLocked();\\n    error ErrWithdrawModeLocked();\\n    error ErrWithdrawRecipientNotSet();\\n\\n    event WithdrawRecipientChanged(address indexed recipient);\\n    event WithdrawRecipientLocked();\\n    event WithdrawModeChanged(Mode _mode);\\n    event WithdrawModeLocked();\\n    event Withdrawn(address[] claimTokens, uint256[] amounts);\\n    event WithdrawPowerRevoked();\\n}\\n\",\"keccak256\":\"0xfa34e99adac8b945c62ec40ea9bdbc47770ab0b640820445bd630b0cfc1bddcc\",\"license\":\"AGPL-3.0\"},\"src/finance/withdraw/WithdrawableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../access/ownable/OwnableInternal.sol\\\";\\n\\nimport \\\"./WithdrawableStorage.sol\\\";\\nimport \\\"./IWithdrawableInternal.sol\\\";\\n\\n/**\\n * @title Functionality to withdraw ERC20 or natives tokens from the contract via various modes\\n */\\nabstract contract WithdrawableInternal is IWithdrawableInternal, OwnableInternal {\\n    using Address for address payable;\\n    using WithdrawableStorage for WithdrawableStorage.Layout;\\n\\n    function _withdrawRecipient() internal view virtual returns (address) {\\n        return WithdrawableStorage.layout().recipient;\\n    }\\n\\n    function _withdrawRecipientLocked() internal view virtual returns (bool) {\\n        return WithdrawableStorage.layout().recipientLocked;\\n    }\\n\\n    function _withdrawPowerRevoked() internal view virtual returns (bool) {\\n        return WithdrawableStorage.layout().powerRevoked;\\n    }\\n\\n    function _withdrawMode() internal view virtual returns (Mode) {\\n        return WithdrawableStorage.layout().mode;\\n    }\\n\\n    function _withdrawModeLocked() internal view virtual returns (bool) {\\n        return WithdrawableStorage.layout().modeLocked;\\n    }\\n\\n    function _setWithdrawRecipient(address recipient) internal virtual {\\n        WithdrawableStorage.Layout storage l = WithdrawableStorage.layout();\\n\\n        if (l.recipientLocked) {\\n            revert ErrWithdrawRecipientLocked();\\n        }\\n\\n        l.recipient = recipient;\\n\\n        emit WithdrawRecipientChanged(recipient);\\n    }\\n\\n    function _lockWithdrawRecipient() internal virtual {\\n        WithdrawableStorage.layout().recipientLocked = true;\\n\\n        emit WithdrawRecipientLocked();\\n    }\\n\\n    function _revokeWithdrawPower() internal virtual {\\n        WithdrawableStorage.layout().powerRevoked = true;\\n\\n        emit WithdrawPowerRevoked();\\n    }\\n\\n    function _setWithdrawMode(Mode _mode) internal virtual {\\n        WithdrawableStorage.Layout storage l = WithdrawableStorage.layout();\\n\\n        if (l.modeLocked) {\\n            revert ErrWithdrawModeLocked();\\n        }\\n\\n        l.mode = _mode;\\n\\n        emit WithdrawModeChanged(_mode);\\n    }\\n\\n    function _lockWithdrawMode() internal virtual {\\n        WithdrawableStorage.layout().modeLocked = true;\\n\\n        emit WithdrawModeLocked();\\n    }\\n\\n    function _withdraw(address[] calldata claimTokens, uint256[] calldata amounts) internal virtual {\\n        WithdrawableStorage.Layout storage l = WithdrawableStorage.layout();\\n\\n        /**\\n         * We are using msg.sender for smaller attack surface when evaluating\\n         * the sender of the function call. If in future we want to handle \\\"withdraw\\\"\\n         * functionality via meta transactions, we should consider using `_msgSender`\\n         */\\n\\n        if (l.mode == Mode.NOBODY) {\\n            revert ErrWithdrawImpossible();\\n        } else if (l.mode == Mode.RECIPIENT) {\\n            if (l.recipient != msg.sender) {\\n                revert ErrWithdrawOnlyRecipient();\\n            }\\n        } else if (l.mode == Mode.OWNER) {\\n            if (_owner() != msg.sender) {\\n                revert ErrWithdrawOnlyOwner();\\n            }\\n        }\\n\\n        if (l.powerRevoked) {\\n            revert ErrWithdrawImpossible();\\n        }\\n\\n        if (l.recipient == address(0)) {\\n            revert ErrWithdrawRecipientNotSet();\\n        }\\n\\n        for (uint256 i = 0; i < claimTokens.length; i++) {\\n            if (claimTokens[i] == address(0)) {\\n                payable(l.recipient).sendValue(amounts[i]);\\n            } else {\\n                IERC20(claimTokens[i]).transfer(address(l.recipient), amounts[i]);\\n            }\\n        }\\n\\n        emit Withdrawn(claimTokens, amounts);\\n    }\\n}\\n\",\"keccak256\":\"0x0dcf8f6fc3475e445365591b9cc0250d045f6b1351ca2b3228e5eb2a57f7bb52\",\"license\":\"MIT\"},\"src/finance/withdraw/WithdrawableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../access/ownable/OwnableInternal.sol\\\";\\n\\nimport \\\"./WithdrawableInternal.sol\\\";\\nimport \\\"./IWithdrawableAdmin.sol\\\";\\n\\n/**\\n * @title Withdrawable - Admin - Ownable\\n * @notice Allow contract owner to manage who can withdraw funds and how.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Finance\\n * @custom:peer-dependencies IWithdrawable\\n * @custom:provides-interfaces IWithdrawableAdmin\\n */\\ncontract WithdrawableOwnable is IWithdrawableAdmin, OwnableInternal, WithdrawableInternal {\\n    function setWithdrawRecipient(address recipient) external onlyOwner {\\n        _setWithdrawRecipient(recipient);\\n    }\\n\\n    function lockWithdrawRecipient() external onlyOwner {\\n        _lockWithdrawRecipient();\\n    }\\n\\n    function revokeWithdrawPower() external onlyOwner {\\n        _revokeWithdrawPower();\\n    }\\n\\n    function setWithdrawMode(Mode mode) external onlyOwner {\\n        _setWithdrawMode(mode);\\n    }\\n\\n    function lockWithdrawMode() external onlyOwner {\\n        _lockWithdrawMode();\\n    }\\n}\\n\",\"keccak256\":\"0x18cf4cda1b3f43787a3ccb28dd8ed504453700aa99a2265bfb1cde8b373c900a\",\"license\":\"MIT\"},\"src/finance/withdraw/WithdrawableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IWithdrawableInternal.sol\\\";\\n\\nlibrary WithdrawableStorage {\\n    struct Layout {\\n        address recipient;\\n        IWithdrawableInternal.Mode mode;\\n        bool powerRevoked;\\n        bool recipientLocked;\\n        bool modeLocked;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Withdrawable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x401923d11466e113b452a963a5e992217d2728d5e0ba8be079d5c0a9fdebc2fc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610782806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063c0bb38ff11610050578063c0bb38ff14610089578063c723955a1461009c578063da82b227146100a457600080fd5b80632c2330671461006c578063837fe14014610081575b600080fd5b61007f61007a3660046106bd565b6100ac565b005b61007f610136565b61007f6100973660046106e5565b6101b9565b61007f61023b565b61007f6102bc565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b0316331461012a5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b6101338161033d565b50565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146101af5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6101b7610445565b565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146102325760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b610133816104d0565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146102b45760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6101b76105a7565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146103355760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6101b7610633565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe3805477010000000000000000000000000000000000000000000000900460ff16156103b5576040517ff961232500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8054829082907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000008360038111156104055761040561070e565b02179055507fde0b932afc455f2ef84dd8684b5b48f5ef6849dab435f13ebee6d30b0abb96b1826040516104399190610724565b60405180910390a15050565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe380547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000001790556040517fbbc3137b0845e12dca46906c86270ec38a67a8a1085ea85f52c15f1cb990e17b90600090a1565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe38054760100000000000000000000000000000000000000000000900460ff1615610547576040517f3f890c5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811782556040517f328214994c9eda72aea54f961861d8ae0038919eef1daa5c2219dcb12c43e66990600090a25050565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe380547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff16770100000000000000000000000000000000000000000000001790556040517f674492e2ade911c1384eab01230d30e9d669ac7e6881735bdcb97e01b9272bd290600090a1565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe380547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790556040517fa24423a69b45c25c0479663125e48b482e71d85eae416f589545243bafaf3c9590600090a1565b6000602082840312156106cf57600080fd5b8135600481106106de57600080fd5b9392505050565b6000602082840312156106f757600080fd5b81356001600160a01b03811681146106de57600080fd5b634e487b7160e01b600052602160045260246000fd5b602081016004831061074657634e487b7160e01b600052602160045260246000fd5b9190529056fea2646970667358221220dacf197f8a3f3bf99686c3600f442706d61b5edd97b5192081fd94f92aefedbf64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063c0bb38ff11610050578063c0bb38ff14610089578063c723955a1461009c578063da82b227146100a457600080fd5b80632c2330671461006c578063837fe14014610081575b600080fd5b61007f61007a3660046106bd565b6100ac565b005b61007f610136565b61007f6100973660046106e5565b6101b9565b61007f61023b565b61007f6102bc565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b0316331461012a5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b6101338161033d565b50565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146101af5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6101b7610445565b565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146102325760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b610133816104d0565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146102b45760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6101b76105a7565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146103355760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6101b7610633565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe3805477010000000000000000000000000000000000000000000000900460ff16156103b5576040517ff961232500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8054829082907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000008360038111156104055761040561070e565b02179055507fde0b932afc455f2ef84dd8684b5b48f5ef6849dab435f13ebee6d30b0abb96b1826040516104399190610724565b60405180910390a15050565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe380547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000001790556040517fbbc3137b0845e12dca46906c86270ec38a67a8a1085ea85f52c15f1cb990e17b90600090a1565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe38054760100000000000000000000000000000000000000000000900460ff1615610547576040517f3f890c5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831690811782556040517f328214994c9eda72aea54f961861d8ae0038919eef1daa5c2219dcb12c43e66990600090a25050565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe380547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff16770100000000000000000000000000000000000000000000001790556040517f674492e2ade911c1384eab01230d30e9d669ac7e6881735bdcb97e01b9272bd290600090a1565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe380547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790556040517fa24423a69b45c25c0479663125e48b482e71d85eae416f589545243bafaf3c9590600090a1565b6000602082840312156106cf57600080fd5b8135600481106106de57600080fd5b9392505050565b6000602082840312156106f757600080fd5b81356001600160a01b03811681146106de57600080fd5b634e487b7160e01b600052602160045260246000fd5b602081016004831061074657634e487b7160e01b600052602160045260246000fd5b9190529056fea2646970667358221220dacf197f8a3f3bf99686c3600f442706d61b5edd97b5192081fd94f92aefedbf64736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Finance",
    "custom:peer-dependencies": "IWithdrawable",
    "custom:provides-interfaces": "IWithdrawableAdmin",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "Withdrawable - Admin - Ownable",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Allow contract owner to manage who can withdraw funds and how.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}