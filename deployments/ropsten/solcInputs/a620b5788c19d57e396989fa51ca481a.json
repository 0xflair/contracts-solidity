{
  "language": "Solidity",
  "sources": {
    "src/token/ERC1155/facets/metadata/ERC1155Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./IERC1155Metadata.sol\";\nimport \"./IERC1155MetadataExtra.sol\";\nimport \"./ERC1155MetadataInternal.sol\";\nimport \"./ERC1155MetadataStorage.sol\";\n\n/**\n * @title ERC1155 - Metadata\n * @notice Provides metadata for ERC1155 tokens according to standard. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\n * @dev See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:peer-dependencies eip165:0xd9b67a26\n * @custom:provides-interfaces 0x0e89341c 0xc6575680\n */\ncontract ERC1155Metadata is IERC1155Metadata, IERC1155MetadataExtra, ERC1155MetadataInternal {\n    /**\n     * @notice inheritdoc IERC1155Metadata\n     */\n    function uri(uint256 tokenId) public view virtual returns (string memory) {\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage.layout();\n\n        string memory _tokenIdURI = l.tokenURIs[tokenId];\n        string memory _baseURI = l.baseURI;\n\n        if (bytes(_baseURI).length == 0) {\n            return _tokenIdURI;\n        } else if (bytes(_tokenIdURI).length > 0) {\n            return string(abi.encodePacked(_baseURI, _tokenIdURI));\n        } else {\n            return string(abi.encodePacked(_baseURI, l.fallbackURI, Strings.toString(tokenId)));\n        }\n    }\n\n    function uriBatch(uint256[] calldata tokenIds) external view returns (string[] memory) {\n        string[] memory uris = new string[](tokenIds.length);\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uris[i] = uri(tokenIds[i]);\n        }\n\n        return uris;\n    }\n\n    function baseURI() external view returns (string memory) {\n        return ERC1155MetadataStorage.layout().baseURI;\n    }\n\n    function fallbackURI() external view returns (string memory) {\n        return ERC1155MetadataStorage.layout().fallbackURI;\n    }\n\n    function baseURILocked() external view returns (bool) {\n        return ERC1155MetadataStorage.layout().baseURILocked;\n    }\n\n    function fallbackURILocked() external view returns (bool) {\n        return ERC1155MetadataStorage.layout().fallbackURILocked;\n    }\n\n    function lastLockedTokenId() external view returns (uint256) {\n        return ERC1155MetadataStorage.layout().lastLockedTokenId;\n    }\n}\n"
    },
    "src/token/ERC1155/facets/metadata/IERC1155Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IERC1155Metadata {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "src/token/ERC1155/facets/metadata/IERC1155MetadataExtra.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IERC1155MetadataExtra {\n    function baseURI() external view returns (string memory);\n\n    function fallbackURI() external view returns (string memory);\n\n    function baseURILocked() external view returns (bool);\n\n    function fallbackURILocked() external view returns (bool);\n\n    function lastLockedTokenId() external view returns (uint256);\n\n    function uriBatch(uint256[] calldata tokenIds) external view returns (string[] memory);\n}\n"
    },
    "src/token/ERC1155/facets/metadata/ERC1155MetadataInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./IERC1155MetadataEvents.sol\";\nimport \"./ERC1155MetadataStorage.sol\";\n\nabstract contract ERC1155MetadataInternal is IERC1155MetadataEvents {\n    function _setBaseURI(string memory baseURI) internal {\n        require(\n            !ERC1155MetadataStorage.layout().baseURILocked,\n            \"ERC1155Metadata: baseURI locked\"\n        );\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\n    }\n\n    function _setFallbackURI(string memory baseURI) internal {\n        require(\n            !ERC1155MetadataStorage.layout().fallbackURILocked,\n            \"ERC1155Metadata: fallbackURI locked\"\n        );\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\n    }\n\n    function _setURI(uint256 tokenId, string memory tokenURI) internal {\n        require(\n            tokenId > ERC1155MetadataStorage.layout().lastLockedTokenId,\n            \"ERC1155Metadata: tokenURI locked\"\n        );\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\n        emit URI(tokenURI, tokenId);\n    }\n\n    function _lockBaseURI() internal {\n        ERC1155MetadataStorage.layout().baseURILocked = true;\n    }\n\n    function _lockFallbackURI() internal {\n        ERC1155MetadataStorage.layout().fallbackURILocked = true;\n    }\n\n    function _lockURIUntil(uint256 tokenId) internal {\n        ERC1155MetadataStorage.layout().lastLockedTokenId = tokenId;\n    }\n}\n"
    },
    "src/token/ERC1155/facets/metadata/ERC1155MetadataStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nlibrary ERC1155MetadataStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.ERC1155Metadata\");\n\n    struct Layout {\n        string baseURI;\n        string fallbackURI;\n        bool baseURILocked;\n        bool fallbackURILocked;\n        uint256 lastLockedTokenId;\n        mapping(uint256 => string) tokenURIs;\n    }\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "src/token/ERC1155/facets/metadata/IERC1155MetadataEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IERC1155MetadataEvents {\n    event URI(string value, uint256 indexed tokenId);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1337
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}