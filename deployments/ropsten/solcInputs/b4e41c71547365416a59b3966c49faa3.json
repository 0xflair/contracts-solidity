{
  "language": "Solidity",
  "sources": {
    "contracts/collections/ERC721/extensions/ERC721AutoIdMinterExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721CollectionMetadataExtension.sol\";\n\ninterface IERC721AutoIdMinterExtension {\n    function setMaxSupply(uint256 newValue) external;\n\n    function freezeMaxSupply() external;\n\n    function totalSupply() external view returns (uint256);\n}\n\n/**\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\n */\nabstract contract ERC721AutoIdMinterExtension is\n    IERC721AutoIdMinterExtension,\n    Ownable,\n    ERC165Storage,\n    ERC721,\n    ERC721CollectionMetadataExtension\n{\n    using SafeMath for uint256;\n\n    uint256 public maxSupply;\n    bool public maxSupplyFrozen;\n\n    uint256 internal _currentTokenId = 0;\n\n    function __ERC721AutoIdMinterExtension_init(uint256 _maxSupply)\n        internal\n        onlyInitializing\n    {\n        __ERC721AutoIdMinterExtension_init_unchained(_maxSupply);\n    }\n\n    function __ERC721AutoIdMinterExtension_init_unchained(uint256 _maxSupply)\n        internal\n        onlyInitializing\n    {\n        maxSupply = _maxSupply;\n\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\n        _registerInterface(type(IERC721).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function setMaxSupply(uint256 newValue) external onlyOwner {\n        require(!maxSupplyFrozen, \"BASE_URI_FROZEN\");\n        maxSupply = newValue;\n    }\n\n    function freezeMaxSupply() external onlyOwner {\n        maxSupplyFrozen = true;\n    }\n\n    /* PUBLIC */\n\n    function name()\n        public\n        view\n        virtual\n        override(ERC721, ERC721CollectionMetadataExtension)\n        returns (string memory)\n    {\n        return ERC721CollectionMetadataExtension.name();\n    }\n\n    function symbol()\n        public\n        view\n        virtual\n        override(ERC721, ERC721CollectionMetadataExtension)\n        returns (string memory)\n    {\n        return ERC721CollectionMetadataExtension.symbol();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721, ERC721CollectionMetadataExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _currentTokenId;\n    }\n\n    /* INTERNAL */\n\n    function _mintTo(address to, uint256 count) internal {\n        require(totalSupply() + count <= maxSupply, \"EXCEEDS_MAX_SUPPLY\");\n\n        for (uint256 i = 0; i < count; i++) {\n            uint256 newTokenId = _getNextTokenId();\n            _safeMint(to, newTokenId);\n            _incrementTokenId();\n        }\n    }\n\n    /**\n     * Calculates the next token ID based on value of _currentTokenId\n     * @return uint256 for the next token ID\n     */\n    function _getNextTokenId() internal view returns (uint256) {\n        return _currentTokenId.add(1);\n    }\n\n    /**\n     * Increments the value of _currentTokenId\n     */\n    function _incrementTokenId() internal {\n        _currentTokenId++;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !Address.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721CollectionMetadataExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface IERC721CollectionMetadataExtension {\n    function setContractURI(string memory newValue) external;\n\n    function contractURI() external view returns (string memory);\n}\n\n/**\n * @dev Extension to allow configuring contract-level collection metadata URI.\n */\nabstract contract ERC721CollectionMetadataExtension is\n    IERC721CollectionMetadataExtension,\n    Initializable,\n    Ownable,\n    ERC165Storage,\n    IERC721Metadata\n{\n    string private _name;\n\n    string private _symbol;\n\n    string private _contractURI;\n\n    function __ERC721CollectionMetadataExtension_init(\n        string memory name_,\n        string memory symbol_,\n        string memory contractURI_\n    ) internal onlyInitializing {\n        __ERC721CollectionMetadataExtension_init_unchained(\n            name_,\n            symbol_,\n            contractURI_\n        );\n    }\n\n    function __ERC721CollectionMetadataExtension_init_unchained(\n        string memory name_,\n        string memory symbol_,\n        string memory contractURI_\n    ) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n        _contractURI = contractURI_;\n\n        _registerInterface(\n            type(IERC721CollectionMetadataExtension).interfaceId\n        );\n        _registerInterface(type(IERC721).interfaceId);\n        _registerInterface(type(IERC721Metadata).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function setContractURI(string memory newValue) external onlyOwner {\n        _contractURI = newValue;\n    }\n\n    /* PUBLIC */\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, IERC165)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function contractURI() public view returns (string memory) {\n        return _contractURI;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721AMinterExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"erc721a/contracts/ERC721A.sol\";\n\nimport {IERC721AutoIdMinterExtension} from \"../../ERC721/extensions/ERC721AutoIdMinterExtension.sol\";\n\n/**\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\n */\nabstract contract ERC721AMinterExtension is Ownable, ERC165Storage, ERC721A {\n    using SafeMath for uint256;\n\n    uint256 public maxSupply;\n    bool public maxSupplyFrozen;\n\n    constructor(uint256 _maxSupply) {\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\n        _registerInterface(type(IERC721).interfaceId);\n        _registerInterface(type(IERC721A).interfaceId);\n\n        maxSupply = _maxSupply;\n    }\n\n    /* ADMIN */\n\n    function setMaxSupply(uint256 newValue) external onlyOwner {\n        require(!maxSupplyFrozen, \"BASE_URI_FROZEN\");\n        maxSupply = newValue;\n    }\n\n    function freezeMaxSupply() external onlyOwner {\n        maxSupplyFrozen = true;\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721A)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    /* INTERNAL */\n\n    function _mintTo(address to, uint256 count) internal {\n        require(totalSupply() + count <= maxSupply, \"EXCEEDS_MAX_SUPPLY\");\n        _safeMint(to, count);\n    }\n}\n"
    },
    "erc721a/contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.1.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev ERC721 token receiver interface.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\n * including the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at `_startTokenId()`\n * (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Mask of an entry in packed address data.\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with `_mintERC2309`.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to `_mintERC2309`\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The tokenId of the next token to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See `_packedOwnershipOf` implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see `_totalMinted`.\n     */\n    function totalSupply() public view override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to `_startTokenId()`\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view returns (uint256) {\n        return _burnCounter;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an ownership that has an address and is not burned\n                        // before an ownership that does not have an address and is not burned.\n                        // Hence, curr will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed is zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, BITMASK_ADDRESS)\n            // `owner | (block.timestamp << BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << BITPOS_NEXT_INITIALIZED`.\n            result := shl(BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, '');\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 tokenId = startTokenId;\n            uint256 end = startTokenId + quantity;\n            do {\n                emit Transfer(address(0), to, tokenId++);\n            } while (tokenId < end);\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        mapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\n        assembly {\n            // Compute the slot.\n            mstore(0x00, tokenId)\n            mstore(0x20, tokenApprovalsPtr.slot)\n            approvedAddressSlot := keccak256(0x00, 0x40)\n            // Load the slot's value from storage.\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    /**\n     * @dev Returns whether the `approvedAddress` is equals to `from` or `msgSender`.\n     */\n    function _isOwnerOrApproved(\n        address approvedAddress,\n        address from,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            from := and(from, BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, BITMASK_ADDRESS)\n            // `msgSender == from || msgSender == approvedAddress`.\n            result := or(eq(msgSender, from), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << BITPOS_EXTRA_DATA;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred.\n     * This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred.\n     * This includes minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\n            // We will need 1 32-byte word to store the length,\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\n            ptr := add(mload(0x40), 128)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, ptr)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := ptr\n\n            // We write the string from the rightmost digit to the leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // Costs a bit more than early returning for the zero case,\n            // but cheaper in terms of deployment and overall runtime costs.\n            for {\n                // Initialize and perform the first pass without check.\n                let temp := value\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\n                ptr := sub(ptr, 1)\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\n                mstore8(ptr, add(48, mod(temp, 10)))\n                temp := div(temp, 10)\n            } temp {\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n            } {\n                // Body of the for loop.\n                ptr := sub(ptr, 1)\n                mstore8(ptr, add(48, mod(temp, 10)))\n            }\n\n            let length := sub(end, ptr)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            ptr := sub(ptr, 32)\n            // Store the length.\n            mstore(ptr, length)\n        }\n    }\n}\n"
    },
    "erc721a/contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.1.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\n        uint24 extraData;\n    }\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     *\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // ==============================\n    //            IERC165\n    // ==============================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // ==============================\n    //            IERC721\n    // ==============================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // ==============================\n    //        IERC721Metadata\n    // ==============================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // ==============================\n    //            IERC2309\n    // ==============================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721ARoleBasedMintExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AMinterExtension.sol\";\n\nimport {IERC721RoleBasedMintExtension} from \"../../ERC721/extensions/ERC721RoleBasedMintExtension.sol\";\n\n/**\n * @dev Extension to allow holders of a OpenZepplin-based role to mint directly.\n */\nabstract contract ERC721ARoleBasedMintExtension is\n    IERC721RoleBasedMintExtension,\n    ERC165Storage,\n    ERC721AMinterExtension,\n    AccessControl\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor() {\n        _registerInterface(type(IERC721RoleBasedMintExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function mintByRole(address to, uint256 count) external {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"NOT_MINTER_ROLE\");\n\n        _mintTo(to, count);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, AccessControl, ERC721AMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721RoleBasedMintExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AutoIdMinterExtension.sol\";\n\ninterface IERC721RoleBasedMintExtension {\n    function mintByRole(address to, uint256 count) external;\n}\n\n/**\n * @dev Extension to allow holders of a OpenZepplin-based role to mint directly.\n */\nabstract contract ERC721RoleBasedMintExtension is\n    IERC721RoleBasedMintExtension,\n    ERC165Storage,\n    ERC721AutoIdMinterExtension,\n    AccessControl\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    function __ERC721RoleBasedMintExtension_init() internal onlyInitializing {\n        __ERC721RoleBasedMintExtension_init_unchained();\n\n        _setupRole(MINTER_ROLE, _msgSender());\n    }\n\n    function __ERC721RoleBasedMintExtension_init_unchained()\n        internal\n        onlyInitializing\n    {\n        _registerInterface(type(IERC721RoleBasedMintExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function mintByRole(address to, uint256 count) external {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"NOT_MINTER_ROLE\");\n\n        _mintTo(to, count);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, AccessControl, ERC721AutoIdMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/collections/ERC721/presets/ERC721FullFeaturedCollection.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nimport \"../../../common/meta-transactions/ERC2771ContextOwnable.sol\";\nimport \"../extensions/ERC721CollectionMetadataExtension.sol\";\nimport \"../extensions/ERC721PrefixedMetadataExtension.sol\";\nimport \"../extensions/ERC721AutoIdMinterExtension.sol\";\nimport \"../extensions/ERC721OwnerMintExtension.sol\";\nimport \"../extensions/ERC721PreSaleExtension.sol\";\nimport \"../extensions/ERC721PublicSaleExtension.sol\";\nimport \"../extensions/ERC721SimpleProceedsExtension.sol\";\nimport \"../extensions/ERC721RoleBasedMintExtension.sol\";\nimport \"../extensions/ERC721RoyaltyExtension.sol\";\nimport \"../extensions/ERC721BulkifyExtension.sol\";\nimport \"../extensions/ERC721OpenSeaNoGasExtension.sol\";\n\ncontract ERC721FullFeaturedCollection is\n    Ownable,\n    ERC165Storage,\n    ERC721PrefixedMetadataExtension,\n    ERC721OwnerMintExtension,\n    ERC721PreSaleExtension,\n    ERC721PublicSaleExtension,\n    ERC721SimpleProceedsExtension,\n    ERC721RoleBasedMintExtension,\n    ERC721RoyaltyExtension,\n    ERC721OpenSeaNoGasExtension,\n    ERC2771ContextOwnable,\n    ERC721BulkifyExtension\n{\n    struct Config {\n        string name;\n        string symbol;\n        string contractURI;\n        string placeholderURI;\n        uint256 maxSupply;\n        uint256 preSalePrice;\n        uint256 preSaleMaxMintPerWallet;\n        uint256 publicSalePrice;\n        uint256 publicSaleMaxMintPerTx;\n        address defaultRoyaltyAddress;\n        uint16 defaultRoyaltyBps;\n        address proceedsRecipient;\n        address openSeaProxyRegistryAddress;\n        address openSeaExchangeAddress;\n        address trustedForwarder;\n    }\n\n    constructor(Config memory config) ERC721(config.name, config.symbol) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        _setupRole(DEFAULT_ADMIN_ROLE, deployer);\n\n        _transferOwnership(deployer);\n\n        __ERC721CollectionMetadataExtension_init(\n            config.name,\n            config.symbol,\n            config.contractURI\n        );\n        __ERC721PrefixedMetadataExtension_init(config.placeholderURI);\n        __ERC721AutoIdMinterExtension_init(config.maxSupply);\n        __ERC721PreSaleExtension_init_unchained(\n            config.preSalePrice,\n            config.preSaleMaxMintPerWallet\n        );\n        __ERC721PublicSaleExtension_init(\n            config.publicSalePrice,\n            config.publicSaleMaxMintPerTx\n        );\n        __ERC721SimpleProceedsExtension_init(config.proceedsRecipient);\n        __ERC721RoyaltyExtension_init(\n            config.defaultRoyaltyAddress,\n            config.defaultRoyaltyBps\n        );\n        __ERC721OpenSeaNoGasExtension_init(\n            config.openSeaProxyRegistryAddress,\n            config.openSeaExchangeAddress\n        );\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(ERC2771ContextOwnable, Context)\n        returns (address sender)\n    {\n        return super._msgSender();\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override(ERC2771ContextOwnable, Context)\n        returns (bytes calldata)\n    {\n        return super._msgData();\n    }\n\n    /* PUBLIC */\n\n    function name()\n        public\n        view\n        override(ERC721, ERC721AutoIdMinterExtension)\n        returns (string memory)\n    {\n        return ERC721AutoIdMinterExtension.name();\n    }\n\n    function symbol()\n        public\n        view\n        override(ERC721, ERC721AutoIdMinterExtension)\n        returns (string memory)\n    {\n        return ERC721AutoIdMinterExtension.symbol();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(\n            ERC165Storage,\n            ERC721PrefixedMetadataExtension,\n            ERC721PreSaleExtension,\n            ERC721PublicSaleExtension,\n            ERC721SimpleProceedsExtension,\n            ERC721OwnerMintExtension,\n            ERC721RoleBasedMintExtension,\n            ERC721RoyaltyExtension,\n            ERC721OpenSeaNoGasExtension,\n            ERC721BulkifyExtension\n        )\n        returns (bool)\n    {\n        return\n            ERC721.supportsInterface(interfaceId) ||\n            ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    /**\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override(ERC721, ERC721OpenSeaNoGasExtension)\n        returns (bool)\n    {\n        return\n            ERC721.isApprovedForAll(owner, operator) ||\n            ERC721OpenSeaNoGasExtension.isApprovedForAll(owner, operator);\n    }\n\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        virtual\n        override(ERC721, ERC721PrefixedMetadataExtension)\n        returns (string memory)\n    {\n        return ERC721PrefixedMetadataExtension.tokenURI(_tokenId);\n    }\n\n    function getInfo()\n        external\n        view\n        returns (\n            uint256 _maxSupply,\n            uint256 _totalSupply,\n            uint256 _senderBalance,\n            uint256 _preSalePrice,\n            uint256 _preSaleMaxMintPerWallet,\n            uint256 _preSaleAlreadyClaimed,\n            bool _preSaleActive,\n            uint256 _publicSalePrice,\n            uint256 _publicSaleMaxMintPerTx,\n            bool _publicSaleActive\n        )\n    {\n        uint256 balance = 0;\n\n        if (_msgSender() != address(0)) {\n            balance = this.balanceOf(_msgSender());\n        }\n\n        return (\n            maxSupply,\n            this.totalSupply(),\n            balance,\n            preSalePrice,\n            preSaleMaxMintPerWallet,\n            preSaleAllowlistClaimed[_msgSender()],\n            preSaleStatus,\n            publicSalePrice,\n            publicSaleMaxMintPerTx,\n            publicSaleStatus\n        );\n    }\n}\n"
    },
    "contracts/common/meta-transactions/ERC2771ContextOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n */\nabstract contract ERC2771ContextOwnable is Initializable, Context, Ownable {\n    address public _trustedForwarder;\n\n    function __ERC2771ContextOwnable_init(address trustedForwarder)\n        internal\n        onlyInitializing\n    {\n        __ERC2771ContextOwnable_init_unchained(trustedForwarder);\n    }\n\n    function __ERC2771ContextOwnable_init_unchained(address trustedForwarder)\n        internal\n        onlyInitializing\n    {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function setTrustedForwarder(address trustedForwarder) public onlyOwner {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override\n        returns (address sender)\n    {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override\n        returns (bytes calldata)\n    {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721PrefixedMetadataExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721CollectionMetadataExtension.sol\";\n\ninterface IERC721PrefixedMetadataExtension {\n    function setPlaceholderURI(string memory newValue) external;\n\n    function setBaseURI(string memory newValue) external;\n\n    function freezeBaseURI() external;\n\n    function baseTokenURI() external view returns (string memory);\n\n    function placeholderURI() external view returns (string memory);\n\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n\n/**\n * @dev Extension to allow configuring tokens metadata URI.\n *      In this extension tokens will have a shared token URI prefix,\n *      therefore on tokenURI() token's ID will be appended to the base URI.\n *      It also allows configuring a fallback \"placeholder\" URI when prefix is not set yet.\n */\nabstract contract ERC721PrefixedMetadataExtension is\n    IERC721PrefixedMetadataExtension,\n    Initializable,\n    Ownable,\n    ERC165Storage,\n    ERC721\n{\n    string internal _placeholderURI;\n    string internal _baseTokenURI;\n\n    bool public baseURIFrozen;\n\n    function __ERC721PrefixedMetadataExtension_init(\n        string memory placeholderURI_\n    ) internal onlyInitializing {\n        __ERC721PrefixedMetadataExtension_init_unchained(placeholderURI_);\n    }\n\n    function __ERC721PrefixedMetadataExtension_init_unchained(\n        string memory placeholderURI_\n    ) internal onlyInitializing {\n        _placeholderURI = placeholderURI_;\n\n        _registerInterface(type(IERC721PrefixedMetadataExtension).interfaceId);\n        _registerInterface(type(IERC721Metadata).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function setPlaceholderURI(string memory newValue) external onlyOwner {\n        _placeholderURI = newValue;\n    }\n\n    function setBaseURI(string memory newValue) external onlyOwner {\n        require(!baseURIFrozen, \"BASE_URI_FROZEN\");\n        _baseTokenURI = newValue;\n    }\n\n    function freezeBaseURI() external onlyOwner {\n        baseURIFrozen = true;\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function baseTokenURI() public view returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function placeholderURI() public view returns (string memory) {\n        return _placeholderURI;\n    }\n\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        virtual\n        override(ERC721, IERC721PrefixedMetadataExtension)\n        returns (string memory)\n    {\n        return\n            bytes(_baseTokenURI).length > 0\n                ? string(\n                    abi.encodePacked(_baseTokenURI, Strings.toString(_tokenId))\n                )\n                : _placeholderURI;\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721OwnerMintExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AutoIdMinterExtension.sol\";\n\ninterface IERC721OwnerMintExtension {\n    function mintByOwner(address to, uint256 count) external;\n}\n\n/**\n * @dev Extension to allow owner to mint directly without paying.\n */\nabstract contract ERC721OwnerMintExtension is\n    IERC721OwnerMintExtension,\n    Initializable,\n    Ownable,\n    ERC165Storage,\n    ERC721AutoIdMinterExtension\n{\n    function __ERC721OwnerMintExtension_init() internal onlyInitializing {\n        __ERC721OwnerMintExtension_init_unchained();\n    }\n\n    function __ERC721OwnerMintExtension_init_unchained()\n        internal\n        onlyInitializing\n    {\n        _registerInterface(type(IERC721OwnerMintExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function mintByOwner(address to, uint256 count) external onlyOwner {\n        _mintTo(to, count);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721AutoIdMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721PreSaleExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AutoIdMinterExtension.sol\";\n\ninterface IERC721PreSaleExtension {\n    function setPreSalePrice(uint256 newValue) external;\n\n    function setPreSaleMaxMintPerWallet(uint256 newValue) external;\n\n    function setAllowlistMerkleRoot(bytes32 newRoot) external;\n\n    function togglePreSaleStatus(bool isActive) external;\n\n    function onPreSaleAllowList(address minter, bytes32[] calldata proof)\n        external\n        view\n        returns (bool);\n\n    function mintPreSale(uint256 count, bytes32[] calldata proof)\n        external\n        payable;\n}\n\n/**\n * @dev Extension to provide pre-sale capabilities for certain collectors to mint for a specific price.\n */\nabstract contract ERC721PreSaleExtension is\n    Initializable,\n    IERC721PreSaleExtension,\n    ERC165Storage,\n    ERC721AutoIdMinterExtension,\n    ReentrancyGuard\n{\n    uint256 public preSalePrice;\n    uint256 public preSaleMaxMintPerWallet;\n    bytes32 public preSaleAllowlistMerkleRoot;\n    bool public preSaleStatus;\n\n    mapping(address => uint256) internal preSaleAllowlistClaimed;\n\n    function __ERC721PreSaleExtension_init(\n        uint256 _preSalePrice,\n        uint256 _preSaleMaxMintPerWallet\n    ) internal onlyInitializing {\n        __ERC721PreSaleExtension_init_unchained(\n            _preSalePrice,\n            _preSaleMaxMintPerWallet\n        );\n    }\n\n    function __ERC721PreSaleExtension_init_unchained(\n        uint256 _preSalePrice,\n        uint256 _preSaleMaxMintPerWallet\n    ) internal onlyInitializing {\n        _registerInterface(type(IERC721PreSaleExtension).interfaceId);\n\n        preSalePrice = _preSalePrice;\n        preSaleMaxMintPerWallet = _preSaleMaxMintPerWallet;\n    }\n\n    /* ADMIN */\n\n    function setPreSalePrice(uint256 newValue) external onlyOwner {\n        preSalePrice = newValue;\n    }\n\n    function setPreSaleMaxMintPerWallet(uint256 newValue) external onlyOwner {\n        preSaleMaxMintPerWallet = newValue;\n    }\n\n    function setAllowlistMerkleRoot(bytes32 newRoot) external onlyOwner {\n        preSaleAllowlistMerkleRoot = newRoot;\n    }\n\n    function togglePreSaleStatus(bool isActive) external onlyOwner {\n        preSaleStatus = isActive;\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721AutoIdMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function onPreSaleAllowList(address minter, bytes32[] calldata proof)\n        external\n        view\n        returns (bool)\n    {\n        return\n            MerkleProof.verify(\n                proof,\n                preSaleAllowlistMerkleRoot,\n                _generateMerkleLeaf(minter)\n            );\n    }\n\n    function mintPreSale(uint256 count, bytes32[] calldata proof)\n        external\n        payable\n        nonReentrant\n    {\n        require(preSaleStatus, \"PRE_SALE_NOT_ACTIVE\");\n\n        address to = _msgSender();\n\n        require(\n            MerkleProof.verify(\n                proof,\n                preSaleAllowlistMerkleRoot,\n                _generateMerkleLeaf(to)\n            ),\n            \"PRE_SALE_WRONG_PROOF\"\n        );\n        require(\n            preSaleAllowlistClaimed[to] + count <= preSaleMaxMintPerWallet,\n            \"PRE_SALE_LIMIT\"\n        );\n        require(preSalePrice * count <= msg.value, \"INSUFFICIENT_AMOUNT\");\n\n        preSaleAllowlistClaimed[to] += count;\n\n        _mintTo(to, count);\n    }\n\n    /* INTERNAL */\n\n    function _generateMerkleLeaf(address account)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(account));\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721PublicSaleExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AutoIdMinterExtension.sol\";\n\ninterface IERC721PublicSaleExtension {\n    function setPublicSalePrice(uint256 newValue) external;\n\n    function setPublicSaleMaxMintPerTx(uint256 newValue) external;\n\n    function togglePublicSaleStatus(bool isActive) external;\n\n    function mintPublicSale(address to, uint256 count) external payable;\n}\n\n/**\n * @dev Extension to provide pre-sale and public-sale capabilities for collectors to mint for a specific price.\n */\nabstract contract ERC721PublicSaleExtension is\n    Initializable,\n    IERC721PublicSaleExtension,\n    Ownable,\n    ERC165Storage,\n    ERC721AutoIdMinterExtension,\n    ReentrancyGuard\n{\n    uint256 public publicSalePrice;\n    uint256 public publicSaleMaxMintPerTx;\n    bool public publicSaleStatus;\n\n    function __ERC721PublicSaleExtension_init(\n        uint256 _publicSalePrice,\n        uint256 _publicSaleMaxMintPerTx\n    ) internal onlyInitializing {\n        __ERC721PublicSaleExtension_init_unchained(\n            _publicSalePrice,\n            _publicSaleMaxMintPerTx\n        );\n    }\n\n    function __ERC721PublicSaleExtension_init_unchained(\n        uint256 _publicSalePrice,\n        uint256 _publicSaleMaxMintPerTx\n    ) internal onlyInitializing {\n        _registerInterface(type(IERC721PublicSaleExtension).interfaceId);\n\n        publicSalePrice = _publicSalePrice;\n        publicSaleMaxMintPerTx = _publicSaleMaxMintPerTx;\n    }\n\n    /* ADMIN */\n\n    function setPublicSalePrice(uint256 newValue) external onlyOwner {\n        publicSalePrice = newValue;\n    }\n\n    function setPublicSaleMaxMintPerTx(uint256 newValue) external onlyOwner {\n        publicSaleMaxMintPerTx = newValue;\n    }\n\n    function togglePublicSaleStatus(bool isActive) external onlyOwner {\n        publicSaleStatus = isActive;\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721AutoIdMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function mintPublicSale(address to, uint256 count)\n        external\n        payable\n        nonReentrant\n    {\n        require(publicSaleStatus, \"PUBLIC_SALE_NOT_ACTIVE\");\n        require(count <= publicSaleMaxMintPerTx, \"PUBLIC_SALE_LIMIT\");\n        require(publicSalePrice * count <= msg.value, \"INSUFFICIENT_AMOUNT\");\n\n        _mintTo(to, count);\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721SimpleProceedsExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\ninterface IERC721SimpleProceedsExtension {\n    function setProceedsRecipient(address _proceedsRecipient) external;\n\n    function lockProceedsRecipient() external;\n\n    function withdraw() external;\n}\n\n/**\n * @dev Extension to allow contract owner to withdraw all the funds directly.\n */\nabstract contract ERC721SimpleProceedsExtension is\n    Initializable,\n    IERC721SimpleProceedsExtension,\n    Ownable,\n    ERC165Storage\n{\n    address public proceedsRecipient;\n    bool public proceedsRecipientLocked;\n\n    function __ERC721SimpleProceedsExtension_init(address _proceedsRecipient)\n        internal\n        onlyInitializing\n    {\n        __ERC721SimpleProceedsExtension_init_unchained(_proceedsRecipient);\n    }\n\n    function __ERC721SimpleProceedsExtension_init_unchained(\n        address _proceedsRecipient\n    ) internal onlyInitializing {\n        _registerInterface(type(IERC721SimpleProceedsExtension).interfaceId);\n\n        proceedsRecipient = _proceedsRecipient;\n    }\n\n    /* ADMIN */\n\n    function setProceedsRecipient(address _proceedsRecipient)\n        external\n        onlyOwner\n    {\n        require(!proceedsRecipientLocked, \"ERC721/RECIPIENT_LOCKED\");\n        proceedsRecipient = _proceedsRecipient;\n    }\n\n    function lockProceedsRecipient() external onlyOwner {\n        require(!proceedsRecipientLocked, \"ERC721/RECIPIENT_LOCKED\");\n        proceedsRecipientLocked = true;\n    }\n\n    function withdraw() external {\n        require(proceedsRecipient != address(0), \"ERC721/NO_RECIPIENT\");\n\n        uint256 balance = address(this).balance;\n\n        payable(proceedsRecipient).transfer(balance);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721RoyaltyExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\";\nimport \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/RoyaltyOverrideCore.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"../../../misc/rarible/IRoyalties.sol\";\nimport \"../../../misc/rarible/LibPart.sol\";\nimport \"../../../misc/rarible/LibRoyaltiesV2.sol\";\n\ninterface IERC721RoyaltyExtension {\n    function setTokenRoyalties(\n        IEIP2981RoyaltyOverride.TokenRoyaltyConfig[] calldata royaltyConfigs\n    ) external;\n\n    function setDefaultRoyalty(\n        IEIP2981RoyaltyOverride.TokenRoyalty calldata royalty\n    ) external;\n\n    function getRaribleV2Royalties(uint256 id)\n        external\n        view\n        returns (LibPart.Part[] memory result);\n}\n\n/**\n * @dev Extension to signal configured royalty to famous marketplaces as well as ERC2981.\n *\n * This extension currently supports Standard ERC2981, Rarible.\n * Note that OpenSea is supported via Flair metadata feature.\n */\nabstract contract ERC721RoyaltyExtension is\n    Initializable,\n    IERC721RoyaltyExtension,\n    IRoyalties,\n    Ownable,\n    ERC165Storage,\n    EIP2981RoyaltyOverrideCore\n{\n    function __ERC721RoyaltyExtension_init(\n        address defaultRoyaltyReceiver,\n        uint16 defaultRoyaltyBps\n    ) internal onlyInitializing {\n        __ERC721RoyaltyExtension_init_unchained(\n            defaultRoyaltyReceiver,\n            defaultRoyaltyBps\n        );\n    }\n\n    function __ERC721RoyaltyExtension_init_unchained(\n        address defaultRoyaltyReceiver,\n        uint16 defaultRoyaltyBps\n    ) internal onlyInitializing {\n        _registerInterface(type(IERC721RoyaltyExtension).interfaceId);\n        _registerInterface(type(IEIP2981).interfaceId);\n        _registerInterface(type(IEIP2981RoyaltyOverride).interfaceId);\n        _registerInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES);\n\n        TokenRoyalty memory royalty = TokenRoyalty(\n            defaultRoyaltyReceiver,\n            defaultRoyaltyBps\n        );\n\n        _setDefaultRoyalty(royalty);\n    }\n\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royaltyConfigs)\n        external\n        override(IEIP2981RoyaltyOverride, IERC721RoyaltyExtension)\n        onlyOwner\n    {\n        _setTokenRoyalties(royaltyConfigs);\n    }\n\n    function setDefaultRoyalty(TokenRoyalty calldata royalty)\n        external\n        override(IEIP2981RoyaltyOverride, IERC721RoyaltyExtension)\n        onlyOwner\n    {\n        _setDefaultRoyalty(royalty);\n    }\n\n    function getRaribleV2Royalties(uint256 id)\n        external\n        view\n        override(IRoyalties, IERC721RoyaltyExtension)\n        returns (LibPart.Part[] memory result)\n    {\n        result = new LibPart.Part[](1);\n\n        result[0].account = payable(defaultRoyalty.recipient);\n        result[0].value = defaultRoyalty.bps;\n\n        id;\n        // avoid unused param warning\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, EIP2981RoyaltyOverrideCore)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721BulkifyExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\ninterface IERC721BulkifyExtension {\n    function transferFromBulk(\n        address from,\n        address to,\n        uint256[] memory tokenIds\n    ) external;\n\n    function transferFromBulk(\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory tokenIds\n    ) external;\n}\n\n/**\n * @dev Extension to add bulk operations to a standard ERC721 contract.\n */\nabstract contract ERC721BulkifyExtension is\n    IERC721BulkifyExtension,\n    Initializable,\n    Context,\n    ERC165Storage,\n    ERC721\n{\n    function __ERC721BulkifyExtension_init() internal onlyInitializing {\n        __ERC721BulkifyExtension_init_unchained();\n    }\n\n    function __ERC721BulkifyExtension_init_unchained()\n        internal\n        onlyInitializing\n    {\n        _registerInterface(type(IERC721BulkifyExtension).interfaceId);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    /**\n     * Useful for when user wants to return tokens to get a refund,\n     * or when they want to transfer lots of tokens by paying gas fee only once.\n     */\n    function transferFromBulk(\n        address from,\n        address to,\n        uint256[] memory tokenIds\n    ) public virtual {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            IERC721(this).transferFrom(from, to, tokenIds[i]);\n        }\n    }\n\n    /**\n     * Useful for transferring multiple tokens from/to multiple addresses.\n     */\n    function transferFromBulk(\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory tokenIds\n    ) public virtual {\n        require(from.length == to.length, \"FROM_TO_LENGTH_MISMATCH\");\n        require(from.length == tokenIds.length, \"FROM_TOKEN_LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(_isApprovedOrOwner(_msgSender(), tokenIds[i]), \"NOT_OWNER\");\n            _transfer(from[i], to[i], tokenIds[i]);\n        }\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721OpenSeaNoGasExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"../../../misc/opensea/ProxyRegistry.sol\";\n\ninterface IERC721OpenSeaNoGasExtension {\n    function setOpenSeaProxyRegistryAddress(address addr) external;\n\n    function setOpenSeaExchangeAddress(address addr) external;\n\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n}\n\n/**\n * @dev Extension that automatically approves OpenSea to avoid having users to \"Approve\" your collection before trading.\n */\nabstract contract ERC721OpenSeaNoGasExtension is\n    IERC721OpenSeaNoGasExtension,\n    Initializable,\n    Ownable,\n    ERC165Storage,\n    ERC721\n{\n    address internal _openSeaProxyRegistryAddress;\n    address private _openSeaExchangeAddress;\n\n    function __ERC721OpenSeaNoGasExtension_init(\n        address openSeaProxyRegistryAddress,\n        address openSeaExchangeAddress\n    ) internal onlyInitializing {\n        __ERC721OpenSeaNoGasExtension_init_unchained(\n            openSeaProxyRegistryAddress,\n            openSeaExchangeAddress\n        );\n    }\n\n    function __ERC721OpenSeaNoGasExtension_init_unchained(\n        address openSeaProxyRegistryAddress,\n        address openSeaExchangeAddress\n    ) internal onlyInitializing {\n        _registerInterface(type(IERC721OpenSeaNoGasExtension).interfaceId);\n\n        _openSeaProxyRegistryAddress = openSeaProxyRegistryAddress;\n        _openSeaExchangeAddress = openSeaExchangeAddress;\n    }\n\n    /* ADMIN */\n\n    function setOpenSeaProxyRegistryAddress(address addr) external onlyOwner {\n        _openSeaProxyRegistryAddress = addr;\n    }\n\n    function setOpenSeaExchangeAddress(address addr) external onlyOwner {\n        _openSeaExchangeAddress = addr;\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    /**\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override(ERC721, IERC721OpenSeaNoGasExtension)\n        returns (bool)\n    {\n        if (_openSeaProxyRegistryAddress != address(0)) {\n            // Whitelist OpenSea proxy contract for easy trading.\n            ProxyRegistry proxyRegistry = ProxyRegistry(\n                _openSeaProxyRegistryAddress\n            );\n\n            if (address(proxyRegistry.proxies(owner)) == operator) {\n                return true;\n            }\n        }\n\n        if (_openSeaExchangeAddress != address(0)) {\n            // If OpenSea's ERC721 exchange address is detected, auto-approve\n            if (operator == address(_openSeaExchangeAddress)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * Simple EIP2981 reference override implementation\n */\ninterface IEIP2981RoyaltyOverride is IERC165 {\n\n    event TokenRoyaltyRemoved(uint256 tokenId);\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\n    event DefaultRoyaltySet(address recipient, uint16 bps);\n\n    struct TokenRoyalty {\n        address recipient;\n        uint16 bps;\n    }\n\n    struct TokenRoyaltyConfig {\n        uint256 tokenId;\n        address recipient;\n        uint16 bps;\n    }\n\n    /**\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\n     */\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external;\n\n    /**\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\n     */\n    function getTokenRoyaltiesCount() external view returns(uint256);\n\n    /**\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\n     */\n    function getTokenRoyaltyByIndex(uint256 index) external view returns(TokenRoyaltyConfig memory);\n\n    /**\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\n     */\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\n\n}\n"
    },
    "@manifoldxyz/royalty-registry-solidity/contracts/overrides/RoyaltyOverrideCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"./IRoyaltyOverride.sol\";\nimport \"../specs/IEIP2981.sol\";\n\n/**\n * Simple EIP2981 reference override implementation\n */\nabstract contract EIP2981RoyaltyOverrideCore is IEIP2981, IEIP2981RoyaltyOverride, ERC165 {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    TokenRoyalty public defaultRoyalty;\n    mapping(uint256 => TokenRoyalty) private _tokenRoyalties;\n    EnumerableSet.UintSet private _tokensWithRoyalties;\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IEIP2981).interfaceId || interfaceId == type(IEIP2981RoyaltyOverride).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Sets token royalties. When you override this in the implementation contract\n     * ensure that you access restrict it to the contract owner or admin\n     */\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs) internal {\n        for (uint i = 0; i < royaltyConfigs.length; i++) {\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\n            require(royaltyConfig.bps < 10000, \"Invalid bps\");\n            if (royaltyConfig.recipient == address(0)) {\n                delete _tokenRoyalties[royaltyConfig.tokenId];\n                _tokensWithRoyalties.remove(royaltyConfig.tokenId);\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\n            } else {\n                _tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(royaltyConfig.recipient, royaltyConfig.bps);\n                _tokensWithRoyalties.add(royaltyConfig.tokenId);\n                emit TokenRoyaltySet(royaltyConfig.tokenId, royaltyConfig.recipient, royaltyConfig.bps);\n            }\n        }\n    }\n\n    /**\n     * @dev Sets default royalty. When you override this in the implementation contract\n     * ensure that you access restrict it to the contract owner or admin\n     */\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal {\n        require(royalty.bps < 10000, \"Invalid bps\");\n        defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\n    }\n\n    /**\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\n     */\n    function getTokenRoyaltiesCount() external override view returns(uint256) {\n        return _tokensWithRoyalties.length();\n    }\n\n    /**\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\n     */\n    function getTokenRoyaltyByIndex(uint256 index) external override view returns(TokenRoyaltyConfig memory) {\n        uint256 tokenId = _tokensWithRoyalties.at(index);\n        TokenRoyalty memory royalty = _tokenRoyalties[tokenId];\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\n    }\n\n    /**\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 value) public override view returns (address, uint256) {\n        if (_tokenRoyalties[tokenId].recipient != address(0)) {\n            return (_tokenRoyalties[tokenId].recipient, value*_tokenRoyalties[tokenId].bps/10000);\n        }\n        if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\n            return (defaultRoyalty.recipient, value*defaultRoyalty.bps/10000);\n        }\n        return (address(0), 0);\n    }\n}\n"
    },
    "contracts/misc/rarible/IRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\npragma abicoder v2;\n\nimport \"./LibPart.sol\";\n\ninterface IRoyalties {\n    function getRaribleV2Royalties(uint256 id)\n        external\n        view\n        returns (LibPart.Part[] memory);\n}\n"
    },
    "contracts/misc/rarible/LibPart.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibPart {\n    bytes32 public constant TYPE_HASH =\n        keccak256(\"Part(address account,uint96 value)\");\n\n    struct Part {\n        address payable account;\n        uint96 value;\n    }\n\n    function hash(Part memory part) internal pure returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\n    }\n}\n"
    },
    "contracts/misc/rarible/LibRoyaltiesV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibRoyaltiesV2 {\n    /*\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\n     */\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * EIP-2981\n */\ninterface IEIP2981 {\n    /**\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     *\n     * => 0x2a55205a = 0x2a55205a\n     */\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\n}"
    },
    "contracts/misc/opensea/ProxyRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ncontract OwnableDelegateProxy {}\n\ncontract ProxyRegistry {\n    mapping(address => OwnableDelegateProxy) public proxies;\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721AOpenSeaNoGasExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"erc721a/contracts/ERC721A.sol\";\n\nimport \"../../../misc/opensea/ProxyRegistry.sol\";\n\nimport {IERC721OpenSeaNoGasExtension} from \"../../ERC721/extensions/ERC721OpenSeaNoGasExtension.sol\";\n\n/**\n * @dev Extension that automatically approves OpenSea to avoid having users to \"Approve\" your collection before trading.\n */\nabstract contract ERC721AOpenSeaNoGasExtension is\n    IERC721OpenSeaNoGasExtension,\n    Ownable,\n    ERC165Storage,\n    ERC721A\n{\n    address internal _openSeaProxyRegistryAddress;\n    address private _openSeaExchangeAddress;\n\n    constructor(\n        address openSeaProxyRegistryAddress,\n        address openSeaExchangeAddress\n    ) {\n        _registerInterface(type(IERC721OpenSeaNoGasExtension).interfaceId);\n\n        _openSeaProxyRegistryAddress = openSeaProxyRegistryAddress;\n        _openSeaExchangeAddress = openSeaExchangeAddress;\n    }\n\n    /* ADMIN */\n\n    function setOpenSeaProxyRegistryAddress(address addr) external onlyOwner {\n        _openSeaProxyRegistryAddress = addr;\n    }\n\n    function setOpenSeaExchangeAddress(address addr) external onlyOwner {\n        _openSeaExchangeAddress = addr;\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721A)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    /**\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override(ERC721A, IERC721OpenSeaNoGasExtension)\n        returns (bool)\n    {\n        if (_openSeaProxyRegistryAddress != address(0)) {\n            // Whitelist OpenSea proxy contract for easy trading.\n            ProxyRegistry proxyRegistry = ProxyRegistry(\n                _openSeaProxyRegistryAddress\n            );\n\n            if (address(proxyRegistry.proxies(owner)) == operator) {\n                return true;\n            }\n        }\n\n        if (_openSeaExchangeAddress != address(0)) {\n            // If OpenSea's ERC721 exchange address is detected, auto-approve\n            if (operator == address(_openSeaExchangeAddress)) {\n                return true;\n            }\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721APreSaleExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"erc721a/contracts/ERC721A.sol\";\n\nimport \"./ERC721AMinterExtension.sol\";\n\nimport {IERC721PreSaleExtension} from \"../../ERC721/extensions/ERC721PreSaleExtension.sol\";\n\n/**\n * @dev Extension to provide pre-sale capabilities for certain collectors to mint for a specific price.\n */\nabstract contract ERC721APreSaleExtension is\n    IERC721PreSaleExtension,\n    ERC165Storage,\n    ERC721AMinterExtension,\n    ReentrancyGuard\n{\n    uint256 public preSalePrice;\n    uint256 public preSaleMaxMintPerWallet;\n    bytes32 public preSaleAllowlistMerkleRoot;\n    bool public preSaleStatus;\n\n    mapping(address => uint256) internal preSaleAllowlistClaimed;\n\n    constructor(uint256 _preSalePrice, uint256 _preSaleMaxMintPerWallet) {\n        _registerInterface(type(IERC721PreSaleExtension).interfaceId);\n\n        preSalePrice = _preSalePrice;\n        preSaleMaxMintPerWallet = _preSaleMaxMintPerWallet;\n    }\n\n    /* ADMIN */\n\n    function setPreSalePrice(uint256 newValue) external onlyOwner {\n        preSalePrice = newValue;\n    }\n\n    function setPreSaleMaxMintPerWallet(uint256 newValue) external onlyOwner {\n        preSaleMaxMintPerWallet = newValue;\n    }\n\n    function setAllowlistMerkleRoot(bytes32 newRoot) external onlyOwner {\n        preSaleAllowlistMerkleRoot = newRoot;\n    }\n\n    function togglePreSaleStatus(bool isActive) external onlyOwner {\n        preSaleStatus = isActive;\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721AMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function onPreSaleAllowList(address minter, bytes32[] calldata proof)\n        external\n        view\n        returns (bool)\n    {\n        return\n            MerkleProof.verify(\n                proof,\n                preSaleAllowlistMerkleRoot,\n                _generateMerkleLeaf(minter)\n            );\n    }\n\n    function mintPreSale(uint256 count, bytes32[] calldata proof)\n        external\n        payable\n        nonReentrant\n    {\n        require(preSaleStatus, \"PRE_SALE_NOT_ACTIVE\");\n\n        address to = _msgSender();\n\n        require(\n            MerkleProof.verify(\n                proof,\n                preSaleAllowlistMerkleRoot,\n                _generateMerkleLeaf(to)\n            ),\n            \"PRE_SALE_WRONG_PROOF\"\n        );\n        require(\n            preSaleAllowlistClaimed[to] + count <= preSaleMaxMintPerWallet,\n            \"PRE_SALE_LIMIT\"\n        );\n        require(preSalePrice * count <= msg.value, \"INSUFFICIENT_AMOUNT\");\n\n        preSaleAllowlistClaimed[to] += count;\n\n        _mintTo(to, count);\n    }\n\n    /* INTERNAL */\n\n    function _generateMerkleLeaf(address account)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(account));\n    }\n}\n"
    },
    "contracts/tokens/presets/ERC20LockableToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\nimport \"../extensions/ERC20RoleBasedLockingExtension.sol\";\n\ncontract ERC20LockableToken is\n    Initializable,\n    ERC165Storage,\n    AccessControl,\n    ERC20,\n    ERC20Burnable,\n    Pausable,\n    ERC20RoleBasedLockingExtension\n{\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    string private _name;\n    string private _symbol;\n\n    struct Config {\n        string name;\n        string symbol;\n    }\n\n    constructor(Config memory config) ERC20(config.name, config.symbol) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        _name = config.name;\n        _symbol = config.symbol;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, deployer);\n        _grantRole(PAUSER_ROLE, deployer);\n        _grantRole(MINTER_ROLE, deployer);\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /* ADMIN */\n\n    function pause() public onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\n        _mint(to, amount);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, AccessControl, ERC20RoleBasedLockingExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n        virtual\n        override(ERC20, ERC20RoleBasedLockingExtension)\n        whenNotPaused\n    {\n        ERC20RoleBasedLockingExtension._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/tokens/extensions/ERC20RoleBasedLockingExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ninterface ERC20RoleBasedLockingExtensionInterface {\n    function lockForAll() external;\n\n    function unlockForAll() external;\n\n    function canTransfer(address) external view returns (bool);\n}\n\n/**\n * @dev Extension to allow locking transfers and only allow certain addresses do to transfers.\n */\nabstract contract ERC20RoleBasedLockingExtension is\n    ERC165Storage,\n    AccessControl,\n    ERC20,\n    ERC20RoleBasedLockingExtensionInterface\n{\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER_ROLE\");\n\n    constructor() {\n        _registerInterface(\n            type(ERC20RoleBasedLockingExtensionInterface).interfaceId\n        );\n\n        _grantRole(TRANSFER_ROLE, msg.sender);\n    }\n\n    /* ADMIN */\n\n    function lockForAll() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"NOT_ADMIN\");\n\n        _revokeRole(TRANSFER_ROLE, address(0));\n    }\n\n    function unlockForAll() external {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"NOT_ADMIN\");\n\n        _grantRole(TRANSFER_ROLE, address(0));\n    }\n\n    /* PUBLIC */\n\n    function canTransfer(address operator)\n        external\n        view\n        override\n        returns (bool)\n    {\n        return hasRole(TRANSFER_ROLE, operator);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, AccessControl)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        require(\n            hasRole(TRANSFER_ROLE, address(0)) ||\n                hasRole(TRANSFER_ROLE, _msgSender()),\n            \"TRANSFER_LOCKED\"\n        );\n\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/tokens/presets/ERC20BasicToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract ERC20BasicToken is\n    Initializable,\n    ERC20,\n    ERC20Burnable,\n    Pausable,\n    AccessControl\n{\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    string private _name;\n    string private _symbol;\n\n    struct Config {\n        string name;\n        string symbol;\n    }\n\n    constructor(Config memory config) ERC20(config.name, config.symbol) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        _name = config.name;\n        _symbol = config.symbol;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, deployer);\n        _grantRole(PAUSER_ROLE, deployer);\n        _grantRole(MINTER_ROLE, deployer);\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function pause() public onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\n        _mint(to, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override whenNotPaused {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721AOneOfOneMintExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AMinterExtension.sol\";\nimport \"./ERC721APerTokenMetadataExtension.sol\";\n\nimport {IERC721OneOfOneMintExtension} from \"../../ERC721/extensions/ERC721OneOfOneMintExtension.sol\";\n\n/**\n * @dev Extension to allow owner to mint 1-of-1 NFTs by providing dedicated metadata URI for each token.\n */\nabstract contract ERC721AOneOfOneMintExtension is\n    IERC721OneOfOneMintExtension,\n    Ownable,\n    ERC165Storage,\n    AccessControl,\n    ERC721AMinterExtension,\n    ERC721APerTokenMetadataExtension\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor() {\n        _registerInterface(type(IERC721OneOfOneMintExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function mintWithTokenURIsByOwner(\n        address to,\n        uint256 count,\n        string[] memory tokenURIs\n    ) external onlyOwner {\n        uint256 startingTokenId = _nextTokenId();\n        _mintTo(to, count);\n        for (uint256 i = 0; i < count; i++) {\n            _setTokenURI(startingTokenId + i, tokenURIs[i]);\n        }\n    }\n\n    function mintWithTokenURIsByRole(\n        address to,\n        uint256 count,\n        string[] memory tokenURIs\n    ) external {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"NOT_MINTER_ROLE\");\n\n        uint256 startingTokenId = _nextTokenId();\n        _mintTo(to, count);\n        for (uint256 i = 0; i < count; i++) {\n            _setTokenURI(startingTokenId + i, tokenURIs[i]);\n        }\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(\n            ERC165Storage,\n            AccessControl,\n            ERC721AMinterExtension,\n            ERC721APerTokenMetadataExtension\n        )\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override(\n            ERC721A,\n            ERC721APerTokenMetadataExtension,\n            IERC721OneOfOneMintExtension\n        )\n        returns (string memory)\n    {\n        return ERC721APerTokenMetadataExtension.tokenURI(tokenId);\n    }\n\n    function _burn(uint256 tokenId)\n        internal\n        virtual\n        override(ERC721A, ERC721APerTokenMetadataExtension)\n    {\n        return ERC721APerTokenMetadataExtension._burn(tokenId);\n    }\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721APerTokenMetadataExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"erc721a/contracts/ERC721A.sol\";\n\nimport {IERC721PerTokenMetadataExtension} from \"../../ERC721/extensions/ERC721PerTokenMetadataExtension.sol\";\n\n/**\n * @dev Extension to allow configuring collection and tokens metadata URI.\n *      In this extension each token will have a different independent token URI set by contract owner.\n *      To enable true self-custody for token owners, an admin can freeze URIs using a token ID pointer that can only be increased.\n */\nabstract contract ERC721APerTokenMetadataExtension is\n    IERC721PerTokenMetadataExtension,\n    Ownable,\n    ERC165Storage,\n    ERC721A\n{\n    uint256 public lastFrozenTokenId;\n\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    constructor() {\n        _registerInterface(type(IERC721PerTokenMetadataExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function freezeTokenURIs(uint256 _lastFrozenTokenId) external onlyOwner {\n        require(_lastFrozenTokenId > lastFrozenTokenId, \"CANNOT_UNFREEZE\");\n        lastFrozenTokenId = _lastFrozenTokenId;\n    }\n\n    function setTokenURI(uint256 tokenId, string memory tokenURI)\n        external\n        onlyOwner\n    {\n        require(tokenId > lastFrozenTokenId, \"FROZEN_TOKEN\");\n        _setTokenURI(tokenId, tokenURI);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721A)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721URIStorage: URI query for nonexistent token\"\n        );\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\n        internal\n        virtual\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721URIStorage: URI set of nonexistent token\"\n        );\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721OneOfOneMintExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AutoIdMinterExtension.sol\";\nimport \"./ERC721PerTokenMetadataExtension.sol\";\n\ninterface IERC721OneOfOneMintExtension {\n    function mintWithTokenURIsByOwner(\n        address to,\n        uint256 count,\n        string[] memory tokenURIs\n    ) external;\n\n    function mintWithTokenURIsByRole(\n        address to,\n        uint256 count,\n        string[] memory tokenURIs\n    ) external;\n\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n/**\n * @dev Extension to allow owner to mint 1-of-1 NFTs by providing dedicated metadata URI for each token.\n */\nabstract contract ERC721OneOfOneMintExtension is\n    IERC721OneOfOneMintExtension,\n    Initializable,\n    Ownable,\n    ERC165Storage,\n    AccessControl,\n    ERC721AutoIdMinterExtension,\n    ERC721PerTokenMetadataExtension\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    function __ERC721OneOfOneMintExtension_init() internal onlyInitializing {\n        __ERC721OneOfOneMintExtension_init_unchained();\n    }\n\n    function __ERC721OneOfOneMintExtension_init_unchained()\n        internal\n        onlyInitializing\n    {\n        _registerInterface(type(IERC721OneOfOneMintExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function mintWithTokenURIsByOwner(\n        address to,\n        uint256 count,\n        string[] memory tokenURIs\n    ) external onlyOwner {\n        uint256 startingTokenId = _getNextTokenId();\n        _mintTo(to, count);\n        for (uint256 i = 0; i < count; i++) {\n            _setTokenURI(startingTokenId + i, tokenURIs[i]);\n        }\n    }\n\n    function mintWithTokenURIsByRole(\n        address to,\n        uint256 count,\n        string[] memory tokenURIs\n    ) external {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"NOT_MINTER_ROLE\");\n\n        uint256 startingTokenId = _getNextTokenId();\n        _mintTo(to, count);\n        for (uint256 i = 0; i < count; i++) {\n            _setTokenURI(startingTokenId + i, tokenURIs[i]);\n        }\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(\n            ERC165Storage,\n            AccessControl,\n            ERC721AutoIdMinterExtension,\n            ERC721PerTokenMetadataExtension\n        )\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function name()\n        public\n        view\n        virtual\n        override(ERC721, ERC721AutoIdMinterExtension)\n        returns (string memory)\n    {\n        return ERC721AutoIdMinterExtension.name();\n    }\n\n    function symbol()\n        public\n        view\n        virtual\n        override(ERC721, ERC721AutoIdMinterExtension)\n        returns (string memory)\n    {\n        return ERC721AutoIdMinterExtension.symbol();\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override(ERC721, ERC721URIStorage, IERC721OneOfOneMintExtension)\n        returns (string memory)\n    {\n        return ERC721URIStorage.tokenURI(tokenId);\n    }\n\n    function _burn(uint256 tokenId)\n        internal\n        virtual\n        override(ERC721, ERC721URIStorage)\n    {\n        return ERC721URIStorage._burn(tokenId);\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721PerTokenMetadataExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\ninterface IERC721PerTokenMetadataExtension {\n    function freezeTokenURIs(uint256 _lastFrozenTokenId) external;\n\n    function setTokenURI(uint256 tokenId, string memory tokenURI) external;\n}\n\n/**\n * @dev Extension to allow configuring collection and tokens metadata URI.\n *      In this extension each token will have a different independent token URI set by contract owner.\n *      To enable true self-custody for token owners, an admin can freeze URIs using a token ID pointer that can only be increased.\n */\nabstract contract ERC721PerTokenMetadataExtension is\n    IERC721PerTokenMetadataExtension,\n    Initializable,\n    Ownable,\n    ERC165Storage,\n    ERC721URIStorage\n{\n    uint256 public lastFrozenTokenId;\n\n    function __ERC721PerTokenMetadataExtension_init()\n        internal\n        onlyInitializing\n    {\n        __ERC721PerTokenMetadataExtension_init_unchained();\n    }\n\n    function __ERC721PerTokenMetadataExtension_init_unchained()\n        internal\n        onlyInitializing\n    {\n        _registerInterface(type(IERC721PerTokenMetadataExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function freezeTokenURIs(uint256 _lastFrozenTokenId) external onlyOwner {\n        require(_lastFrozenTokenId > lastFrozenTokenId, \"CANNOT_UNFREEZE\");\n        lastFrozenTokenId = _lastFrozenTokenId;\n    }\n\n    function setTokenURI(uint256 tokenId, string memory tokenURI)\n        external\n        onlyOwner\n    {\n        require(tokenId > lastFrozenTokenId, \"FROZEN_TOKEN\");\n        _setTokenURI(tokenId, tokenURI);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "contracts/collections/ERC721/presets/ERC721OneOfOneCollection.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nimport \"../../../common/meta-transactions/ERC2771ContextOwnable.sol\";\nimport \"../extensions/ERC721CollectionMetadataExtension.sol\";\nimport \"../extensions/ERC721PerTokenMetadataExtension.sol\";\nimport \"../extensions/ERC721OneOfOneMintExtension.sol\";\nimport \"../extensions/ERC721AutoIdMinterExtension.sol\";\nimport \"../extensions/ERC721OwnerMintExtension.sol\";\nimport \"../extensions/ERC721RoyaltyExtension.sol\";\nimport \"../extensions/ERC721OpenSeaNoGasExtension.sol\";\n\ncontract ERC721OneOfOneCollection is\n    Ownable,\n    ERC165Storage,\n    ERC721PerTokenMetadataExtension,\n    ERC721OwnerMintExtension,\n    ERC721RoyaltyExtension,\n    ERC721OneOfOneMintExtension,\n    ERC721OpenSeaNoGasExtension,\n    ERC2771ContextOwnable\n{\n    struct Config {\n        string name;\n        string symbol;\n        string contractURI;\n        uint256 maxSupply;\n        address defaultRoyaltyAddress;\n        uint16 defaultRoyaltyBps;\n        address openSeaProxyRegistryAddress;\n        address openSeaExchangeAddress;\n        address trustedForwarder;\n    }\n\n    constructor(Config memory config) ERC721(config.name, config.symbol) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        _setupRole(DEFAULT_ADMIN_ROLE, deployer);\n        _setupRole(MINTER_ROLE, deployer);\n\n        _transferOwnership(deployer);\n\n        __ERC721CollectionMetadataExtension_init(\n            config.name,\n            config.symbol,\n            config.contractURI\n        );\n        __ERC721PerTokenMetadataExtension_init();\n        __ERC721OneOfOneMintExtension_init();\n        __ERC721AutoIdMinterExtension_init(config.maxSupply);\n        __ERC721RoyaltyExtension_init(\n            config.defaultRoyaltyAddress,\n            config.defaultRoyaltyBps\n        );\n        __ERC721OpenSeaNoGasExtension_init(\n            config.openSeaProxyRegistryAddress,\n            config.openSeaExchangeAddress\n        );\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\n    }\n\n    function _burn(uint256 tokenId)\n        internal\n        virtual\n        override(ERC721, ERC721OneOfOneMintExtension, ERC721URIStorage)\n    {\n        return ERC721OneOfOneMintExtension._burn(tokenId);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(ERC2771ContextOwnable, Context)\n        returns (address sender)\n    {\n        return super._msgSender();\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override(ERC2771ContextOwnable, Context)\n        returns (bytes calldata)\n    {\n        return super._msgData();\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(\n            ERC165Storage,\n            ERC721OwnerMintExtension,\n            ERC721OneOfOneMintExtension,\n            ERC721PerTokenMetadataExtension,\n            ERC721RoyaltyExtension,\n            ERC721OpenSeaNoGasExtension\n        )\n        returns (bool)\n    {\n        return\n            ERC721.supportsInterface(interfaceId) ||\n            ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function name()\n        public\n        view\n        override(\n            ERC721,\n            ERC721AutoIdMinterExtension,\n            ERC721OneOfOneMintExtension\n        )\n        returns (string memory)\n    {\n        return ERC721AutoIdMinterExtension.name();\n    }\n\n    function symbol()\n        public\n        view\n        override(\n            ERC721,\n            ERC721AutoIdMinterExtension,\n            ERC721OneOfOneMintExtension\n        )\n        returns (string memory)\n    {\n        return ERC721AutoIdMinterExtension.symbol();\n    }\n\n    /**\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override(ERC721, ERC721OpenSeaNoGasExtension)\n        returns (bool)\n    {\n        return super.isApprovedForAll(owner, operator);\n    }\n\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        virtual\n        override(ERC721, ERC721OneOfOneMintExtension, ERC721URIStorage)\n        returns (string memory)\n    {\n        return ERC721OneOfOneMintExtension.tokenURI(_tokenId);\n    }\n\n    function getInfo()\n        external\n        view\n        returns (\n            uint256 _maxSupply,\n            uint256 _totalSupply,\n            uint256 _senderBalance\n        )\n    {\n        uint256 balance = 0;\n\n        if (_msgSender() != address(0)) {\n            balance = this.balanceOf(_msgSender());\n        }\n\n        return (maxSupply, this.totalSupply(), balance);\n    }\n}\n"
    },
    "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"../../../common/meta-transactions/ERC2771ContextOwnable.sol\";\nimport \"../extensions/ERC721CollectionMetadataExtension.sol\";\nimport \"../extensions/ERC721PrefixedMetadataExtension.sol\";\nimport \"../extensions/ERC721AutoIdMinterExtension.sol\";\nimport \"../extensions/ERC721OwnerMintExtension.sol\";\nimport \"../extensions/ERC721OwnerManagedExtension.sol\";\nimport \"../extensions/ERC721RoyaltyExtension.sol\";\nimport \"../extensions/ERC721BulkifyExtension.sol\";\n\ncontract ERC721ManagedPrefixedCollection is\n    Initializable,\n    Ownable,\n    ERC165Storage,\n    ERC2771ContextOwnable,\n    ERC721CollectionMetadataExtension,\n    ERC721PrefixedMetadataExtension,\n    ERC721AutoIdMinterExtension,\n    ERC721OwnerMintExtension,\n    ERC721OwnerManagedExtension,\n    ERC721RoyaltyExtension,\n    ERC721BulkifyExtension\n{\n    struct Config {\n        string name;\n        string symbol;\n        string contractURI;\n        string baseURI;\n        string placeholderURI;\n        address[] initialHolders;\n        uint256[] initialAmounts;\n        uint256 maxSupply;\n        address defaultRoyaltyAddress;\n        uint16 defaultRoyaltyBps;\n        address trustedForwarder;\n    }\n\n    constructor(Config memory config) ERC721(config.name, config.symbol) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        require(\n            config.initialHolders.length == config.initialAmounts.length,\n            \"ERC721/INVALID_INITIAL_ARGS\"\n        );\n\n        _transferOwnership(deployer);\n\n        __ERC721CollectionMetadataExtension_init(\n            config.name,\n            config.symbol,\n            config.contractURI\n        );\n        __ERC721PrefixedMetadataExtension_init(config.placeholderURI);\n        __ERC721AutoIdMinterExtension_init(config.maxSupply);\n        __ERC721RoyaltyExtension_init(\n            config.defaultRoyaltyAddress,\n            config.defaultRoyaltyBps\n        );\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\n\n        maxSupply = config.maxSupply;\n\n        for (uint256 i = 0; i < config.initialHolders.length; i++) {\n            _mintTo(config.initialHolders[i], config.initialAmounts[i]);\n        }\n\n        _baseTokenURI = config.baseURI;\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(ERC2771ContextOwnable, Context)\n        returns (address sender)\n    {\n        return super._msgSender();\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override(ERC2771ContextOwnable, Context)\n        returns (bytes calldata)\n    {\n        return super._msgData();\n    }\n\n    /* PUBLIC */\n\n    function name()\n        public\n        view\n        override(\n            ERC721,\n            ERC721AutoIdMinterExtension,\n            ERC721CollectionMetadataExtension\n        )\n        returns (string memory)\n    {\n        return ERC721AutoIdMinterExtension.name();\n    }\n\n    function symbol()\n        public\n        view\n        override(\n            ERC721,\n            ERC721AutoIdMinterExtension,\n            ERC721CollectionMetadataExtension\n        )\n        returns (string memory)\n    {\n        return ERC721AutoIdMinterExtension.symbol();\n    }\n\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override(ERC721, IERC721, ERC721OwnerManagedExtension)\n        returns (bool)\n    {\n        return ERC721OwnerManagedExtension.isApprovedForAll(owner, operator);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(\n            ERC165Storage,\n            ERC721AutoIdMinterExtension,\n            ERC721CollectionMetadataExtension,\n            ERC721OwnerMintExtension,\n            ERC721OwnerManagedExtension,\n            ERC721PrefixedMetadataExtension,\n            ERC721RoyaltyExtension,\n            ERC721BulkifyExtension\n        )\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        virtual\n        override(ERC721, IERC721Metadata, ERC721PrefixedMetadataExtension)\n        returns (string memory)\n    {\n        return ERC721PrefixedMetadataExtension.tokenURI(_tokenId);\n    }\n\n    function getInfo()\n        external\n        view\n        returns (\n            uint256 _maxSupply,\n            uint256 _totalSupply,\n            uint256 _senderBalance\n        )\n    {\n        uint256 balance = 0;\n\n        if (_msgSender() != address(0)) {\n            balance = this.balanceOf(_msgSender());\n        }\n\n        return (maxSupply, this.totalSupply(), balance);\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721OwnerManagedExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AutoIdMinterExtension.sol\";\n\ninterface IERC721OwnerManagedExtension {\n    function revokeManagementPower() external;\n}\n\n/**\n * @dev Extension to allow owner to transfer tokens on behalf of owners. Only useful for certain use-cases.\n */\nabstract contract ERC721OwnerManagedExtension is\n    IERC721OwnerManagedExtension,\n    Initializable,\n    Ownable,\n    ERC165Storage,\n    ERC721AutoIdMinterExtension\n{\n    bool public managementPowerRevoked;\n\n    function __ERC721OwnerManagedExtension_init() internal onlyInitializing {\n        __ERC721OwnerManagedExtension_init_unchained();\n    }\n\n    function __ERC721OwnerManagedExtension_init_unchained()\n        internal\n        onlyInitializing\n    {\n        _registerInterface(type(IERC721OwnerManagedExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function revokeManagementPower() external onlyOwner {\n        managementPowerRevoked = true;\n    }\n\n    /* PUBLIC */\n\n    /**\n     * Override isApprovedForAll to allow owner to transfer tokens.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override(ERC721)\n        returns (bool)\n    {\n        if (!managementPowerRevoked) {\n            if (operator == super.owner()) {\n                return true;\n            }\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721AutoIdMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/streams/ERC721/presets/ERC721ShareVestingStream.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../extensions/ERC721ShareSplitExtension.sol\";\nimport \"../extensions/ERC721VestingReleaseExtension.sol\";\n\ncontract ERC721ShareVestingStream is\n    Initializable,\n    Ownable,\n    ERC721VestingReleaseExtension,\n    ERC721ShareSplitExtension\n{\n    string public constant name = \"ERC721 Share Vesting Stream\";\n\n    string public constant version = \"0.1\";\n\n    struct Config {\n        // Core\n        address ticketToken;\n        uint64 lockedUntilTimestamp;\n        // Vesting release extension\n        uint64 startTimestamp;\n        uint64 durationSeconds;\n        // Share split extension\n        uint256[] tokenIds;\n        uint256[] shares;\n    }\n\n    /* INTERNAL */\n\n    constructor(Config memory config) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        _transferOwnership(deployer);\n        __ERC721MultiTokenStream_init(\n            config.ticketToken,\n            config.lockedUntilTimestamp\n        );\n        __ERC721VestingReleaseExtension_init(\n            config.startTimestamp,\n            config.durationSeconds\n        );\n        __ERC721ShareSplitExtension_init(config.tokenIds, config.shares);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/streams/ERC721/extensions/ERC721ShareSplitExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../base/ERC721MultiTokenStream.sol\";\n\ninterface IERC721ShareSplitExtension {\n    function hasERC721ShareSplitExtension() external view returns (bool);\n\n    function setSharesForTokens(\n        uint256[] memory _tokenIds,\n        uint256[] memory _shares\n    ) external;\n\n    function getSharesByTokens(uint256[] calldata _tokenIds)\n        external\n        view\n        returns (uint256[] memory);\n}\n\nabstract contract ERC721ShareSplitExtension is\n    IERC721ShareSplitExtension,\n    Initializable,\n    ERC165Storage,\n    Ownable,\n    ERC721MultiTokenStream\n{\n    event SharesUpdated(uint256 tokenId, uint256 prevShares, uint256 newShares);\n\n    // Sum of all the share units ever configured\n    uint256 public totalShares;\n\n    // Map of ticket token ID -> share of the stream\n    mapping(uint256 => uint256) public shares;\n\n    /* INTERNAL */\n\n    function __ERC721ShareSplitExtension_init(\n        uint256[] memory _tokenIds,\n        uint256[] memory _shares\n    ) internal onlyInitializing {\n        __ERC721ShareSplitExtension_init_unchained(_tokenIds, _shares);\n    }\n\n    function __ERC721ShareSplitExtension_init_unchained(\n        uint256[] memory _tokenIds,\n        uint256[] memory _shares\n    ) internal onlyInitializing {\n        require(_shares.length == _tokenIds.length, \"STREAM/ARGS_MISMATCH\");\n        _updateShares(_tokenIds, _shares);\n\n        _registerInterface(type(IERC721ShareSplitExtension).interfaceId);\n    }\n\n    function setSharesForTokens(\n        uint256[] memory _tokenIds,\n        uint256[] memory _shares\n    ) public onlyOwner {\n        require(_shares.length == _tokenIds.length, \"STREAM/ARGS_MISMATCH\");\n        require(lockedUntilTimestamp < block.timestamp, \"STREAM/CONFIG_LOCKED\");\n\n        _updateShares(_tokenIds, _shares);\n    }\n\n    /* PUBLIC */\n\n    function hasERC721ShareSplitExtension() external pure returns (bool) {\n        return true;\n    }\n\n    function getSharesByTokens(uint256[] calldata _tokenIds)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory _shares = new uint256[](_tokenIds.length);\n\n        for (uint256 i = 0; i < _shares.length; i++) {\n            _shares[i] = shares[_tokenIds[i]];\n        }\n\n        return _shares;\n    }\n\n    function _totalTokenShare(\n        uint256 totalReleasedAmount_,\n        uint256 ticketTokenId_,\n        address claimToken_\n    ) internal view override returns (uint256) {\n        claimToken_;\n\n        return (totalReleasedAmount_ * shares[ticketTokenId_]) / totalShares;\n    }\n\n    /* INTERNAL */\n\n    function _updateShares(uint256[] memory _tokenIds, uint256[] memory _shares)\n        private\n    {\n        for (uint256 i = 0; i < _shares.length; i++) {\n            _updateShares(_tokenIds[i], _shares[i]);\n        }\n    }\n\n    function _updateShares(uint256 tokenId, uint256 newShares) private {\n        uint256 prevShares = shares[tokenId];\n\n        shares[tokenId] = newShares;\n        totalShares = totalShares + newShares - prevShares;\n\n        require(totalShares >= 0, \"STREAM/NEGATIVE_SHARES\");\n\n        emit SharesUpdated(tokenId, prevShares, newShares);\n    }\n}\n"
    },
    "contracts/streams/ERC721/extensions/ERC721VestingReleaseExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../base/ERC721MultiTokenStream.sol\";\n\ninterface IERC721VestingReleaseExtension {\n    function hasERC721VestingReleaseExtension() external view returns (bool);\n\n    function setVestingStartTimestamp(uint64 newValue) external;\n\n    function setVestingDurationSeconds(uint64 newValue) external;\n}\n\nabstract contract ERC721VestingReleaseExtension is\n    IERC721VestingReleaseExtension,\n    Initializable,\n    ERC165Storage,\n    Ownable,\n    ERC721MultiTokenStream\n{\n    // Start of the vesting schedule\n    uint64 public vestingStartTimestamp;\n\n    // Duration of the vesting schedule\n    uint64 public vestingDurationSeconds;\n\n    /* INTERNAL */\n\n    function __ERC721VestingReleaseExtension_init(\n        uint64 _vestingStartTimestamp,\n        uint64 _vestingDurationSeconds\n    ) internal onlyInitializing {\n        __ERC721VestingReleaseExtension_init_unchained(\n            _vestingStartTimestamp,\n            _vestingDurationSeconds\n        );\n    }\n\n    function __ERC721VestingReleaseExtension_init_unchained(\n        uint64 _vestingStartTimestamp,\n        uint64 _vestingDurationSeconds\n    ) internal onlyInitializing {\n        vestingStartTimestamp = _vestingStartTimestamp;\n        vestingDurationSeconds = _vestingDurationSeconds;\n\n        _registerInterface(type(IERC721VestingReleaseExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function setVestingStartTimestamp(uint64 newValue) public onlyOwner {\n        require(lockedUntilTimestamp < block.timestamp, \"STREAM/CONFIG_LOCKED\");\n        vestingStartTimestamp = newValue;\n    }\n\n    function setVestingDurationSeconds(uint64 newValue) public onlyOwner {\n        require(lockedUntilTimestamp < block.timestamp, \"STREAM/CONFIG_LOCKED\");\n        vestingDurationSeconds = newValue;\n    }\n\n    /* PUBLIC */\n\n    function hasERC721VestingReleaseExtension() external pure returns (bool) {\n        return true;\n    }\n\n    /* INTERNAL */\n\n    function _totalReleasedAmount(\n        uint256 _streamTotalSupply,\n        uint256 _ticketTokenId,\n        address _claimToken\n    ) internal view override returns (uint256) {\n        _ticketTokenId;\n        _claimToken;\n\n        if (block.timestamp < vestingStartTimestamp) {\n            return 0;\n        } else if (\n            block.timestamp > vestingStartTimestamp + vestingDurationSeconds\n        ) {\n            return _streamTotalSupply;\n        } else {\n            return\n                (_streamTotalSupply *\n                    (block.timestamp - vestingStartTimestamp)) /\n                vestingDurationSeconds;\n        }\n    }\n}\n"
    },
    "contracts/streams/ERC721/base/ERC721MultiTokenStream.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IERC721MultiTokenStream {\n    // Claim native currency for a single ticket token\n    function claim(uint256 ticketTokenId) external;\n\n    // Claim an erc20 claim token for a single ticket token\n    function claim(uint256 ticketTokenId, address claimToken) external;\n\n    // Claim native currency for multiple ticket tokens (only if all owned by sender)\n    function claim(uint256[] calldata ticketTokenIds) external;\n\n    // Claim native or erc20 tokens for multiple ticket tokens (only if all owned by `owner`)\n    function claim(\n        uint256[] calldata ticketTokenIds,\n        address claimToken,\n        address owner\n    ) external;\n\n    // Total native currency ever supplied to this stream\n    function streamTotalSupply() external view returns (uint256);\n\n    // Total erc20 token ever supplied to this stream by claim token address\n    function streamTotalSupply(address claimToken)\n        external\n        view\n        returns (uint256);\n\n    // Total native currency ever claimed from this stream\n    function streamTotalClaimed() external view returns (uint256);\n\n    // Total erc20 token ever claimed from this stream by claim token address\n    function streamTotalClaimed(address claimToken)\n        external\n        view\n        returns (uint256);\n\n    // Total native currency ever claimed for a single ticket token\n    function streamTotalClaimed(uint256 ticketTokenId)\n        external\n        view\n        returns (uint256);\n\n    // Total native currency ever claimed for multiple token IDs\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\n        external\n        view\n        returns (uint256);\n\n    // Total erc20 token ever claimed for multiple token IDs\n    function streamTotalClaimed(\n        uint256[] calldata ticketTokenIds,\n        address claimToken\n    ) external view returns (uint256);\n\n    // Calculate currently claimable amount for a specific ticket token ID and a specific claim token address\n    // Pass 0x0000000000000000000000000000000000000000 as claim token to represent native currency\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\n        external\n        view\n        returns (uint256 claimableAmount);\n}\n\nabstract contract ERC721MultiTokenStream is\n    IERC721MultiTokenStream,\n    Initializable,\n    ERC165Storage,\n    Ownable,\n    ReentrancyGuard\n{\n    using Address for address;\n    using Address for address payable;\n\n    struct Entitlement {\n        uint256 totalClaimed;\n        uint256 lastClaimedAt;\n    }\n\n    // Config\n    address public ticketToken;\n\n    // Locks changing the config until this timestamp is reached\n    uint64 public lockedUntilTimestamp;\n\n    // Map of ticket token ID -> claim token address -> entitlement\n    mapping(uint256 => mapping(address => Entitlement)) public entitlements;\n\n    // Map of claim token address -> Total amount claimed by all holders\n    mapping(address => uint256) internal _streamTotalClaimed;\n\n    /* EVENTS */\n\n    event Claim(\n        address operator,\n        address beneficiary,\n        uint256 ticketTokenId,\n        address claimToken,\n        uint256 releasedAmount\n    );\n\n    event ClaimMany(\n        address operator,\n        address beneficiary,\n        uint256[] ticketTokenIds,\n        address claimToken,\n        uint256 releasedAmount\n    );\n\n    function __ERC721MultiTokenStream_init(\n        address _ticketToken,\n        uint64 _lockedUntilTimestamp\n    ) internal onlyInitializing {\n        __ERC721MultiTokenStream_init_unchained(\n            _ticketToken,\n            _lockedUntilTimestamp\n        );\n    }\n\n    function __ERC721MultiTokenStream_init_unchained(\n        address _ticketToken,\n        uint64 _lockedUntilTimestamp\n    ) internal onlyInitializing {\n        ticketToken = _ticketToken;\n        lockedUntilTimestamp = _lockedUntilTimestamp;\n\n        _registerInterface(type(IERC721MultiTokenStream).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function lockUntil(uint64 newValue) public onlyOwner {\n        require(newValue > lockedUntilTimestamp, \"STREAM/CANNOT_REWIND\");\n        lockedUntilTimestamp = newValue;\n    }\n\n    /* PUBLIC */\n\n    receive() external payable {\n        require(msg.value > 0);\n    }\n\n    function claim(uint256 ticketTokenId) public {\n        claim(ticketTokenId, address(0));\n    }\n\n    function claim(uint256 ticketTokenId, address claimToken)\n        public\n        nonReentrant\n    {\n        /* CHECKS */\n\n        _beforeClaim(ticketTokenId, claimToken);\n\n        address owner = IERC721(ticketToken).ownerOf(ticketTokenId);\n        uint256 claimable = streamClaimableAmount(ticketTokenId, claimToken);\n        require(claimable > 0, \"STREAM/NOTHING_TO_CLAIM\");\n\n        /* EFFECTS */\n\n        entitlements[ticketTokenId][claimToken].totalClaimed += claimable;\n        entitlements[ticketTokenId][claimToken].lastClaimedAt = block.timestamp;\n\n        _streamTotalClaimed[claimToken] += claimable;\n\n        /* INTERACTIONS */\n\n        if (claimToken == address(0)) {\n            payable(address(owner)).sendValue(claimable);\n        } else {\n            IERC20(claimToken).transfer(owner, claimable);\n        }\n\n        /* LOGS */\n\n        emit Claim(_msgSender(), owner, ticketTokenId, claimToken, claimable);\n    }\n\n    function claim(uint256[] calldata ticketTokenIds) public {\n        claim(ticketTokenIds, address(0), _msgSender());\n    }\n\n    function claim(\n        uint256[] calldata ticketTokenIds,\n        address claimToken,\n        address owner\n    ) public nonReentrant {\n        uint256 totalClaimable;\n\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\n            _beforeClaim(ticketTokenIds[i], claimToken);\n\n            /* CHECKS */\n            require(\n                IERC721(ticketToken).ownerOf(ticketTokenIds[i]) == owner,\n                \"STREAM/NOT_NFT_OWNER\"\n            );\n\n            /* EFFECTS */\n            uint256 claimable = streamClaimableAmount(\n                ticketTokenIds[i],\n                claimToken\n            );\n\n            if (claimable > 0) {\n                entitlements[ticketTokenIds[i]][claimToken]\n                    .totalClaimed += claimable;\n                entitlements[ticketTokenIds[i]][claimToken]\n                    .lastClaimedAt = block.timestamp;\n\n                totalClaimable += claimable;\n            }\n        }\n\n        _streamTotalClaimed[claimToken] += totalClaimable;\n\n        /* INTERACTIONS */\n\n        if (claimToken == address(0)) {\n            payable(address(owner)).sendValue(totalClaimable);\n        } else {\n            IERC20(claimToken).transfer(owner, totalClaimable);\n        }\n\n        /* LOGS */\n\n        emit ClaimMany(\n            _msgSender(),\n            owner,\n            ticketTokenIds,\n            claimToken,\n            totalClaimable\n        );\n    }\n\n    /* READ ONLY */\n\n    function streamTotalSupply() public view returns (uint256) {\n        return streamTotalSupply(address(0));\n    }\n\n    function streamTotalSupply(address claimToken)\n        public\n        view\n        returns (uint256)\n    {\n        if (claimToken == address(0)) {\n            return _streamTotalClaimed[claimToken] + address(this).balance;\n        }\n\n        return\n            _streamTotalClaimed[claimToken] +\n            IERC20(claimToken).balanceOf(address(this));\n    }\n\n    function streamTotalClaimed() public view returns (uint256) {\n        return _streamTotalClaimed[address(0)];\n    }\n\n    function streamTotalClaimed(address claimToken)\n        public\n        view\n        returns (uint256)\n    {\n        return _streamTotalClaimed[claimToken];\n    }\n\n    function streamTotalClaimed(uint256 ticketTokenId)\n        public\n        view\n        returns (uint256)\n    {\n        return entitlements[ticketTokenId][address(0)].totalClaimed;\n    }\n\n    function streamTotalClaimed(uint256 ticketTokenId, address claimToken)\n        public\n        view\n        returns (uint256)\n    {\n        return entitlements[ticketTokenId][claimToken].totalClaimed;\n    }\n\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\n        public\n        view\n        returns (uint256)\n    {\n        return streamTotalClaimed(ticketTokenIds, address(0));\n    }\n\n    function streamTotalClaimed(\n        uint256[] calldata ticketTokenIds,\n        address claimToken\n    ) public view returns (uint256) {\n        uint256 claimed = 0;\n\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\n            claimed += entitlements[ticketTokenIds[i]][claimToken].totalClaimed;\n        }\n\n        return claimed;\n    }\n\n    function streamClaimableAmount(\n        uint256[] calldata ticketTokenIds,\n        address claimToken\n    ) public view returns (uint256) {\n        uint256 claimable = 0;\n\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\n            claimable += streamClaimableAmount(ticketTokenIds[i], claimToken);\n        }\n\n        return claimable;\n    }\n\n    function streamClaimableAmount(uint256 ticketTokenId)\n        public\n        view\n        returns (uint256)\n    {\n        return streamClaimableAmount(ticketTokenId, address(0));\n    }\n\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        uint256 totalReleased = _totalTokenShare(\n            _totalReleasedAmount(\n                streamTotalSupply(claimToken),\n                ticketTokenId,\n                claimToken\n            ),\n            ticketTokenId,\n            claimToken\n        );\n\n        return\n            totalReleased -\n            entitlements[ticketTokenId][claimToken].totalClaimed;\n    }\n\n    function _totalReleasedAmount(\n        uint256 streamTotalSupply_,\n        uint256 ticketTokenId_,\n        address claimToken_\n    ) internal view virtual returns (uint256);\n\n    function _totalTokenShare(\n        uint256 totalReleasedAmount_,\n        uint256 ticketTokenId_,\n        address claimToken_\n    ) internal view virtual returns (uint256);\n\n    /* INTERNAL */\n\n    function _beforeClaim(uint256 ticketTokenId_, address claimToken_)\n        internal\n        view\n        virtual\n    {}\n}\n"
    },
    "contracts/streams/ERC721/presets/ERC721EqualVestingStream.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../extensions/ERC721VestingReleaseExtension.sol\";\nimport \"../extensions/ERC721EqualSplitExtension.sol\";\n\ncontract ERC721EqualVestingStream is\n    Initializable,\n    Ownable,\n    ERC721VestingReleaseExtension,\n    ERC721EqualSplitExtension\n{\n    using Address for address;\n    using Address for address payable;\n\n    string public constant name = \"ERC721 Equal Vesting Stream\";\n\n    string public constant version = \"0.1\";\n\n    struct Config {\n        // Base\n        address ticketToken;\n        uint64 lockedUntilTimestamp;\n        // Vesting release extension\n        uint64 startTimestamp;\n        uint64 durationSeconds;\n        // Equal split extension\n        uint256 totalTickets;\n    }\n\n    /* INTERNAL */\n\n    constructor(Config memory config) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        _transferOwnership(deployer);\n        __ERC721MultiTokenStream_init(\n            config.ticketToken,\n            config.lockedUntilTimestamp\n        );\n        __ERC721VestingReleaseExtension_init(\n            config.startTimestamp,\n            config.durationSeconds\n        );\n        __ERC721EqualSplitExtension_init(config.totalTickets);\n    }\n}\n"
    },
    "contracts/streams/ERC721/extensions/ERC721EqualSplitExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../base/ERC721MultiTokenStream.sol\";\n\ninterface IERC721EqualSplitExtension {\n    function hasERC721EqualSplitExtension() external view returns (bool);\n\n    function setTotalTickets(uint256 newValue) external;\n}\n\nabstract contract ERC721EqualSplitExtension is\n    IERC721EqualSplitExtension,\n    Initializable,\n    ERC165Storage,\n    Ownable,\n    ERC721MultiTokenStream\n{\n    // Total number of ERC721 tokens to calculate their equal split share\n    uint256 public totalTickets;\n\n    /* INTERNAL */\n\n    function __ERC721EqualSplitExtension_init(uint256 _totalTickets)\n        internal\n        onlyInitializing\n    {\n        __ERC721EqualSplitExtension_init_unchained(_totalTickets);\n    }\n\n    function __ERC721EqualSplitExtension_init_unchained(uint256 _totalTickets)\n        internal\n        onlyInitializing\n    {\n        totalTickets = _totalTickets;\n\n        _registerInterface(type(IERC721EqualSplitExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function setTotalTickets(uint256 newValue) public onlyOwner {\n        require(lockedUntilTimestamp < block.timestamp, \"STREAM/CANNOT_REWIND\");\n        totalTickets = newValue;\n    }\n\n    /* PUBLIC */\n\n    function hasERC721EqualSplitExtension() external pure returns (bool) {\n        return true;\n    }\n\n    /* INTERNAL */\n\n    function _totalTokenShare(\n        uint256 totalReleasedAmount_,\n        uint256 ticketTokenId_,\n        address claimToken_\n    ) internal view override returns (uint256) {\n        ticketTokenId_;\n        claimToken_;\n\n        return totalReleasedAmount_ / totalTickets;\n    }\n}\n"
    },
    "contracts/streams/ERC721/presets/ERC721EqualInstantStream.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../extensions/ERC721InstantReleaseExtension.sol\";\nimport \"../extensions/ERC721EqualSplitExtension.sol\";\n\ncontract ERC721EqualInstantStream is\n    Initializable,\n    Ownable,\n    ERC721InstantReleaseExtension,\n    ERC721EqualSplitExtension\n{\n    string public constant name = \"ERC721 Equal Instant Stream\";\n\n    string public constant version = \"0.1\";\n\n    struct Config {\n        // Base\n        address ticketToken;\n        uint64 lockedUntilTimestamp;\n        // Equal split extension\n        uint256 totalTickets;\n    }\n\n    /* INTERNAL */\n\n    constructor(Config memory config) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        _transferOwnership(deployer);\n        __ERC721MultiTokenStream_init(\n            config.ticketToken,\n            config.lockedUntilTimestamp\n        );\n        __ERC721EqualSplitExtension_init(config.totalTickets);\n    }\n}\n"
    },
    "contracts/streams/ERC721/extensions/ERC721InstantReleaseExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../base/ERC721MultiTokenStream.sol\";\n\ninterface IERC721InstantReleaseExtension {\n    function hasERC721InstantReleaseExtension() external view returns (bool);\n}\n\nabstract contract ERC721InstantReleaseExtension is\n    IERC721InstantReleaseExtension,\n    Initializable,\n    ERC165Storage,\n    Ownable,\n    ERC721MultiTokenStream\n{\n    /* INIT */\n\n    function __ERC721InstantReleaseExtension_init() internal onlyInitializing {\n        __ERC721InstantReleaseExtension_init_unchained();\n    }\n\n    function __ERC721InstantReleaseExtension_init_unchained()\n        internal\n        onlyInitializing\n    {\n        _registerInterface(type(IERC721InstantReleaseExtension).interfaceId);\n    }\n\n    /* PUBLIC */\n\n    function hasERC721InstantReleaseExtension() external pure returns (bool) {\n        return true;\n    }\n\n    /* INTERNAL */\n\n    function _totalReleasedAmount(\n        uint256 streamTotalSupply_,\n        uint256 ticketTokenId_,\n        address claimToken_\n    ) internal pure override returns (uint256) {\n        ticketTokenId_;\n        claimToken_;\n\n        return streamTotalSupply_;\n    }\n}\n"
    },
    "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../extensions/ERC721InstantReleaseExtension.sol\";\nimport \"../extensions/ERC721ShareSplitExtension.sol\";\n\ncontract ERC721ShareInstantStream is\n    Initializable,\n    Ownable,\n    ERC721InstantReleaseExtension,\n    ERC721ShareSplitExtension\n{\n    string public constant name = \"ERC721 Share Instant Stream\";\n\n    string public constant version = \"0.1\";\n\n    struct Config {\n        // Base\n        address ticketToken;\n        uint64 lockedUntilTimestamp;\n        // Share split extension\n        uint256[] tokenIds;\n        uint256[] shares;\n    }\n\n    /* INTERNAL */\n\n    constructor(Config memory config) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        _transferOwnership(deployer);\n\n        __ERC721MultiTokenStream_init(\n            config.ticketToken,\n            config.lockedUntilTimestamp\n        );\n        __ERC721InstantReleaseExtension_init();\n        __ERC721ShareSplitExtension_init(config.tokenIds, config.shares);\n    }\n}\n"
    },
    "contracts/streams/ERC721/presets/ERC721ShareEmissionStream.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../extensions/ERC721EmissionReleaseExtension.sol\";\nimport \"../extensions/ERC721ShareSplitExtension.sol\";\n\ncontract ERC721ShareEmissionStream is\n    Initializable,\n    Ownable,\n    ERC721EmissionReleaseExtension,\n    ERC721ShareSplitExtension\n{\n    using Address for address;\n    using Address for address payable;\n\n    string public constant name = \"ERC721 Share Emission Stream\";\n\n    string public constant version = \"0.1\";\n\n    struct Config {\n        // Base\n        address ticketToken;\n        uint64 lockedUntilTimestamp;\n        // Emission release extension\n        uint256 emissionRate;\n        uint64 emissionTimeUnit;\n        uint64 emissionStart;\n        uint64 emissionEnd;\n        // Share split extension\n        uint256[] tokenIds;\n        uint256[] shares;\n    }\n\n    /* INTERNAL */\n\n    constructor(Config memory config) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        _transferOwnership(deployer);\n        __ERC721MultiTokenStream_init(\n            config.ticketToken,\n            config.lockedUntilTimestamp\n        );\n        __ERC721EmissionReleaseExtension_init(\n            config.emissionRate,\n            config.emissionTimeUnit,\n            config.emissionStart,\n            config.emissionEnd\n        );\n        __ERC721ShareSplitExtension_init(config.tokenIds, config.shares);\n    }\n\n    function _beforeClaim(uint256 ticketTokenId, address claimToken)\n        internal\n        view\n        override(ERC721MultiTokenStream, ERC721EmissionReleaseExtension)\n    {\n        return\n            ERC721EmissionReleaseExtension._beforeClaim(\n                ticketTokenId,\n                claimToken\n            );\n    }\n}\n"
    },
    "contracts/streams/ERC721/extensions/ERC721EmissionReleaseExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../base/ERC721MultiTokenStream.sol\";\n\ninterface IERC721EmissionReleaseExtension {\n    function hasERC721EmissionReleaseExtension() external view returns (bool);\n\n    function setEmissionRate(uint256 newValue) external;\n\n    function setEmissionTimeUnit(uint64 newValue) external;\n\n    function setEmissionStart(uint64 newValue) external;\n\n    function setEmissionEnd(uint64 newValue) external;\n\n    function releasedAmountUntil(uint64 calcUntil)\n        external\n        view\n        returns (uint256);\n\n    function emissionAmountUntil(uint64 calcUntil)\n        external\n        view\n        returns (uint256);\n}\n\nabstract contract ERC721EmissionReleaseExtension is\n    IERC721EmissionReleaseExtension,\n    Initializable,\n    ERC165Storage,\n    Ownable,\n    ERC721MultiTokenStream\n{\n    // Number of tokens released every `emissionTimeUnit`\n    uint256 public emissionRate;\n\n    // Time unit to release tokens, users can only claim once every `emissionTimeUnit`\n    uint64 public emissionTimeUnit;\n\n    // When emission and calculating tokens starts\n    uint64 public emissionStart;\n\n    // When to stop calculating the tokens released\n    uint64 public emissionEnd;\n\n    /* INIT */\n\n    function __ERC721EmissionReleaseExtension_init(\n        uint256 _emissionRate,\n        uint64 _emissionTimeUnit,\n        uint64 _emissionStart,\n        uint64 _emissionEnd\n    ) internal onlyInitializing {\n        __ERC721EmissionReleaseExtension_init_unchained(\n            _emissionRate,\n            _emissionTimeUnit,\n            _emissionStart,\n            _emissionEnd\n        );\n    }\n\n    function __ERC721EmissionReleaseExtension_init_unchained(\n        uint256 _emissionRate,\n        uint64 _emissionTimeUnit,\n        uint64 _emissionStart,\n        uint64 _emissionEnd\n    ) internal onlyInitializing {\n        emissionRate = _emissionRate;\n        emissionTimeUnit = _emissionTimeUnit;\n        emissionStart = _emissionStart;\n        emissionEnd = _emissionEnd;\n\n        _registerInterface(type(IERC721EmissionReleaseExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function setEmissionRate(uint256 newValue) public onlyOwner {\n        require(lockedUntilTimestamp < block.timestamp, \"STREAM/CONFIG_LOCKED\");\n        emissionRate = newValue;\n    }\n\n    function setEmissionTimeUnit(uint64 newValue) public onlyOwner {\n        require(lockedUntilTimestamp < block.timestamp, \"STREAM/CONFIG_LOCKED\");\n        emissionTimeUnit = newValue;\n    }\n\n    function setEmissionStart(uint64 newValue) public onlyOwner {\n        require(lockedUntilTimestamp < block.timestamp, \"STREAM/CONFIG_LOCKED\");\n        emissionStart = newValue;\n    }\n\n    function setEmissionEnd(uint64 newValue) public onlyOwner {\n        require(lockedUntilTimestamp < block.timestamp, \"STREAM/CONFIG_LOCKED\");\n        emissionEnd = newValue;\n    }\n\n    /* PUBLIC */\n\n    function hasERC721EmissionReleaseExtension() external pure returns (bool) {\n        return true;\n    }\n\n    function releasedAmountUntil(uint64 calcUntil)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            emissionRate *\n            // Intentionally rounded down:\n            ((calcUntil - emissionStart) / emissionTimeUnit);\n    }\n\n    function emissionAmountUntil(uint64 calcUntil)\n        public\n        view\n        returns (uint256)\n    {\n        return ((calcUntil - emissionStart) * emissionRate) / emissionTimeUnit;\n    }\n\n    /* INTERNAL */\n\n    function _totalReleasedAmount(\n        uint256 streamTotalSupply_,\n        uint256 ticketTokenId_,\n        address claimToken_\n    ) internal view override returns (uint256) {\n        streamTotalSupply_;\n        ticketTokenId_;\n        claimToken_;\n\n        if (block.timestamp < emissionStart) {\n            return 0;\n        } else if (emissionEnd > 0 && block.timestamp > emissionEnd) {\n            return releasedAmountUntil(emissionEnd);\n        } else {\n            return releasedAmountUntil(uint64(block.timestamp));\n        }\n    }\n\n    function _beforeClaim(uint256 ticketTokenId, address claimToken)\n        internal\n        view\n        virtual\n        override\n    {\n        require(emissionStart < block.timestamp, \"STREAM/NOT_STARTED\");\n\n        require(\n            entitlements[ticketTokenId][claimToken].lastClaimedAt <\n                block.timestamp - emissionTimeUnit,\n            \"STREAM/TOO_EARLY\"\n        );\n    }\n}\n"
    },
    "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"../extensions/ERC721EmissionReleaseExtension.sol\";\nimport \"../extensions/ERC721EqualSplitExtension.sol\";\n\ncontract ERC721EqualEmissionStream is\n    Initializable,\n    Ownable,\n    ERC721EmissionReleaseExtension,\n    ERC721EqualSplitExtension\n{\n    using Address for address;\n    using Address for address payable;\n\n    string public constant name = \"ERC721 Equal Emission Stream\";\n\n    string public constant version = \"0.1\";\n\n    struct Config {\n        // Base\n        address ticketToken;\n        uint64 lockedUntilTimestamp;\n        // Equal split extension\n        uint256 totalTickets;\n        // Emission release extension\n        uint256 emissionRate;\n        uint64 emissionTimeUnit;\n        uint64 emissionStart;\n        uint64 emissionEnd;\n    }\n\n    /* INTERNAL */\n\n    constructor(Config memory config) {\n        initialize(config, msg.sender);\n    }\n\n    function initialize(Config memory config, address deployer)\n        public\n        initializer\n    {\n        _transferOwnership(deployer);\n        __ERC721MultiTokenStream_init(\n            config.ticketToken,\n            config.lockedUntilTimestamp\n        );\n        __ERC721EmissionReleaseExtension_init(\n            config.emissionRate,\n            config.emissionTimeUnit,\n            config.emissionStart,\n            config.emissionEnd\n        );\n        __ERC721EqualSplitExtension_init(config.totalTickets);\n    }\n\n    function _beforeClaim(uint256 ticketTokenId, address claimToken)\n        internal\n        view\n        override(ERC721MultiTokenStream, ERC721EmissionReleaseExtension)\n    {\n        return\n            ERC721EmissionReleaseExtension._beforeClaim(\n                ticketTokenId,\n                claimToken\n            );\n    }\n}\n"
    },
    "contracts/streams/ERC721/core/ERC721SingleTokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nabstract contract ERC721SingleTokenDistributor is Ownable, ReentrancyGuard {\n    using Address for address;\n    using Address for address payable;\n\n    struct Entitlement {\n        uint256 totalClaimed;\n        uint256 lastClaimedAt;\n    }\n\n    // Config\n    address public claimToken;\n    address public ticketToken;\n\n    // Map of ticket token ID -> entitlement\n    mapping(uint256 => Entitlement) public entitlements;\n\n    // Total amount claimed by all holders\n    uint256 public streamTotalClaimed;\n\n    /* EVENTS */\n\n    event Claim(address claimer, uint256 ticketTokenId, uint256 releasedAmount);\n\n    event ClaimBulk(\n        address claimer,\n        uint256[] ticketTokenIds,\n        uint256 releasedAmount\n    );\n\n    function _setup(address _claimToken, address _ticketToken) internal {\n        claimToken = _claimToken;\n        ticketToken = _ticketToken;\n    }\n\n    /* PUBLIC */\n\n    receive() external payable {\n        require(msg.value > 0);\n        require(claimToken == address(0));\n    }\n\n    function claim(uint256 ticketTokenId) public nonReentrant {\n        /* CHECKS */\n\n        _beforeClaim(ticketTokenId);\n\n        require(\n            IERC721(ticketToken).ownerOf(ticketTokenId) == _msgSender(),\n            \"DISTRIBUTOR/NOT_NFT_OWNER\"\n        );\n\n        uint256 claimableAmount = calculateClaimableAmount(ticketTokenId);\n        require(claimableAmount > 0, \"DISTRIBUTOR/NOTHING_TO_CLAIM\");\n\n        /* EFFECTS */\n\n        entitlements[ticketTokenId].totalClaimed += claimableAmount;\n        entitlements[ticketTokenId].lastClaimedAt = block.timestamp;\n\n        streamTotalClaimed += claimableAmount;\n\n        /* INTERACTIONS */\n\n        if (claimToken == address(0)) {\n            payable(address(_msgSender())).sendValue(claimableAmount);\n        } else {\n            IERC20(claimToken).transfer(_msgSender(), claimableAmount);\n        }\n\n        /* LOGS */\n\n        emit Claim(_msgSender(), ticketTokenId, claimableAmount);\n    }\n\n    function claimBulk(uint256[] calldata ticketTokenIds) public nonReentrant {\n        uint256 totalClaimableAmount;\n\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\n            _beforeClaim(ticketTokenIds[i]);\n\n            /* CHECKS */\n            require(\n                IERC721(ticketToken).ownerOf(ticketTokenIds[i]) == _msgSender(),\n                \"DISTRIBUTOR/NOT_NFT_OWNER\"\n            );\n\n            /* EFFECTS */\n            uint256 claimableAmount = calculateClaimableAmount(\n                ticketTokenIds[i]\n            );\n\n            if (claimableAmount > 0) {\n                entitlements[ticketTokenIds[i]].totalClaimed += claimableAmount;\n                entitlements[ticketTokenIds[i]].lastClaimedAt = block.timestamp;\n\n                totalClaimableAmount += claimableAmount;\n            }\n        }\n\n        streamTotalClaimed += totalClaimableAmount;\n\n        /* INTERACTIONS */\n\n        if (claimToken == address(0)) {\n            payable(address(_msgSender())).sendValue(totalClaimableAmount);\n        } else {\n            IERC20(claimToken).transfer(_msgSender(), totalClaimableAmount);\n        }\n\n        /* LOGS */\n\n        emit ClaimBulk(_msgSender(), ticketTokenIds, totalClaimableAmount);\n    }\n\n    /* READ ONLY */\n\n    function streamTotalSupply() public view returns (uint256) {\n        return streamTotalClaimed + IERC20(claimToken).balanceOf(address(this));\n    }\n\n    function getTotalClaimedBulk(uint256[] calldata ticketTokenIds)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 totalClaimed = 0;\n\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\n            totalClaimed += entitlements[ticketTokenIds[i]].totalClaimed;\n        }\n\n        return totalClaimed;\n    }\n\n    function getTotalClaimableBulk(uint256[] calldata ticketTokenIds)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 totalClaimable = 0;\n\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\n            totalClaimable += calculateClaimableAmount(ticketTokenIds[i]);\n        }\n\n        return totalClaimable;\n    }\n\n    function calculateClaimableAmount(uint256 ticketTokenId)\n        public\n        view\n        virtual\n        returns (uint256 claimableAmount);\n\n    // INTERNAL\n\n    function _beforeClaim(uint256 ticketTokenId) internal virtual;\n}\n"
    },
    "contracts/streams/ERC721/core/ERC721MultiTokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nabstract contract ERC721MultiTokenDistributor is Ownable, ReentrancyGuard {\n    using Address for address;\n    using Address for address payable;\n\n    struct Entitlement {\n        uint256 totalClaimed;\n        uint256 lastClaimedAt;\n    }\n\n    // Config\n    address public ticketToken;\n\n    // Map of ticket token ID -> claim token address -> entitlement\n    mapping(uint256 => mapping(address => Entitlement)) public entitlements;\n\n    // Map of claim token address -> Total amount claimed by all holders\n    mapping(address => uint256) public streamTotalClaimed;\n\n    /* EVENTS */\n\n    event Claim(\n        address claimer,\n        uint256 ticketTokenId,\n        address claimToken,\n        uint256 releasedAmount\n    );\n\n    event ClaimBulk(\n        address claimer,\n        uint256[] ticketTokenIds,\n        address claimToken,\n        uint256 releasedAmount\n    );\n\n    function _setup(address _ticketToken) internal {\n        ticketToken = _ticketToken;\n    }\n\n    /* PUBLIC */\n\n    receive() external payable {\n        require(msg.value > 0);\n    }\n\n    function claim(uint256 ticketTokenId) public {\n        claim(ticketTokenId, address(0));\n    }\n\n    function claim(uint256 ticketTokenId, address claimToken)\n        public\n        nonReentrant\n    {\n        /* CHECKS */\n\n        _beforeClaim(ticketTokenId, claimToken);\n\n        require(\n            IERC721(ticketToken).ownerOf(ticketTokenId) == _msgSender(),\n            \"DISTRIBUTOR/NOT_NFT_OWNER\"\n        );\n\n        uint256 claimableAmount = calculateClaimableAmount(\n            ticketTokenId,\n            claimToken\n        );\n        require(claimableAmount > 0, \"DISTRIBUTOR/NOTHING_TO_CLAIM\");\n\n        /* EFFECTS */\n\n        entitlements[ticketTokenId][claimToken].totalClaimed += claimableAmount;\n        entitlements[ticketTokenId][claimToken].lastClaimedAt = block.timestamp;\n\n        streamTotalClaimed[claimToken] += claimableAmount;\n\n        /* INTERACTIONS */\n\n        if (claimToken == address(0)) {\n            payable(address(_msgSender())).sendValue(claimableAmount);\n        } else {\n            IERC20(claimToken).transfer(_msgSender(), claimableAmount);\n        }\n\n        /* LOGS */\n\n        emit Claim(_msgSender(), ticketTokenId, claimToken, claimableAmount);\n    }\n\n    function claimBulk(uint256[] calldata ticketTokenIds) public nonReentrant {\n        claimBulk(ticketTokenIds, address(0));\n    }\n\n    function claimBulk(uint256[] calldata ticketTokenIds, address claimToken)\n        public\n        nonReentrant\n    {\n        uint256 totalClaimableAmount;\n\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\n            _beforeClaim(ticketTokenIds[i], claimToken);\n\n            /* CHECKS */\n            require(\n                IERC721(ticketToken).ownerOf(ticketTokenIds[i]) == _msgSender(),\n                \"DISTRIBUTOR/NOT_NFT_OWNER\"\n            );\n\n            /* EFFECTS */\n            uint256 claimableAmount = calculateClaimableAmount(\n                ticketTokenIds[i],\n                claimToken\n            );\n\n            if (claimableAmount > 0) {\n                entitlements[ticketTokenIds[i]][claimToken]\n                    .totalClaimed += claimableAmount;\n                entitlements[ticketTokenIds[i]][claimToken]\n                    .lastClaimedAt = block.timestamp;\n\n                totalClaimableAmount += claimableAmount;\n            }\n        }\n\n        streamTotalClaimed[claimToken] += totalClaimableAmount;\n\n        /* INTERACTIONS */\n\n        if (claimToken == address(0)) {\n            payable(address(_msgSender())).sendValue(totalClaimableAmount);\n        } else {\n            IERC20(claimToken).transfer(_msgSender(), totalClaimableAmount);\n        }\n\n        /* LOGS */\n\n        emit ClaimBulk(\n            _msgSender(),\n            ticketTokenIds,\n            claimToken,\n            totalClaimableAmount\n        );\n    }\n\n    /* READ ONLY */\n\n    function streamTotalSupply() public view returns (uint256) {\n        return streamTotalSupply(address(0));\n    }\n\n    function streamTotalSupply(address claimToken)\n        public\n        view\n        returns (uint256)\n    {\n        if (claimToken == address(0)) {\n            return streamTotalClaimed[claimToken] + address(this).balance;\n        }\n\n        return\n            streamTotalClaimed[claimToken] +\n            IERC20(claimToken).balanceOf(address(this));\n    }\n\n    function getTotalClaimedBulk(uint256[] calldata ticketTokenIds)\n        public\n        view\n        returns (uint256)\n    {\n        return getTotalClaimedBulk(ticketTokenIds, address(0));\n    }\n\n    function getTotalClaimedBulk(\n        uint256[] calldata ticketTokenIds,\n        address claimToken\n    ) public view returns (uint256) {\n        uint256 totalClaimed = 0;\n\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\n            totalClaimed += entitlements[ticketTokenIds[i]][claimToken]\n                .totalClaimed;\n        }\n\n        return totalClaimed;\n    }\n\n    function getTotalClaimableBulk(\n        uint256[] calldata ticketTokenIds,\n        address claimToken\n    ) public view returns (uint256) {\n        uint256 totalClaimable = 0;\n\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\n            totalClaimable += calculateClaimableAmount(\n                ticketTokenIds[i],\n                claimToken\n            );\n        }\n\n        return totalClaimable;\n    }\n\n    function calculateClaimableAmount(uint256 ticketTokenId, address claimToken)\n        public\n        view\n        virtual\n        returns (uint256 claimableAmount);\n\n    // INTERNAL\n\n    function _beforeClaim(uint256 ticketTokenId, address claimToken)\n        internal\n        virtual;\n}\n"
    },
    "contracts/common/meta-transactions/UnorderedForwarder.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract UnorderedForwarder is EIP712, ReentrancyGuard {\n    using ECDSA for bytes32;\n\n    struct MetaTransaction {\n        address from;\n        address to;\n        uint256 value;\n        uint256 minGasPrice;\n        uint256 maxGasPrice;\n        uint256 expiresAt;\n        uint256 nonce;\n        bytes data;\n    }\n\n    bytes32 private constant _TYPEHASH =\n        keccak256(\n            \"MetaTransaction(address from,address to,uint256 value,uint256 minGasPrice,uint256 maxGasPrice,uint256 expiresAt,uint256 nonce,bytes data)\"\n        );\n\n    mapping(bytes32 => uint256) mtxHashToExecutedBlockNumber;\n\n    constructor() EIP712(\"UnorderedForwarder\", \"0.0.1\") {}\n\n    /// @dev Refunds up to `msg.value` leftover ETH at the end of the call.\n    modifier refundsAttachedEth() {\n        _;\n        uint256 remainingBalance = msg.value > address(this).balance\n            ? address(this).balance\n            : msg.value;\n        if (remainingBalance > 0) {\n            payable(msg.sender).transfer(remainingBalance);\n        }\n    }\n\n    /// @dev Ensures that the ETH balance of `this` does not go below the\n    ///      initial ETH balance before the call (excluding ETH attached to the call).\n    modifier doesNotReduceEthBalance() {\n        uint256 initialBalance = address(this).balance - msg.value;\n        _;\n        require(initialBalance <= address(this).balance, \"FWD_ETH_LEAK\");\n    }\n\n    function verify(MetaTransaction calldata mtx, bytes calldata signature)\n        public\n        view\n        returns (bytes32 mtxHash)\n    {\n        mtxHash = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    _TYPEHASH,\n                    mtx.from,\n                    mtx.to,\n                    mtx.value,\n                    mtx.minGasPrice,\n                    mtx.maxGasPrice,\n                    mtx.expiresAt,\n                    mtx.nonce,\n                    keccak256(mtx.data)\n                )\n            )\n        );\n\n        // Must not be expired.\n        require(mtx.expiresAt > block.timestamp, \"FWD_EXPIRED\");\n\n        // Must be signed by the signer.\n        require(\n            mtxHash.recover(signature) == mtx.from,\n            \"FWD_INVALID_SIGNATURE\"\n        );\n\n        // Transaction must not have been already executed.\n        require(mtxHashToExecutedBlockNumber[mtxHash] == 0, \"FWD_REPLAYED\");\n\n        return mtxHash;\n    }\n\n    function execute(MetaTransaction calldata mtx, bytes calldata signature)\n        public\n        payable\n        nonReentrant\n        doesNotReduceEthBalance\n        refundsAttachedEth\n        returns (bytes memory)\n    {\n        return _execute(mtx, signature);\n    }\n\n    function batchExecute(\n        MetaTransaction[] calldata mtxs,\n        bytes[] calldata signatures\n    )\n        public\n        payable\n        nonReentrant\n        doesNotReduceEthBalance\n        refundsAttachedEth\n        returns (bytes[] memory returnResults)\n    {\n        require(mtxs.length == signatures.length, \"FWD_MISMATCH_SIGNATURES\");\n\n        returnResults = new bytes[](mtxs.length);\n\n        for (uint256 i = 0; i < mtxs.length; ++i) {\n            returnResults[i] = _execute(mtxs[i], signatures[i]);\n        }\n    }\n\n    function _execute(MetaTransaction calldata mtx, bytes calldata signature)\n        internal\n        returns (bytes memory)\n    {\n        // Must have a valid gas price.\n        require(\n            mtx.minGasPrice <= tx.gasprice && tx.gasprice <= mtx.maxGasPrice,\n            \"FWD_INVALID_GAS\"\n        );\n\n        // Must have enough ETH.\n        require(mtx.value <= address(this).balance, \"FWD_INVALID_VALUE\");\n\n        bytes32 mtxHash = verify(mtx, signature);\n\n        mtxHashToExecutedBlockNumber[mtxHash] = block.number;\n\n        (bool success, bytes memory returndata) = mtx.to.call{value: mtx.value}(\n            abi.encodePacked(mtx.data, mtx.from)\n        );\n\n        require(success, \"FWD_CALL_FAILED\");\n\n        return returndata;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "contracts/misc/polygon/NativeMetaTransaction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nabstract contract NativeMetaTransaction is Context, EIP712 {\n    using SafeMath for uint256;\n\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\n        keccak256(\n            bytes(\n                \"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"\n            )\n        );\n\n    event MetaTransactionExecuted(\n        address userAddress,\n        address payable relayerAddress,\n        bytes functionSignature\n    );\n\n    mapping(address => uint256) nonces;\n\n    /*\n     * Meta transaction structure.\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\n     * He should call the desired function directly in that case.\n     */\n    struct MetaTransaction {\n        uint256 nonce;\n        address from;\n        bytes functionSignature;\n    }\n\n    function _msgSender() internal view override returns (address sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n\n        return sender;\n    }\n\n    function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            payable(msg.sender),\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }\n\n    function hashMetaTransaction(MetaTransaction memory metaTx)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    META_TRANSACTION_TYPEHASH,\n                    metaTx.nonce,\n                    metaTx.from,\n                    keccak256(metaTx.functionSignature)\n                )\n            );\n    }\n\n    function getNonce(address user) public view returns (uint256 nonce) {\n        nonce = nonces[user];\n    }\n\n    function verify(\n        address signer,\n        MetaTransaction memory metaTx,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) internal view returns (bool) {\n        require(signer != address(0), \"NativeMetaTransaction: INVALID_SIGNER\");\n        return\n            signer ==\n            ecrecover(\n                _hashTypedDataV4(hashMetaTransaction(metaTx)),\n                sigV,\n                sigR,\n                sigS\n            );\n    }\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721APrefixedMetadataExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"erc721a/contracts/ERC721A.sol\";\n\nimport {IERC721PrefixedMetadataExtension} from \"../../ERC721/extensions/ERC721PrefixedMetadataExtension.sol\";\n\n/**\n * @dev Extension to allow configuring tokens metadata URI.\n *      In this extension tokens will have a shared token URI prefix,\n *      therefore on tokenURI() token's ID will be appended to the base URI.\n *      It also allows configuring a fallback \"placeholder\" URI when prefix is not set yet.\n */\nabstract contract ERC721APrefixedMetadataExtension is\n    IERC721PrefixedMetadataExtension,\n    Ownable,\n    ERC165Storage,\n    ERC721A\n{\n    string internal _placeholderURI;\n    string internal _baseTokenURI;\n\n    bool public baseURIFrozen;\n\n    constructor(string memory placeholderURI_) {\n        _registerInterface(type(IERC721PrefixedMetadataExtension).interfaceId);\n\n        _placeholderURI = placeholderURI_;\n    }\n\n    /* ADMIN */\n\n    function setPlaceholderURI(string memory newValue) external onlyOwner {\n        _placeholderURI = newValue;\n    }\n\n    function setBaseURI(string memory newValue) external onlyOwner {\n        require(!baseURIFrozen, \"BASE_URI_FROZEN\");\n        _baseTokenURI = newValue;\n    }\n\n    function freezeBaseURI() external onlyOwner {\n        baseURIFrozen = true;\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721A)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function baseTokenURI() public view returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function placeholderURI() public view returns (string memory) {\n        return _placeholderURI;\n    }\n\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        virtual\n        override(ERC721A, IERC721PrefixedMetadataExtension)\n        returns (string memory)\n    {\n        return\n            bytes(_baseTokenURI).length > 0\n                ? string(\n                    abi.encodePacked(_baseTokenURI, Strings.toString(_tokenId))\n                )\n                : _placeholderURI;\n    }\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721APublicSaleExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AMinterExtension.sol\";\n\nimport {IERC721PublicSaleExtension} from \"../../ERC721/extensions/ERC721PublicSaleExtension.sol\";\n\n/**\n * @dev Extension to provide pre-sale and public-sale capabilities for collectors to mint for a specific price.\n */\nabstract contract ERC721APublicSaleExtension is\n    IERC721PublicSaleExtension,\n    Ownable,\n    ERC165Storage,\n    ERC721AMinterExtension,\n    ReentrancyGuard\n{\n    uint256 public publicSalePrice;\n    uint256 public publicSaleMaxMintPerTx;\n    bool public publicSaleStatus;\n\n    constructor(uint256 _publicSalePrice, uint256 _publicSaleMaxMintPerTx) {\n        _registerInterface(type(IERC721PublicSaleExtension).interfaceId);\n\n        publicSalePrice = _publicSalePrice;\n        publicSaleMaxMintPerTx = _publicSaleMaxMintPerTx;\n    }\n\n    /* ADMIN */\n\n    function setPublicSalePrice(uint256 newValue) external onlyOwner {\n        publicSalePrice = newValue;\n    }\n\n    function setPublicSaleMaxMintPerTx(uint256 newValue) external onlyOwner {\n        publicSaleMaxMintPerTx = newValue;\n    }\n\n    function togglePublicSaleStatus(bool isActive) external onlyOwner {\n        publicSaleStatus = isActive;\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721AMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function mintPublicSale(address to, uint256 count)\n        external\n        payable\n        nonReentrant\n    {\n        require(publicSaleStatus, \"PUBLIC_SALE_NOT_ACTIVE\");\n        require(count <= publicSaleMaxMintPerTx, \"PUBLIC_SALE_LIMIT\");\n        require(publicSalePrice * count <= msg.value, \"INSUFFICIENT_AMOUNT\");\n\n        _mintTo(to, count);\n    }\n}\n"
    },
    "contracts/factory/FlairFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./Clones.sol\";\n\ncontract FlairFactory {\n    event ProxyCreated(address indexed deployer, address indexed proxyAddress);\n\n    function cloneDeterministicSimple(\n        address implementation,\n        bytes32 salt,\n        bytes calldata data\n    ) external returns (address deployedProxy) {\n        bytes32 _salt = keccak256(abi.encodePacked(msg.sender, salt));\n        deployedProxy = Clones.cloneDeterministic(implementation, _salt);\n\n        if (data.length > 0) {\n            (bool success, bytes memory returndata) = deployedProxy.call(data);\n\n            if (!success) {\n                // Look for revert reason and bubble it up if present\n                if (returndata.length > 0) {\n                    // The easiest way to bubble the revert reason is using memory via assembly\n                    assembly {\n                        let returndata_size := mload(returndata)\n                        revert(add(32, returndata), returndata_size)\n                    }\n                } else {\n                    revert(\"FAILED_TO_CLONE\");\n                }\n            }\n        }\n\n        emit ProxyCreated(msg.sender, deployedProxy);\n    }\n\n    function predictDeterministicSimple(address implementation, bytes32 salt)\n        external\n        view\n        returns (address deployedProxy)\n    {\n        bytes32 _salt = keccak256(abi.encodePacked(msg.sender, salt));\n        deployedProxy = Clones.predictDeterministicAddress(\n            implementation,\n            _salt\n        );\n    }\n}\n"
    },
    "contracts/factory/Clones.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(\n                ptr,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(\n                add(ptr, 0x28),\n                0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\n            )\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721AOwnerMintExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AMinterExtension.sol\";\n\nimport {IERC721OwnerMintExtension} from \"../../ERC721/extensions/ERC721OwnerMintExtension.sol\";\n\n/**\n * @dev Extension to allow owner to mint directly without paying.\n */\nabstract contract ERC721AOwnerMintExtension is\n    IERC721OwnerMintExtension,\n    Ownable,\n    ERC165Storage,\n    ERC721AMinterExtension\n{\n    constructor() {\n        _registerInterface(type(IERC721OwnerMintExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function mintByOwner(address to, uint256 count) external onlyOwner {\n        _mintTo(to, count);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721AMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721AOwnerManagedExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AMinterExtension.sol\";\n\nimport {IERC721OwnerManagedExtension} from \"../../ERC721/extensions/ERC721OwnerManagedExtension.sol\";\n\n/**\n * @dev Extension to allow owner to transfer tokens on behalf of owners. Only useful for certain use-cases.\n */\nabstract contract ERC721AOwnerManagedExtension is\n    IERC721OwnerManagedExtension,\n    Ownable,\n    ERC165Storage,\n    ERC721AMinterExtension\n{\n    bool public managementPowerRevoked;\n\n    constructor() {\n        _registerInterface(type(IERC721OwnerManagedExtension).interfaceId);\n    }\n\n    /* ADMIN */\n\n    function revokeManagementPower() external onlyOwner {\n        managementPowerRevoked = true;\n    }\n\n    /* PUBLIC */\n\n    /**\n     * Override isApprovedForAll to allow owner to transfer tokens.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override(ERC721A)\n        returns (bool)\n    {\n        if (!managementPowerRevoked) {\n            if (operator == super.owner()) {\n                return true;\n            }\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721AMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/collections/ERC721A/extensions/ERC721AFreeMintExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AMinterExtension.sol\";\n\nimport {IERC721FreeMintExtension} from \"../../ERC721/extensions/ERC721FreeMintExtension.sol\";\n\n/**\n * @dev Extension to allow anyone to mint directly without paying.\n */\nabstract contract ERC721AFreeMintExtension is\n    IERC721FreeMintExtension,\n    ERC165Storage,\n    ERC721AMinterExtension\n{\n    constructor() {\n        _registerInterface(type(IERC721FreeMintExtension).interfaceId);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721AMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function mintFree(address to, uint256 count) external {\n        _mintTo(to, count);\n    }\n}\n"
    },
    "contracts/collections/ERC721/extensions/ERC721FreeMintExtension.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./ERC721AutoIdMinterExtension.sol\";\n\ninterface IERC721FreeMintExtension {\n    function mintFree(address to, uint256 count) external;\n}\n\n/**\n * @dev Extension to allow anyone to mint directly without paying.\n */\nabstract contract ERC721FreeMintExtension is\n    IERC721FreeMintExtension,\n    Initializable,\n    ERC165Storage,\n    ERC721AutoIdMinterExtension\n{\n    function __ERC721FreeMintExtension_init() internal onlyInitializing {\n        __ERC721FreeMintExtension_init_unchained();\n    }\n\n    function __ERC721FreeMintExtension_init_unchained()\n        internal\n        onlyInitializing\n    {\n        _registerInterface(type(IERC721FreeMintExtension).interfaceId);\n    }\n\n    /* PUBLIC */\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165Storage, ERC721AutoIdMinterExtension)\n        returns (bool)\n    {\n        return ERC165Storage.supportsInterface(interfaceId);\n    }\n\n    function mintFree(address to, uint256 count) external {\n        _mintTo(to, count);\n    }\n}\n"
    },
    "contracts/test/TestERC721.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\ncontract TestERC721 is ERC721(\"FlairTest\", \"FTS\"), ERC721Enumerable {\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721, ERC721Enumerable) {\n        return super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function mintExact(address to, uint256 tokenId) public returns (bool) {\n        _mint(to, tokenId);\n        return true;\n    }\n\n    function mintBulk(address to, uint256 total) public returns (bool) {\n        for (uint256 i = 0; i < total; i++) {\n            _mint(to, totalSupply());\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20(\"FlairTest\", \"FTS\") {\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 5
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}