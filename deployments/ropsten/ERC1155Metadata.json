{
  "address": "0x6d018457d731E1EFA8700a454a52e46c2Ce1451e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURILocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackURILocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastLockedTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "uriBatch",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1da39cbdfe3834ad40ad4e0d9001c459a0fc7cbd429ec593c43e66cfaf377055",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x6d018457d731E1EFA8700a454a52e46c2Ce1451e",
    "transactionIndex": 26,
    "gasUsed": "591402",
    "logsBloom": "0x
    "blockHash": "0xc0eb4bebe9822047827479e8779f068c4d1f94b95aa68028a8a78ebb65410b7e",
    "transactionHash": "0x1da39cbdfe3834ad40ad4e0d9001c459a0fc7cbd429ec593c43e66cfaf377055",
    "logs": [],
    "blockNumber": 13025103,
    "cumulativeGasUsed": "5090336",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "a620b5788c19d57e396989fa51ca481a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLockedTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"uriBatch\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:peer-dependencies\":\"eip165:0xd9b67a26\",\"custom:provides-interfaces\":\"0x0e89341c 0xc6575680\",\"custom:type\":\"eip-2535-facet\",\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC1155 - Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uri(uint256)\":{\"notice\":\"inheritdoc IERC1155Metadata\"}},\"notice\":\"Provides metadata for ERC1155 tokens according to standard. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":\"ERC1155Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IERC1155Metadata.sol\\\";\\nimport \\\"./IERC1155MetadataExtra.sol\\\";\\nimport \\\"./ERC1155MetadataInternal.sol\\\";\\nimport \\\"./ERC1155MetadataStorage.sol\\\";\\n\\n/**\\n * @title ERC1155 - Metadata\\n * @notice Provides metadata for ERC1155 tokens according to standard. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\\n * @dev See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:peer-dependencies eip165:0xd9b67a26\\n * @custom:provides-interfaces 0x0e89341c 0xc6575680\\n */\\ncontract ERC1155Metadata is IERC1155Metadata, IERC1155MetadataExtra, ERC1155MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId) public view virtual returns (string memory) {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage.layout();\\n\\n        string memory _tokenIdURI = l.tokenURIs[tokenId];\\n        string memory _baseURI = l.baseURI;\\n\\n        if (bytes(_baseURI).length == 0) {\\n            return _tokenIdURI;\\n        } else if (bytes(_tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, _tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(_baseURI, l.fallbackURI, Strings.toString(tokenId)));\\n        }\\n    }\\n\\n    function uriBatch(uint256[] calldata tokenIds) external view returns (string[] memory) {\\n        string[] memory uris = new string[](tokenIds.length);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uris[i] = uri(tokenIds[i]);\\n        }\\n\\n        return uris;\\n    }\\n\\n    function baseURI() external view returns (string memory) {\\n        return ERC1155MetadataStorage.layout().baseURI;\\n    }\\n\\n    function fallbackURI() external view returns (string memory) {\\n        return ERC1155MetadataStorage.layout().fallbackURI;\\n    }\\n\\n    function baseURILocked() external view returns (bool) {\\n        return ERC1155MetadataStorage.layout().baseURILocked;\\n    }\\n\\n    function fallbackURILocked() external view returns (bool) {\\n        return ERC1155MetadataStorage.layout().fallbackURILocked;\\n    }\\n\\n    function lastLockedTokenId() external view returns (uint256) {\\n        return ERC1155MetadataStorage.layout().lastLockedTokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x4478c6758a95cd299024fa3d33db7ad81187dc6a552cc006d16cbd4b5f5cc3ed\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC1155MetadataEvents.sol\\\";\\nimport \\\"./ERC1155MetadataStorage.sol\\\";\\n\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataEvents {\\n    function _setBaseURI(string memory baseURI) internal {\\n        require(\\n            !ERC1155MetadataStorage.layout().baseURILocked,\\n            \\\"ERC1155Metadata: baseURI locked\\\"\\n        );\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setFallbackURI(string memory baseURI) internal {\\n        require(\\n            !ERC1155MetadataStorage.layout().fallbackURILocked,\\n            \\\"ERC1155Metadata: fallbackURI locked\\\"\\n        );\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal {\\n        require(\\n            tokenId > ERC1155MetadataStorage.layout().lastLockedTokenId,\\n            \\\"ERC1155Metadata: tokenURI locked\\\"\\n        );\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n\\n    function _lockBaseURI() internal {\\n        ERC1155MetadataStorage.layout().baseURILocked = true;\\n    }\\n\\n    function _lockFallbackURI() internal {\\n        ERC1155MetadataStorage.layout().fallbackURILocked = true;\\n    }\\n\\n    function _lockURIUntil(uint256 tokenId) internal {\\n        ERC1155MetadataStorage.layout().lastLockedTokenId = tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0xe77919e5dd2c400c34799ec95531e24a4a71a3b994f6eb5bbbb749bc7f666c17\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Metadata\\\");\\n\\n    struct Layout {\\n        string baseURI;\\n        string fallbackURI;\\n        bool baseURILocked;\\n        bool fallbackURILocked;\\n        uint256 lastLockedTokenId;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x53fcdae851ca8d9b6adcb99756d9e0ea2560d27224daf3e8ad701b9ed96c5d23\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155Metadata {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x06e9faa914aad892109cae7c0ae1c7f5f185510536cb75e6afdf49051e100e38\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155MetadataEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155MetadataEvents {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0x6c2413e5d685f420399db32888a545321422521fb5e4ffb72de3c5e53cbd503c\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155MetadataExtra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155MetadataExtra {\\n    function baseURI() external view returns (string memory);\\n\\n    function fallbackURI() external view returns (string memory);\\n\\n    function baseURILocked() external view returns (bool);\\n\\n    function fallbackURILocked() external view returns (bool);\\n\\n    function lastLockedTokenId() external view returns (uint256);\\n\\n    function uriBatch(uint256[] calldata tokenIds) external view returns (string[] memory);\\n}\\n\",\"keccak256\":\"0x0a8c83ac3cd642c7291a91199fd99b308840d3f323e42c9db99e86e6d26bf15b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109be806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635d148e5c1161005b5780635d148e5c146100ea5780636b95c504146101145780636c0360eb1461014457806396d7e2291461014c57600080fd5b8063067f0848146100825780630c7d9752146100c25780630e89341c146100d7575b600080fd5b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceed54610100900460ff165b60405190151581526020015b60405180910390f35b6100ca61016c565b6040516100b99190610672565b6100ca6100e536600461068c565b610220565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceed5460ff166100ad565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceee546040519081526020016100b9565b6100ca6103f4565b61015f61015a3660046106a5565b610422565b6040516100b9919061071a565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb600101805461019d9061077c565b80601f01602080910402602001604051908101604052809291908181526020018280546101c99061077c565b80156102165780601f106101eb57610100808354040283529160200191610216565b820191906000526020600020905b8154815290600101906020018083116101f957829003601f168201915b5050505050905090565b60008181527f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceef6020526040812080546060927f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb92909161027f9061077c565b80601f01602080910402602001604051908101604052809291908181526020018280546102ab9061077c565b80156102f85780601f106102cd576101008083540402835291602001916102f8565b820191906000526020600020905b8154815290600101906020018083116102db57829003601f168201915b5050505050905060008260000180546103109061077c565b80601f016020809104026020016040519081016040528092919081815260200182805461033c9061077c565b80156103895780601f1061035e57610100808354040283529160200191610389565b820191906000526020600020905b81548152906001019060200180831161036c57829003601f168201915b5050505050905080516000036103a157509392505050565b8151156103d45780826040516020016103bb9291906107d2565b6040516020818303038152906040529350505050919050565b80836001016103e2876104d9565b6040516020016103bb93929190610801565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb805461019d9061077c565b606060008267ffffffffffffffff81111561043f5761043f6108c0565b60405190808252806020026020018201604052801561047257816020015b606081526020019060019003908161045d5790505b50905060005b838110156104d1576104a1858583818110610495576104956108d6565b90506020020135610220565b8282815181106104b3576104b36108d6565b602002602001018190525080806104c990610902565b915050610478565b509392505050565b60608160000361051c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610546578061053081610902565b915061053f9050600a83610931565b9150610520565b60008167ffffffffffffffff811115610561576105616108c0565b6040519080825280601f01601f19166020018201604052801561058b576020820181803683370190505b5090505b841561060e576105a0600183610945565b91506105ad600a8661095c565b6105b8906030610970565b60f81b8183815181106105cd576105cd6108d6565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610607600a86610931565b945061058f565b949350505050565b60005b83811015610631578181015183820152602001610619565b83811115610640576000848401525b50505050565b6000815180845261065e816020860160208601610616565b601f01601f19169290920160200192915050565b6020815260006106856020830184610646565b9392505050565b60006020828403121561069e57600080fd5b5035919050565b600080602083850312156106b857600080fd5b823567ffffffffffffffff808211156106d057600080fd5b818501915085601f8301126106e457600080fd5b8135818111156106f357600080fd5b8660208260051b850101111561070857600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561076f57603f1988860301845261075d858351610646565b94509285019290850190600101610741565b5092979650505050505050565b600181811c9082168061079057607f821691505b6020821081036107b057634e487b7160e01b600052602260045260246000fd5b50919050565b600081516107c8818560208601610616565b9290920192915050565b600083516107e4818460208801610616565b8351908301906107f8818360208801610616565b01949350505050565b6000845160206108148285838a01610616565b855491840191600090600181811c908083168061083257607f831692505b858310810361084f57634e487b7160e01b85526022600452602485fd5b8080156108635760018114610878576108a5565b60ff19851688528315158402880195506108a5565b60008c81526020902060005b8581101561089d5781548a820152908401908801610884565b505083880195505b50505050506108b481876107b6565b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610914576109146108ec565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826109405761094061091b565b500490565b600082821015610957576109576108ec565b500390565b60008261096b5761096b61091b565b500690565b60008219821115610983576109836108ec565b50019056fea26469706673582212208a939d158d4672c2d08775d2ffda6d80737cbed4c67e76dccecaac9483d8863164736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80635d148e5c1161005b5780635d148e5c146100ea5780636b95c504146101145780636c0360eb1461014457806396d7e2291461014c57600080fd5b8063067f0848146100825780630c7d9752146100c25780630e89341c146100d7575b600080fd5b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceed54610100900460ff165b60405190151581526020015b60405180910390f35b6100ca61016c565b6040516100b99190610672565b6100ca6100e536600461068c565b610220565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceed5460ff166100ad565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceee546040519081526020016100b9565b6100ca6103f4565b61015f61015a3660046106a5565b610422565b6040516100b9919061071a565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb600101805461019d9061077c565b80601f01602080910402602001604051908101604052809291908181526020018280546101c99061077c565b80156102165780601f106101eb57610100808354040283529160200191610216565b820191906000526020600020905b8154815290600101906020018083116101f957829003601f168201915b5050505050905090565b60008181527f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceef6020526040812080546060927f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb92909161027f9061077c565b80601f01602080910402602001604051908101604052809291908181526020018280546102ab9061077c565b80156102f85780601f106102cd576101008083540402835291602001916102f8565b820191906000526020600020905b8154815290600101906020018083116102db57829003601f168201915b5050505050905060008260000180546103109061077c565b80601f016020809104026020016040519081016040528092919081815260200182805461033c9061077c565b80156103895780601f1061035e57610100808354040283529160200191610389565b820191906000526020600020905b81548152906001019060200180831161036c57829003601f168201915b5050505050905080516000036103a157509392505050565b8151156103d45780826040516020016103bb9291906107d2565b6040516020818303038152906040529350505050919050565b80836001016103e2876104d9565b6040516020016103bb93929190610801565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb805461019d9061077c565b606060008267ffffffffffffffff81111561043f5761043f6108c0565b60405190808252806020026020018201604052801561047257816020015b606081526020019060019003908161045d5790505b50905060005b838110156104d1576104a1858583818110610495576104956108d6565b90506020020135610220565b8282815181106104b3576104b36108d6565b602002602001018190525080806104c990610902565b915050610478565b509392505050565b60608160000361051c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610546578061053081610902565b915061053f9050600a83610931565b9150610520565b60008167ffffffffffffffff811115610561576105616108c0565b6040519080825280601f01601f19166020018201604052801561058b576020820181803683370190505b5090505b841561060e576105a0600183610945565b91506105ad600a8661095c565b6105b8906030610970565b60f81b8183815181106105cd576105cd6108d6565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610607600a86610931565b945061058f565b949350505050565b60005b83811015610631578181015183820152602001610619565b83811115610640576000848401525b50505050565b6000815180845261065e816020860160208601610616565b601f01601f19169290920160200192915050565b6020815260006106856020830184610646565b9392505050565b60006020828403121561069e57600080fd5b5035919050565b600080602083850312156106b857600080fd5b823567ffffffffffffffff808211156106d057600080fd5b818501915085601f8301126106e457600080fd5b8135818111156106f357600080fd5b8660208260051b850101111561070857600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561076f57603f1988860301845261075d858351610646565b94509285019290850190600101610741565b5092979650505050505050565b600181811c9082168061079057607f821691505b6020821081036107b057634e487b7160e01b600052602260045260246000fd5b50919050565b600081516107c8818560208601610616565b9290920192915050565b600083516107e4818460208801610616565b8351908301906107f8818360208801610616565b01949350505050565b6000845160206108148285838a01610616565b855491840191600090600181811c908083168061083257607f831692505b858310810361084f57634e487b7160e01b85526022600452602485fd5b8080156108635760018114610878576108a5565b60ff19851688528315158402880195506108a5565b60008c81526020902060005b8581101561089d5781548a820152908401908801610884565b505083880195505b50505050506108b481876107b6565b98975050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610914576109146108ec565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826109405761094061091b565b500490565b600082821015610957576109576108ec565b500390565b60008261096b5761096b61091b565b500690565b60008219821115610983576109836108ec565b50019056fea26469706673582212208a939d158d4672c2d08775d2ffda6d80737cbed4c67e76dccecaac9483d8863164736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:peer-dependencies": "eip165:0xd9b67a26",
    "custom:provides-interfaces": "0x0e89341c 0xc6575680",
    "custom:type": "eip-2535-facet",
    "details": "See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions",
    "kind": "dev",
    "methods": {},
    "title": "ERC1155 - Metadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "uri(uint256)": {
        "notice": "inheritdoc IERC1155Metadata"
      }
    },
    "notice": "Provides metadata for ERC1155 tokens according to standard. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}