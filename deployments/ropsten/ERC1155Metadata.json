{
  "address": "0xc456cdA6dE7e99B321f4dAF260319888a3D42cBe",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURILocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackURILocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastLockedTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a3965f1b0eb1e4c643ebb2c60b3ede81ff3faf17055d05e36b4fac06208156a",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xc456cdA6dE7e99B321f4dAF260319888a3D42cBe",
    "transactionIndex": 14,
    "gasUsed": "492099",
    "logsBloom": "0x
    "blockHash": "0x5f18069e117fa182405286ddb1d371908c52b105b8bebf54d1c395f2bf7fc471",
    "transactionHash": "0x4a3965f1b0eb1e4c643ebb2c60b3ede81ff3faf17055d05e36b4fac06208156a",
    "logs": [],
    "blockNumber": 13021388,
    "cumulativeGasUsed": "5063229",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "c7a657095279b7f55fee4ffa475f3823",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLockedTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:peer-dependencies\":\"0xd9b67a26\",\"custom:provides-interfaces\":\"0x0e89341c 0x5080b4a9\",\"custom:type\":\"eip-2535-facet\",\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC1155 - Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uri(uint256)\":{\"notice\":\"inheritdoc IERC1155Metadata\"}},\"notice\":\"Provides metadata for ERC1155 tokens according to standard. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":\"ERC1155Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IERC1155Metadata.sol\\\";\\nimport \\\"./IERC1155MetadataExtra.sol\\\";\\nimport \\\"./ERC1155MetadataInternal.sol\\\";\\nimport \\\"./ERC1155MetadataStorage.sol\\\";\\n\\n/**\\n * @title ERC1155 - Metadata\\n * @notice Provides metadata for ERC1155 tokens according to standard. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\\n * @dev See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:peer-dependencies 0xd9b67a26\\n * @custom:provides-interfaces 0x0e89341c 0x5080b4a9\\n */\\ncontract ERC1155Metadata is IERC1155Metadata, IERC1155MetadataExtra, ERC1155MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId) public view virtual returns (string memory) {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage.layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, l.fallbackURI, Strings.toString(tokenId)));\\n        }\\n    }\\n\\n    function baseURI() external view returns (string memory) {\\n        return ERC1155MetadataStorage.layout().baseURI;\\n    }\\n\\n    function fallbackURI() external view returns (string memory) {\\n        return ERC1155MetadataStorage.layout().fallbackURI;\\n    }\\n\\n    function baseURILocked() external view returns (bool) {\\n        return ERC1155MetadataStorage.layout().baseURILocked;\\n    }\\n\\n    function fallbackURILocked() external view returns (bool) {\\n        return ERC1155MetadataStorage.layout().fallbackURILocked;\\n    }\\n\\n    function lastLockedTokenId() external view returns (uint256) {\\n        return ERC1155MetadataStorage.layout().lastLockedTokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x685d619a415144c3275d9ec8d179d364a6e700d794cae4fd672f10bc9fabf058\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC1155MetadataEvents.sol\\\";\\nimport \\\"./ERC1155MetadataStorage.sol\\\";\\n\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataEvents {\\n    function _setBaseURI(string memory baseURI) internal {\\n        require(\\n            !ERC1155MetadataStorage.layout().baseURILocked,\\n            \\\"ERC1155Metadata: baseURI locked\\\"\\n        );\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setFallbackURI(string memory baseURI) internal {\\n        require(\\n            !ERC1155MetadataStorage.layout().fallbackURILocked,\\n            \\\"ERC1155Metadata: fallbackURI locked\\\"\\n        );\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal {\\n        require(\\n            tokenId > ERC1155MetadataStorage.layout().lastLockedTokenId,\\n            \\\"ERC1155Metadata: tokenURI locked\\\"\\n        );\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n\\n    function _lockBaseURI() internal {\\n        ERC1155MetadataStorage.layout().baseURILocked = true;\\n    }\\n\\n    function _lockFallbackURI() internal {\\n        ERC1155MetadataStorage.layout().fallbackURILocked = true;\\n    }\\n\\n    function _lockURIUntil(uint256 tokenId) internal {\\n        ERC1155MetadataStorage.layout().lastLockedTokenId = tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0xe77919e5dd2c400c34799ec95531e24a4a71a3b994f6eb5bbbb749bc7f666c17\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Metadata\\\");\\n\\n    struct Layout {\\n        string baseURI;\\n        string fallbackURI;\\n        bool baseURILocked;\\n        bool fallbackURILocked;\\n        uint256 lastLockedTokenId;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x53fcdae851ca8d9b6adcb99756d9e0ea2560d27224daf3e8ad701b9ed96c5d23\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155Metadata {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x06e9faa914aad892109cae7c0ae1c7f5f185510536cb75e6afdf49051e100e38\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155MetadataEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155MetadataEvents {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0x6c2413e5d685f420399db32888a545321422521fb5e4ffb72de3c5e53cbd503c\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155MetadataExtra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155MetadataExtra {\\n    function baseURI() external view returns (string memory);\\n\\n    function fallbackURI() external view returns (string memory);\\n\\n    function baseURILocked() external view returns (bool);\\n\\n    function fallbackURILocked() external view returns (bool);\\n\\n    function lastLockedTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x48e589681259ad410ac7fa5c9197a7290ad272fa75109449dc807f574a2bf667\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107f2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80635d148e5c116100505780635d148e5c146100df5780636b95c504146101095780636c0360eb1461013957600080fd5b8063067f0848146100775780630c7d9752146100b75780630e89341c146100cc575b600080fd5b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceed54610100900460ff165b60405190151581526020015b60405180910390f35b6100bf610141565b6040516100ae9190610564565b6100bf6100da366004610597565b6101f5565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceed5460ff166100a2565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceee546040519081526020016100ae565b6100bf6103c9565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb6001018054610172906105b0565b80601f016020809104026020016040519081016040528092919081815260200182805461019e906105b0565b80156101eb5780601f106101c0576101008083540402835291602001916101eb565b820191906000526020600020905b8154815290600101906020018083116101ce57829003601f168201915b5050505050905090565b60008181527f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceef6020526040812080546060927f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb929091610254906105b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610280906105b0565b80156102cd5780601f106102a2576101008083540402835291602001916102cd565b820191906000526020600020905b8154815290600101906020018083116102b057829003601f168201915b5050505050905060008260000180546102e5906105b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610311906105b0565b801561035e5780601f106103335761010080835404028352916020019161035e565b820191906000526020600020905b81548152906001019060200180831161034157829003601f168201915b50505050509050805160000361037657509392505050565b8151156103a9578082604051602001610390929190610606565b6040516020818303038152906040529350505050919050565b80836001016103b7876103f7565b60405160200161039093929190610635565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb8054610172906105b0565b60608160000361043a57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610464578061044e8161070a565b915061045d9050600a83610739565b915061043e565b60008167ffffffffffffffff81111561047f5761047f61074d565b6040519080825280601f01601f1916602001820160405280156104a9576020820181803683370190505b5090505b841561052c576104be600183610763565b91506104cb600a8661077a565b6104d690603061078e565b60f81b8183815181106104eb576104eb6107a6565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610525600a86610739565b94506104ad565b949350505050565b60005b8381101561054f578181015183820152602001610537565b8381111561055e576000848401525b50505050565b6020815260008251806020840152610583816040850160208701610534565b601f01601f19169190910160400192915050565b6000602082840312156105a957600080fd5b5035919050565b600181811c908216806105c457607f821691505b6020821081036105e457634e487b7160e01b600052602260045260246000fd5b50919050565b600081516105fc818560208601610534565b9290920192915050565b60008351610618818460208801610534565b83519083019061062c818360208801610534565b01949350505050565b6000845160206106488285838a01610534565b855491840191600090600181811c908083168061066657607f831692505b858310810361068357634e487b7160e01b85526022600452602485fd5b80801561069757600181146106ac576106d9565b60ff19851688528315158402880195506106d9565b60008c81526020902060005b858110156106d15781548a8201529084019088016106b8565b505083880195505b50505050506106e881876105ea565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161071c5761071c6106f4565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261074857610748610723565b500490565b634e487b7160e01b600052604160045260246000fd5b600082821015610775576107756106f4565b500390565b60008261078957610789610723565b500690565b600082198211156107a1576107a16106f4565b500190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212209ee1bb0c04bf83afc2f197bc6deecb16a4cbdf735e3cc1a87487526cfc72438f64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80635d148e5c116100505780635d148e5c146100df5780636b95c504146101095780636c0360eb1461013957600080fd5b8063067f0848146100775780630c7d9752146100b75780630e89341c146100cc575b600080fd5b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceed54610100900460ff165b60405190151581526020015b60405180910390f35b6100bf610141565b6040516100ae9190610564565b6100bf6100da366004610597565b6101f5565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceed5460ff166100a2565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceee546040519081526020016100ae565b6100bf6103c9565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb6001018054610172906105b0565b80601f016020809104026020016040519081016040528092919081815260200182805461019e906105b0565b80156101eb5780601f106101c0576101008083540402835291602001916101eb565b820191906000526020600020905b8154815290600101906020018083116101ce57829003601f168201915b5050505050905090565b60008181527f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceef6020526040812080546060927f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb929091610254906105b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610280906105b0565b80156102cd5780601f106102a2576101008083540402835291602001916102cd565b820191906000526020600020905b8154815290600101906020018083116102b057829003601f168201915b5050505050905060008260000180546102e5906105b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610311906105b0565b801561035e5780601f106103335761010080835404028352916020019161035e565b820191906000526020600020905b81548152906001019060200180831161034157829003601f168201915b50505050509050805160000361037657509392505050565b8151156103a9578082604051602001610390929190610606565b6040516020818303038152906040529350505050919050565b80836001016103b7876103f7565b60405160200161039093929190610635565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb8054610172906105b0565b60608160000361043a57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610464578061044e8161070a565b915061045d9050600a83610739565b915061043e565b60008167ffffffffffffffff81111561047f5761047f61074d565b6040519080825280601f01601f1916602001820160405280156104a9576020820181803683370190505b5090505b841561052c576104be600183610763565b91506104cb600a8661077a565b6104d690603061078e565b60f81b8183815181106104eb576104eb6107a6565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610525600a86610739565b94506104ad565b949350505050565b60005b8381101561054f578181015183820152602001610537565b8381111561055e576000848401525b50505050565b6020815260008251806020840152610583816040850160208701610534565b601f01601f19169190910160400192915050565b6000602082840312156105a957600080fd5b5035919050565b600181811c908216806105c457607f821691505b6020821081036105e457634e487b7160e01b600052602260045260246000fd5b50919050565b600081516105fc818560208601610534565b9290920192915050565b60008351610618818460208801610534565b83519083019061062c818360208801610534565b01949350505050565b6000845160206106488285838a01610534565b855491840191600090600181811c908083168061066657607f831692505b858310810361068357634e487b7160e01b85526022600452602485fd5b80801561069757600181146106ac576106d9565b60ff19851688528315158402880195506106d9565b60008c81526020902060005b858110156106d15781548a8201529084019088016106b8565b505083880195505b50505050506106e881876105ea565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161071c5761071c6106f4565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261074857610748610723565b500490565b634e487b7160e01b600052604160045260246000fd5b600082821015610775576107756106f4565b500390565b60008261078957610789610723565b500690565b600082198211156107a1576107a16106f4565b500190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212209ee1bb0c04bf83afc2f197bc6deecb16a4cbdf735e3cc1a87487526cfc72438f64736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:peer-dependencies": "0xd9b67a26",
    "custom:provides-interfaces": "0x0e89341c 0x5080b4a9",
    "custom:type": "eip-2535-facet",
    "details": "See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions",
    "kind": "dev",
    "methods": {},
    "title": "ERC1155 - Metadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "uri(uint256)": {
        "notice": "inheritdoc IERC1155Metadata"
      }
    },
    "notice": "Provides metadata for ERC1155 tokens according to standard. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}