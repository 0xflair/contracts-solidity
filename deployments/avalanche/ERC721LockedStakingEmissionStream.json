{
  "address": "0x1aDDE2eEa8c6c85923535DD9Bed202b94A2A8eA7",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockedUntilTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "minStakingDuration",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "maxStakingTotalDurations",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "emissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "emissionTimeUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionEnd",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "totalTickets",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "claimLockedUntil",
              "type": "uint64"
            }
          ],
          "internalType": "struct ERC721LockedStakingEmissionStream.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimMany",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WithdrawPowerRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "claimTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLockedUntil",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "calcUntil",
          "type": "uint64"
        }
      ],
      "name": "emissionAmountUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionEnd",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionStart",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionTimeUnit",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "entitlements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721EmissionReleaseExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721EqualSplitExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721LockableClaimExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721LockedStakingExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721StakingExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockedUntilTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "minStakingDuration",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "maxStakingTotalDurations",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "emissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "emissionTimeUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionEnd",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "totalTickets",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "claimLockedUntil",
              "type": "uint64"
            }
          ],
          "internalType": "struct ERC721LockedStakingEmissionStream.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastStakingTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "lockUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockWithdrawMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockWithdrawRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedUntilTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakingTotalDurations",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakingDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "rateByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "calcUntil",
          "type": "uint64"
        }
      ],
      "name": "releasedAmountUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeWithdrawPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "rewardAmountByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "rewardAmountByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "savedStakedDurations",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setClaimLockedUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionTimeUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setMaxStakingTotalDurations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setMinStakingDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setTotalTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum WithdrawMode",
          "name": "_withdrawMode",
          "type": "uint8"
        }
      ],
      "name": "setWithdrawMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawRecipient",
          "type": "address"
        }
      ],
      "name": "setWithdrawRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "totalStakedDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "totalStakedDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unlockingTime",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "unlockingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "claimTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMode",
      "outputs": [
        {
          "internalType": "enum WithdrawMode",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawModeLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPowerRevoked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRecipientLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1b3a213e0dd920c6015d051a0daf97855a118f422383c21ee7409cb844825777",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x1aDDE2eEa8c6c85923535DD9Bed202b94A2A8eA7",
    "transactionIndex": 3,
    "gasUsed": "3731463",
    "logsBloom": "0x
    "blockHash": "0x1b2172156b67b228e13480c9e3f643ed5776602f57c8149077577b58b1a2a08b",
    "transactionHash": "0x1b3a213e0dd920c6015d051a0daf97855a118f422383c21ee7409cb844825777",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 18212435,
        "transactionHash": "0x1b3a213e0dd920c6015d051a0daf97855a118f422383c21ee7409cb844825777",
        "address": "0x1aDDE2eEa8c6c85923535DD9Bed202b94A2A8eA7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x1b2172156b67b228e13480c9e3f643ed5776602f57c8149077577b58b1a2a08b"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 18212435,
        "transactionHash": "0x1b3a213e0dd920c6015d051a0daf97855a118f422383c21ee7409cb844825777",
        "address": "0x1aDDE2eEa8c6c85923535DD9Bed202b94A2A8eA7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0x1b2172156b67b228e13480c9e3f643ed5776602f57c8149077577b58b1a2a08b"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 18212435,
        "transactionHash": "0x1b3a213e0dd920c6015d051a0daf97855a118f422383c21ee7409cb844825777",
        "address": "0x1aDDE2eEa8c6c85923535DD9Bed202b94A2A8eA7",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 32,
        "blockHash": "0x1b2172156b67b228e13480c9e3f643ed5776602f57c8149077577b58b1a2a08b"
      }
    ],
    "blockNumber": 18212435,
    "cumulativeGasUsed": "4360673",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "ticketToken": "0x0000000000000000000000000000000000000000",
      "lockedUntilTimestamp": 0,
      "minStakingDuration": 0,
      "maxStakingTotalDurations": 0,
      "emissionRate": 0,
      "emissionTimeUnit": 0,
      "emissionStart": 0,
      "emissionEnd": 0,
      "totalTickets": 0,
      "claimLockedUntil": 0
    }
  ],
  "numDeployments": 5,
  "solcInputHash": "ae313c01d869475afde0f5da31d0e322",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minStakingDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxStakingTotalDurations\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"emissionTimeUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimLockedUntil\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721LockedStakingEmissionStream.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimMany\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawPowerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"claimTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLockedUntil\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"calcUntil\",\"type\":\"uint64\"}],\"name\":\"emissionAmountUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionEnd\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionStart\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionTimeUnit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entitlements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721EmissionReleaseExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721EqualSplitExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721LockableClaimExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721LockedStakingExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721StakingExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minStakingDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxStakingTotalDurations\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"emissionTimeUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimLockedUntil\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721LockedStakingEmissionStream.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastStakingTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"lockUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockWithdrawMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockWithdrawRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntilTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakingTotalDurations\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rateByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"calcUntil\",\"type\":\"uint64\"}],\"name\":\"releasedAmountUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeWithdrawPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rewardAmountByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"rewardAmountByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"savedStakedDurations\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setClaimLockedUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionTimeUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setMaxStakingTotalDurations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setMinStakingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTotalTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum WithdrawMode\",\"name\":\"_withdrawMode\",\"type\":\"uint8\"}],\"name\":\"setWithdrawMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawRecipient\",\"type\":\"address\"}],\"name\":\"setWithdrawRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"totalStakedDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"totalStakedDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unlockingTime\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"unlockingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"claimTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMode\",\"outputs\":[{\"internalType\":\"enum WithdrawMode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawModeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPowerRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRecipientLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Flair (https://flair.finance)\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol\":\"ERC721LockedStakingEmissionStream\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":6},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d14e1780f0ea212b19c07b83c8e51b9dc6903017df71e6de1fae364d724e0d\",\"license\":\"MIT\"},\"contracts/collections/ERC721/extensions/ERC721AutoIdMinterExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721AutoIdMinterExtension {\\n    function setMaxSupply(uint256 newValue) external;\\n\\n    function freezeMaxSupply() external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\\n */\\nabstract contract ERC721AutoIdMinterExtension is\\n    IERC721AutoIdMinterExtension,\\n    ERC721CollectionMetadataExtension\\n{\\n    using SafeMath for uint256;\\n\\n    uint256 public maxSupply;\\n    bool public maxSupplyFrozen;\\n\\n    uint256 internal _currentTokenId = 0;\\n\\n    function __ERC721AutoIdMinterExtension_init(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721AutoIdMinterExtension_init_unchained(_maxSupply);\\n    }\\n\\n    function __ERC721AutoIdMinterExtension_init_unchained(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        maxSupply = _maxSupply;\\n\\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\\n        _registerInterface(type(IERC721).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMaxSupply(uint256 newValue) \\n        public\\n        virtual\\n        override \\n        onlyOwner \\n    {\\n        require(!maxSupplyFrozen, \\\"FROZEN\\\");\\n        require(newValue >= totalSupply(), \\\"LOWER_THAN_SUPPLY\\\");\\n        maxSupply = newValue;\\n    }\\n\\n    function freezeMaxSupply() external onlyOwner {\\n        maxSupplyFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _currentTokenId;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _mintTo(address to, uint256 count) internal {\\n        require(totalSupply() + count <= maxSupply, \\\"EXCEEDS_SUPPLY\\\");\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 newTokenId = _currentTokenId;\\n            _safeMint(to, newTokenId);\\n            _incrementTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Increments the value of _currentTokenId\\n     */\\n    function _incrementTokenId() internal {\\n        _currentTokenId++;\\n    }\\n}\\n\",\"keccak256\":\"0x219fe28ac3af2dad6e24cf4660ff324c529be9f94bf9cc4dedc7882c4b59afbd\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721CollectionMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface IERC721CollectionMetadataExtension {\\n    function setContractURI(string memory newValue) external;\\n\\n    function contractURI() external view returns (string memory);\\n}\\n\\n/**\\n * @dev Extension to allow configuring contract-level collection metadata URI.\\n */\\nabstract contract ERC721CollectionMetadataExtension is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721\\n{\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    string private _contractURI;\\n\\n    function __ERC721CollectionMetadataExtension_init(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        __ERC721CollectionMetadataExtension_init_unchained(\\n            name_,\\n            symbol_,\\n            contractURI_\\n        );\\n    }\\n\\n    function __ERC721CollectionMetadataExtension_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _contractURI = contractURI_;\\n\\n        _registerInterface(\\n            type(IERC721CollectionMetadataExtension).interfaceId\\n        );\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setContractURI(string memory newValue) external onlyOwner {\\n        _contractURI = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n}\\n\",\"keccak256\":\"0xab1d9b4fc62d89dd5366c9a163eb8281a47e3384055d8479fb9fd82e5f109c7a\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721LockableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721LockableExtension {\\n    function locked(uint256 tokenId) external view returns (bool);\\n\\n    function lock(uint256 tokenId) external;\\n\\n    function lock(uint256[] calldata tokenIds) external;\\n\\n    function unlock(uint256 tokenId) external;\\n\\n    function unlock(uint256[] calldata tokenIds) external;\\n}\\n\\n/**\\n * @dev Extension to allow locking NFTs, for use-cases like staking, without leaving holders wallet.\\n */\\nabstract contract ERC721LockableExtension is\\n    IERC721LockableExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension,\\n    ReentrancyGuard\\n{\\n    using BitMaps for BitMaps.BitMap;\\n\\n    BitMaps.BitMap internal lockedTokens;\\n\\n    function __ERC721LockableExtension_init() internal onlyInitializing {\\n        __ERC721LockableExtension_init_unchained();\\n    }\\n\\n    function __ERC721LockableExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721LockableExtension).interfaceId);\\n    }\\n\\n    // PUBLIC\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Returns if a token is locked or not.\\n     */\\n    function locked(uint256 tokenId) public view virtual returns (bool) {\\n        return lockedTokens.get(tokenId);\\n    }\\n\\n    function filterUnlocked(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory unlocked = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            if (!locked(ticketTokenIds[i])) {\\n                unlocked[i] = ticketTokenIds[i];\\n            }\\n        }\\n\\n        return unlocked;\\n    }\\n\\n    /* INTERNAL */\\n\\n    /**\\n     * At this moment staking is only possible from a certain address (usually a smart contract).\\n     *\\n     * This is because in almost all cases you want another contract to perform custom logic on lock and unlock operations,\\n     * without allowing users to directly unlock their tokens and sell them, for example.\\n     */\\n    function _lock(uint256 tokenId) internal virtual {\\n        require(!lockedTokens.get(tokenId), \\\"LOCKED\\\");\\n        lockedTokens.set(tokenId);\\n    }\\n\\n    function _unlock(uint256 tokenId) internal virtual {\\n        require(lockedTokens.get(tokenId), \\\"NOT_LOCKED\\\");\\n        lockedTokens.unset(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721) {\\n        require(!lockedTokens.get(tokenId), \\\"LOCKED\\\");\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x55d6760b9219b4930ae56f9060a007edfd818708dbec81e9a1a22b608cf8f988\",\"license\":\"AGPL-3.0\"},\"contracts/common/WithdrawExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nenum WithdrawMode {\\n    OWNER,\\n    RECIPIENT,\\n    ANYONE,\\n    NOBODY\\n}\\n\\ninterface IWithdrawExtension {\\n    function setWithdrawRecipient(address _withdrawRecipient) external;\\n\\n    function lockWithdrawRecipient() external;\\n\\n    function revokeWithdrawPower() external;\\n\\n    function setWithdrawMode(WithdrawMode _withdrawMode) external;\\n\\n    function lockWithdrawMode() external;\\n\\n    function withdraw(\\n        address[] calldata claimTokens,\\n        uint256[] calldata amounts\\n    ) external;\\n}\\n\\nabstract contract WithdrawExtension is\\n    IWithdrawExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    event WithdrawPowerRevoked();\\n    event Withdrawn(address[] claimTokens, uint256[] amounts);\\n\\n    address public withdrawRecipient;\\n    bool public withdrawRecipientLocked;\\n\\n    bool public withdrawPowerRevoked;\\n\\n    WithdrawMode public withdrawMode;\\n    bool public withdrawModeLocked;\\n\\n    /* INTERNAL */\\n\\n    function __WithdrawExtension_init(\\n        address _withdrawRecipient,\\n        WithdrawMode _withdrawMode\\n    ) internal onlyInitializing {\\n        __WithdrawExtension_init_unchained(_withdrawRecipient, _withdrawMode);\\n    }\\n\\n    function __WithdrawExtension_init_unchained(\\n        address _withdrawRecipient,\\n        WithdrawMode _withdrawMode\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IWithdrawExtension).interfaceId);\\n\\n        withdrawRecipient = _withdrawRecipient;\\n        withdrawMode = _withdrawMode;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setWithdrawRecipient(address _withdrawRecipient)\\n        external\\n        onlyOwner\\n    {\\n        require(!withdrawRecipientLocked, \\\"LOCKED\\\");\\n        withdrawRecipient = _withdrawRecipient;\\n    }\\n\\n    function lockWithdrawRecipient() external onlyOwner {\\n        require(!withdrawRecipientLocked, \\\"LOCKED\\\");\\n        withdrawRecipientLocked = true;\\n    }\\n\\n    function setWithdrawMode(WithdrawMode _withdrawMode) external onlyOwner {\\n        require(!withdrawModeLocked, \\\"LOCKED\\\");\\n        withdrawMode = _withdrawMode;\\n    }\\n\\n    function lockWithdrawMode() external onlyOwner {\\n        require(!withdrawModeLocked, \\\"OCKED\\\");\\n        withdrawModeLocked = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function withdraw(\\n        address[] calldata claimTokens,\\n        uint256[] calldata amounts\\n    ) external {\\n        /**\\n         * We are using msg.sender for smaller attack surface when evaluating\\n         * the sender of the function call. If in future we want to handle \\\"withdraw\\\"\\n         * functionality via meta transactions, we should consider using `_msgSender`\\n         */\\n        _assertWithdrawAccess(msg.sender);\\n\\n        require(withdrawRecipient != address(0), \\\"WITHDRAW/NO_RECIPIENT\\\");\\n        require(!withdrawPowerRevoked, \\\"WITHDRAW/EMERGENCY_POWER_REVOKED\\\");\\n\\n        for (uint256 i = 0; i < claimTokens.length; i++) {\\n            if (claimTokens[i] == address(0)) {\\n                payable(withdrawRecipient).sendValue(amounts[i]);\\n            } else {\\n                IERC20(claimTokens[i]).transfer(withdrawRecipient, amounts[i]);\\n            }\\n        }\\n\\n        emit Withdrawn(claimTokens, amounts);\\n    }\\n\\n    function revokeWithdrawPower() external onlyOwner {\\n        withdrawPowerRevoked = true;\\n        emit WithdrawPowerRevoked();\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _assertWithdrawAccess(address account) internal view {\\n        if (withdrawMode == WithdrawMode.NOBODY) {\\n            revert(\\\"WITHDRAW/LOCKED\\\");\\n        } else if (withdrawMode == WithdrawMode.ANYONE) {\\n            return;\\n        } else if (withdrawMode == WithdrawMode.RECIPIENT) {\\n            require(withdrawRecipient == account, \\\"WITHDRAW/ONLY_RECIPIENT\\\");\\n        } else if (withdrawMode == WithdrawMode.OWNER) {\\n            require(owner() == account, \\\"WITHDRAW/ONLY_OWNER\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd7512d7cb5fb88b84915d66f4a3663d0b7c6588b6fb5bd6b43a44bc7a031319c\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/base/ERC721MultiTokenStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721MultiTokenStream {\\n    // Claim native currency for a single ticket token\\n    function claim(uint256 ticketTokenId) external;\\n\\n    // Claim an erc20 claim token for a single ticket token\\n    function claim(uint256 ticketTokenId, address claimToken) external;\\n\\n    // Claim native currency for multiple ticket tokens (only if all owned by sender)\\n    function claim(uint256[] calldata ticketTokenIds) external;\\n\\n    // Claim native or erc20 tokens for multiple ticket tokens (only if all owned by `owner`)\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address owner\\n    ) external;\\n\\n    // Total native currency ever supplied to this stream\\n    function streamTotalSupply() external view returns (uint256);\\n\\n    // Total erc20 token ever supplied to this stream by claim token address\\n    function streamTotalSupply(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed from this stream\\n    function streamTotalClaimed() external view returns (uint256);\\n\\n    // Total erc20 token ever claimed from this stream by claim token address\\n    function streamTotalClaimed(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for a single ticket token\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for multiple token IDs\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total erc20 token ever claimed for multiple token IDs\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) external view returns (uint256);\\n\\n    // Calculate currently claimable amount for a specific ticket token ID and a specific claim token address\\n    // Pass 0x0000000000000000000000000000000000000000 as claim token to represent native currency\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        external\\n        view\\n        returns (uint256 claimableAmount);\\n}\\n\\nabstract contract ERC721MultiTokenStream is\\n    IERC721MultiTokenStream,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    struct Entitlement {\\n        uint256 totalClaimed;\\n        uint256 lastClaimedAt;\\n    }\\n\\n    // Config\\n    address public ticketToken;\\n\\n    // Locks changing the config until this timestamp is reached\\n    uint64 public lockedUntilTimestamp;\\n\\n    // Map of ticket token ID -> claim token address -> entitlement\\n    mapping(uint256 => mapping(address => Entitlement)) public entitlements;\\n\\n    // Map of claim token address -> Total amount claimed by all holders\\n    mapping(address => uint256) internal _streamTotalClaimed;\\n\\n    /* EVENTS */\\n\\n    event Claim(\\n        address operator,\\n        address beneficiary,\\n        uint256 ticketTokenId,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    event ClaimMany(\\n        address operator,\\n        address beneficiary,\\n        uint256[] ticketTokenIds,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    function __ERC721MultiTokenStream_init(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        __ERC721MultiTokenStream_init_unchained(\\n            _ticketToken,\\n            _lockedUntilTimestamp\\n        );\\n    }\\n\\n    function __ERC721MultiTokenStream_init_unchained(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        ticketToken = _ticketToken;\\n        lockedUntilTimestamp = _lockedUntilTimestamp;\\n\\n        _registerInterface(type(IERC721MultiTokenStream).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function lockUntil(uint64 newValue) public onlyOwner {\\n        require(newValue > lockedUntilTimestamp, \\\"CANNOT_REWIND\\\");\\n        lockedUntilTimestamp = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    receive() external payable {\\n        require(msg.value > 0);\\n    }\\n\\n    function claim(uint256 ticketTokenId) public {\\n        claim(ticketTokenId, address(0));\\n    }\\n\\n    function claim(uint256 ticketTokenId, address claimToken)\\n        public\\n        nonReentrant\\n    {\\n        /* CHECKS */\\n        address beneficiary = _msgSender();\\n        _beforeClaim(ticketTokenId, claimToken, beneficiary);\\n\\n        uint256 claimable = streamClaimableAmount(ticketTokenId, claimToken);\\n        require(claimable > 0, \\\"NOTHING_TO_CLAIM\\\");\\n\\n        /* EFFECTS */\\n\\n        entitlements[ticketTokenId][claimToken].totalClaimed += claimable;\\n        entitlements[ticketTokenId][claimToken].lastClaimedAt = block.timestamp;\\n\\n        _streamTotalClaimed[claimToken] += claimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(beneficiary)).sendValue(claimable);\\n        } else {\\n            IERC20(claimToken).transfer(beneficiary, claimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit Claim(\\n            _msgSender(),\\n            beneficiary,\\n            ticketTokenId,\\n            claimToken,\\n            claimable\\n        );\\n    }\\n\\n    function claim(uint256[] calldata ticketTokenIds) public {\\n        claim(ticketTokenIds, address(0), _msgSender());\\n    }\\n\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address beneficiary\\n    ) public nonReentrant {\\n        uint256 totalClaimable;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            _beforeClaim(ticketTokenIds[i], claimToken, beneficiary);\\n\\n            /* EFFECTS */\\n            uint256 claimable = streamClaimableAmount(\\n                ticketTokenIds[i],\\n                claimToken\\n            );\\n\\n            if (claimable > 0) {\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .totalClaimed += claimable;\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .lastClaimedAt = block.timestamp;\\n\\n                totalClaimable += claimable;\\n            }\\n        }\\n\\n        _streamTotalClaimed[claimToken] += totalClaimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(beneficiary)).sendValue(totalClaimable);\\n        } else {\\n            IERC20(claimToken).transfer(beneficiary, totalClaimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit ClaimMany(\\n            _msgSender(),\\n            beneficiary,\\n            ticketTokenIds,\\n            claimToken,\\n            totalClaimable\\n        );\\n    }\\n\\n    /* READ ONLY */\\n\\n    function streamTotalSupply() public view returns (uint256) {\\n        return streamTotalSupply(address(0));\\n    }\\n\\n    function streamTotalSupply(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (claimToken == address(0)) {\\n            return _streamTotalClaimed[claimToken] + address(this).balance;\\n        }\\n\\n        return\\n            _streamTotalClaimed[claimToken] +\\n            IERC20(claimToken).balanceOf(address(this));\\n    }\\n\\n    function streamTotalClaimed() public view returns (uint256) {\\n        return _streamTotalClaimed[address(0)];\\n    }\\n\\n    function streamTotalClaimed(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _streamTotalClaimed[claimToken];\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][address(0)].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamTotalClaimed(ticketTokenIds, address(0));\\n    }\\n\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimed = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimed += entitlements[ticketTokenIds[i]][claimToken].totalClaimed;\\n        }\\n\\n        return claimed;\\n    }\\n\\n    function streamClaimableAmount(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimable = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimable += streamClaimableAmount(ticketTokenIds[i], claimToken);\\n        }\\n\\n        return claimable;\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamClaimableAmount(ticketTokenId, address(0));\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 totalReleased = _totalTokenReleasedAmount(\\n            _totalStreamReleasedAmount(\\n                streamTotalSupply(claimToken),\\n                ticketTokenId,\\n                claimToken\\n            ),\\n            ticketTokenId,\\n            claimToken\\n        );\\n\\n        return\\n            totalReleased -\\n            entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    /* INTERNAL */\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal virtual {\\n        require(\\n            IERC721(ticketToken).ownerOf(ticketTokenId_) == beneficiary_,\\n            \\\"NOT_NFT_OWNER\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb6305950c93950b1c33a1781679a39633930149fd1ae76f10154b8dbe8b726e8\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721EmissionReleaseExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721EmissionReleaseExtension {\\n    function hasERC721EmissionReleaseExtension() external view returns (bool);\\n\\n    function setEmissionRate(uint256 newValue) external;\\n\\n    function setEmissionTimeUnit(uint64 newValue) external;\\n\\n    function setEmissionStart(uint64 newValue) external;\\n\\n    function setEmissionEnd(uint64 newValue) external;\\n\\n    function releasedAmountUntil(uint64 calcUntil)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function emissionAmountUntil(uint64 calcUntil)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function rateByToken(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721EmissionReleaseExtension is\\n    IERC721EmissionReleaseExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    // Number of tokens released every `emissionTimeUnit`\\n    uint256 public emissionRate;\\n\\n    // Time unit to release tokens, users can only claim once every `emissionTimeUnit`\\n    uint64 public emissionTimeUnit;\\n\\n    // When emission and calculating tokens starts\\n    uint64 public emissionStart;\\n\\n    // When to stop calculating the tokens released\\n    uint64 public emissionEnd;\\n\\n    /* INIT */\\n\\n    function __ERC721EmissionReleaseExtension_init(\\n        uint256 _emissionRate,\\n        uint64 _emissionTimeUnit,\\n        uint64 _emissionStart,\\n        uint64 _emissionEnd\\n    ) internal onlyInitializing {\\n        __ERC721EmissionReleaseExtension_init_unchained(\\n            _emissionRate,\\n            _emissionTimeUnit,\\n            _emissionStart,\\n            _emissionEnd\\n        );\\n    }\\n\\n    function __ERC721EmissionReleaseExtension_init_unchained(\\n        uint256 _emissionRate,\\n        uint64 _emissionTimeUnit,\\n        uint64 _emissionStart,\\n        uint64 _emissionEnd\\n    ) internal onlyInitializing {\\n        emissionRate = _emissionRate;\\n        emissionTimeUnit = _emissionTimeUnit;\\n        emissionStart = _emissionStart;\\n        emissionEnd = _emissionEnd;\\n\\n        _registerInterface(type(IERC721EmissionReleaseExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setEmissionRate(uint256 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        emissionRate = newValue;\\n    }\\n\\n    function setEmissionTimeUnit(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        emissionTimeUnit = newValue;\\n    }\\n\\n    function setEmissionStart(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        emissionStart = newValue;\\n    }\\n\\n    function setEmissionEnd(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        emissionEnd = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721EmissionReleaseExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function releasedAmountUntil(uint64 calcUntil)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return\\n            emissionRate *\\n            // Intentionally rounded down:\\n            ((calcUntil - emissionStart) / emissionTimeUnit);\\n    }\\n\\n    function emissionAmountUntil(uint64 calcUntil)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return ((calcUntil - emissionStart) * emissionRate) / emissionTimeUnit;\\n    }\\n\\n    function rateByToken(uint256[] calldata tokenIds)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /* INTERNAL */\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual override returns (uint256) {\\n        streamTotalSupply_;\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        if (block.timestamp < emissionStart) {\\n            return 0;\\n        } else if (emissionEnd > 0 && block.timestamp > emissionEnd) {\\n            return releasedAmountUntil(emissionEnd);\\n        } else {\\n            return releasedAmountUntil(uint64(block.timestamp));\\n        }\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal virtual override {\\n        beneficiary_;\\n\\n        require(emissionStart < block.timestamp, \\\"NOT_STARTED\\\");\\n\\n        require(\\n            entitlements[ticketTokenId_][claimToken_].lastClaimedAt <\\n                block.timestamp - emissionTimeUnit,\\n            \\\"TOO_EARLY\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x179ade1fb4d9c518d3aa23e89725f27c290999531d014b610229e12760a5d355\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721EqualSplitExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721EqualSplitExtension {\\n    function hasERC721EqualSplitExtension() external view returns (bool);\\n\\n    function setTotalTickets(uint256 newValue) external;\\n}\\n\\nabstract contract ERC721EqualSplitExtension is\\n    IERC721EqualSplitExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    // Total number of ERC721 tokens to calculate their equal split share\\n    uint256 public totalTickets;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721EqualSplitExtension_init(uint256 _totalTickets)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721EqualSplitExtension_init_unchained(_totalTickets);\\n    }\\n\\n    function __ERC721EqualSplitExtension_init_unchained(uint256 _totalTickets)\\n        internal\\n        onlyInitializing\\n    {\\n        totalTickets = _totalTickets;\\n\\n        _registerInterface(type(IERC721EqualSplitExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setTotalTickets(uint256 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        totalTickets = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721EqualSplitExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual override returns (uint256) {\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        return totalReleasedAmount_ / totalTickets;\\n    }\\n}\\n\",\"keccak256\":\"0xc8f9cdac41cd531a378fdfd2ca6750bb32d4a7e69fb87fd9da031b883fd8a749\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721LockableClaimExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721LockableClaimExtension {\\n    function hasERC721LockableClaimExtension() external view returns (bool);\\n\\n    function setClaimLockedUntil(uint64 newValue) external;\\n}\\n\\nabstract contract ERC721LockableClaimExtension is\\n    IERC721LockableClaimExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    // Claiming is only possible after this time (unix timestamp)\\n    uint64 public claimLockedUntil;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721LockableClaimExtension_init(uint64 _claimLockedUntil)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721LockableClaimExtension_init_unchained(_claimLockedUntil);\\n    }\\n\\n    function __ERC721LockableClaimExtension_init_unchained(\\n        uint64 _claimLockedUntil\\n    ) internal onlyInitializing {\\n        claimLockedUntil = _claimLockedUntil;\\n\\n        _registerInterface(type(IERC721LockableClaimExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setClaimLockedUntil(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        claimLockedUntil = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721LockableClaimExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal virtual override {\\n        ticketTokenId_;\\n        claimToken_;\\n        beneficiary_;\\n\\n        require(claimLockedUntil < block.timestamp, \\\"CLAIM_LOCKED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb5ee2144af6f298d3b1510f56f32ceb3c9234d4fa7ee9fe472230a2e27d44e66\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721LockedStakingExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {IERC721LockableExtension} from \\\"../../../collections/ERC721/extensions/ERC721LockableExtension.sol\\\";\\n\\nimport \\\"./ERC721StakingExtension.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ninterface IERC721LockedStakingExtension {\\n    function hasERC721LockedStakingExtension() external view returns (bool);\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721LockedStakingExtension is\\n    IERC721LockedStakingExtension,\\n    ERC721StakingExtension\\n{\\n    /* INIT */\\n\\n    function __ERC721LockedStakingExtension_init(\\n        uint64 _minStakingDuration,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        __ERC721LockedStakingExtension_init_unchained();\\n        __ERC721StakingExtension_init_unchained(\\n            _minStakingDuration,\\n            _maxStakingTotalDurations\\n        );\\n    }\\n\\n    function __ERC721LockedStakingExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721LockedStakingExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721LockedStakingExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function stake(uint256 tokenId) public virtual override {\\n        ERC721StakingExtension.stake(tokenId);\\n        IERC721LockableExtension(ticketToken).lock(tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public virtual override {\\n        ERC721StakingExtension.stake(tokenIds);\\n        IERC721LockableExtension(ticketToken).lock(tokenIds);\\n    }\\n\\n    function unstake(uint256 tokenId) public virtual override {\\n        ERC721StakingExtension.unstake(tokenId);\\n        IERC721LockableExtension(ticketToken).unlock(tokenId);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) public virtual override {\\n        ERC721StakingExtension.unstake(tokenIds);\\n        IERC721LockableExtension(ticketToken).unlock(tokenIds);\\n    }\\n\\n    function _stake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(\\n            operator == IERC721(ticketToken).ownerOf(tokenId),\\n            \\\"NOT_TOKEN_OWNER\\\"\\n        );\\n        ERC721StakingExtension._stake(operator, currentTime, tokenId);\\n    }\\n\\n    function _unstake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(\\n            operator == IERC721(ticketToken).ownerOf(tokenId),\\n            \\\"NOT_TOKEN_OWNER\\\"\\n        );\\n        ERC721StakingExtension._unstake(operator, currentTime, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x911aa429105aa3d17375142c96d28f9e0f328c582b065e24a7181e3ea4f9a59d\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721StakingExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ninterface IERC721StakingExtension {\\n    function hasERC721StakingExtension() external view returns (bool);\\n\\n    function stake(uint256 tokenId) external;\\n\\n    function stake(uint256[] calldata tokenIds) external;\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721StakingExtension is\\n    IERC721StakingExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    // Minimum seconds that token must be staked before unstaking.\\n    uint64 public minStakingDuration;\\n\\n    // Maximum sum total of all durations staking that will be counted (across all stake/unstakes for each token). Staked durations beyond this number is ignored.\\n    uint64 public maxStakingTotalDurations;\\n\\n    // Map of token ID to the time of last staking\\n    mapping(uint256 => uint64) public lastStakingTime;\\n\\n    // Map of token ID to the sum total of all previous staked durations\\n    mapping(uint256 => uint64) public savedStakedDurations;\\n\\n    /* INIT */\\n\\n    function __ERC721StakingExtension_init(\\n        uint64 _minStakingDuration,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        __ERC721StakingExtension_init_unchained(\\n            _minStakingDuration,\\n            _maxStakingTotalDurations\\n        );\\n    }\\n\\n    function __ERC721StakingExtension_init_unchained(\\n        uint64 _minStakingDuration,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        minStakingDuration = _minStakingDuration;\\n        maxStakingTotalDurations = _maxStakingTotalDurations;\\n\\n        _registerInterface(type(IERC721StakingExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMinStakingDuration(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        minStakingDuration = newValue;\\n    }\\n\\n    function setMaxStakingTotalDurations(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        maxStakingTotalDurations = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721StakingExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function stake(uint256 tokenId) public virtual {\\n        _stake(_msgSender(), uint64(block.timestamp), tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public virtual {\\n        address operator = _msgSender();\\n        uint64 currentTime = uint64(block.timestamp);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _stake(operator, currentTime, tokenIds[i]);\\n        }\\n    }\\n\\n    function unstake(uint256 tokenId) public virtual {\\n        _unstake(_msgSender(), uint64(block.timestamp), tokenId);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) public virtual {\\n        address operator = _msgSender();\\n        uint64 currentTime = uint64(block.timestamp);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _unstake(operator, currentTime, tokenIds[i]);\\n        }\\n    }\\n\\n    function totalStakedDuration(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        virtual\\n        returns (uint64)\\n    {\\n        uint64 totalDurations = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            totalDurations += totalStakedDuration(ticketTokenIds[i]);\\n        }\\n\\n        return totalDurations;\\n    }\\n\\n    function totalStakedDuration(uint256 ticketTokenId)\\n        public\\n        view\\n        virtual\\n        returns (uint64)\\n    {\\n        uint64 total = savedStakedDurations[ticketTokenId];\\n\\n        if (lastStakingTime[ticketTokenId] > 0) {\\n            uint64 targetTime = _stakingTimeLimit();\\n\\n            if (targetTime > block.timestamp) {\\n                targetTime = uint64(block.timestamp);\\n            }\\n\\n            if (lastStakingTime[ticketTokenId] > 0) {\\n                if (targetTime > lastStakingTime[ticketTokenId]) {\\n                    total += (targetTime - lastStakingTime[ticketTokenId]);\\n                }\\n            }\\n        }\\n\\n        if (total > maxStakingTotalDurations) {\\n            total = maxStakingTotalDurations;\\n        }\\n\\n        return total;\\n    }\\n\\n    function unlockingTime(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            lastStakingTime[ticketTokenId] > 0\\n                ? lastStakingTime[ticketTokenId] + minStakingDuration\\n                : 0;\\n    }\\n\\n    function unlockingTime(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory unlockedAt = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            unlockedAt[i] = unlockingTime(ticketTokenIds[i]);\\n        }\\n\\n        return unlockedAt;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _stakingTimeLimit() internal view virtual returns (uint64) {\\n        return 18_446_744_073_709_551_615; // max(uint64)\\n    }\\n\\n    function _stake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            totalStakedDuration(tokenId) < maxStakingTotalDurations,\\n            \\\"MAX_DURATION_EXCEEDED\\\"\\n        );\\n\\n        lastStakingTime[tokenId] = currentTime;\\n    }\\n\\n    function _unstake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal virtual {\\n        operator;\\n\\n        require(lastStakingTime[tokenId] > 0, \\\"NOT_STAKED\\\");\\n\\n        require(\\n            currentTime >= lastStakingTime[tokenId] + minStakingDuration,\\n            \\\"NOT_STAKED_LONG_ENOUGH\\\"\\n        );\\n\\n        savedStakedDurations[tokenId] = totalStakedDuration(tokenId);\\n\\n        lastStakingTime[tokenId] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9e2c8252c5243d982602ce45273c5e5d1848f231ee95853acb836c9607612ddf\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721EmissionReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721EqualSplitExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockedStakingExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ncontract ERC721LockedStakingEmissionStream is\\n    Initializable,\\n    Ownable,\\n    ERC721EmissionReleaseExtension,\\n    ERC721EqualSplitExtension,\\n    ERC721LockedStakingExtension,\\n    ERC721LockableClaimExtension,\\n    WithdrawExtension\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Locked Staking Emission Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Locked staking extension\\n        uint64 minStakingDuration; // in seconds. Minimum time the NFT must stay locked before unstaking.\\n        uint64 maxStakingTotalDurations; // in seconds. Maximum sum total of all durations staking that will be counted (across all stake/unstakes for each token).\\n        // Emission release extension\\n        uint256 emissionRate;\\n        uint64 emissionTimeUnit;\\n        uint64 emissionStart;\\n        uint64 emissionEnd;\\n        // Equal split extension\\n        uint256 totalTickets;\\n        // Lockable claim extension\\n        uint64 claimLockedUntil;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(deployer, WithdrawMode.OWNER);\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721LockedStakingExtension_init(\\n            config.minStakingDuration,\\n            config.maxStakingTotalDurations\\n        );\\n        __ERC721EmissionReleaseExtension_init(\\n            config.emissionRate,\\n            config.emissionTimeUnit,\\n            config.emissionStart,\\n            config.emissionEnd\\n        );\\n        __ERC721EqualSplitExtension_init(config.totalTickets);\\n        __ERC721LockableClaimExtension_init(config.claimLockedUntil);\\n    }\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    )\\n        internal\\n        view\\n        virtual\\n        override(ERC721MultiTokenStream, ERC721EmissionReleaseExtension)\\n        returns (uint256)\\n    {\\n        // Removing the logic from emission extension because it is irrevelant when staking.\\n        return 0;\\n    }\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    )\\n        internal\\n        view\\n        virtual\\n        override(ERC721MultiTokenStream, ERC721EqualSplitExtension)\\n        returns (uint256)\\n    {\\n        totalReleasedAmount_;\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        // Get the rate per token to calculate based on stake duration\\n        return\\n            (emissionRate / totalTickets) *\\n            // Intentionally rounded down\\n            (totalStakedDuration(ticketTokenId_) / emissionTimeUnit);\\n    }\\n\\n    function _stakingTimeLimit()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint64)\\n    {\\n        if (emissionEnd > 0) {\\n            return emissionEnd;\\n        }\\n\\n        return super._stakingTimeLimit();\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    )\\n        internal\\n        override(\\n            ERC721MultiTokenStream,\\n            ERC721EmissionReleaseExtension,\\n            ERC721LockableClaimExtension\\n        )\\n    {\\n        ERC721MultiTokenStream._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721EmissionReleaseExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n    }\\n\\n    /* PUBLIC */\\n\\n    function stake(uint256 tokenId) public override nonReentrant {\\n        require(uint64(block.timestamp) >= emissionStart, \\\"NOT_STARTED_YET\\\");\\n\\n        super.stake(tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public override nonReentrant {\\n        require(uint64(block.timestamp) >= emissionStart, \\\"NOT_STARTED_YET\\\");\\n\\n        super.stake(tokenIds);\\n    }\\n\\n    function unstake(uint256 tokenId) public override nonReentrant {\\n        super.unstake(tokenId);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) public override nonReentrant {\\n        super.unstake(tokenIds);\\n    }\\n\\n    function rateByToken(uint256[] calldata tokenIds)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        uint256 staked;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (lastStakingTime[tokenIds[i]] > 0) {\\n                staked++;\\n            }\\n        }\\n\\n        return (emissionRate * staked) / totalTickets;\\n    }\\n\\n    function rewardAmountByToken(uint256 ticketTokenId)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return\\n            ((emissionRate * totalStakedDuration(ticketTokenId)) /\\n                totalTickets) / emissionTimeUnit;\\n    }\\n\\n    function rewardAmountByToken(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        virtual\\n        returns (uint256 total)\\n    {\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            total += rewardAmountByToken(ticketTokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf1c94320459ba7480cea697e8f0e057704afa17567a77c71216b7bcd15d769ff\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620046963803806200469683398101604081905262000034916200078e565b6200003f3362000057565b6001600255620000508133620000b2565b506200090a565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6000620000c06001620001b0565b90508015620000d9576000805461ff0019166101001790555b620000e48262000057565b620000f182600062000262565b825160208401516200010491906200029c565b6200011e83604001518460600151620002d260201b60201c565b6200014283608001518460a001518560c001518660e001516200031260201b60201c565b610100830151620001539062000350565b610120830151620001649062000388565b8015620001ab576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60008054610100900460ff161562000219578160ff166001148015620001e95750620001e730620003bd60201b620024971760201c565b155b620002115760405162461bcd60e51b815260040162000208906200085b565b60405180910390fd5b506000919050565b60005460ff808416911610620002435760405162461bcd60e51b815260040162000208906200085b565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166200028c5760405162461bcd60e51b81526004016200020890620008a9565b620002988282620003cc565b5050565b600054610100900460ff16620002c65760405162461bcd60e51b81526004016200020890620008a9565b62000298828262000473565b600054610100900460ff16620002fc5760405162461bcd60e51b81526004016200020890620008a9565b62000306620004dd565b6200029882826200051b565b600054610100900460ff166200033c5760405162461bcd60e51b81526004016200020890620008a9565b6200034a8484848462000584565b50505050565b600054610100900460ff166200037a5760405162461bcd60e51b81526004016200020890620008a9565b62000385816200060f565b50565b600054610100900460ff16620003b25760405162461bcd60e51b81526004016200020890620008a9565b620003858162000650565b6001600160a01b03163b151590565b600054610100900460ff16620003f65760405162461bcd60e51b81526004016200020890620008a9565b6200040863ac2ba33360e01b620006a2565b600c8054600160401b600160e01b03198116680100000000000000006001600160a01b038616029081178355839291600160401b62ff000160e01b03191660ff60f01b1990911617600160f01b8360038111156200046a576200046a620008f4565b02179055505050565b600054610100900460ff166200049d5760405162461bcd60e51b81526004016200020890620008a9565b600380546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b0385161717905562000298631ba050e960e21b620006a2565b600054610100900460ff16620005075760405162461bcd60e51b81526004016200020890620008a9565b6200051963d664280160e01b620006a2565b565b600054610100900460ff16620005455760405162461bcd60e51b81526004016200020890620008a9565b600980546001600160401b0383811668010000000000000000026001600160801b03199092169085161717905562000298633a41ba5360e11b620006a2565b600054610100900460ff16620005ae5760405162461bcd60e51b81526004016200020890620008a9565b6006849055600780546001600160401b03838116600160801b02600160801b600160c01b031986831668010000000000000000026001600160801b03199094169288169290921792909217161790556200034a63c9f600a960e01b620006a2565b600054610100900460ff16620006395760405162461bcd60e51b81526004016200020890620008a9565b600881905562000385632d5305cb60e21b620006a2565b600054610100900460ff166200067a5760405162461bcd60e51b81526004016200020890620008a9565b600c80546001600160401b0319166001600160401b038316179055620003856317b2ef4360e31b5b6001600160e01b03198082161415620006fe5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640162000208565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60405161014081016001600160401b03811182821017156200075857634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200025d57600080fd5b80516001600160401b03811681146200025d57600080fd5b60006101408284031215620007a257600080fd5b620007ac62000726565b620007b7836200075e565b8152620007c76020840162000776565b6020820152620007da6040840162000776565b6040820152620007ed6060840162000776565b6060820152608083015160808201526200080a60a0840162000776565b60a08201526200081d60c0840162000776565b60c08201526200083060e0840162000776565b60e082015261010083810151908201526101206200085081850162000776565b908201529392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b613d7c806200091a6000396000f3fe60806040526004361061033a5760003560e01c80630191c0af1461035357806301ffc9a71461038657806306fdde03146103b657806308289dbe146103d857806308ae7e54146104265780630c805a44146104465780630fbf0a931461047c57806314427a961461049c5780631bc51b26146104bc5780631c725fdc146104d057806325289bad146104f05780632890d033146105175780632c0e13131461052c5780632c2330671461054c5780632d00b5871461056c5780632e17de781461059a57806333abcdbd146105ba578063379607f5146105da5780633a73f7d6146105fa5780633b3f12e21461061a5780633d2dded51461063a57806349561cb9146106775780634abb4c4914610698578063513da948146106c557806354fd4d50146106ec57806357dc48c81461071b5780636057e0ec1461076f57806361949636146107905780636ba4c138146107b0578063715018a6146107d057806378b094ca146107e5578063790c0c73146108055780638368909c14610825578063837fe1401461084c57806384fd5ae01461086157806389c6b815146108815780638da5cb5b146108a15780639199690b146104bc578063968d9b2c146108c357806396afc450146108e35780639edfe830146108f9578063a1bdb15e14610919578063a1cf649314610939578063a5549bc61461097c578063a5b23be71461099c578063a694fc3a146109bc578063a86b21e8146109dc578063a8a67c8c146109fc578063aaf2f99914610a1c578063ae890c0a14610a3c578063af121f5414610a5c578063c088184914610a7d578063c0bb38ff14610ab3578063c723955a14610ad3578063d0d6641d14610ae8578063d1335b69146104bc578063d4244f2414610b08578063d5ed4d5a14610b2f578063d6642801146104bc578063d97314f514610b4f578063da82b22714610b6f578063dcbe353f14610b84578063dd11247e14610bab578063dda8820f146104bc578063ddd5e1b214610bc1578063de6d6d9614610be1578063de76a67614610c01578063e449f34114610c21578063f2fde38b14610c41578063f389b6e414610c61578063f4415ad614610c81578063f593dfc814610cb9578063f66e38c214610cd957600080fd5b3661034e576000341161034c57600080fd5b005b600080fd5b34801561035f57600080fd5b5061037361036e366004613489565b610cf9565b6040519081526020015b60405180910390f35b34801561039257600080fd5b506103a66103a13660046134df565b610d4f565b604051901515815260200161037d565b3480156103c257600080fd5b506103cb610d8f565b60405161037d9190613509565b3480156103e457600080fd5b5061040e6103f336600461355e565b600b602052600090815260409020546001600160401b031681565b6040516001600160401b03909116815260200161037d565b34801561043257600080fd5b5060095461040e906001600160401b031681565b34801561045257600080fd5b5061040e61046136600461355e565b600a602052600090815260409020546001600160401b031681565b34801561048857600080fd5b5061034c610497366004613577565b610dab565b3480156104a857600080fd5b50600c5461040e906001600160401b031681565b3480156104c857600080fd5b5060016103a6565b3480156104dc57600080fd5b5061034c6104eb3660046135cf565b610e24565b3480156104fc57600080fd5b5060035461040e90600160a01b90046001600160401b031681565b34801561052357600080fd5b50610373610ed4565b34801561053857600080fd5b5061034c6105473660046135cf565b610ee5565b34801561055857600080fd5b5061034c6105673660046135ea565b610f68565b34801561057857600080fd5b50600c5461058d90600160f01b900460ff1681565b60405161037d9190613621565b3480156105a657600080fd5b5061034c6105b536600461355e565b610fee565b3480156105c657600080fd5b5061040e6105d536600461355e565b611025565b3480156105e657600080fd5b5061034c6105f536600461355e565b61111a565b34801561060657600080fd5b50610373610615366004613577565b611128565b34801561062657600080fd5b50610373610635366004613489565b61117a565b34801561064657600080fd5b506000805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc54610373565b34801561068357600080fd5b50600c546103a690600160f81b900460ff1681565b3480156106a457600080fd5b506106b86106b3366004613577565b6111f8565b60405161037d9190613649565b3480156106d157600080fd5b5060075461040e90600160401b90046001600160401b031681565b3480156106f857600080fd5b506103cb60405180604001604052806003815260200162302e3160e81b81525081565b34801561072757600080fd5b5061075a61073636600461368d565b60046020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161037d565b34801561077b57600080fd5b50600c546103a690600160e01b900460ff1681565b34801561079c57600080fd5b5060075461040e906001600160401b031681565b3480156107bc57600080fd5b5061034c6107cb366004613577565b6112a3565b3480156107dc57600080fd5b5061034c6112b4565b3480156107f157600080fd5b5061034c6108003660046135cf565b6112ef565b34801561081157600080fd5b506103736108203660046136bd565b61137c565b34801561083157600080fd5b5060075461040e90600160801b90046001600160401b031681565b34801561085857600080fd5b5061034c61144f565b34801561086d57600080fd5b5061037361087c366004613577565b6114bd565b34801561088d57600080fd5b5061037361089c366004613577565b611550565b3480156108ad57600080fd5b506108b6611565565b60405161037d91906136da565b3480156108cf57600080fd5b506103736108de36600461355e565b61157a565b3480156108ef57600080fd5b5061037360065481565b34801561090557600080fd5b506103736109143660046135cf565b611587565b34801561092557600080fd5b5061034c61093436600461355e565b6115cc565b34801561094557600080fd5b5061037361095436600461368d565b60009182526004602090815260408084206001600160a01b0393909316845291905290205490565b34801561098857600080fd5b5061034c6109973660046135cf565b611632565b3480156109a857600080fd5b506103736109b736600461355e565b6116b5565b3480156109c857600080fd5b5061034c6109d736600461355e565b6116fb565b3480156109e857600080fd5b506103736109f73660046135cf565b611761565b348015610a0857600080fd5b5061034c610a1736600461373b565b61179d565b348015610a2857600080fd5b5061034c610a373660046135cf565b61187c565b348015610a4857600080fd5b5061034c610a5736600461355e565b611909565b348015610a6857600080fd5b50600c546103a690600160e81b900460ff1681565b348015610a8957600080fd5b50610373610a983660046136bd565b6001600160a01b031660009081526005602052604090205490565b348015610abf57600080fd5b5061034c610ace3660046136bd565b61196f565b348015610adf57600080fd5b5061034c6119f4565b348015610af457600080fd5b50610373610b0336600461355e565b611a7c565b348015610b1457600080fd5b5060095461040e90600160401b90046001600160401b031681565b348015610b3b57600080fd5b506003546108b6906001600160a01b031681565b348015610b5b57600080fd5b5061034c610b6a3660046135cf565b611ad6565b348015610b7b57600080fd5b5061034c611b59565b348015610b9057600080fd5b50600c546108b690600160401b90046001600160a01b031681565b348015610bb757600080fd5b5061037360085481565b348015610bcd57600080fd5b5061034c610bdc36600461368d565b611bc6565b348015610bed57600080fd5b5061034c610bfc36600461381c565b611dcf565b348015610c0d57600080fd5b5061040e610c1c366004613577565b61202d565b348015610c2d57600080fd5b5061034c610c3c366004613577565b612079565b348015610c4d57600080fd5b5061034c610c5c3660046136bd565b6120a9565b348015610c6d57600080fd5b5061034c610c7c366004613887565b612146565b348015610c8d57600080fd5b50610373610c9c36600461355e565b600090815260046020908152604080832083805290915290205490565b348015610cc557600080fd5b5061034c610cd43660046135cf565b6123bb565b348015610ce557600080fd5b50610373610cf436600461368d565b612448565b600080805b84811015610d4657610d28868683818110610d1b57610d1b6138ee565b9050602002013585612448565b610d32908361391a565b915080610d3e81613932565b915050610cfe565b50949350505050565b60006301ffc9a760e01b6001600160e01b031983161480610d8957506001600160e01b0319821660009081526001602052604090205460ff165b92915050565b604051806060016040528060258152602001613d226025913981565b600280541415610dd65760405162461bcd60e51b8152600401610dcd9061394d565b60405180910390fd5b600280556007546001600160401b03600160401b9091048116429091161015610e115760405162461bcd60e51b8152600401610dcd90613984565b610e1b82826124a6565b50506001600255565b33610e2d611565565b6001600160a01b031614610e535760405162461bcd60e51b8152600401610dcd906139ad565b6003546001600160401b03600160a01b909104811690821611610ea85760405162461bcd60e51b815260206004820152600d60248201526c10d0539393d517d49155d25391609a1b6044820152606401610dcd565b600380546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b6000610ee0600061137c565b905090565b33610eee611565565b6001600160a01b031614610f145760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b031610610f465760405162461bcd60e51b8152600401610dcd906139e2565b600c80546001600160401b0319166001600160401b0392909216919091179055565b33610f71611565565b6001600160a01b031614610f975760405162461bcd60e51b8152600401610dcd906139ad565b600c54600160f81b900460ff1615610fc15760405162461bcd60e51b8152600401610dcd90613a09565b600c805482919060ff60f01b1916600160f01b836003811115610fe657610fe661360b565b021790555050565b6002805414156110105760405162461bcd60e51b8152600401610dcd9061394d565b6002805561101d81612518565b506001600255565b6000818152600b6020908152604080832054600a9092528220546001600160401b039182169116156110e257600061105b612583565b905042816001600160401b031611156110715750425b6000848152600a60205260409020546001600160401b0316156110e0576000848152600a60205260409020546001600160401b0390811690821611156110e0576000848152600a60205260409020546110d3906001600160401b031682613a29565b6110dd9083613a51565b91505b505b6009546001600160401b03600160401b90910481169082161115610d895750600954600160401b90046001600160401b031692915050565b611125816000611bc6565b50565b6000805b8281101561117357611155848483818110611149576111496138ee565b905060200201356116b5565b61115f908361391a565b91508061116b81613932565b91505061112c565b5092915050565b600080805b84811015610d46576004600087878481811061119d5761119d6138ee565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826111e4919061391a565b9150806111f081613932565b91505061117f565b60606000826001600160401b03811115611214576112146136ee565b60405190808252806020026020018201604052801561123d578160200160208202803683370190505b50905060005b8381101561129b5761126c858583818110611260576112606138ee565b90506020020135611a7c565b82828151811061127e5761127e6138ee565b60209081029190910101528061129381613932565b915050611243565b509392505050565b6112b08282600033612146565b5050565b336112bd611565565b6001600160a01b0316146112e35760405162461bcd60e51b8152600401610dcd906139ad565b6112ed60006125c1565b565b336112f8611565565b6001600160a01b03161461131e5760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b0316106113505760405162461bcd60e51b8152600401610dcd906139e2565b600780546001600160401b03909216600160801b02600160801b600160c01b0319909216919091179055565b60006001600160a01b0382166113b0576001600160a01b038216600090815260056020526040902054610d8990479061391a565b6040516370a0823160e01b81526001600160a01b038316906370a08231906113dc9030906004016136da565b60206040518083038186803b1580156113f457600080fd5b505afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c9190613a7c565b6001600160a01b038316600090815260056020526040902054610d89919061391a565b33611458611565565b6001600160a01b03161461147e5760405162461bcd60e51b8152600401610dcd906139ad565b600c54600160e01b900460ff16156114a85760405162461bcd60e51b8152600401610dcd90613a09565b600c805460ff60e01b1916600160e01b179055565b60008060005b8381101561152c576000600a60008787858181106114e3576114e36138ee565b60209081029290920135835250810191909152604001600020546001600160401b0316111561151a578161151681613932565b9250505b8061152481613932565b9150506114c3565b506008548160065461153e9190613a95565b6115489190613aca565b949350505050565b600061155e8383600061117a565b9392505050565b6000546201000090046001600160a01b031690565b6000610d89826000612448565b6007546000906001600160401b03808216916115ac91600160401b9091041684613a29565b6115b69190613ade565b6001600160401b0316600654610d899190613a95565b336115d5611565565b6001600160a01b0316146115fb5760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b03161061162d5760405162461bcd60e51b8152600401610dcd906139e2565b600655565b3361163b611565565b6001600160a01b0316146116615760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b0316106116935760405162461bcd60e51b8152600401610dcd906139e2565b600980546001600160401b0319166001600160401b0392909216919091179055565b6007546008546000916001600160401b0316906116d184611025565b6001600160401b03166006546116e79190613a95565b6116f19190613aca565b610d899190613aca565b60028054141561171d5760405162461bcd60e51b8152600401610dcd9061394d565b600280556007546001600160401b03600160401b90910481164290911610156117585760405162461bcd60e51b8152600401610dcd90613984565b61101d8161261c565b6007546006546000916001600160401b03808216929161178a91600160401b9091041685613a29565b6001600160401b03166116f19190613a95565b60006117a96001612656565b905080156117c1576000805461ff0019166101001790555b6117ca826125c1565b6117d58260006126ea565b6117e78360000151846020015161271b565b6117f98360400151846060015161274c565b61181583608001518460a001518560c001518660e00151612785565b6118238361010001516127be565b6118318361012001516127ee565b8015611877576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b33611885611565565b6001600160a01b0316146118ab5760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b0316106118dd5760405162461bcd60e51b8152600401610dcd906139e2565b600780546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b33611912611565565b6001600160a01b0316146119385760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b03161061196a5760405162461bcd60e51b8152600401610dcd906139e2565b600855565b33611978611565565b6001600160a01b03161461199e5760405162461bcd60e51b8152600401610dcd906139ad565b600c54600160e01b900460ff16156119c85760405162461bcd60e51b8152600401610dcd90613a09565b600c80546001600160a01b03909216600160401b02600160401b600160e01b0319909216919091179055565b336119fd611565565b6001600160a01b031614611a235760405162461bcd60e51b8152600401610dcd906139ad565b600c54600160f81b900460ff1615611a655760405162461bcd60e51b815260206004820152600560248201526413d0d2d15160da1b6044820152606401610dcd565b600c80546001600160f81b0316600160f81b179055565b6000818152600a60205260408120546001600160401b0316611a9f576000611ac7565b6009546000838152600a6020526040902054611ac7916001600160401b039081169116613a51565b6001600160401b031692915050565b33611adf611565565b6001600160a01b031614611b055760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b031610611b375760405162461bcd60e51b8152600401610dcd906139e2565b600780546001600160401b0319166001600160401b0392909216919091179055565b33611b62611565565b6001600160a01b031614611b885760405162461bcd60e51b8152600401610dcd906139ad565b600c805460ff60e81b1916600160e81b1790556040517fa24423a69b45c25c0479663125e48b482e71d85eae416f589545243bafaf3c9590600090a1565b600280541415611be85760405162461bcd60e51b8152600401610dcd9061394d565b6002805533611bf883838361281e565b6000611c048484612448565b905060008111611c495760405162461bcd60e51b815260206004820152601060248201526f4e4f5448494e475f544f5f434c41494d60801b6044820152606401610dcd565b60008481526004602090815260408083206001600160a01b038716845290915281208054839290611c7b90849061391a565b909155505060008481526004602090815260408083206001600160a01b0387168452825280832042600190910155600590915281208054839290611cc090849061391a565b90915550506001600160a01b038316611ceb57611ce66001600160a01b0383168261283f565b611d6d565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611d199085908590600401613b04565b602060405180830381600087803b158015611d3357600080fd5b505af1158015611d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6b9190613b1d565b505b604080513381526001600160a01b038481166020830152818301879052851660608201526080810183905290517fa2d3c4c1fc934d6d2d8f9e862df90c01ae4eb0e920cd8957d242ba26b8dc40789181900360a00190a1505060016002555050565b611dd833612955565b600c54600160401b90046001600160a01b0316611e2f5760405162461bcd60e51b815260206004820152601560248201527415d2551211149055cbd393d7d49150d25412515395605a1b6044820152606401610dcd565b600c54600160e81b900460ff1615611e895760405162461bcd60e51b815260206004820181905260248201527f57495448445241572f454d455247454e43595f504f5745525f5245564f4b45446044820152606401610dcd565b60005b83811015611fe9576000858583818110611ea857611ea86138ee565b9050602002016020810190611ebd91906136bd565b6001600160a01b03161415611f0957611f04838383818110611ee157611ee16138ee565b600c546001600160a01b03600160401b909104169260209091020135905061283f565b611fd7565b848482818110611f1b57611f1b6138ee565b9050602002016020810190611f3091906136bd565b600c546001600160a01b039182169163a9059cbb91600160401b900416858585818110611f5f57611f5f6138ee565b905060200201356040518363ffffffff1660e01b8152600401611f83929190613b04565b602060405180830381600087803b158015611f9d57600080fd5b505af1158015611fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd59190613b1d565b505b80611fe181613932565b915050611e8c565b507fd40c399a83caf67d15628b821aa7c7bd940e563c57a047e2bd3b8c602bcaf5a58484848460405161201f9493929190613b75565b60405180910390a150505050565b600080805b8381101561129b5761205b85858381811061204f5761204f6138ee565b90506020020135611025565b6120659083613a51565b91508061207181613932565b915050612032565b60028054141561209b5760405162461bcd60e51b8152600401610dcd9061394d565b60028055610e1b8282612ae6565b336120b2611565565b6001600160a01b0316146120d85760405162461bcd60e51b8152600401610dcd906139ad565b6001600160a01b03811661213d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610dcd565b611125816125c1565b6002805414156121685760405162461bcd60e51b8152600401610dcd9061394d565b600280556000805b848110156122985761219b86868381811061218d5761218d6138ee565b90506020020135858561281e565b60006121bf8787848181106121b2576121b26138ee565b9050602002013586612448565b905080156122855780600460008989868181106121de576121de6138ee565b9050602002013581526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000206000016000828254612228919061391a565b9091555042905060046000898986818110612245576122456138ee565b6020908102929092013583525081810192909252604090810160009081206001600160a01b038a168252909252902060010155612282818461391a565b92505b508061229081613932565b915050612170565b506001600160a01b038316600090815260056020526040812080548392906122c190849061391a565b90915550506001600160a01b0383166122ec576122e76001600160a01b0383168261283f565b61236e565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061231a9085908590600401613b04565b602060405180830381600087803b15801561233457600080fd5b505af1158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236c9190613b1d565b505b7fd84a5c424a4f777bcf4f645712b8e5ebfc550f42bde444fa822fe98ee1b132b13383878787866040516123a796959493929190613bd8565b60405180910390a150506001600255505050565b336123c4611565565b6001600160a01b0316146123ea5760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b03161061241c5760405162461bcd60e51b8152600401610dcd906139e2565b600980546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b60008061246761246061245a8561137c565b50600090565b8585612b22565b60008581526004602090815260408083206001600160a01b03881684529091529020549091506115489082613c17565b6001600160a01b03163b151590565b6124b08282612b67565b6003546040516342cb086360e11b81526001600160a01b039091169063859610c6906124e29085908590600401613c2e565b600060405180830381600087803b1580156124fc57600080fd5b505af1158015612510573d6000803e3d6000fd5b505050505050565b61252181612ba9565b600354604051636198e33960e01b8152600481018390526001600160a01b0390911690636198e339906024015b600060405180830381600087803b15801561256857600080fd5b505af115801561257c573d6000803e3d6000fd5b5050505050565b600754600090600160801b90046001600160401b0316156125b55750600754600160801b90046001600160401b031690565b506001600160401b0390565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b61262581612bb4565b6003546040516337519c1960e21b8152600481018390526001600160a01b039091169063dd4670649060240161254e565b60008054610100900460ff16156126a4578160ff166001148015612680575061267e30612497565b155b61269c5760405162461bcd60e51b8152600401610dcd90613c42565b506000919050565b60005460ff8084169116106126cb5760405162461bcd60e51b8152600401610dcd90613c42565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166127115760405162461bcd60e51b8152600401610dcd90613c90565b6112b08282612bbf565b600054610100900460ff166127425760405162461bcd60e51b8152600401610dcd90613c90565b6112b08282612c59565b600054610100900460ff166127735760405162461bcd60e51b8152600401610dcd90613c90565b61277b612cbe565b6112b08282612cf5565b600054610100900460ff166127ac5760405162461bcd60e51b8152600401610dcd90613c90565b6127b884848484612d54565b50505050565b600054610100900460ff166127e55760405162461bcd60e51b8152600401610dcd90613c90565b61112581612dd5565b600054610100900460ff166128155760405162461bcd60e51b8152600401610dcd90613c90565b61112581612e11565b612829838383612e63565b612834838383612f27565b611877838383612f72565b8047101561288f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610dcd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146128dc576040519150601f19603f3d011682016040523d82523d6000602084013e6128e1565b606091505b50509050806118775760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610dcd565b6003600c54600160f01b900460ff1660038111156129755761297561360b565b14156129b55760405162461bcd60e51b815260206004820152600f60248201526e15d2551211149055cbd313d0d2d151608a1b6044820152606401610dcd565b6002600c54600160f01b900460ff1660038111156129d5576129d561360b565b14156129de5750565b6001600c54600160f01b900460ff1660038111156129fe576129fe61360b565b1415612a6257600c546001600160a01b03828116600160401b90920416146111255760405162461bcd60e51b815260206004820152601760248201527615d2551211149055cbd3d3931657d49150d25412515395604a1b6044820152606401610dcd565b6000600c54600160f01b900460ff166003811115612a8257612a8261360b565b141561112557806001600160a01b0316612a9a611565565b6001600160a01b0316146111255760405162461bcd60e51b81526020600482015260136024820152722ba4aa24222920ab97a7a7262cafa7aba722a960691b6044820152606401610dcd565b612af08282613037565b600354604051635d36598f60e01b81526001600160a01b0390911690635d36598f906124e29085908590600401613c2e565b6007546000906001600160401b0316612b3a84611025565b612b449190613ade565b6001600160401b0316600854600654612b5d9190613aca565b6115489190613a95565b334260005b8381101561257c57612b978383878785818110612b8b57612b8b6138ee565b90506020020135613079565b80612ba181613932565b915050612b6c565b611125334283613130565b611125334283613079565b600054610100900460ff16612be65760405162461bcd60e51b8152600401610dcd90613c90565b612bf663ac2ba33360e01b6131e7565b600c8054600160401b600160e01b03198116600160401b6001600160a01b038616029081178355839291600160401b62ff000160e01b03191660ff60f01b1990911617600160f01b836003811115612c5057612c5061360b565b02179055505050565b600054610100900460ff16612c805760405162461bcd60e51b8152600401610dcd90613c90565b600380546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b038516171790556112b0631ba050e960e21b6131e7565b600054610100900460ff16612ce55760405162461bcd60e51b8152600401610dcd90613c90565b6112ed63d664280160e01b6131e7565b600054610100900460ff16612d1c5760405162461bcd60e51b8152600401610dcd90613c90565b600980546001600160401b03838116600160401b026001600160801b0319909216908516171790556112b0633a41ba5360e11b6131e7565b600054610100900460ff16612d7b5760405162461bcd60e51b8152600401610dcd90613c90565b6006849055600780546001600160401b03838116600160801b02600160801b600160c01b0319868316600160401b026001600160801b03199094169288169290921792909217161790556127b863c9f600a960e01b6131e7565b600054610100900460ff16612dfc5760405162461bcd60e51b8152600401610dcd90613c90565b6008819055611125632d5305cb60e21b6131e7565b600054610100900460ff16612e385760405162461bcd60e51b8152600401610dcd90613c90565b600c80546001600160401b0319166001600160401b0383161790556111256317b2ef4360e31b6131e7565b6003546040516331a9108f60e11b8152600481018590526001600160a01b03838116921690636352211e9060240160206040518083038186803b158015612ea957600080fd5b505afa158015612ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee19190613cdb565b6001600160a01b0316146118775760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fa7232a2fa7aba722a960991b6044820152606401610dcd565b600c54426001600160401b03909116106118775760405162461bcd60e51b815260206004820152600c60248201526b10d310525357d313d0d2d15160a21b6044820152606401610dcd565b60075442600160401b9091046001600160401b031610612fc25760405162461bcd60e51b815260206004820152600b60248201526a1393d517d4d5105495115160aa1b6044820152606401610dcd565b600754612fd8906001600160401b031642613c17565b60008481526004602090815260408083206001600160a01b0387168452909152902060010154106118775760405162461bcd60e51b8152602060048201526009602482015268544f4f5f4541524c5960b81b6044820152606401610dcd565b334260005b8381101561257c57613067838387878581811061305b5761305b6138ee565b90506020020135613130565b8061307181613932565b91505061303c565b6003546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b1580156130bd57600080fd5b505afa1580156130d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f59190613cdb565b6001600160a01b0316836001600160a01b0316146131255760405162461bcd60e51b8152600401610dcd90613cf8565b611877838383613268565b6003546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b15801561317457600080fd5b505afa158015613188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ac9190613cdb565b6001600160a01b0316836001600160a01b0316146131dc5760405162461bcd60e51b8152600401610dcd90613cf8565b611877838383613301565b6001600160e01b031980821614156132405760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610dcd565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600954600160401b90046001600160401b031661328482611025565b6001600160401b0316106132d25760405162461bcd60e51b815260206004820152601560248201527413505617d1155490551253d397d15610d151511151605a1b6044820152606401610dcd565b6000908152600a6020526040902080546001600160401b0319166001600160401b039290921691909117905550565b6000818152600a60205260409020546001600160401b03166133525760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b6044820152606401610dcd565b6009546000828152600a602052604090205461337a916001600160401b039081169116613a51565b6001600160401b0316826001600160401b031610156133d45760405162461bcd60e51b815260206004820152601660248201527509c9ea8bea6a882968a88be989e9c8ebe8a9c9eaa8e960531b6044820152606401610dcd565b6133dd81611025565b6000918252600b6020908152604080842080546001600160401b03949094166001600160401b0319948516179055600a909152909120805490911690555050565b60008083601f84011261343057600080fd5b5081356001600160401b0381111561344757600080fd5b6020830191508360208260051b850101111561346257600080fd5b9250929050565b6001600160a01b038116811461112557600080fd5b80356126e581613469565b60008060006040848603121561349e57600080fd5b83356001600160401b038111156134b457600080fd5b6134c08682870161341e565b90945092505060208401356134d481613469565b809150509250925092565b6000602082840312156134f157600080fd5b81356001600160e01b03198116811461155e57600080fd5b600060208083528351808285015260005b818110156135365785810183015185820160400152820161351a565b81811115613548576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561357057600080fd5b5035919050565b6000806020838503121561358a57600080fd5b82356001600160401b038111156135a057600080fd5b6135ac8582860161341e565b90969095509350505050565b80356001600160401b03811681146126e557600080fd5b6000602082840312156135e157600080fd5b61155e826135b8565b6000602082840312156135fc57600080fd5b81356004811061155e57600080fd5b634e487b7160e01b600052602160045260246000fd5b602081016004831061364357634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252825182820181905260009190848201906040850190845b8181101561368157835183529284019291840191600101613665565b50909695505050505050565b600080604083850312156136a057600080fd5b8235915060208301356136b281613469565b809150509250929050565b6000602082840312156136cf57600080fd5b813561155e81613469565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561373557634e487b7160e01b600052604160045260246000fd5b60405290565b60008082840361016081121561375057600080fd5b6101408082121561376057600080fd5b613768613704565b91506137738561347e565b8252613781602086016135b8565b6020830152613792604086016135b8565b60408301526137a3606086016135b8565b6060830152608085013560808301526137be60a086016135b8565b60a08301526137cf60c086016135b8565b60c08301526137e060e086016135b8565b60e083015261010085810135908301526101206137fe8187016135b8565b818401525081935061381181860161347e565b925050509250929050565b6000806000806040858703121561383257600080fd5b84356001600160401b038082111561384957600080fd5b6138558883890161341e565b9096509450602087013591508082111561386e57600080fd5b5061387b8782880161341e565b95989497509550505050565b6000806000806060858703121561389d57600080fd5b84356001600160401b038111156138b357600080fd5b6138bf8782880161341e565b90955093505060208501356138d381613469565b915060408501356138e381613469565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561392d5761392d613904565b500190565b600060001982141561394657613946613904565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600f908201526e1393d517d4d5105495115117d65155608a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c10d3d3919251d7d313d0d2d151609a1b604082015260600190565b6020808252600690820152651313d0d2d15160d21b604082015260600190565b60006001600160401b0383811690831681811015613a4957613a49613904565b039392505050565b60006001600160401b03828116848216808303821115613a7357613a73613904565b01949350505050565b600060208284031215613a8e57600080fd5b5051919050565b6000816000190483118215151615613aaf57613aaf613904565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613ad957613ad9613ab4565b500490565b60006001600160401b0383811680613af857613af8613ab4565b92169190910492915050565b6001600160a01b03929092168252602082015260400190565b600060208284031215613b2f57600080fd5b8151801515811461155e57600080fd5b81835260006001600160fb1b03831115613b5857600080fd5b8260051b8083602087013760009401602001938452509192915050565b6040808252810184905260008560608301825b87811015613bb8578235613b9b81613469565b6001600160a01b0316825260209283019290910190600101613b88565b508381036020850152613bcc818688613b3f565b98975050505050505050565b600060018060a01b038089168352808816602084015260a06040840152613c0360a084018789613b3f565b941660608301525060800152949350505050565b600082821015613c2957613c29613904565b500390565b602081526000611548602083018486613b3f565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215613ced57600080fd5b815161155e81613469565b6020808252600f908201526e2727aa2faa27a5a2a72fa7aba722a960891b60408201526060019056fe455243373231204c6f636b6564205374616b696e6720456d697373696f6e2053747265616da264697066735822122012b358ac49e4db0b56601c48b81ddb3611b24ec109f9fe554a8e8640f799647164736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061033a5760003560e01c80630191c0af1461035357806301ffc9a71461038657806306fdde03146103b657806308289dbe146103d857806308ae7e54146104265780630c805a44146104465780630fbf0a931461047c57806314427a961461049c5780631bc51b26146104bc5780631c725fdc146104d057806325289bad146104f05780632890d033146105175780632c0e13131461052c5780632c2330671461054c5780632d00b5871461056c5780632e17de781461059a57806333abcdbd146105ba578063379607f5146105da5780633a73f7d6146105fa5780633b3f12e21461061a5780633d2dded51461063a57806349561cb9146106775780634abb4c4914610698578063513da948146106c557806354fd4d50146106ec57806357dc48c81461071b5780636057e0ec1461076f57806361949636146107905780636ba4c138146107b0578063715018a6146107d057806378b094ca146107e5578063790c0c73146108055780638368909c14610825578063837fe1401461084c57806384fd5ae01461086157806389c6b815146108815780638da5cb5b146108a15780639199690b146104bc578063968d9b2c146108c357806396afc450146108e35780639edfe830146108f9578063a1bdb15e14610919578063a1cf649314610939578063a5549bc61461097c578063a5b23be71461099c578063a694fc3a146109bc578063a86b21e8146109dc578063a8a67c8c146109fc578063aaf2f99914610a1c578063ae890c0a14610a3c578063af121f5414610a5c578063c088184914610a7d578063c0bb38ff14610ab3578063c723955a14610ad3578063d0d6641d14610ae8578063d1335b69146104bc578063d4244f2414610b08578063d5ed4d5a14610b2f578063d6642801146104bc578063d97314f514610b4f578063da82b22714610b6f578063dcbe353f14610b84578063dd11247e14610bab578063dda8820f146104bc578063ddd5e1b214610bc1578063de6d6d9614610be1578063de76a67614610c01578063e449f34114610c21578063f2fde38b14610c41578063f389b6e414610c61578063f4415ad614610c81578063f593dfc814610cb9578063f66e38c214610cd957600080fd5b3661034e576000341161034c57600080fd5b005b600080fd5b34801561035f57600080fd5b5061037361036e366004613489565b610cf9565b6040519081526020015b60405180910390f35b34801561039257600080fd5b506103a66103a13660046134df565b610d4f565b604051901515815260200161037d565b3480156103c257600080fd5b506103cb610d8f565b60405161037d9190613509565b3480156103e457600080fd5b5061040e6103f336600461355e565b600b602052600090815260409020546001600160401b031681565b6040516001600160401b03909116815260200161037d565b34801561043257600080fd5b5060095461040e906001600160401b031681565b34801561045257600080fd5b5061040e61046136600461355e565b600a602052600090815260409020546001600160401b031681565b34801561048857600080fd5b5061034c610497366004613577565b610dab565b3480156104a857600080fd5b50600c5461040e906001600160401b031681565b3480156104c857600080fd5b5060016103a6565b3480156104dc57600080fd5b5061034c6104eb3660046135cf565b610e24565b3480156104fc57600080fd5b5060035461040e90600160a01b90046001600160401b031681565b34801561052357600080fd5b50610373610ed4565b34801561053857600080fd5b5061034c6105473660046135cf565b610ee5565b34801561055857600080fd5b5061034c6105673660046135ea565b610f68565b34801561057857600080fd5b50600c5461058d90600160f01b900460ff1681565b60405161037d9190613621565b3480156105a657600080fd5b5061034c6105b536600461355e565b610fee565b3480156105c657600080fd5b5061040e6105d536600461355e565b611025565b3480156105e657600080fd5b5061034c6105f536600461355e565b61111a565b34801561060657600080fd5b50610373610615366004613577565b611128565b34801561062657600080fd5b50610373610635366004613489565b61117a565b34801561064657600080fd5b506000805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc54610373565b34801561068357600080fd5b50600c546103a690600160f81b900460ff1681565b3480156106a457600080fd5b506106b86106b3366004613577565b6111f8565b60405161037d9190613649565b3480156106d157600080fd5b5060075461040e90600160401b90046001600160401b031681565b3480156106f857600080fd5b506103cb60405180604001604052806003815260200162302e3160e81b81525081565b34801561072757600080fd5b5061075a61073636600461368d565b60046020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161037d565b34801561077b57600080fd5b50600c546103a690600160e01b900460ff1681565b34801561079c57600080fd5b5060075461040e906001600160401b031681565b3480156107bc57600080fd5b5061034c6107cb366004613577565b6112a3565b3480156107dc57600080fd5b5061034c6112b4565b3480156107f157600080fd5b5061034c6108003660046135cf565b6112ef565b34801561081157600080fd5b506103736108203660046136bd565b61137c565b34801561083157600080fd5b5060075461040e90600160801b90046001600160401b031681565b34801561085857600080fd5b5061034c61144f565b34801561086d57600080fd5b5061037361087c366004613577565b6114bd565b34801561088d57600080fd5b5061037361089c366004613577565b611550565b3480156108ad57600080fd5b506108b6611565565b60405161037d91906136da565b3480156108cf57600080fd5b506103736108de36600461355e565b61157a565b3480156108ef57600080fd5b5061037360065481565b34801561090557600080fd5b506103736109143660046135cf565b611587565b34801561092557600080fd5b5061034c61093436600461355e565b6115cc565b34801561094557600080fd5b5061037361095436600461368d565b60009182526004602090815260408084206001600160a01b0393909316845291905290205490565b34801561098857600080fd5b5061034c6109973660046135cf565b611632565b3480156109a857600080fd5b506103736109b736600461355e565b6116b5565b3480156109c857600080fd5b5061034c6109d736600461355e565b6116fb565b3480156109e857600080fd5b506103736109f73660046135cf565b611761565b348015610a0857600080fd5b5061034c610a1736600461373b565b61179d565b348015610a2857600080fd5b5061034c610a373660046135cf565b61187c565b348015610a4857600080fd5b5061034c610a5736600461355e565b611909565b348015610a6857600080fd5b50600c546103a690600160e81b900460ff1681565b348015610a8957600080fd5b50610373610a983660046136bd565b6001600160a01b031660009081526005602052604090205490565b348015610abf57600080fd5b5061034c610ace3660046136bd565b61196f565b348015610adf57600080fd5b5061034c6119f4565b348015610af457600080fd5b50610373610b0336600461355e565b611a7c565b348015610b1457600080fd5b5060095461040e90600160401b90046001600160401b031681565b348015610b3b57600080fd5b506003546108b6906001600160a01b031681565b348015610b5b57600080fd5b5061034c610b6a3660046135cf565b611ad6565b348015610b7b57600080fd5b5061034c611b59565b348015610b9057600080fd5b50600c546108b690600160401b90046001600160a01b031681565b348015610bb757600080fd5b5061037360085481565b348015610bcd57600080fd5b5061034c610bdc36600461368d565b611bc6565b348015610bed57600080fd5b5061034c610bfc36600461381c565b611dcf565b348015610c0d57600080fd5b5061040e610c1c366004613577565b61202d565b348015610c2d57600080fd5b5061034c610c3c366004613577565b612079565b348015610c4d57600080fd5b5061034c610c5c3660046136bd565b6120a9565b348015610c6d57600080fd5b5061034c610c7c366004613887565b612146565b348015610c8d57600080fd5b50610373610c9c36600461355e565b600090815260046020908152604080832083805290915290205490565b348015610cc557600080fd5b5061034c610cd43660046135cf565b6123bb565b348015610ce557600080fd5b50610373610cf436600461368d565b612448565b600080805b84811015610d4657610d28868683818110610d1b57610d1b6138ee565b9050602002013585612448565b610d32908361391a565b915080610d3e81613932565b915050610cfe565b50949350505050565b60006301ffc9a760e01b6001600160e01b031983161480610d8957506001600160e01b0319821660009081526001602052604090205460ff165b92915050565b604051806060016040528060258152602001613d226025913981565b600280541415610dd65760405162461bcd60e51b8152600401610dcd9061394d565b60405180910390fd5b600280556007546001600160401b03600160401b9091048116429091161015610e115760405162461bcd60e51b8152600401610dcd90613984565b610e1b82826124a6565b50506001600255565b33610e2d611565565b6001600160a01b031614610e535760405162461bcd60e51b8152600401610dcd906139ad565b6003546001600160401b03600160a01b909104811690821611610ea85760405162461bcd60e51b815260206004820152600d60248201526c10d0539393d517d49155d25391609a1b6044820152606401610dcd565b600380546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b6000610ee0600061137c565b905090565b33610eee611565565b6001600160a01b031614610f145760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b031610610f465760405162461bcd60e51b8152600401610dcd906139e2565b600c80546001600160401b0319166001600160401b0392909216919091179055565b33610f71611565565b6001600160a01b031614610f975760405162461bcd60e51b8152600401610dcd906139ad565b600c54600160f81b900460ff1615610fc15760405162461bcd60e51b8152600401610dcd90613a09565b600c805482919060ff60f01b1916600160f01b836003811115610fe657610fe661360b565b021790555050565b6002805414156110105760405162461bcd60e51b8152600401610dcd9061394d565b6002805561101d81612518565b506001600255565b6000818152600b6020908152604080832054600a9092528220546001600160401b039182169116156110e257600061105b612583565b905042816001600160401b031611156110715750425b6000848152600a60205260409020546001600160401b0316156110e0576000848152600a60205260409020546001600160401b0390811690821611156110e0576000848152600a60205260409020546110d3906001600160401b031682613a29565b6110dd9083613a51565b91505b505b6009546001600160401b03600160401b90910481169082161115610d895750600954600160401b90046001600160401b031692915050565b611125816000611bc6565b50565b6000805b8281101561117357611155848483818110611149576111496138ee565b905060200201356116b5565b61115f908361391a565b91508061116b81613932565b91505061112c565b5092915050565b600080805b84811015610d46576004600087878481811061119d5761119d6138ee565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826111e4919061391a565b9150806111f081613932565b91505061117f565b60606000826001600160401b03811115611214576112146136ee565b60405190808252806020026020018201604052801561123d578160200160208202803683370190505b50905060005b8381101561129b5761126c858583818110611260576112606138ee565b90506020020135611a7c565b82828151811061127e5761127e6138ee565b60209081029190910101528061129381613932565b915050611243565b509392505050565b6112b08282600033612146565b5050565b336112bd611565565b6001600160a01b0316146112e35760405162461bcd60e51b8152600401610dcd906139ad565b6112ed60006125c1565b565b336112f8611565565b6001600160a01b03161461131e5760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b0316106113505760405162461bcd60e51b8152600401610dcd906139e2565b600780546001600160401b03909216600160801b02600160801b600160c01b0319909216919091179055565b60006001600160a01b0382166113b0576001600160a01b038216600090815260056020526040902054610d8990479061391a565b6040516370a0823160e01b81526001600160a01b038316906370a08231906113dc9030906004016136da565b60206040518083038186803b1580156113f457600080fd5b505afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c9190613a7c565b6001600160a01b038316600090815260056020526040902054610d89919061391a565b33611458611565565b6001600160a01b03161461147e5760405162461bcd60e51b8152600401610dcd906139ad565b600c54600160e01b900460ff16156114a85760405162461bcd60e51b8152600401610dcd90613a09565b600c805460ff60e01b1916600160e01b179055565b60008060005b8381101561152c576000600a60008787858181106114e3576114e36138ee565b60209081029290920135835250810191909152604001600020546001600160401b0316111561151a578161151681613932565b9250505b8061152481613932565b9150506114c3565b506008548160065461153e9190613a95565b6115489190613aca565b949350505050565b600061155e8383600061117a565b9392505050565b6000546201000090046001600160a01b031690565b6000610d89826000612448565b6007546000906001600160401b03808216916115ac91600160401b9091041684613a29565b6115b69190613ade565b6001600160401b0316600654610d899190613a95565b336115d5611565565b6001600160a01b0316146115fb5760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b03161061162d5760405162461bcd60e51b8152600401610dcd906139e2565b600655565b3361163b611565565b6001600160a01b0316146116615760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b0316106116935760405162461bcd60e51b8152600401610dcd906139e2565b600980546001600160401b0319166001600160401b0392909216919091179055565b6007546008546000916001600160401b0316906116d184611025565b6001600160401b03166006546116e79190613a95565b6116f19190613aca565b610d899190613aca565b60028054141561171d5760405162461bcd60e51b8152600401610dcd9061394d565b600280556007546001600160401b03600160401b90910481164290911610156117585760405162461bcd60e51b8152600401610dcd90613984565b61101d8161261c565b6007546006546000916001600160401b03808216929161178a91600160401b9091041685613a29565b6001600160401b03166116f19190613a95565b60006117a96001612656565b905080156117c1576000805461ff0019166101001790555b6117ca826125c1565b6117d58260006126ea565b6117e78360000151846020015161271b565b6117f98360400151846060015161274c565b61181583608001518460a001518560c001518660e00151612785565b6118238361010001516127be565b6118318361012001516127ee565b8015611877576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b33611885611565565b6001600160a01b0316146118ab5760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b0316106118dd5760405162461bcd60e51b8152600401610dcd906139e2565b600780546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b33611912611565565b6001600160a01b0316146119385760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b03161061196a5760405162461bcd60e51b8152600401610dcd906139e2565b600855565b33611978611565565b6001600160a01b03161461199e5760405162461bcd60e51b8152600401610dcd906139ad565b600c54600160e01b900460ff16156119c85760405162461bcd60e51b8152600401610dcd90613a09565b600c80546001600160a01b03909216600160401b02600160401b600160e01b0319909216919091179055565b336119fd611565565b6001600160a01b031614611a235760405162461bcd60e51b8152600401610dcd906139ad565b600c54600160f81b900460ff1615611a655760405162461bcd60e51b815260206004820152600560248201526413d0d2d15160da1b6044820152606401610dcd565b600c80546001600160f81b0316600160f81b179055565b6000818152600a60205260408120546001600160401b0316611a9f576000611ac7565b6009546000838152600a6020526040902054611ac7916001600160401b039081169116613a51565b6001600160401b031692915050565b33611adf611565565b6001600160a01b031614611b055760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b031610611b375760405162461bcd60e51b8152600401610dcd906139e2565b600780546001600160401b0319166001600160401b0392909216919091179055565b33611b62611565565b6001600160a01b031614611b885760405162461bcd60e51b8152600401610dcd906139ad565b600c805460ff60e81b1916600160e81b1790556040517fa24423a69b45c25c0479663125e48b482e71d85eae416f589545243bafaf3c9590600090a1565b600280541415611be85760405162461bcd60e51b8152600401610dcd9061394d565b6002805533611bf883838361281e565b6000611c048484612448565b905060008111611c495760405162461bcd60e51b815260206004820152601060248201526f4e4f5448494e475f544f5f434c41494d60801b6044820152606401610dcd565b60008481526004602090815260408083206001600160a01b038716845290915281208054839290611c7b90849061391a565b909155505060008481526004602090815260408083206001600160a01b0387168452825280832042600190910155600590915281208054839290611cc090849061391a565b90915550506001600160a01b038316611ceb57611ce66001600160a01b0383168261283f565b611d6d565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611d199085908590600401613b04565b602060405180830381600087803b158015611d3357600080fd5b505af1158015611d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6b9190613b1d565b505b604080513381526001600160a01b038481166020830152818301879052851660608201526080810183905290517fa2d3c4c1fc934d6d2d8f9e862df90c01ae4eb0e920cd8957d242ba26b8dc40789181900360a00190a1505060016002555050565b611dd833612955565b600c54600160401b90046001600160a01b0316611e2f5760405162461bcd60e51b815260206004820152601560248201527415d2551211149055cbd393d7d49150d25412515395605a1b6044820152606401610dcd565b600c54600160e81b900460ff1615611e895760405162461bcd60e51b815260206004820181905260248201527f57495448445241572f454d455247454e43595f504f5745525f5245564f4b45446044820152606401610dcd565b60005b83811015611fe9576000858583818110611ea857611ea86138ee565b9050602002016020810190611ebd91906136bd565b6001600160a01b03161415611f0957611f04838383818110611ee157611ee16138ee565b600c546001600160a01b03600160401b909104169260209091020135905061283f565b611fd7565b848482818110611f1b57611f1b6138ee565b9050602002016020810190611f3091906136bd565b600c546001600160a01b039182169163a9059cbb91600160401b900416858585818110611f5f57611f5f6138ee565b905060200201356040518363ffffffff1660e01b8152600401611f83929190613b04565b602060405180830381600087803b158015611f9d57600080fd5b505af1158015611fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd59190613b1d565b505b80611fe181613932565b915050611e8c565b507fd40c399a83caf67d15628b821aa7c7bd940e563c57a047e2bd3b8c602bcaf5a58484848460405161201f9493929190613b75565b60405180910390a150505050565b600080805b8381101561129b5761205b85858381811061204f5761204f6138ee565b90506020020135611025565b6120659083613a51565b91508061207181613932565b915050612032565b60028054141561209b5760405162461bcd60e51b8152600401610dcd9061394d565b60028055610e1b8282612ae6565b336120b2611565565b6001600160a01b0316146120d85760405162461bcd60e51b8152600401610dcd906139ad565b6001600160a01b03811661213d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610dcd565b611125816125c1565b6002805414156121685760405162461bcd60e51b8152600401610dcd9061394d565b600280556000805b848110156122985761219b86868381811061218d5761218d6138ee565b90506020020135858561281e565b60006121bf8787848181106121b2576121b26138ee565b9050602002013586612448565b905080156122855780600460008989868181106121de576121de6138ee565b9050602002013581526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000206000016000828254612228919061391a565b9091555042905060046000898986818110612245576122456138ee565b6020908102929092013583525081810192909252604090810160009081206001600160a01b038a168252909252902060010155612282818461391a565b92505b508061229081613932565b915050612170565b506001600160a01b038316600090815260056020526040812080548392906122c190849061391a565b90915550506001600160a01b0383166122ec576122e76001600160a01b0383168261283f565b61236e565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061231a9085908590600401613b04565b602060405180830381600087803b15801561233457600080fd5b505af1158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236c9190613b1d565b505b7fd84a5c424a4f777bcf4f645712b8e5ebfc550f42bde444fa822fe98ee1b132b13383878787866040516123a796959493929190613bd8565b60405180910390a150506001600255505050565b336123c4611565565b6001600160a01b0316146123ea5760405162461bcd60e51b8152600401610dcd906139ad565b60035442600160a01b9091046001600160401b03161061241c5760405162461bcd60e51b8152600401610dcd906139e2565b600980546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b60008061246761246061245a8561137c565b50600090565b8585612b22565b60008581526004602090815260408083206001600160a01b03881684529091529020549091506115489082613c17565b6001600160a01b03163b151590565b6124b08282612b67565b6003546040516342cb086360e11b81526001600160a01b039091169063859610c6906124e29085908590600401613c2e565b600060405180830381600087803b1580156124fc57600080fd5b505af1158015612510573d6000803e3d6000fd5b505050505050565b61252181612ba9565b600354604051636198e33960e01b8152600481018390526001600160a01b0390911690636198e339906024015b600060405180830381600087803b15801561256857600080fd5b505af115801561257c573d6000803e3d6000fd5b5050505050565b600754600090600160801b90046001600160401b0316156125b55750600754600160801b90046001600160401b031690565b506001600160401b0390565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b61262581612bb4565b6003546040516337519c1960e21b8152600481018390526001600160a01b039091169063dd4670649060240161254e565b60008054610100900460ff16156126a4578160ff166001148015612680575061267e30612497565b155b61269c5760405162461bcd60e51b8152600401610dcd90613c42565b506000919050565b60005460ff8084169116106126cb5760405162461bcd60e51b8152600401610dcd90613c42565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166127115760405162461bcd60e51b8152600401610dcd90613c90565b6112b08282612bbf565b600054610100900460ff166127425760405162461bcd60e51b8152600401610dcd90613c90565b6112b08282612c59565b600054610100900460ff166127735760405162461bcd60e51b8152600401610dcd90613c90565b61277b612cbe565b6112b08282612cf5565b600054610100900460ff166127ac5760405162461bcd60e51b8152600401610dcd90613c90565b6127b884848484612d54565b50505050565b600054610100900460ff166127e55760405162461bcd60e51b8152600401610dcd90613c90565b61112581612dd5565b600054610100900460ff166128155760405162461bcd60e51b8152600401610dcd90613c90565b61112581612e11565b612829838383612e63565b612834838383612f27565b611877838383612f72565b8047101561288f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610dcd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146128dc576040519150601f19603f3d011682016040523d82523d6000602084013e6128e1565b606091505b50509050806118775760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610dcd565b6003600c54600160f01b900460ff1660038111156129755761297561360b565b14156129b55760405162461bcd60e51b815260206004820152600f60248201526e15d2551211149055cbd313d0d2d151608a1b6044820152606401610dcd565b6002600c54600160f01b900460ff1660038111156129d5576129d561360b565b14156129de5750565b6001600c54600160f01b900460ff1660038111156129fe576129fe61360b565b1415612a6257600c546001600160a01b03828116600160401b90920416146111255760405162461bcd60e51b815260206004820152601760248201527615d2551211149055cbd3d3931657d49150d25412515395604a1b6044820152606401610dcd565b6000600c54600160f01b900460ff166003811115612a8257612a8261360b565b141561112557806001600160a01b0316612a9a611565565b6001600160a01b0316146111255760405162461bcd60e51b81526020600482015260136024820152722ba4aa24222920ab97a7a7262cafa7aba722a960691b6044820152606401610dcd565b612af08282613037565b600354604051635d36598f60e01b81526001600160a01b0390911690635d36598f906124e29085908590600401613c2e565b6007546000906001600160401b0316612b3a84611025565b612b449190613ade565b6001600160401b0316600854600654612b5d9190613aca565b6115489190613a95565b334260005b8381101561257c57612b978383878785818110612b8b57612b8b6138ee565b90506020020135613079565b80612ba181613932565b915050612b6c565b611125334283613130565b611125334283613079565b600054610100900460ff16612be65760405162461bcd60e51b8152600401610dcd90613c90565b612bf663ac2ba33360e01b6131e7565b600c8054600160401b600160e01b03198116600160401b6001600160a01b038616029081178355839291600160401b62ff000160e01b03191660ff60f01b1990911617600160f01b836003811115612c5057612c5061360b565b02179055505050565b600054610100900460ff16612c805760405162461bcd60e51b8152600401610dcd90613c90565b600380546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b038516171790556112b0631ba050e960e21b6131e7565b600054610100900460ff16612ce55760405162461bcd60e51b8152600401610dcd90613c90565b6112ed63d664280160e01b6131e7565b600054610100900460ff16612d1c5760405162461bcd60e51b8152600401610dcd90613c90565b600980546001600160401b03838116600160401b026001600160801b0319909216908516171790556112b0633a41ba5360e11b6131e7565b600054610100900460ff16612d7b5760405162461bcd60e51b8152600401610dcd90613c90565b6006849055600780546001600160401b03838116600160801b02600160801b600160c01b0319868316600160401b026001600160801b03199094169288169290921792909217161790556127b863c9f600a960e01b6131e7565b600054610100900460ff16612dfc5760405162461bcd60e51b8152600401610dcd90613c90565b6008819055611125632d5305cb60e21b6131e7565b600054610100900460ff16612e385760405162461bcd60e51b8152600401610dcd90613c90565b600c80546001600160401b0319166001600160401b0383161790556111256317b2ef4360e31b6131e7565b6003546040516331a9108f60e11b8152600481018590526001600160a01b03838116921690636352211e9060240160206040518083038186803b158015612ea957600080fd5b505afa158015612ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee19190613cdb565b6001600160a01b0316146118775760405162461bcd60e51b815260206004820152600d60248201526c2727aa2fa7232a2fa7aba722a960991b6044820152606401610dcd565b600c54426001600160401b03909116106118775760405162461bcd60e51b815260206004820152600c60248201526b10d310525357d313d0d2d15160a21b6044820152606401610dcd565b60075442600160401b9091046001600160401b031610612fc25760405162461bcd60e51b815260206004820152600b60248201526a1393d517d4d5105495115160aa1b6044820152606401610dcd565b600754612fd8906001600160401b031642613c17565b60008481526004602090815260408083206001600160a01b0387168452909152902060010154106118775760405162461bcd60e51b8152602060048201526009602482015268544f4f5f4541524c5960b81b6044820152606401610dcd565b334260005b8381101561257c57613067838387878581811061305b5761305b6138ee565b90506020020135613130565b8061307181613932565b91505061303c565b6003546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b1580156130bd57600080fd5b505afa1580156130d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f59190613cdb565b6001600160a01b0316836001600160a01b0316146131255760405162461bcd60e51b8152600401610dcd90613cf8565b611877838383613268565b6003546040516331a9108f60e11b8152600481018390526001600160a01b0390911690636352211e9060240160206040518083038186803b15801561317457600080fd5b505afa158015613188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ac9190613cdb565b6001600160a01b0316836001600160a01b0316146131dc5760405162461bcd60e51b8152600401610dcd90613cf8565b611877838383613301565b6001600160e01b031980821614156132405760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610dcd565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600954600160401b90046001600160401b031661328482611025565b6001600160401b0316106132d25760405162461bcd60e51b815260206004820152601560248201527413505617d1155490551253d397d15610d151511151605a1b6044820152606401610dcd565b6000908152600a6020526040902080546001600160401b0319166001600160401b039290921691909117905550565b6000818152600a60205260409020546001600160401b03166133525760405162461bcd60e51b815260206004820152600a6024820152691393d517d4d51052d15160b21b6044820152606401610dcd565b6009546000828152600a602052604090205461337a916001600160401b039081169116613a51565b6001600160401b0316826001600160401b031610156133d45760405162461bcd60e51b815260206004820152601660248201527509c9ea8bea6a882968a88be989e9c8ebe8a9c9eaa8e960531b6044820152606401610dcd565b6133dd81611025565b6000918252600b6020908152604080842080546001600160401b03949094166001600160401b0319948516179055600a909152909120805490911690555050565b60008083601f84011261343057600080fd5b5081356001600160401b0381111561344757600080fd5b6020830191508360208260051b850101111561346257600080fd5b9250929050565b6001600160a01b038116811461112557600080fd5b80356126e581613469565b60008060006040848603121561349e57600080fd5b83356001600160401b038111156134b457600080fd5b6134c08682870161341e565b90945092505060208401356134d481613469565b809150509250925092565b6000602082840312156134f157600080fd5b81356001600160e01b03198116811461155e57600080fd5b600060208083528351808285015260005b818110156135365785810183015185820160400152820161351a565b81811115613548576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561357057600080fd5b5035919050565b6000806020838503121561358a57600080fd5b82356001600160401b038111156135a057600080fd5b6135ac8582860161341e565b90969095509350505050565b80356001600160401b03811681146126e557600080fd5b6000602082840312156135e157600080fd5b61155e826135b8565b6000602082840312156135fc57600080fd5b81356004811061155e57600080fd5b634e487b7160e01b600052602160045260246000fd5b602081016004831061364357634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252825182820181905260009190848201906040850190845b8181101561368157835183529284019291840191600101613665565b50909695505050505050565b600080604083850312156136a057600080fd5b8235915060208301356136b281613469565b809150509250929050565b6000602082840312156136cf57600080fd5b813561155e81613469565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561373557634e487b7160e01b600052604160045260246000fd5b60405290565b60008082840361016081121561375057600080fd5b6101408082121561376057600080fd5b613768613704565b91506137738561347e565b8252613781602086016135b8565b6020830152613792604086016135b8565b60408301526137a3606086016135b8565b6060830152608085013560808301526137be60a086016135b8565b60a08301526137cf60c086016135b8565b60c08301526137e060e086016135b8565b60e083015261010085810135908301526101206137fe8187016135b8565b818401525081935061381181860161347e565b925050509250929050565b6000806000806040858703121561383257600080fd5b84356001600160401b038082111561384957600080fd5b6138558883890161341e565b9096509450602087013591508082111561386e57600080fd5b5061387b8782880161341e565b95989497509550505050565b6000806000806060858703121561389d57600080fd5b84356001600160401b038111156138b357600080fd5b6138bf8782880161341e565b90955093505060208501356138d381613469565b915060408501356138e381613469565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561392d5761392d613904565b500190565b600060001982141561394657613946613904565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600f908201526e1393d517d4d5105495115117d65155608a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600d908201526c10d3d3919251d7d313d0d2d151609a1b604082015260600190565b6020808252600690820152651313d0d2d15160d21b604082015260600190565b60006001600160401b0383811690831681811015613a4957613a49613904565b039392505050565b60006001600160401b03828116848216808303821115613a7357613a73613904565b01949350505050565b600060208284031215613a8e57600080fd5b5051919050565b6000816000190483118215151615613aaf57613aaf613904565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613ad957613ad9613ab4565b500490565b60006001600160401b0383811680613af857613af8613ab4565b92169190910492915050565b6001600160a01b03929092168252602082015260400190565b600060208284031215613b2f57600080fd5b8151801515811461155e57600080fd5b81835260006001600160fb1b03831115613b5857600080fd5b8260051b8083602087013760009401602001938452509192915050565b6040808252810184905260008560608301825b87811015613bb8578235613b9b81613469565b6001600160a01b0316825260209283019290910190600101613b88565b508381036020850152613bcc818688613b3f565b98975050505050505050565b600060018060a01b038089168352808816602084015260a06040840152613c0360a084018789613b3f565b941660608301525060800152949350505050565b600082821015613c2957613c29613904565b500390565b602081526000611548602083018486613b3f565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215613ced57600080fd5b815161155e81613469565b6020808252600f908201526e2727aa2faa27a5a2a72fa7aba722a960891b60408201526060019056fe455243373231204c6f636b6564205374616b696e6720456d697373696f6e2053747265616da264697066735822122012b358ac49e4db0b56601c48b81ddb3611b24ec109f9fe554a8e8640f799647164736f6c63430008090033",
  "devdoc": {
    "author": "Flair (https://flair.finance)",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 886,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 889,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 782,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4693,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 1124,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15135,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "ticketToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15137,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "lockedUntilTimestamp",
        "offset": 20,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 15144,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "entitlements",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)15133_storage))"
      },
      {
        "astId": 15148,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_streamTotalClaimed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16130,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "emissionRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 16132,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "emissionTimeUnit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 16134,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "emissionStart",
        "offset": 8,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 16136,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "emissionEnd",
        "offset": 16,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 16447,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "totalTickets",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 17271,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "minStakingDuration",
        "offset": 0,
        "slot": "9",
        "type": "t_uint64"
      },
      {
        "astId": 17273,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "maxStakingTotalDurations",
        "offset": 8,
        "slot": "9",
        "type": "t_uint64"
      },
      {
        "astId": 17277,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "lastStakingTime",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint64)"
      },
      {
        "astId": 17281,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "savedStakedDurations",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint64)"
      },
      {
        "astId": 16639,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "claimLockedUntil",
        "offset": 0,
        "slot": "12",
        "type": "t_uint64"
      },
      {
        "astId": 13775,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "withdrawRecipient",
        "offset": 8,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 13777,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "withdrawRecipientLocked",
        "offset": 28,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 13779,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "withdrawPowerRevoked",
        "offset": 29,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 13782,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "withdrawMode",
        "offset": 30,
        "slot": "12",
        "type": "t_enum(WithdrawMode)13719"
      },
      {
        "astId": 13784,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "withdrawModeLocked",
        "offset": 31,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(WithdrawMode)13719": {
        "encoding": "inplace",
        "label": "enum WithdrawMode",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Entitlement)15133_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721MultiTokenStream.Entitlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Entitlement)15133_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)15133_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ERC721MultiTokenStream.Entitlement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Entitlement)15133_storage)"
      },
      "t_mapping(t_uint256,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_struct(Entitlement)15133_storage": {
        "encoding": "inplace",
        "label": "struct ERC721MultiTokenStream.Entitlement",
        "members": [
          {
            "astId": 15130,
            "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15132,
            "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
            "label": "lastClaimedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}