{
  "address": "0x770798EC0CC0F03900F5bEE7c448d40BbFf756e0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintByRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        }
      ],
      "name": "mintByRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintByRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x16195dde05f5677c071bc3b42b0079facb369a8e5c5db0dac77c732fb7b33da2",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x770798EC0CC0F03900F5bEE7c448d40BbFf756e0",
    "transactionIndex": 2,
    "gasUsed": "754623",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x449046a71b0069de21835eabebe1e98fb2c312762221b161c2fb8818a96dde07",
    "transactionHash": "0x16195dde05f5677c071bc3b42b0079facb369a8e5c5db0dac77c732fb7b33da2",
    "logs": [],
    "blockNumber": 21483017,
    "cumulativeGasUsed": "822150",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "3e978968784236f46d062ea1c097f0f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintByRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"name\":\"mintByRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintByRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:provides-interfaces\":\"IERC721MintableRoleBased\",\"custom:required-dependencies\":\"IERC721MintableExtension\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"mintByRole(address,uint256)\":{\"details\":\"Mints `amount` new tokens for `to`.\"},\"mintByRole(address,uint256,string[])\":{\"details\":\"Mint a new token with a dedicated tokenURI.\"},\"mintByRole(address[],uint256[])\":{\"details\":\"Mints multiple `amount`s of new tokens for every single address in `tos`.\"}},\"title\":\"ERC721 - Mint as role\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Allow minting for senders with MINTER_ROLE to mint new tokens (supports ERC721A).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC721/facets/minting/ERC721MintableRoleBased.sol\":\"ERC721MintableRoleBased\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/access/roles/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./AccessControlStorage.sol\\\";\\nimport \\\"./IAccessControlEvents.sol\\\";\\n\\nabstract contract AccessControlInternal is Context, IAccessControlEvents {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function _hasRole(bytes32 role, address account) internal view virtual returns (bool) {\\n        return AccessControlStorage.layout().roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function _getRoleAdmin(bytes32 role) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _renounceRole(bytes32 role, address account) internal virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!_hasRole(role, account)) {\\n            AccessControlStorage.layout().roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (_hasRole(role, account)) {\\n            AccessControlStorage.layout().roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6bdd401d768e7df6002d060fc2e5287512a803ce2abc42ad99367b131e41f9bc\",\"license\":\"MIT\"},\"src/access/roles/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.AccessControl\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81acdea32dd524f817e7c8f4999f1c24e803dad4680a647d1be35675637a10b3\",\"license\":\"MIT\"},\"src/access/roles/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlEvents {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\",\"keccak256\":\"0x7574c6d5a71b386e40e071bd7ba50eb0e43bb265385637af3620704b84d7666d\",\"license\":\"MIT\"},\"src/common/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * The caller must be the current contract itself.\\n */\\nerror ErrSenderIsNotSelf();\\n\",\"keccak256\":\"0xd1592cdff5defdc5c2eabccce2fcd663d930338b99dad69567c7054c81711bc9\",\"license\":\"MIT\"},\"src/token/ERC721/extensions/mintable/IERC721MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC721A} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC721MintableExtension {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC721A-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(address to, uint256 amount) external;\\n\\n    function mintByFacet(address[] memory tos, uint256[] memory amounts) external;\\n}\\n\",\"keccak256\":\"0x8acbd67db79ebd4189a980fa17b14289585f1bbc4cb7a17fc9d0dacff39a86cf\",\"license\":\"MIT\"},\"src/token/ERC721/extensions/supply/ERC721SupplyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC721SupplyStorage {\\n    struct Layout {\\n        // The next token ID to be minted.\\n        uint256 currentIndex;\\n        // The number of tokens burned.\\n        uint256 burnCounter;\\n        // Maximum possible supply of tokens.\\n        uint256 maxSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC721Supply\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda4ffe387a4a1ae9d7ab750a5c8376969e55f1fc9a3e78a68c2a8345bff4d170\",\"license\":\"MIT\"},\"src/token/ERC721/facets/minting/ERC721MintableRoleBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../../../access/roles/AccessControlInternal.sol\\\";\\nimport \\\"../../extensions/mintable/IERC721MintableExtension.sol\\\";\\nimport \\\"../../../common/metadata/TokenMetadataAdminInternal.sol\\\";\\nimport \\\"../../../ERC721/extensions/supply/ERC721SupplyStorage.sol\\\";\\nimport \\\"./IERC721MintableRoleBased.sol\\\";\\n\\n/**\\n * @title ERC721 - Mint as role\\n * @notice Allow minting for senders with MINTER_ROLE to mint new tokens (supports ERC721A).\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:required-dependencies IERC721MintableExtension\\n * @custom:provides-interfaces IERC721MintableRoleBased\\n */\\ncontract ERC721MintableRoleBased is IERC721MintableRoleBased, AccessControlInternal, TokenMetadataAdminInternal {\\n    using ERC721SupplyStorage for ERC721SupplyStorage.Layout;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    /**\\n     * @inheritdoc IERC721MintableRoleBased\\n     */\\n    function mintByRole(address to, uint256 amount) public virtual onlyRole(MINTER_ROLE) {\\n        IERC721MintableExtension(address(this)).mintByFacet(to, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721MintableRoleBased\\n     */\\n    function mintByRole(address[] calldata tos, uint256[] calldata amounts) public virtual onlyRole(MINTER_ROLE) {\\n        IERC721MintableExtension(address(this)).mintByFacet(tos, amounts);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721MintableRoleBased\\n     */\\n    function mintByRole(\\n        address to,\\n        uint256 amount,\\n        string[] calldata tokenURIs\\n    ) public virtual onlyRole(MINTER_ROLE) {\\n        uint256 nextTokenId = ERC721SupplyStorage.layout().currentIndex;\\n\\n        IERC721MintableExtension(address(this)).mintByFacet(to, amount);\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            _setURI(nextTokenId + i, tokenURIs[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4f419a1a6db5d666b5d7c4c1a9a195fa9aeb55c0baed0eff9b144a0101686614\",\"license\":\"MIT\"},\"src/token/ERC721/facets/minting/IERC721MintableRoleBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC721} that allows a specific role to mint tokens.\\n */\\ninterface IERC721MintableRoleBased {\\n    /**\\n     * @dev Mints `amount` new tokens for `to`.\\n     */\\n    function mintByRole(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Mints multiple `amount`s of new tokens for every single address in `tos`.\\n     */\\n    function mintByRole(address[] calldata tos, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev Mint a new token with a dedicated tokenURI.\\n     */\\n    function mintByRole(\\n        address to,\\n        uint256 amount,\\n        string[] calldata tokenURIs\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5299178847b41e78067421e559ac900f9a7ea0a3dbd5b70b1bcabb844786805f\",\"license\":\"MIT\"},\"src/token/common/metadata/ITokenMetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ITokenMetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0xa10bfaafe098e7fdeba4d74a93515a670eb7151ef06cfe4c3b9e3c8eac4216bc\",\"license\":\"MIT\"},\"src/token/common/metadata/TokenMetadataAdminInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./ITokenMetadataInternal.sol\\\";\\nimport \\\"./TokenMetadataStorage.sol\\\";\\n\\nabstract contract TokenMetadataAdminInternal is ITokenMetadataInternal {\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        require(!TokenMetadataStorage.layout().baseURILocked, \\\"Metadata: baseURI locked\\\");\\n        TokenMetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setFallbackURI(string memory baseURI) internal virtual {\\n        require(!TokenMetadataStorage.layout().fallbackURILocked, \\\"Metadata: fallbackURI locked\\\");\\n        TokenMetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        require(tokenId >= TokenMetadataStorage.layout().lastUnlockedTokenId, \\\"Metadata: tokenURI locked\\\");\\n        TokenMetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n\\n    function _setURISuffix(string memory uriSuffix) internal virtual {\\n        require(!TokenMetadataStorage.layout().uriSuffixLocked, \\\"Metadata: uriSuffix locked\\\");\\n        TokenMetadataStorage.layout().uriSuffix = uriSuffix;\\n    }\\n\\n    function _lockBaseURI() internal virtual {\\n        TokenMetadataStorage.layout().baseURILocked = true;\\n    }\\n\\n    function _lockFallbackURI() internal virtual {\\n        TokenMetadataStorage.layout().fallbackURILocked = true;\\n    }\\n\\n    function _lockURIUntil(uint256 tokenId) internal virtual {\\n        TokenMetadataStorage.layout().lastUnlockedTokenId = tokenId;\\n    }\\n\\n    function _lockURISuffix() internal virtual {\\n        TokenMetadataStorage.layout().uriSuffixLocked = true;\\n    }\\n}\\n\",\"keccak256\":\"0x4839bb8a2b42d1cb4158dd1dab5da010834a38301cc463683d858fcb82ca9a7a\",\"license\":\"MIT\"},\"src/token/common/metadata/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary TokenMetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.TokenMetadata\\\");\\n\\n    struct Layout {\\n        string baseURI;\\n        bool baseURILocked;\\n        string fallbackURI;\\n        bool fallbackURILocked;\\n        string uriSuffix;\\n        bool uriSuffixLocked;\\n        uint256 lastUnlockedTokenId;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafa901b11d3ed3e6253df7f86855baef6cf35d53508ff43a59cb140d63d4a192\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cb8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a217fddf11610050578063a217fddf14610094578063b9a47ff2146100ae578063d5391393146100c157600080fd5b80631a056e711461006c5780634c361a8c14610081575b600080fd5b61007f61007a36600461078d565b6100e8565b005b61007f61008f366004610803565b610184565b61009c600081565b60405190815260200160405180910390f35b61007f6100bc36600461085d565b6102ca565b61009c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66101128161036f565b604051632d4f475f60e01b815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390523090632d4f475f90604401600060405180830381600087803b15801561016757600080fd5b505af115801561017b573d6000803e3d6000fd5b50505050505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66101ae8161036f565b60007faa3a0910ce5fb062d392dc5a532ff9d50bb9d0f614a8eda1a3ec786de0b761f354604051632d4f475f60e01b815273ffffffffffffffffffffffffffffffffffffffff88166004820152602481018790529091503090632d4f475f90604401600060405180830381600087803b15801561022a57600080fd5b505af115801561023e573d6000803e3d6000fd5b5050505060005b8581101561017b576102b861025a82846108d3565b86868481811061026c5761026c6108eb565b905060200281019061027e9190610901565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061037c92505050565b806102c281610948565b915050610245565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66102f48161036f565b6040517f49142a1400000000000000000000000000000000000000000000000000000000815230906349142a1490610336908890889088908890600401610961565b600060405180830381600087803b15801561035057600080fd5b505af1158015610364573d6000803e3d6000fd5b505050505050505050565b6103798133610466565b50565b7f021fe373f7e014154d4f551c37c047b9ed9093c774291911030896b9b2dfef65548210156103f25760405162461bcd60e51b815260206004820152601960248201527f4d657461646174613a20746f6b656e555249206c6f636b65640000000000000060448201526064015b60405180910390fd5b60008281527f021fe373f7e014154d4f551c37c047b9ed9093c774291911030896b9b2dfef66602052604090206104298282610aa8565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8260405161045a9190610b98565b60405180910390a25050565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da626020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610507576104c58161050b565b6104d0836020610534565b6040516020016104e1929190610bcb565b60408051601f198184030181529082905262461bcd60e51b82526103e991600401610b98565b5050565b606061052e73ffffffffffffffffffffffffffffffffffffffff83166014610534565b92915050565b60606000610543836002610c4c565b61054e9060026108d3565b67ffffffffffffffff81111561056657610566610a09565b6040519080825280601f01601f191660200182016040528015610590576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106105c7576105c76108eb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061062a5761062a6108eb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610666846002610c4c565b6106719060016108d3565b90505b600181111561070e577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106106b2576106b26108eb565b1a60f81b8282815181106106c8576106c86108eb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361070781610c6b565b9050610674565b50831561075d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103e9565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461078857600080fd5b919050565b600080604083850312156107a057600080fd5b6107a983610764565b946020939093013593505050565b60008083601f8401126107c957600080fd5b50813567ffffffffffffffff8111156107e157600080fd5b6020830191508360208260051b85010111156107fc57600080fd5b9250929050565b6000806000806060858703121561081957600080fd5b61082285610764565b935060208501359250604085013567ffffffffffffffff81111561084557600080fd5b610851878288016107b7565b95989497509550505050565b6000806000806040858703121561087357600080fd5b843567ffffffffffffffff8082111561088b57600080fd5b610897888389016107b7565b909650945060208701359150808211156108b057600080fd5b50610851878288016107b7565b634e487b7160e01b600052601160045260246000fd5b600082198211156108e6576108e66108bd565b500190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261091857600080fd5b83018035915067ffffffffffffffff82111561093357600080fd5b6020019150368190038213156107fc57600080fd5b60006001820161095a5761095a6108bd565b5060010190565b6040808252810184905260008560608301825b878110156109af5773ffffffffffffffffffffffffffffffffffffffff61099a84610764565b16825260209283019290910190600101610974565b5083810360208501528481527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8511156109e857600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680610a3357607f821691505b602082108103610a5357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610aa357600081815260208120601f850160051c81016020861015610a805750805b601f850160051c820191505b81811015610a9f57828155600101610a8c565b5050505b505050565b815167ffffffffffffffff811115610ac257610ac2610a09565b610ad681610ad08454610a1f565b84610a59565b602080601f831160018114610b0b5760008415610af35750858301515b600019600386901b1c1916600185901b178555610a9f565b600085815260208120601f198616915b82811015610b3a57888601518255948401946001909101908401610b1b565b5085821015610b585787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60005b83811015610b83578181015183820152602001610b6b565b83811115610b92576000848401525b50505050565b6020815260008251806020840152610bb7816040850160208701610b68565b601f01601f19169190910160400192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610c03816017850160208801610b68565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351610c40816028840160208801610b68565b01602801949350505050565b6000816000190483118215151615610c6657610c666108bd565b500290565b600081610c7a57610c7a6108bd565b50600019019056fea26469706673582212202e82ccbde2868932fb8532f8ed456e4570aef05fcdf7d19fb93ae63e3b4a24a664736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063a217fddf11610050578063a217fddf14610094578063b9a47ff2146100ae578063d5391393146100c157600080fd5b80631a056e711461006c5780634c361a8c14610081575b600080fd5b61007f61007a36600461078d565b6100e8565b005b61007f61008f366004610803565b610184565b61009c600081565b60405190815260200160405180910390f35b61007f6100bc36600461085d565b6102ca565b61009c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66101128161036f565b604051632d4f475f60e01b815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390523090632d4f475f90604401600060405180830381600087803b15801561016757600080fd5b505af115801561017b573d6000803e3d6000fd5b50505050505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66101ae8161036f565b60007faa3a0910ce5fb062d392dc5a532ff9d50bb9d0f614a8eda1a3ec786de0b761f354604051632d4f475f60e01b815273ffffffffffffffffffffffffffffffffffffffff88166004820152602481018790529091503090632d4f475f90604401600060405180830381600087803b15801561022a57600080fd5b505af115801561023e573d6000803e3d6000fd5b5050505060005b8581101561017b576102b861025a82846108d3565b86868481811061026c5761026c6108eb565b905060200281019061027e9190610901565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061037c92505050565b806102c281610948565b915050610245565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66102f48161036f565b6040517f49142a1400000000000000000000000000000000000000000000000000000000815230906349142a1490610336908890889088908890600401610961565b600060405180830381600087803b15801561035057600080fd5b505af1158015610364573d6000803e3d6000fd5b505050505050505050565b6103798133610466565b50565b7f021fe373f7e014154d4f551c37c047b9ed9093c774291911030896b9b2dfef65548210156103f25760405162461bcd60e51b815260206004820152601960248201527f4d657461646174613a20746f6b656e555249206c6f636b65640000000000000060448201526064015b60405180910390fd5b60008281527f021fe373f7e014154d4f551c37c047b9ed9093c774291911030896b9b2dfef66602052604090206104298282610aa8565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8260405161045a9190610b98565b60405180910390a25050565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da626020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610507576104c58161050b565b6104d0836020610534565b6040516020016104e1929190610bcb565b60408051601f198184030181529082905262461bcd60e51b82526103e991600401610b98565b5050565b606061052e73ffffffffffffffffffffffffffffffffffffffff83166014610534565b92915050565b60606000610543836002610c4c565b61054e9060026108d3565b67ffffffffffffffff81111561056657610566610a09565b6040519080825280601f01601f191660200182016040528015610590576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106105c7576105c76108eb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061062a5761062a6108eb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610666846002610c4c565b6106719060016108d3565b90505b600181111561070e577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106106b2576106b26108eb565b1a60f81b8282815181106106c8576106c86108eb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361070781610c6b565b9050610674565b50831561075d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103e9565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461078857600080fd5b919050565b600080604083850312156107a057600080fd5b6107a983610764565b946020939093013593505050565b60008083601f8401126107c957600080fd5b50813567ffffffffffffffff8111156107e157600080fd5b6020830191508360208260051b85010111156107fc57600080fd5b9250929050565b6000806000806060858703121561081957600080fd5b61082285610764565b935060208501359250604085013567ffffffffffffffff81111561084557600080fd5b610851878288016107b7565b95989497509550505050565b6000806000806040858703121561087357600080fd5b843567ffffffffffffffff8082111561088b57600080fd5b610897888389016107b7565b909650945060208701359150808211156108b057600080fd5b50610851878288016107b7565b634e487b7160e01b600052601160045260246000fd5b600082198211156108e6576108e66108bd565b500190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261091857600080fd5b83018035915067ffffffffffffffff82111561093357600080fd5b6020019150368190038213156107fc57600080fd5b60006001820161095a5761095a6108bd565b5060010190565b6040808252810184905260008560608301825b878110156109af5773ffffffffffffffffffffffffffffffffffffffff61099a84610764565b16825260209283019290910190600101610974565b5083810360208501528481527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8511156109e857600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680610a3357607f821691505b602082108103610a5357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610aa357600081815260208120601f850160051c81016020861015610a805750805b601f850160051c820191505b81811015610a9f57828155600101610a8c565b5050505b505050565b815167ffffffffffffffff811115610ac257610ac2610a09565b610ad681610ad08454610a1f565b84610a59565b602080601f831160018114610b0b5760008415610af35750858301515b600019600386901b1c1916600185901b178555610a9f565b600085815260208120601f198616915b82811015610b3a57888601518255948401946001909101908401610b1b565b5085821015610b585787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60005b83811015610b83578181015183820152602001610b6b565b83811115610b92576000848401525b50505050565b6020815260008251806020840152610bb7816040850160208701610b68565b601f01601f19169190910160400192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610c03816017850160208801610b68565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351610c40816028840160208801610b68565b01602801949350505050565b6000816000190483118215151615610c6657610c666108bd565b500290565b600081610c7a57610c7a6108bd565b50600019019056fea26469706673582212202e82ccbde2868932fb8532f8ed456e4570aef05fcdf7d19fb93ae63e3b4a24a664736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:provides-interfaces": "IERC721MintableRoleBased",
    "custom:required-dependencies": "IERC721MintableExtension",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "mintByRole(address,uint256)": {
        "details": "Mints `amount` new tokens for `to`."
      },
      "mintByRole(address,uint256,string[])": {
        "details": "Mint a new token with a dedicated tokenURI."
      },
      "mintByRole(address[],uint256[])": {
        "details": "Mints multiple `amount`s of new tokens for every single address in `tos`."
      }
    },
    "title": "ERC721 - Mint as role",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Allow minting for senders with MINTER_ROLE to mint new tokens (supports ERC721A).",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}