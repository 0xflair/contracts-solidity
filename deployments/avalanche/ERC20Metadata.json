{
  "address": "0xE9fCC8544F378332CAF85A9AbBd1d24872feAd54",
  "abi": [
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimalsLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameAndSymbolLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x142d46b4dcbaf3592ca7a6156fa2a793dda6a2d345aa8fc49d727dbc7fa3bfb7",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xE9fCC8544F378332CAF85A9AbBd1d24872feAd54",
    "transactionIndex": 9,
    "gasUsed": "219446",
    "logsBloom": "0x
    "blockHash": "0xbec66030597d8f15612f0b0bb4ecc0c824e461ebc09a4c6464d7d218f055d079",
    "transactionHash": "0x142d46b4dcbaf3592ca7a6156fa2a793dda6a2d345aa8fc49d727dbc7fa3bfb7",
    "logs": [],
    "blockNumber": 21398296,
    "cumulativeGasUsed": "1182557",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "39282fd68396b0deb633a61703307dfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameAndSymbolLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Tokens\",\"custom:provides-interfaces\":\"IERC20Metadata\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"decimals()\":{\"returns\":{\"_0\":\"token decimals\"}}},\"title\":\"ERC20 Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"return token decimals, generally used only for display purposes\"}},\"notice\":\"Provides standard read methods for name, symbol and decimals metadata for an ERC20 token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC20/facets/metadata/ERC20Metadata.sol\":\"ERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/token/ERC20/facets/metadata/ERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport { Metadata } from \\\"../../../common/metadata/Metadata.sol\\\";\\nimport { IERC20Metadata } from \\\"./IERC20Metadata.sol\\\";\\nimport { ERC20MetadataInternal } from \\\"./ERC20MetadataInternal.sol\\\";\\n\\n/**\\n * @title ERC20 Metadata\\n * @notice Provides standard read methods for name, symbol and decimals metadata for an ERC20 token.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Tokens\\n * @custom:provides-interfaces IERC20Metadata\\n */\\ncontract ERC20Metadata is Metadata, IERC20Metadata, ERC20MetadataInternal {\\n    /**\\n     * @inheritdoc IERC20Metadata\\n     */\\n    function decimals() external view returns (uint8) {\\n        return _decimals();\\n    }\\n\\n    function decimalsLocked() external view returns (bool) {\\n        return _decimalsLocked();\\n    }\\n}\\n\",\"keccak256\":\"0x05fe192d2a4b113f299fb9bf9f91fa8b127a3937e0029ad64d984ec484b15c49\",\"license\":\"MIT\"},\"src/token/ERC20/facets/metadata/ERC20MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport { ERC20MetadataStorage } from \\\"./ERC20MetadataStorage.sol\\\";\\n\\n/**\\n * @title ERC20Metadata internal functions\\n */\\nabstract contract ERC20MetadataInternal {\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function _decimals() internal view virtual returns (uint8) {\\n        return ERC20MetadataStorage.layout().decimals;\\n    }\\n\\n    function _decimalsLocked() internal view virtual returns (bool) {\\n        return ERC20MetadataStorage.layout().decimalsLocked;\\n    }\\n\\n    function _setDecimals(uint8 decimals_) internal virtual {\\n        require(!_decimalsLocked(), \\\"ERC20Metadata: decimals locked\\\");\\n        ERC20MetadataStorage.layout().decimals = decimals_;\\n        ERC20MetadataStorage.layout().decimalsLocked = true;\\n    }\\n\\n    function _setDecimalsLocked(bool decimalsLocked_) internal virtual {\\n        ERC20MetadataStorage.layout().decimalsLocked = decimalsLocked_;\\n    }\\n}\\n\",\"keccak256\":\"0x2078cdc79543f4b5ebb68baf2cc4ab3c07c4887898bf52ff0b095917cdf5cbe4\",\"license\":\"MIT\"},\"src/token/ERC20/facets/metadata/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC20MetadataStorage {\\n    struct Layout {\\n        uint8 decimals;\\n        bool decimalsLocked;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC20Metadata\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62148e2c731baf6badbae460d125fa8b698993013b8e2619966e832d8b437b7c\",\"license\":\"MIT\"},\"src/token/ERC20/facets/metadata/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../common/metadata/IMetadata.sol\\\";\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata is IMetadata {\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x74e8d6b165fc288ba6c1cb2916d22f7411844a8114b808cf24e8882e80a74570\",\"license\":\"MIT\"},\"src/token/common/metadata/IMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IMetadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfb2be5baa663f41de00f7210b19a268b8614fb0bf03b7ab5612c3e449425d2e6\",\"license\":\"MIT\"},\"src/token/common/metadata/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IMetadata.sol\\\";\\nimport \\\"./MetadataStorage.sol\\\";\\n\\n/**\\n * @title Metadata\\n * @notice Provides contract name and symbol.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Tokens\\n * @custom:provides-interfaces IMetadata\\n */\\ncontract Metadata is IMetadata {\\n    function name() external view virtual override returns (string memory) {\\n        return MetadataStorage.layout().name;\\n    }\\n\\n    function symbol() external view virtual override returns (string memory) {\\n        return MetadataStorage.layout().symbol;\\n    }\\n\\n    function nameAndSymbolLocked() external view virtual returns (bool) {\\n        return MetadataStorage.layout().nameAndSymbolLocked;\\n    }\\n}\\n\",\"keccak256\":\"0x524a5e0f51fd9e29b536f0afea9395ce30e00c40037b7819060f849b7158f37d\",\"license\":\"MIT\"},\"src/token/common/metadata/MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Metadata\\\");\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        bool nameAndSymbolLocked;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc40b23a3c652d05174c270e1a95d402320a5a6e33ae48f78927f3f481ce568c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610303806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063313ce56711610050578063313ce567146100c057806395d89b41146100da578063c0c092ee146100e257600080fd5b806306fdde031461006c578063180434a31461008a575b600080fd5b610074610111565b6040516100819190610225565b60405180910390f35b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fe5460ff165b6040519015158152602001610081565b6100c86101c2565b60405160ff9091168152602001610081565b6100746101f4565b7f3b67c745df1d17403ada58f538de4780e4768549f9387f877a18fb6c6b3a7b4b54610100900460ff166100b0565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc805461013f9061027a565b80601f016020809104026020016040519081016040528092919081815260200182805461016b9061027a565b80156101b85780601f1061018d576101008083540402835291602001916101b8565b820191906000526020600020905b81548152906001019060200180831161019b57829003601f168201915b5050505050905090565b60006101ef7f3b67c745df1d17403ada58f538de4780e4768549f9387f877a18fb6c6b3a7b4b5460ff1690565b905090565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600101805461013f9061027a565b600060208083528351808285015260005b8181101561025257858101830151858201604001528201610236565b81811115610264576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061028e57607f821691505b6020821081036102c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea26469706673582212207e4e0beefdd0dd003aed5386ff33d73a92cf2209006129113d564a344941e20064736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063313ce56711610050578063313ce567146100c057806395d89b41146100da578063c0c092ee146100e257600080fd5b806306fdde031461006c578063180434a31461008a575b600080fd5b610074610111565b6040516100819190610225565b60405180910390f35b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fe5460ff165b6040519015158152602001610081565b6100c86101c2565b60405160ff9091168152602001610081565b6100746101f4565b7f3b67c745df1d17403ada58f538de4780e4768549f9387f877a18fb6c6b3a7b4b54610100900460ff166100b0565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc805461013f9061027a565b80601f016020809104026020016040519081016040528092919081815260200182805461016b9061027a565b80156101b85780601f1061018d576101008083540402835291602001916101b8565b820191906000526020600020905b81548152906001019060200180831161019b57829003601f168201915b5050505050905090565b60006101ef7f3b67c745df1d17403ada58f538de4780e4768549f9387f877a18fb6c6b3a7b4b5460ff1690565b905090565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600101805461013f9061027a565b600060208083528351808285015260005b8181101561025257858101830151858201604001528201610236565b81811115610264576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061028e57607f821691505b6020821081036102c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea26469706673582212207e4e0beefdd0dd003aed5386ff33d73a92cf2209006129113d564a344941e20064736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Tokens",
    "custom:provides-interfaces": "IERC20Metadata",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "decimals()": {
        "returns": {
          "_0": "token decimals"
        }
      }
    },
    "title": "ERC20 Metadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "return token decimals, generally used only for display purposes"
      }
    },
    "notice": "Provides standard read methods for name, symbol and decimals metadata for an ERC20 token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}