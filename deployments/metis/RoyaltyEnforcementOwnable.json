{
  "address": "0x5bdECF506Cc673a60dD8c820fa1fd3806e459864",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionOrRegistrantToCopy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "registerRoyaltyEnforcement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enforce",
          "type": "bool"
        }
      ],
      "name": "toggleRoyaltyEnforcement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x897ece4d6fba0c9573c407c7a23b23c0653f8008d5816f4e23df3e0e879285c8",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x5bdECF506Cc673a60dD8c820fa1fd3806e459864",
    "transactionIndex": 0,
    "gasUsed": "306147",
    "logsBloom": "0x
    "blockHash": "0x8c96156dfe3443bcc31f9150e9d0c3094d676cfe480c17471c42a5b75208c13d",
    "transactionHash": "0x897ece4d6fba0c9573c407c7a23b23c0653f8008d5816f4e23df3e0e879285c8",
    "logs": [],
    "blockNumber": 4237838,
    "cumulativeGasUsed": "306147",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bc22c1dff1a3b21bf4b0d926dd7f4c1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrantToCopy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"registerRoyaltyEnforcement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enforce\",\"type\":\"bool\"}],\"name\":\"toggleRoyaltyEnforcement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Tokens\",\"custom:peer-dependencies\":\"IRoyaltyEnforcement\",\"custom:provides-interfaces\":\"IRoyaltyEnforcementAdmin\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Royalty Enforcement - Admin - Ownable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Controls where on-chain royalties must be enforced by blocklisting marketplaces.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/finance/royalty/RoyaltyEnforcementOwnable.sol\":\"RoyaltyEnforcementOwnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"operator-filter-registry/src/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xe2a19d82d7050c0cd1afb542253f65ce34a650d7d99c0ffcdec6b4274fc51e31\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0x1f1b08cba51a05c8cea04e13251f9f8b8fc895017071cb205b0b4170900d1e5b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xaf69959fcc5b87a74426939bc35b8517566494e3ba575b5cfdb1b5c788c0636a\",\"license\":\"MIT\"},\"src/finance/royalty/IRoyaltyEnforcementAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Manages if royalties are enforced by blocklisting marketplaces with optional royalty.\\n * @dev Derived from 'operator-filter-registry' NPM repository by OpenSea.\\n */\\ninterface IRoyaltyEnforcementAdmin {\\n    function toggleRoyaltyEnforcement(bool enforce) external;\\n\\n    function registerRoyaltyEnforcement(address subscriptionOrRegistrantToCopy, bool subscribe) external;\\n}\\n\",\"keccak256\":\"0xa4bdd9ba5b04e7310084baa6bfada7ba46746d05120802b7d379895ebee899d2\",\"license\":\"MIT\"},\"src/finance/royalty/IRoyaltyEnforcementInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Manages where on-chain royalties must be enforced by blocklisting marketplaces with optional royalty.\\n * @dev Derived from 'operator-filter-registry' NPM repository by OpenSea.\\n */\\ninterface IRoyaltyEnforcementInternal {\\n    error OperatorNotAllowed(address operator);\\n}\\n\",\"keccak256\":\"0x836183f44a4c4da24ef14bd40ed25d9da2dd7d2bbe167942c0de5bba53c6aa64\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyEnforcementInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"operator-filter-registry/src/IOperatorFilterRegistry.sol\\\";\\n\\nimport \\\"./IRoyaltyEnforcementInternal.sol\\\";\\nimport \\\"./RoyaltyEnforcementStorage.sol\\\";\\n\\n/**\\n * @dev Manages and shows if royalties are enforced by blocklisting marketplaces with optional royalty.\\n * @dev Derived from 'operator-filter-registry' NPM repository by OpenSea.\\n */\\nabstract contract RoyaltyEnforcementInternal is IRoyaltyEnforcementInternal {\\n    // address private constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    IOperatorFilterRegistry private constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    function _hasRoyaltyEnforcement() internal view virtual returns (bool) {\\n        return RoyaltyEnforcementStorage.layout().enforceRoyalties;\\n    }\\n\\n    function _toggleRoyaltyEnforcement(bool enforce) internal virtual {\\n        RoyaltyEnforcementStorage.layout().enforceRoyalties = enforce;\\n    }\\n\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal virtual {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        OPERATOR_FILTER_REGISTRY.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (RoyaltyEnforcementStorage.layout().enforceRoyalties) {\\n            if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n                // Allow spending tokens from addresses with balance\\n                // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n                // from an EOA.\\n                if (from == msg.sender) {\\n                    _;\\n                    return;\\n                }\\n                if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), msg.sender)) {\\n                    revert OperatorNotAllowed(msg.sender);\\n                }\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (RoyaltyEnforcementStorage.layout().enforceRoyalties) {\\n            if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n                if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                    revert OperatorNotAllowed(operator);\\n                }\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x78a5e9470725042f2a9d20860a09b27d5cd99dc4cd22920e3ee2643434159761\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyEnforcementOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../../access/ownable/OwnableInternal.sol\\\";\\n\\nimport \\\"./RoyaltyEnforcementStorage.sol\\\";\\nimport \\\"./IRoyaltyEnforcementAdmin.sol\\\";\\nimport \\\"./RoyaltyEnforcementInternal.sol\\\";\\n\\n/**\\n * @title Royalty Enforcement - Admin - Ownable\\n * @notice Controls where on-chain royalties must be enforced by blocklisting marketplaces.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Tokens\\n * @custom:peer-dependencies IRoyaltyEnforcement\\n * @custom:provides-interfaces IRoyaltyEnforcementAdmin\\n */\\ncontract RoyaltyEnforcementOwnable is IRoyaltyEnforcementAdmin, RoyaltyEnforcementInternal, OwnableInternal {\\n    function toggleRoyaltyEnforcement(bool enforce) external override onlyOwner {\\n        _toggleRoyaltyEnforcement(enforce);\\n    }\\n\\n    function registerRoyaltyEnforcement(address subscriptionOrRegistrantToCopy, bool subscribe)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _register(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n}\\n\",\"keccak256\":\"0x47bad47a0fac323dde6fd2fc4ae418b2aae1ec58171867ef1b5b11061631c7a4\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyEnforcementStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary RoyaltyEnforcementStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.RoyaltyEnforcement\\\");\\n\\n    struct Layout {\\n        bool enforceRoyalties;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae08fcf816a425c667b25c3a0f37b3a39c7584a857bdbce3912a12ae86e7bb99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610499806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063101224881461003b57806316bf7d3414610050575b600080fd5b61004e6100493660046103d0565b610063565b005b61004e61005e3660046103f4565b610123565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146100ee5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b7f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb219790805482151560ff1990911617905550565b50565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146101a95760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100e5565b6101b382826101b7565b5050565b6daaeb6d7670e522a718067333cd4e3b156101b3576040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526daaeb6d7670e522a718067333cd4e9063c3c5a547906024016020604051808303816000875af1158015610230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102549190610446565b6101b35780156102f6576040517f7d3e3dbe00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff831660248201526daaeb6d7670e522a718067333cd4e90637d3e3dbe906044015b600060405180830381600087803b1580156102da57600080fd5b505af11580156102ee573d6000803e3d6000fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff821615610378576040517fa0af290300000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff831660248201526daaeb6d7670e522a718067333cd4e9063a0af2903906044016102c0565b6040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526daaeb6d7670e522a718067333cd4e90634420e486906024016102c0565b801515811461012057600080fd5b6000602082840312156103e257600080fd5b81356103ed816103c2565b9392505050565b6000806040838503121561040757600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461042b57600080fd5b9150602083013561043b816103c2565b809150509250929050565b60006020828403121561045857600080fd5b81516103ed816103c256fea2646970667358221220a7f99bb56e97dde160db66ba2f33cfb50d72eeb6fd292a9860c27a7272c3d5ce64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063101224881461003b57806316bf7d3414610050575b600080fd5b61004e6100493660046103d0565b610063565b005b61004e61005e3660046103f4565b610123565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146100ee5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b7f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb219790805482151560ff1990911617905550565b50565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146101a95760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100e5565b6101b382826101b7565b5050565b6daaeb6d7670e522a718067333cd4e3b156101b3576040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526daaeb6d7670e522a718067333cd4e9063c3c5a547906024016020604051808303816000875af1158015610230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102549190610446565b6101b35780156102f6576040517f7d3e3dbe00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff831660248201526daaeb6d7670e522a718067333cd4e90637d3e3dbe906044015b600060405180830381600087803b1580156102da57600080fd5b505af11580156102ee573d6000803e3d6000fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff821615610378576040517fa0af290300000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff831660248201526daaeb6d7670e522a718067333cd4e9063a0af2903906044016102c0565b6040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526daaeb6d7670e522a718067333cd4e90634420e486906024016102c0565b801515811461012057600080fd5b6000602082840312156103e257600080fd5b81356103ed816103c2565b9392505050565b6000806040838503121561040757600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461042b57600080fd5b9150602083013561043b816103c2565b809150509250929050565b60006020828403121561045857600080fd5b81516103ed816103c256fea2646970667358221220a7f99bb56e97dde160db66ba2f33cfb50d72eeb6fd292a9860c27a7272c3d5ce64736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Tokens",
    "custom:peer-dependencies": "IRoyaltyEnforcement",
    "custom:provides-interfaces": "IRoyaltyEnforcementAdmin",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "Royalty Enforcement - Admin - Ownable",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Controls where on-chain royalties must be enforced by blocklisting marketplaces.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}