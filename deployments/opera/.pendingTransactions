{
  "0x8d9a6b9bdb0b7d7cb2ae6f878dc509b7576d6ccc1459ce643bf07910764759bf": {
    "name": "ERC721ManagedPrefixedCollection",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "ERC721ManagedPrefixedCollection",
      "sourceName": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol",
      "abi": [
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "placeholderURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenURIPrefix",
                  "type": "string"
                },
                {
                  "internalType": "address[]",
                  "name": "initialHolders",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "initialAmounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "maxSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "defaultRoyaltyAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "defaultRoyaltyBps",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "trustedForwarder",
                  "type": "address"
                }
              ],
              "internalType": "struct ERC721ManagedPrefixedCollection.Config",
              "name": "config",
              "type": "tuple"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "name": "DefaultRoyaltySet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            }
          ],
          "name": "Initialized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "TokenRoyaltyRemoved",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "name": "TokenRoyaltySet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "_trustedForwarder",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "defaultRoyalty",
          "outputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "freezeMaxSupply",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "freezeTokenURI",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getInfo",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "_maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_senderBalance",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "getRaribleV2Royalties",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "value",
                  "type": "uint96"
                }
              ],
              "internalType": "struct LibPart.Part[]",
              "name": "result",
              "type": "tuple[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getTokenRoyaltiesCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "getTokenRoyaltyByIndex",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "bps",
                  "type": "uint16"
                }
              ],
              "internalType": "struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig",
              "name": "",
              "type": "tuple"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "contractURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "placeholderURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenURIPrefix",
                  "type": "string"
                },
                {
                  "internalType": "address[]",
                  "name": "initialHolders",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "initialAmounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "maxSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "defaultRoyaltyAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "defaultRoyaltyBps",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "trustedForwarder",
                  "type": "address"
                }
              ],
              "internalType": "struct ERC721ManagedPrefixedCollection.Config",
              "name": "config",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "deployer",
              "type": "address"
            }
          ],
          "name": "initialize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "forwarder",
              "type": "address"
            }
          ],
          "name": "isTrustedForwarder",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "managementPowerRevoked",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "maxSupplyFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "count",
              "type": "uint256"
            }
          ],
          "name": "mintByOwner",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "placeholderURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "revokeManagementPower",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            }
          ],
          "name": "setContractURI",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "bps",
                  "type": "uint16"
                }
              ],
              "internalType": "struct IEIP2981RoyaltyOverride.TokenRoyalty",
              "name": "royalty",
              "type": "tuple"
            }
          ],
          "name": "setDefaultRoyalty",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newValue",
              "type": "uint256"
            }
          ],
          "name": "setMaxSupply",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            }
          ],
          "name": "setPlaceholderURI",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "bps",
                  "type": "uint16"
                }
              ],
              "internalType": "struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig[]",
              "name": "royaltyConfigs",
              "type": "tuple[]"
            }
          ],
          "name": "setTokenRoyalties",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            }
          ],
          "name": "setTokenURIPrefix",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "newValue",
              "type": "string"
            }
          ],
          "name": "setTokenURISuffix",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "trustedForwarder",
              "type": "address"
            }
          ],
          "name": "setTrustedForwarder",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "tokenURIFrozen",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "tokenURIPrefix",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "tokenURISuffix",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "name": "transferFromBulk",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "from",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "to",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "name": "transferFromBulk",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405260006012553480156200001657600080fd5b5060405162004d0f38038062004d0f8339810160408190526200003991620010bf565b80516020820151620000546200004e6200009b565b620000b7565b81516200006990600390602085019062000dd6565b5080516200007f90600490602084019062000dd6565b5050506200009481336200011260201b60201c565b5062001482565b6000620000b2620002fe60201b620017011760201c565b905090565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600062000120600162000337565b9050801562000139576000805461ff0019166101001790555b8260c00151518360a001515114620001985760405162461bcd60e51b815260206004820152601b60248201527f4552433732312f494e56414c49445f494e495449414c5f41524753000000000060448201526064015b60405180910390fd5b620001a382620000b7565b825160208401516040850151620001bc929190620003e0565b620001d6836060015184608001516200041760201b60201c565b60e0830151620001e69062000451565b620001f062000489565b620001fa620004bf565b62000216836101000151846101200151620004f360201b60201c565b610140830151620002279062000529565b620002316200055e565b60e083015160105560005b8360a0015151811015620002b1576200029c8460a0015182815181106200026757620002676200126c565b60200260200101518560c0015183815181106200028857620002886200126c565b60200260200101516200059260201b60201c565b80620002a88162001298565b9150506200023c565b508015620002f9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6002546000906001600160a01b031633141562000322575060131936013560601c90565b620000b26200062860201b620017231760201c565b60008054610100900460ff161562000397578160ff1660011480156200037057506200036e306200062c60201b620017271760201c565b155b6200038f5760405162461bcd60e51b81526004016200018f90620012b6565b506000919050565b60005460ff808416911610620003c15760405162461bcd60e51b81526004016200018f90620012b6565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166200040a5760405162461bcd60e51b81526004016200018f9062001304565b620002f98383836200063b565b600054610100900460ff16620004415760405162461bcd60e51b81526004016200018f9062001304565b6200044d8282620006dd565b5050565b600054610100900460ff166200047b5760405162461bcd60e51b81526004016200018f9062001304565b620004868162000786565b50565b600054610100900460ff16620004b35760405162461bcd60e51b81526004016200018f9062001304565b620004bd620007d9565b565b600054610100900460ff16620004e95760405162461bcd60e51b81526004016200018f9062001304565b620004bd62000815565b600054610100900460ff166200051d5760405162461bcd60e51b81526004016200018f9062001304565b6200044d828262000851565b600054610100900460ff16620005535760405162461bcd60e51b81526004016200018f9062001304565b6200048681620008ee565b600054610100900460ff16620005885760405162461bcd60e51b81526004016200018f9062001304565b620004bd6200093a565b60105481620005a060125490565b620005ac91906200134f565b1115620005ed5760405162461bcd60e51b815260206004820152600e60248201526d455843454544535f535550504c5960901b60448201526064016200018f565b60005b81811015620002f95760125462000608848262000976565b6200061262000998565b50806200061f8162001298565b915050620005f0565b3390565b6001600160a01b03163b151590565b600054610100900460ff16620006655760405162461bcd60e51b81526004016200018f9062001304565b82516200067a90600990602086019062000dd6565b5081516200069090600a90602085019062000dd6565b508051620006a690600b90602084019062000dd6565b50620006b9633d96f4ff60e11b620009b1565b620006cb6380ac58cd60e01b620009b1565b620002f9635b5e139f60e01b620009b1565b600054610100900460ff16620007075760405162461bcd60e51b81526004016200018f9062001304565b81516200071c90600c90602085019062000dd6565b5080516200073290600d90602084019062000dd6565b5060408051808201909152600580825264173539b7b760d91b60209092019182526200076191600e9162000dd6565b5062000774631f2f406b60e01b620009b1565b6200044d635b5e139f60e01b620009b1565b600054610100900460ff16620007b05760405162461bcd60e51b81526004016200018f9062001304565b6010819055620007c76330f487b560e11b620009b1565b620004866380ac58cd60e01b620009b1565b600054610100900460ff16620008035760405162461bcd60e51b81526004016200018f9062001304565b620004bd631aa1577160e11b620009b1565b600054610100900460ff166200083f5760405162461bcd60e51b81526004016200018f9062001304565b620004bd63948e2d5360e01b620009b1565b600054610100900460ff166200087b5760405162461bcd60e51b81526004016200018f9062001304565b6200088d633a47bf5160e11b620009b1565b6200089f63152a902d60e11b620009b1565b620008b163c69dbd8f60e01b620009b1565b620008c363656cb66560e11b620009b1565b604080518082019091526001600160a01b038316815261ffff82166020820152620002f98162000a35565b600054610100900460ff16620009185760405162461bcd60e51b81526004016200018f9062001304565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16620009645760405162461bcd60e51b81526004016200018f9062001304565b620004bd632a7c3e4960e01b620009b1565b6200044d82826040518060200160405280600081525062000b1b60201b60201c565b60128054906000620009aa8362001298565b9190505550565b6001600160e01b0319808216141562000a0d5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e746572666163652069640000000060448201526064016200018f565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b612710816020015161ffff161062000a7e5760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016200018f565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260148054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419262000b1092916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b62000b27838362000b55565b62000b36600084848462000c9d565b620002f95760405162461bcd60e51b81526004016200018f906200136a565b6001600160a01b03821662000bad5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016200018f565b6000818152600560205260409020546001600160a01b03161562000c145760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016200018f565b6001600160a01b038216600090815260066020526040812080546001929062000c3f9084906200134f565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600062000cbe846001600160a01b03166200062c60201b620017271760201c565b1562000dca576001600160a01b03841663150b7a0262000cdd6200009b565b8786866040518563ffffffff1660e01b815260040162000d019493929190620013bc565b602060405180830381600087803b15801562000d1c57600080fd5b505af192505050801562000d4f575060408051601f3d908101601f1916820190925262000d4c9181019062001412565b60015b62000daf573d80801562000d80576040519150601f19603f3d011682016040523d82523d6000602084013e62000d85565b606091505b50805162000da75760405162461bcd60e51b81526004016200018f906200136a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062000dce565b5060015b949350505050565b82805462000de49062001445565b90600052602060002090601f01602090048101928262000e08576000855562000e53565b82601f1062000e2357805160ff191683800117855562000e53565b8280016001018555821562000e53579182015b8281111562000e5357825182559160200191906001019062000e36565b5062000e6192915062000e65565b5090565b5b8082111562000e61576000815560010162000e66565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171562000eb85762000eb862000e7c565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000ee95762000ee962000e7c565b604052919050565b60005b8381101562000f0e57818101518382015260200162000ef4565b8381111562000f1e576000848401525b50505050565b600082601f83011262000f3657600080fd5b81516001600160401b0381111562000f525762000f5262000e7c565b62000f67601f8201601f191660200162000ebe565b81815284602083860101111562000f7d57600080fd5b62000dce82602083016020870162000ef1565b60006001600160401b0382111562000fac5762000fac62000e7c565b5060051b60200190565b80516001600160a01b0381168114620003db57600080fd5b600082601f83011262000fe057600080fd5b8151602062000ff962000ff38362000f90565b62000ebe565b82815260059290921b840181019181810190868411156200101957600080fd5b8286015b848110156200103f57620010318162000fb6565b83529183019183016200101d565b509695505050505050565b600082601f8301126200105c57600080fd5b815160206200106f62000ff38362000f90565b82815260059290921b840181019181810190868411156200108f57600080fd5b8286015b848110156200103f578051835291830191830162001093565b805161ffff81168114620003db57600080fd5b600060208284031215620010d257600080fd5b81516001600160401b0380821115620010ea57600080fd5b9083019061016082860312156200110057600080fd5b6200110a62000e92565b8251828111156200111a57600080fd5b620011288782860162000f24565b8252506020830151828111156200113e57600080fd5b6200114c8782860162000f24565b6020830152506040830151828111156200116557600080fd5b620011738782860162000f24565b6040830152506060830151828111156200118c57600080fd5b6200119a8782860162000f24565b606083015250608083015182811115620011b357600080fd5b620011c18782860162000f24565b60808301525060a083015182811115620011da57600080fd5b620011e88782860162000fce565b60a08301525060c0830151828111156200120157600080fd5b6200120f878286016200104a565b60c08301525060e083015160e082015261010091506200123182840162000fb6565b82820152610120915062001247828401620010ac565b8282015261014091506200125d82840162000fb6565b91810191909152949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620012af57620012af62001282565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000821982111562001365576200136562001282565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060018060a01b038087168352808616602084015250836040830152608060608301528251806080840152620013fb8160a085016020870162000ef1565b601f01601f19169190910160a00195945050505050565b6000602082840312156200142557600080fd5b81516001600160e01b0319811681146200143e57600080fd5b9392505050565b600181811c908216806200145a57607f821691505b602082108114156200147c57634e487b7160e01b600052602260045260246000fd5b50919050565b61387d80620014926000396000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c80637885fdc7116101375780637885fdc71461046f5780637e9803421461049d5780638da5cb5b146104a5578063938e3d7b146104ad578063948e2d53146104c057806395d89b41146104c857806399e0dd7c146104d0578063a22cb465146104e3578063a821d908146104f6578063a9852bfb14610503578063b88d4fde14610516578063ba4695fd14610529578063c0ac998314610531578063c29de63014610539578063c87b56dd14610546578063cad96cca14610559578063d5abeb0114610579578063da74222814610582578063dbbc853b14610595578063e8a3d4851461059d578063e985e9c5146105a5578063ef60ceaf146105b8578063f2fde38b146105cb578063f384702f146105de57600080fd5b806301ffc9a714610245578063059fb6f71461026d5780630653aca51461028257806306fdde03146102c4578063081812fc146102d9578063095ea7b3146102f9578063167446071461030c57806318160ddd1461031457806323b872dd146103265780632a55205a146103395780632fe388be1461036b5780633542aee21461037e5780633574a2dd1461039157806340c1d8a1146103a457806342842e0e146103b75780635136dcc7146103ca57806356c022bb146103dd578063572b6c05146103f05780635a9b0b89146104035780636352211e146104265780636f8b44b01461043957806370a082311461044c578063715018a61461045f5780637313cba914610467575b600080fd5b610258610253366004612b63565b6105eb565b60405190151581526020015b60405180910390f35b61028061027b366004612c94565b6105fc565b005b610295610290366004612cf1565b61069c565b60408051825181526020808401516001600160a01b0316908201529181015161ffff1690820152606001610264565b6102cc610721565b6040516102649190612d62565b6102ec6102e7366004612cf1565b610730565b6040516102649190612d75565b610280610307366004612d89565b6107bd565b6102806108e0565b6012545b604051908152602001610264565b610280610334366004612db3565b61092e565b61034c610347366004612def565b610966565b604080516001600160a01b039093168352602083019190915201610264565b610280610379366004612e73565b610a2b565b61028061038c366004612d89565b610b90565b61028061039f366004612f67565b610bdd565b6102806103b2366004612fad565b610c2f565b6102806103c5366004612db3565b610ddc565b6102806103d836600461314b565b610df7565b6002546102ec906001600160a01b031681565b6102586103fe3660046131bf565b610e91565b61040b610ea5565b60408051938452602084019290925290820152606001610264565b6102ec610434366004612cf1565b610fbe565b610280610447366004612cf1565b611035565b61031861045a3660046131bf565b6110e2565b610280611169565b6102cc6111b4565b60145461048f906001600160a01b03811690600160a01b900461ffff1682565b6040516102649291906131da565b610318611246565b6102ec611252565b6102806104bb366004612f67565b611267565b6102806112b9565b6102cc611307565b6102806104de366004612f67565b611311565b6102806104f13660046131f7565b611386565b6013546102589060ff1681565b610280610511366004612f67565b611398565b610280610524366004613233565b61140d565b610280611446565b6102cc611494565b600f546102589060ff1681565b6102cc610554366004612cf1565b6114a3565b61056c610567366004612cf1565b6114ae565b60405161026491906132ae565b61031860105481565b6102806105903660046131bf565b611569565b6102cc6115ca565b6102cc6115d9565b6102586105b336600461330f565b6115e8565b6102806105c6366004613339565b6115fb565b6102806105d93660046131bf565b611654565b6011546102589060ff1681565b60006105f682611736565b92915050565b60005b815181101561069657306001600160a01b03166323b872dd858585858151811061062b5761062b613351565b60200260200101516040518463ffffffff1660e01b815260040161065193929190613367565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b50505050808061068e906133a1565b9150506105ff565b50505050565b60408051606081018252600080825260208201819052918101829052906106c4601684611772565b6000818152601560209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b606061072b61177e565b905090565b600061073b8261178d565b6107a15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600760205260409020546001600160a01b031690565b60006107c882610fbe565b9050806001600160a01b0316836001600160a01b031614156108365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610798565b806001600160a01b03166108486117aa565b6001600160a01b031614806108645750610864816105b36117aa565b6108d15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610798565b6108db83836117b4565b505050565b6108e86117aa565b6001600160a01b03166108f9611252565b6001600160a01b03161461091f5760405162461bcd60e51b8152600401610798906133bc565b6011805460ff19166001179055565b61093f6109396117aa565b82611822565b61095b5760405162461bcd60e51b8152600401610798906133f1565b6108db8383836118ec565b60008281526015602052604081205481906001600160a01b0316156109cb576000848152601560205260409020546001600160a01b03811690612710906109b890600160a01b900461ffff1686613442565b6109c29190613477565b91509150610a24565b6014546001600160a01b0316158015906109f15750601454600160a01b900461ffff1615155b15610a1d576014546001600160a01b03811690612710906109b890600160a01b900461ffff1686613442565b5060009050805b9250929050565b8151835114610a765760405162461bcd60e51b815260206004820152601760248201527608ca49e9abea89ebe988a9c8ea890be9a92a69a82a8869604b1b6044820152606401610798565b8051835114610ac45760405162461bcd60e51b815260206004820152601a60248201527908ca49e9abea89e968a9cbe988a9c8ea890be9a92a69a82a886960331b6044820152606401610798565b60005b815181101561069657306001600160a01b03166323b872dd858381518110610af157610af1613351565b6020026020010151858481518110610b0b57610b0b613351565b6020026020010151858581518110610b2557610b25613351565b60200260200101516040518463ffffffff1660e01b8152600401610b4b93929190613367565b600060405180830381600087803b158015610b6557600080fd5b505af1158015610b79573d6000803e3d6000fd5b505050508080610b88906133a1565b915050610ac7565b610b986117aa565b6001600160a01b0316610ba9611252565b6001600160a01b031614610bcf5760405162461bcd60e51b8152600401610798906133bc565b610bd98282611a88565b5050565b610be56117aa565b6001600160a01b0316610bf6611252565b6001600160a01b031614610c1c5760405162461bcd60e51b8152600401610798906133bc565b8051610bd990600c906020840190612ab4565b6000610c3b6001611b11565b90508015610c53576000805461ff0019166101001790555b8260c00151518360a001515114610caa5760405162461bcd60e51b815260206004820152601b60248201527a4552433732312f494e56414c49445f494e495449414c5f4152475360281b6044820152606401610798565b610cb382611ba5565b610cca836000015184602001518560400151611c00565b610cdc83606001518460800151611c32565b610ce98360e00151611c63565b610cf1611c93565b610cf9611cc2565b610d0d836101000151846101200151611cf1565b610d1b836101400151611d22565b610d23611d52565b60e083015160105560005b8360a0015151811015610d9157610d7f8460a001518281518110610d5457610d54613351565b60200260200101518560c001518381518110610d7257610d72613351565b6020026020010151611a88565b80610d89816133a1565b915050610d2e565b5080156108db576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6108db8383836040518060200160405280600081525061140d565b610dff6117aa565b6001600160a01b0316610e10611252565b6001600160a01b031614610e365760405162461bcd60e51b8152600401610798906133bc565b610bd98282808060200260200160405190810160405280939291908181526020016000905b82821015610e8757610e786060830286013681900381019061348b565b81526020019060010190610e5b565b5050505050611d81565b6002546001600160a01b0391821691161490565b600080808080610eb36117aa565b6001600160a01b031614610f3e57306370a08231610ecf6117aa565b6040518263ffffffff1660e01b8152600401610eeb9190612d75565b60206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b91906134ef565b90505b601054306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7a57600080fd5b505afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb291906134ef565b90959094509092509050565b6000818152600560205260408120546001600160a01b0316806105f65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610798565b61103d6117aa565b6001600160a01b031661104e611252565b6001600160a01b0316146110745760405162461bcd60e51b8152600401610798906133bc565b60115460ff16156110975760405162461bcd60e51b815260040161079890613508565b6012548110156110dd5760405162461bcd60e51b81526020600482015260116024820152704c4f5745525f5448414e5f535550504c5960781b6044820152606401610798565b601055565b60006001600160a01b03821661114d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610798565b506001600160a01b031660009081526006602052604090205490565b6111716117aa565b6001600160a01b0316611182611252565b6001600160a01b0316146111a85760405162461bcd60e51b8152600401610798906133bc565b6111b26000611ba5565b565b6060600c80546111c390613528565b80601f01602080910402602001604051908101604052809291908181526020018280546111ef90613528565b801561123c5780601f106112115761010080835404028352916020019161123c565b820191906000526020600020905b81548152906001019060200180831161121f57829003601f168201915b5050505050905090565b600061072b6016611f28565b6000546201000090046001600160a01b031690565b61126f6117aa565b6001600160a01b0316611280611252565b6001600160a01b0316146112a65760405162461bcd60e51b8152600401610798906133bc565b8051610bd990600b906020840190612ab4565b6112c16117aa565b6001600160a01b03166112d2611252565b6001600160a01b0316146112f85760405162461bcd60e51b8152600401610798906133bc565b6013805460ff19166001179055565b606061072b611f32565b6113196117aa565b6001600160a01b031661132a611252565b6001600160a01b0316146113505760405162461bcd60e51b8152600401610798906133bc565b600f5460ff16156113735760405162461bcd60e51b815260040161079890613508565b8051610bd990600d906020840190612ab4565b610bd96113916117aa565b8383611f41565b6113a06117aa565b6001600160a01b03166113b1611252565b6001600160a01b0316146113d75760405162461bcd60e51b8152600401610798906133bc565b600f5460ff16156113fa5760405162461bcd60e51b815260040161079890613508565b8051610bd990600e906020840190612ab4565b61141e6114186117aa565b83611822565b61143a5760405162461bcd60e51b8152600401610798906133f1565b6106968484848461200c565b61144e6117aa565b6001600160a01b031661145f611252565b6001600160a01b0316146114855760405162461bcd60e51b8152600401610798906133bc565b600f805460ff19166001179055565b6060600d80546111c390613528565b60606105f68261203f565b604080516001808252818301909252606091816020015b60408051808201909152600080825260208201528152602001906001900390816114c557505060145481519192506001600160a01b031690829060009061150e5761150e613351565b60209081029190910101516001600160a01b039190911690526014548151600160a01b90910461ffff1690829060009061154a5761154a613351565b6020908102919091018101516001600160601b03909216910152919050565b6115716117aa565b6001600160a01b0316611582611252565b6001600160a01b0316146115a85760405162461bcd60e51b8152600401610798906133bc565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600e80546111c390613528565b6060600b80546111c390613528565b60006115f4838361211b565b9392505050565b6116036117aa565b6001600160a01b0316611614611252565b6001600160a01b03161461163a5760405162461bcd60e51b8152600401610798906133bc565b61165161164c3683900383018361355d565b61217f565b50565b61165c6117aa565b6001600160a01b031661166d611252565b6001600160a01b0316146116935760405162461bcd60e51b8152600401610798906133bc565b6001600160a01b0381166116f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610798565b61165181611ba5565b600061170c33610e91565b1561171e575060131936013560601c90565b503390565b3390565b6001600160a01b03163b151590565b60006301ffc9a760e01b6001600160e01b0319831614806105f65750506001600160e01b03191660009081526001602052604090205460ff1690565b60006115f4838361222a565b6060600980546111c390613528565b6000908152600560205260409020546001600160a01b0316151590565b600061072b611701565b600081815260076020526040902080546001600160a01b0319166001600160a01b03841690811790915581906117e982610fbe565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061182d8261178d565b61188e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610798565b600061189983610fbe565b9050806001600160a01b0316846001600160a01b031614806118c057506118c081856115e8565b806118e45750836001600160a01b03166118d984610730565b6001600160a01b0316145b949350505050565b826001600160a01b03166118ff82610fbe565b6001600160a01b0316146119635760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610798565b6001600160a01b0382166119c55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610798565b6119d06000826117b4565b6001600160a01b03831660009081526006602052604081208054600192906119f99084906135b7565b90915550506001600160a01b0382166000908152600660205260408120805460019290611a279084906135ce565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60105481611a9560125490565b611a9f91906135ce565b1115611ade5760405162461bcd60e51b815260206004820152600e60248201526d455843454544535f535550504c5960901b6044820152606401610798565b60005b818110156108db57601254611af68482612254565b611afe61226e565b5080611b09816133a1565b915050611ae1565b60008054610100900460ff1615611b5f578160ff166001148015611b3b5750611b3930611727565b155b611b575760405162461bcd60e51b8152600401610798906135e6565b506000919050565b60005460ff808416911610611b865760405162461bcd60e51b8152600401610798906135e6565b506000805460ff191660ff92909216919091179055600190565b919050565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600054610100900460ff16611c275760405162461bcd60e51b815260040161079890613634565b6108db838383612285565b600054610100900460ff16611c595760405162461bcd60e51b815260040161079890613634565b610bd98282612318565b600054610100900460ff16611c8a5760405162461bcd60e51b815260040161079890613634565b611651816123b4565b600054610100900460ff16611cba5760405162461bcd60e51b815260040161079890613634565b6111b2612400565b600054610100900460ff16611ce95760405162461bcd60e51b815260040161079890613634565b6111b2612437565b600054610100900460ff16611d185760405162461bcd60e51b815260040161079890613634565b610bd9828261246e565b600054610100900460ff16611d495760405162461bcd60e51b815260040161079890613634565b611651816124fe565b600054610100900460ff16611d795760405162461bcd60e51b815260040161079890613634565b6111b2612525565b60005b8151811015610bd9576000828281518110611da157611da1613351565b60200260200101519050612710816040015161ffff1610611dd45760405162461bcd60e51b81526004016107989061367f565b60208101516001600160a01b0316611e4d578051600090815260156020526040902080546001600160b01b03191690558051611e129060169061255c565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611f15565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152601590945294909220925183549451909216600160a01b026001600160b01b03199094169116179190911790558051611ebb90601690612568565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080611f20816133a1565b915050611d84565b60006105f6825490565b6060600a80546111c390613528565b816001600160a01b0316836001600160a01b03161415611f9f5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610798565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6120178484846118ec565b61202384848484612574565b6106965760405162461bcd60e51b8152600401610798906136a4565b60606000600d805461205090613528565b9050116120e757600c805461206490613528565b80601f016020809104026020016040519081016040528092919081815260200182805461209090613528565b80156120dd5780601f106120b2576101008083540402835291602001916120dd565b820191906000526020600020905b8154815290600101906020018083116120c057829003601f168201915b50505050506105f6565b600d6120f28361268f565b600e60405160200161210693929190613790565b60405160208183030381529060405292915050565b60135460009060ff1661215157612130611252565b6001600160a01b0316826001600160a01b03161415612151575060016105f6565b6001600160a01b0380841660009081526008602090815260408083209386168352929052205460ff166115f4565b612710816020015161ffff16106121a85760405162461bcd60e51b81526004016107989061367f565b60408051808201825282516001600160a01b03168082526020808501805161ffff1691909301819052601480546001600160b01b031916909217600160a01b9091021790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419261221f92916131da565b60405180910390a150565b600082600001828154811061224157612241613351565b9060005260206000200154905092915050565b610bd982826040518060200160405280600081525061278c565b6012805490600061227e836133a1565b9190505550565b600054610100900460ff166122ac5760405162461bcd60e51b815260040161079890613634565b82516122bf906009906020860190612ab4565b5081516122d390600a906020850190612ab4565b5080516122e790600b906020840190612ab4565b506122f8633d96f4ff60e11b6127bf565b6123086380ac58cd60e01b6127bf565b6108db635b5e139f60e01b6127bf565b600054610100900460ff1661233f5760405162461bcd60e51b815260040161079890613634565b815161235290600c906020850190612ab4565b50805161236690600d906020840190612ab4565b5060408051808201909152600580825264173539b7b760d91b602090920191825261239391600e91612ab4565b506123a4631f2f406b60e01b6127bf565b610bd9635b5e139f60e01b6127bf565b600054610100900460ff166123db5760405162461bcd60e51b815260040161079890613634565b60108190556123f06330f487b560e11b6127bf565b6116516380ac58cd60e01b6127bf565b600054610100900460ff166124275760405162461bcd60e51b815260040161079890613634565b6111b2631aa1577160e11b6127bf565b600054610100900460ff1661245e5760405162461bcd60e51b815260040161079890613634565b6111b263948e2d5360e01b6127bf565b600054610100900460ff166124955760405162461bcd60e51b815260040161079890613634565b6124a5633a47bf5160e11b6127bf565b6124b563152a902d60e11b6127bf565b6124c563c69dbd8f60e01b6127bf565b6124d563656cb66560e11b6127bf565b604080518082019091526001600160a01b038316815261ffff821660208201526108db8161217f565b600054610100900460ff166115a85760405162461bcd60e51b815260040161079890613634565b600054610100900460ff1661254c5760405162461bcd60e51b815260040161079890613634565b6111b2632a7c3e4960e01b6127bf565b60006115f48383612840565b60006115f48383612933565b6000612588846001600160a01b0316611727565b1561268457836001600160a01b031663150b7a026125a46117aa565b8786866040518563ffffffff1660e01b81526004016125c694939291906137c3565b602060405180830381600087803b1580156125e057600080fd5b505af1925050508015612610575060408051601f3d908101601f1916820190925261260d91810190613800565b60015b61266a573d80801561263e576040519150601f19603f3d011682016040523d82523d6000602084013e612643565b606091505b5080516126625760405162461bcd60e51b8152600401610798906136a4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506118e4565b506001949350505050565b6060816126b35750506040805180820190915260018152600360fc1b602082015290565b8160005b81156126dd57806126c7816133a1565b91506126d69050600a83613477565b91506126b7565b6000816001600160401b038111156126f7576126f7612b97565b6040519080825280601f01601f191660200182016040528015612721576020820181803683370190505b5090505b84156118e4576127366001836135b7565b9150612743600a8661381d565b61274e9060306135ce565b60f81b81838151811061276357612763613351565b60200101906001600160f81b031916908160001a905350612785600a86613477565b9450612725565b6127968383612982565b6127a36000848484612574565b6108db5760405162461bcd60e51b8152600401610798906136a4565b6001600160e01b031980821614156128185760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610798565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600081815260018301602052604081205480156129295760006128646001836135b7565b8554909150600090612878906001906135b7565b90508181146128dd57600086600001828154811061289857612898613351565b90600052602060002001549050808760000184815481106128bb576128bb613351565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128ee576128ee613831565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f6565b60009150506105f6565b600081815260018301602052604081205461297a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f6565b5060006105f6565b6001600160a01b0382166129d85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610798565b6129e18161178d565b15612a2d5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606401610798565b6001600160a01b0382166000908152600660205260408120805460019290612a569084906135ce565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612ac090613528565b90600052602060002090601f016020900481019282612ae25760008555612b28565b82601f10612afb57805160ff1916838001178555612b28565b82800160010185558215612b28579182015b82811115612b28578251825591602001919060010190612b0d565b50612b34929150612b38565b5090565b5b80821115612b345760008155600101612b39565b6001600160e01b03198116811461165157600080fd5b600060208284031215612b7557600080fd5b81356115f481612b4d565b80356001600160a01b0381168114611ba057600080fd5b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715612bd057612bd0612b97565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612bfe57612bfe612b97565b604052919050565b60006001600160401b03821115612c1f57612c1f612b97565b5060051b60200190565b600082601f830112612c3a57600080fd5b81356020612c4f612c4a83612c06565b612bd6565b82815260059290921b84018101918181019086841115612c6e57600080fd5b8286015b84811015612c895780358352918301918301612c72565b509695505050505050565b600080600060608486031215612ca957600080fd5b612cb284612b80565b9250612cc060208501612b80565b915060408401356001600160401b03811115612cdb57600080fd5b612ce786828701612c29565b9150509250925092565b600060208284031215612d0357600080fd5b5035919050565b60005b83811015612d25578181015183820152602001612d0d565b838111156106965750506000910152565b60008151808452612d4e816020860160208601612d0a565b601f01601f19169290920160200192915050565b6020815260006115f46020830184612d36565b6001600160a01b0391909116815260200190565b60008060408385031215612d9c57600080fd5b612da583612b80565b946020939093013593505050565b600080600060608486031215612dc857600080fd5b612dd184612b80565b9250612ddf60208501612b80565b9150604084013590509250925092565b60008060408385031215612e0257600080fd5b50508035926020909101359150565b600082601f830112612e2257600080fd5b81356020612e32612c4a83612c06565b82815260059290921b84018101918181019086841115612e5157600080fd5b8286015b84811015612c8957612e6681612b80565b8352918301918301612e55565b600080600060608486031215612e8857600080fd5b83356001600160401b0380821115612e9f57600080fd5b612eab87838801612e11565b94506020860135915080821115612ec157600080fd5b612ecd87838801612e11565b93506040860135915080821115612ee357600080fd5b50612ce786828701612c29565b60006001600160401b03831115612f0957612f09612b97565b612f1c601f8401601f1916602001612bd6565b9050828152838383011115612f3057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612f5857600080fd5b6115f483833560208501612ef0565b600060208284031215612f7957600080fd5b81356001600160401b03811115612f8f57600080fd5b6118e484828501612f47565b803561ffff81168114611ba057600080fd5b60008060408385031215612fc057600080fd5b82356001600160401b0380821115612fd757600080fd5b908401906101608287031215612fec57600080fd5b612ff4612bad565b82358281111561300357600080fd5b61300f88828601612f47565b82525060208301358281111561302457600080fd5b61303088828601612f47565b60208301525060408301358281111561304857600080fd5b61305488828601612f47565b60408301525060608301358281111561306c57600080fd5b61307888828601612f47565b60608301525060808301358281111561309057600080fd5b61309c88828601612f47565b60808301525060a0830135828111156130b457600080fd5b6130c088828601612e11565b60a08301525060c0830135828111156130d857600080fd5b6130e488828601612c29565b60c08301525060e083013560e08201526101009150613104828401612b80565b828201526101209150613118828401612f9b565b82820152610140915061312c828401612b80565b8282015280945050505061314260208401612b80565b90509250929050565b6000806020838503121561315e57600080fd5b82356001600160401b038082111561317557600080fd5b818501915085601f83011261318957600080fd5b81358181111561319857600080fd5b8660206060830285010111156131ad57600080fd5b60209290920196919550909350505050565b6000602082840312156131d157600080fd5b6115f482612b80565b6001600160a01b0392909216825261ffff16602082015260400190565b6000806040838503121561320a57600080fd5b61321383612b80565b91506020830135801515811461322857600080fd5b809150509250929050565b6000806000806080858703121561324957600080fd5b61325285612b80565b935061326060208601612b80565b92506040850135915060608501356001600160401b0381111561328257600080fd5b8501601f8101871361329357600080fd5b6132a287823560208401612ef0565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b8281101561330257815180516001600160a01b031685528601516001600160601b03168685015292840192908501906001016132cb565b5091979650505050505050565b6000806040838503121561332257600080fd5b61332b83612b80565b915061314260208401612b80565b60006040828403121561334b57600080fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156133b5576133b561338b565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600081600019048311821515161561345c5761345c61338b565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261348657613486613461565b500490565b60006060828403121561349d57600080fd5b604051606081018181106001600160401b03821117156134bf576134bf612b97565b604052823581526134d260208401612b80565b60208201526134e360408401612f9b565b60408201529392505050565b60006020828403121561350157600080fd5b5051919050565b602080825260069082015265232927ad22a760d11b604082015260600190565b600181811c9082168061353c57607f821691505b6020821081141561334b57634e487b7160e01b600052602260045260246000fd5b60006040828403121561356f57600080fd5b604051604081018181106001600160401b038211171561359157613591612b97565b60405261359d83612b80565b81526135ab60208401612f9b565b60208201529392505050565b6000828210156135c9576135c961338b565b500390565b600082198211156135e1576135e161338b565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600b908201526a496e76616c69642062707360a81b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8054600090600181811c908083168061371057607f831692505b602080841082141561373257634e487b7160e01b600052602260045260246000fd5b818015613746576001811461375757613784565b60ff19861689528489019650613784565b60008881526020902060005b8681101561377c5781548b820152908501908301613763565b505084890196505b50505050505092915050565b600061379c82866136f6565b84516137ac818360208901612d0a565b6137b8818301866136f6565b979650505050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906137f690830184612d36565b9695505050505050565b60006020828403121561381257600080fd5b81516115f481612b4d565b60008261382c5761382c613461565b500690565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220efb52db0061b2917949fb149880afb278cda4c643a9020cc9e72f677476df35c64736f6c63430008090033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102405760003560e01c80637885fdc7116101375780637885fdc71461046f5780637e9803421461049d5780638da5cb5b146104a5578063938e3d7b146104ad578063948e2d53146104c057806395d89b41146104c857806399e0dd7c146104d0578063a22cb465146104e3578063a821d908146104f6578063a9852bfb14610503578063b88d4fde14610516578063ba4695fd14610529578063c0ac998314610531578063c29de63014610539578063c87b56dd14610546578063cad96cca14610559578063d5abeb0114610579578063da74222814610582578063dbbc853b14610595578063e8a3d4851461059d578063e985e9c5146105a5578063ef60ceaf146105b8578063f2fde38b146105cb578063f384702f146105de57600080fd5b806301ffc9a714610245578063059fb6f71461026d5780630653aca51461028257806306fdde03146102c4578063081812fc146102d9578063095ea7b3146102f9578063167446071461030c57806318160ddd1461031457806323b872dd146103265780632a55205a146103395780632fe388be1461036b5780633542aee21461037e5780633574a2dd1461039157806340c1d8a1146103a457806342842e0e146103b75780635136dcc7146103ca57806356c022bb146103dd578063572b6c05146103f05780635a9b0b89146104035780636352211e146104265780636f8b44b01461043957806370a082311461044c578063715018a61461045f5780637313cba914610467575b600080fd5b610258610253366004612b63565b6105eb565b60405190151581526020015b60405180910390f35b61028061027b366004612c94565b6105fc565b005b610295610290366004612cf1565b61069c565b60408051825181526020808401516001600160a01b0316908201529181015161ffff1690820152606001610264565b6102cc610721565b6040516102649190612d62565b6102ec6102e7366004612cf1565b610730565b6040516102649190612d75565b610280610307366004612d89565b6107bd565b6102806108e0565b6012545b604051908152602001610264565b610280610334366004612db3565b61092e565b61034c610347366004612def565b610966565b604080516001600160a01b039093168352602083019190915201610264565b610280610379366004612e73565b610a2b565b61028061038c366004612d89565b610b90565b61028061039f366004612f67565b610bdd565b6102806103b2366004612fad565b610c2f565b6102806103c5366004612db3565b610ddc565b6102806103d836600461314b565b610df7565b6002546102ec906001600160a01b031681565b6102586103fe3660046131bf565b610e91565b61040b610ea5565b60408051938452602084019290925290820152606001610264565b6102ec610434366004612cf1565b610fbe565b610280610447366004612cf1565b611035565b61031861045a3660046131bf565b6110e2565b610280611169565b6102cc6111b4565b60145461048f906001600160a01b03811690600160a01b900461ffff1682565b6040516102649291906131da565b610318611246565b6102ec611252565b6102806104bb366004612f67565b611267565b6102806112b9565b6102cc611307565b6102806104de366004612f67565b611311565b6102806104f13660046131f7565b611386565b6013546102589060ff1681565b610280610511366004612f67565b611398565b610280610524366004613233565b61140d565b610280611446565b6102cc611494565b600f546102589060ff1681565b6102cc610554366004612cf1565b6114a3565b61056c610567366004612cf1565b6114ae565b60405161026491906132ae565b61031860105481565b6102806105903660046131bf565b611569565b6102cc6115ca565b6102cc6115d9565b6102586105b336600461330f565b6115e8565b6102806105c6366004613339565b6115fb565b6102806105d93660046131bf565b611654565b6011546102589060ff1681565b60006105f682611736565b92915050565b60005b815181101561069657306001600160a01b03166323b872dd858585858151811061062b5761062b613351565b60200260200101516040518463ffffffff1660e01b815260040161065193929190613367565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b50505050808061068e906133a1565b9150506105ff565b50505050565b60408051606081018252600080825260208201819052918101829052906106c4601684611772565b6000818152601560209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b606061072b61177e565b905090565b600061073b8261178d565b6107a15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600760205260409020546001600160a01b031690565b60006107c882610fbe565b9050806001600160a01b0316836001600160a01b031614156108365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610798565b806001600160a01b03166108486117aa565b6001600160a01b031614806108645750610864816105b36117aa565b6108d15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610798565b6108db83836117b4565b505050565b6108e86117aa565b6001600160a01b03166108f9611252565b6001600160a01b03161461091f5760405162461bcd60e51b8152600401610798906133bc565b6011805460ff19166001179055565b61093f6109396117aa565b82611822565b61095b5760405162461bcd60e51b8152600401610798906133f1565b6108db8383836118ec565b60008281526015602052604081205481906001600160a01b0316156109cb576000848152601560205260409020546001600160a01b03811690612710906109b890600160a01b900461ffff1686613442565b6109c29190613477565b91509150610a24565b6014546001600160a01b0316158015906109f15750601454600160a01b900461ffff1615155b15610a1d576014546001600160a01b03811690612710906109b890600160a01b900461ffff1686613442565b5060009050805b9250929050565b8151835114610a765760405162461bcd60e51b815260206004820152601760248201527608ca49e9abea89ebe988a9c8ea890be9a92a69a82a8869604b1b6044820152606401610798565b8051835114610ac45760405162461bcd60e51b815260206004820152601a60248201527908ca49e9abea89e968a9cbe988a9c8ea890be9a92a69a82a886960331b6044820152606401610798565b60005b815181101561069657306001600160a01b03166323b872dd858381518110610af157610af1613351565b6020026020010151858481518110610b0b57610b0b613351565b6020026020010151858581518110610b2557610b25613351565b60200260200101516040518463ffffffff1660e01b8152600401610b4b93929190613367565b600060405180830381600087803b158015610b6557600080fd5b505af1158015610b79573d6000803e3d6000fd5b505050508080610b88906133a1565b915050610ac7565b610b986117aa565b6001600160a01b0316610ba9611252565b6001600160a01b031614610bcf5760405162461bcd60e51b8152600401610798906133bc565b610bd98282611a88565b5050565b610be56117aa565b6001600160a01b0316610bf6611252565b6001600160a01b031614610c1c5760405162461bcd60e51b8152600401610798906133bc565b8051610bd990600c906020840190612ab4565b6000610c3b6001611b11565b90508015610c53576000805461ff0019166101001790555b8260c00151518360a001515114610caa5760405162461bcd60e51b815260206004820152601b60248201527a4552433732312f494e56414c49445f494e495449414c5f4152475360281b6044820152606401610798565b610cb382611ba5565b610cca836000015184602001518560400151611c00565b610cdc83606001518460800151611c32565b610ce98360e00151611c63565b610cf1611c93565b610cf9611cc2565b610d0d836101000151846101200151611cf1565b610d1b836101400151611d22565b610d23611d52565b60e083015160105560005b8360a0015151811015610d9157610d7f8460a001518281518110610d5457610d54613351565b60200260200101518560c001518381518110610d7257610d72613351565b6020026020010151611a88565b80610d89816133a1565b915050610d2e565b5080156108db576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6108db8383836040518060200160405280600081525061140d565b610dff6117aa565b6001600160a01b0316610e10611252565b6001600160a01b031614610e365760405162461bcd60e51b8152600401610798906133bc565b610bd98282808060200260200160405190810160405280939291908181526020016000905b82821015610e8757610e786060830286013681900381019061348b565b81526020019060010190610e5b565b5050505050611d81565b6002546001600160a01b0391821691161490565b600080808080610eb36117aa565b6001600160a01b031614610f3e57306370a08231610ecf6117aa565b6040518263ffffffff1660e01b8152600401610eeb9190612d75565b60206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b91906134ef565b90505b601054306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7a57600080fd5b505afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb291906134ef565b90959094509092509050565b6000818152600560205260408120546001600160a01b0316806105f65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610798565b61103d6117aa565b6001600160a01b031661104e611252565b6001600160a01b0316146110745760405162461bcd60e51b8152600401610798906133bc565b60115460ff16156110975760405162461bcd60e51b815260040161079890613508565b6012548110156110dd5760405162461bcd60e51b81526020600482015260116024820152704c4f5745525f5448414e5f535550504c5960781b6044820152606401610798565b601055565b60006001600160a01b03821661114d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610798565b506001600160a01b031660009081526006602052604090205490565b6111716117aa565b6001600160a01b0316611182611252565b6001600160a01b0316146111a85760405162461bcd60e51b8152600401610798906133bc565b6111b26000611ba5565b565b6060600c80546111c390613528565b80601f01602080910402602001604051908101604052809291908181526020018280546111ef90613528565b801561123c5780601f106112115761010080835404028352916020019161123c565b820191906000526020600020905b81548152906001019060200180831161121f57829003601f168201915b5050505050905090565b600061072b6016611f28565b6000546201000090046001600160a01b031690565b61126f6117aa565b6001600160a01b0316611280611252565b6001600160a01b0316146112a65760405162461bcd60e51b8152600401610798906133bc565b8051610bd990600b906020840190612ab4565b6112c16117aa565b6001600160a01b03166112d2611252565b6001600160a01b0316146112f85760405162461bcd60e51b8152600401610798906133bc565b6013805460ff19166001179055565b606061072b611f32565b6113196117aa565b6001600160a01b031661132a611252565b6001600160a01b0316146113505760405162461bcd60e51b8152600401610798906133bc565b600f5460ff16156113735760405162461bcd60e51b815260040161079890613508565b8051610bd990600d906020840190612ab4565b610bd96113916117aa565b8383611f41565b6113a06117aa565b6001600160a01b03166113b1611252565b6001600160a01b0316146113d75760405162461bcd60e51b8152600401610798906133bc565b600f5460ff16156113fa5760405162461bcd60e51b815260040161079890613508565b8051610bd990600e906020840190612ab4565b61141e6114186117aa565b83611822565b61143a5760405162461bcd60e51b8152600401610798906133f1565b6106968484848461200c565b61144e6117aa565b6001600160a01b031661145f611252565b6001600160a01b0316146114855760405162461bcd60e51b8152600401610798906133bc565b600f805460ff19166001179055565b6060600d80546111c390613528565b60606105f68261203f565b604080516001808252818301909252606091816020015b60408051808201909152600080825260208201528152602001906001900390816114c557505060145481519192506001600160a01b031690829060009061150e5761150e613351565b60209081029190910101516001600160a01b039190911690526014548151600160a01b90910461ffff1690829060009061154a5761154a613351565b6020908102919091018101516001600160601b03909216910152919050565b6115716117aa565b6001600160a01b0316611582611252565b6001600160a01b0316146115a85760405162461bcd60e51b8152600401610798906133bc565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600e80546111c390613528565b6060600b80546111c390613528565b60006115f4838361211b565b9392505050565b6116036117aa565b6001600160a01b0316611614611252565b6001600160a01b03161461163a5760405162461bcd60e51b8152600401610798906133bc565b61165161164c3683900383018361355d565b61217f565b50565b61165c6117aa565b6001600160a01b031661166d611252565b6001600160a01b0316146116935760405162461bcd60e51b8152600401610798906133bc565b6001600160a01b0381166116f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610798565b61165181611ba5565b600061170c33610e91565b1561171e575060131936013560601c90565b503390565b3390565b6001600160a01b03163b151590565b60006301ffc9a760e01b6001600160e01b0319831614806105f65750506001600160e01b03191660009081526001602052604090205460ff1690565b60006115f4838361222a565b6060600980546111c390613528565b6000908152600560205260409020546001600160a01b0316151590565b600061072b611701565b600081815260076020526040902080546001600160a01b0319166001600160a01b03841690811790915581906117e982610fbe565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061182d8261178d565b61188e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610798565b600061189983610fbe565b9050806001600160a01b0316846001600160a01b031614806118c057506118c081856115e8565b806118e45750836001600160a01b03166118d984610730565b6001600160a01b0316145b949350505050565b826001600160a01b03166118ff82610fbe565b6001600160a01b0316146119635760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610798565b6001600160a01b0382166119c55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610798565b6119d06000826117b4565b6001600160a01b03831660009081526006602052604081208054600192906119f99084906135b7565b90915550506001600160a01b0382166000908152600660205260408120805460019290611a279084906135ce565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60105481611a9560125490565b611a9f91906135ce565b1115611ade5760405162461bcd60e51b815260206004820152600e60248201526d455843454544535f535550504c5960901b6044820152606401610798565b60005b818110156108db57601254611af68482612254565b611afe61226e565b5080611b09816133a1565b915050611ae1565b60008054610100900460ff1615611b5f578160ff166001148015611b3b5750611b3930611727565b155b611b575760405162461bcd60e51b8152600401610798906135e6565b506000919050565b60005460ff808416911610611b865760405162461bcd60e51b8152600401610798906135e6565b506000805460ff191660ff92909216919091179055600190565b919050565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600054610100900460ff16611c275760405162461bcd60e51b815260040161079890613634565b6108db838383612285565b600054610100900460ff16611c595760405162461bcd60e51b815260040161079890613634565b610bd98282612318565b600054610100900460ff16611c8a5760405162461bcd60e51b815260040161079890613634565b611651816123b4565b600054610100900460ff16611cba5760405162461bcd60e51b815260040161079890613634565b6111b2612400565b600054610100900460ff16611ce95760405162461bcd60e51b815260040161079890613634565b6111b2612437565b600054610100900460ff16611d185760405162461bcd60e51b815260040161079890613634565b610bd9828261246e565b600054610100900460ff16611d495760405162461bcd60e51b815260040161079890613634565b611651816124fe565b600054610100900460ff16611d795760405162461bcd60e51b815260040161079890613634565b6111b2612525565b60005b8151811015610bd9576000828281518110611da157611da1613351565b60200260200101519050612710816040015161ffff1610611dd45760405162461bcd60e51b81526004016107989061367f565b60208101516001600160a01b0316611e4d578051600090815260156020526040902080546001600160b01b03191690558051611e129060169061255c565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611f15565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152601590945294909220925183549451909216600160a01b026001600160b01b03199094169116179190911790558051611ebb90601690612568565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080611f20816133a1565b915050611d84565b60006105f6825490565b6060600a80546111c390613528565b816001600160a01b0316836001600160a01b03161415611f9f5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610798565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6120178484846118ec565b61202384848484612574565b6106965760405162461bcd60e51b8152600401610798906136a4565b60606000600d805461205090613528565b9050116120e757600c805461206490613528565b80601f016020809104026020016040519081016040528092919081815260200182805461209090613528565b80156120dd5780601f106120b2576101008083540402835291602001916120dd565b820191906000526020600020905b8154815290600101906020018083116120c057829003601f168201915b50505050506105f6565b600d6120f28361268f565b600e60405160200161210693929190613790565b60405160208183030381529060405292915050565b60135460009060ff1661215157612130611252565b6001600160a01b0316826001600160a01b03161415612151575060016105f6565b6001600160a01b0380841660009081526008602090815260408083209386168352929052205460ff166115f4565b612710816020015161ffff16106121a85760405162461bcd60e51b81526004016107989061367f565b60408051808201825282516001600160a01b03168082526020808501805161ffff1691909301819052601480546001600160b01b031916909217600160a01b9091021790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419261221f92916131da565b60405180910390a150565b600082600001828154811061224157612241613351565b9060005260206000200154905092915050565b610bd982826040518060200160405280600081525061278c565b6012805490600061227e836133a1565b9190505550565b600054610100900460ff166122ac5760405162461bcd60e51b815260040161079890613634565b82516122bf906009906020860190612ab4565b5081516122d390600a906020850190612ab4565b5080516122e790600b906020840190612ab4565b506122f8633d96f4ff60e11b6127bf565b6123086380ac58cd60e01b6127bf565b6108db635b5e139f60e01b6127bf565b600054610100900460ff1661233f5760405162461bcd60e51b815260040161079890613634565b815161235290600c906020850190612ab4565b50805161236690600d906020840190612ab4565b5060408051808201909152600580825264173539b7b760d91b602090920191825261239391600e91612ab4565b506123a4631f2f406b60e01b6127bf565b610bd9635b5e139f60e01b6127bf565b600054610100900460ff166123db5760405162461bcd60e51b815260040161079890613634565b60108190556123f06330f487b560e11b6127bf565b6116516380ac58cd60e01b6127bf565b600054610100900460ff166124275760405162461bcd60e51b815260040161079890613634565b6111b2631aa1577160e11b6127bf565b600054610100900460ff1661245e5760405162461bcd60e51b815260040161079890613634565b6111b263948e2d5360e01b6127bf565b600054610100900460ff166124955760405162461bcd60e51b815260040161079890613634565b6124a5633a47bf5160e11b6127bf565b6124b563152a902d60e11b6127bf565b6124c563c69dbd8f60e01b6127bf565b6124d563656cb66560e11b6127bf565b604080518082019091526001600160a01b038316815261ffff821660208201526108db8161217f565b600054610100900460ff166115a85760405162461bcd60e51b815260040161079890613634565b600054610100900460ff1661254c5760405162461bcd60e51b815260040161079890613634565b6111b2632a7c3e4960e01b6127bf565b60006115f48383612840565b60006115f48383612933565b6000612588846001600160a01b0316611727565b1561268457836001600160a01b031663150b7a026125a46117aa565b8786866040518563ffffffff1660e01b81526004016125c694939291906137c3565b602060405180830381600087803b1580156125e057600080fd5b505af1925050508015612610575060408051601f3d908101601f1916820190925261260d91810190613800565b60015b61266a573d80801561263e576040519150601f19603f3d011682016040523d82523d6000602084013e612643565b606091505b5080516126625760405162461bcd60e51b8152600401610798906136a4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506118e4565b506001949350505050565b6060816126b35750506040805180820190915260018152600360fc1b602082015290565b8160005b81156126dd57806126c7816133a1565b91506126d69050600a83613477565b91506126b7565b6000816001600160401b038111156126f7576126f7612b97565b6040519080825280601f01601f191660200182016040528015612721576020820181803683370190505b5090505b84156118e4576127366001836135b7565b9150612743600a8661381d565b61274e9060306135ce565b60f81b81838151811061276357612763613351565b60200101906001600160f81b031916908160001a905350612785600a86613477565b9450612725565b6127968383612982565b6127a36000848484612574565b6108db5760405162461bcd60e51b8152600401610798906136a4565b6001600160e01b031980821614156128185760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610798565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600081815260018301602052604081205480156129295760006128646001836135b7565b8554909150600090612878906001906135b7565b90508181146128dd57600086600001828154811061289857612898613351565b90600052602060002001549050808760000184815481106128bb576128bb613351565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128ee576128ee613831565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f6565b60009150506105f6565b600081815260018301602052604081205461297a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f6565b5060006105f6565b6001600160a01b0382166129d85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610798565b6129e18161178d565b15612a2d5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606401610798565b6001600160a01b0382166000908152600660205260408120805460019290612a569084906135ce565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612ac090613528565b90600052602060002090601f016020900481019282612ae25760008555612b28565b82601f10612afb57805160ff1916838001178555612b28565b82800160010185558215612b28579182015b82811115612b28578251825591602001919060010190612b0d565b50612b34929150612b38565b5090565b5b80821115612b345760008155600101612b39565b6001600160e01b03198116811461165157600080fd5b600060208284031215612b7557600080fd5b81356115f481612b4d565b80356001600160a01b0381168114611ba057600080fd5b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715612bd057612bd0612b97565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612bfe57612bfe612b97565b604052919050565b60006001600160401b03821115612c1f57612c1f612b97565b5060051b60200190565b600082601f830112612c3a57600080fd5b81356020612c4f612c4a83612c06565b612bd6565b82815260059290921b84018101918181019086841115612c6e57600080fd5b8286015b84811015612c895780358352918301918301612c72565b509695505050505050565b600080600060608486031215612ca957600080fd5b612cb284612b80565b9250612cc060208501612b80565b915060408401356001600160401b03811115612cdb57600080fd5b612ce786828701612c29565b9150509250925092565b600060208284031215612d0357600080fd5b5035919050565b60005b83811015612d25578181015183820152602001612d0d565b838111156106965750506000910152565b60008151808452612d4e816020860160208601612d0a565b601f01601f19169290920160200192915050565b6020815260006115f46020830184612d36565b6001600160a01b0391909116815260200190565b60008060408385031215612d9c57600080fd5b612da583612b80565b946020939093013593505050565b600080600060608486031215612dc857600080fd5b612dd184612b80565b9250612ddf60208501612b80565b9150604084013590509250925092565b60008060408385031215612e0257600080fd5b50508035926020909101359150565b600082601f830112612e2257600080fd5b81356020612e32612c4a83612c06565b82815260059290921b84018101918181019086841115612e5157600080fd5b8286015b84811015612c8957612e6681612b80565b8352918301918301612e55565b600080600060608486031215612e8857600080fd5b83356001600160401b0380821115612e9f57600080fd5b612eab87838801612e11565b94506020860135915080821115612ec157600080fd5b612ecd87838801612e11565b93506040860135915080821115612ee357600080fd5b50612ce786828701612c29565b60006001600160401b03831115612f0957612f09612b97565b612f1c601f8401601f1916602001612bd6565b9050828152838383011115612f3057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612f5857600080fd5b6115f483833560208501612ef0565b600060208284031215612f7957600080fd5b81356001600160401b03811115612f8f57600080fd5b6118e484828501612f47565b803561ffff81168114611ba057600080fd5b60008060408385031215612fc057600080fd5b82356001600160401b0380821115612fd757600080fd5b908401906101608287031215612fec57600080fd5b612ff4612bad565b82358281111561300357600080fd5b61300f88828601612f47565b82525060208301358281111561302457600080fd5b61303088828601612f47565b60208301525060408301358281111561304857600080fd5b61305488828601612f47565b60408301525060608301358281111561306c57600080fd5b61307888828601612f47565b60608301525060808301358281111561309057600080fd5b61309c88828601612f47565b60808301525060a0830135828111156130b457600080fd5b6130c088828601612e11565b60a08301525060c0830135828111156130d857600080fd5b6130e488828601612c29565b60c08301525060e083013560e08201526101009150613104828401612b80565b828201526101209150613118828401612f9b565b82820152610140915061312c828401612b80565b8282015280945050505061314260208401612b80565b90509250929050565b6000806020838503121561315e57600080fd5b82356001600160401b038082111561317557600080fd5b818501915085601f83011261318957600080fd5b81358181111561319857600080fd5b8660206060830285010111156131ad57600080fd5b60209290920196919550909350505050565b6000602082840312156131d157600080fd5b6115f482612b80565b6001600160a01b0392909216825261ffff16602082015260400190565b6000806040838503121561320a57600080fd5b61321383612b80565b91506020830135801515811461322857600080fd5b809150509250929050565b6000806000806080858703121561324957600080fd5b61325285612b80565b935061326060208601612b80565b92506040850135915060608501356001600160401b0381111561328257600080fd5b8501601f8101871361329357600080fd5b6132a287823560208401612ef0565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b8281101561330257815180516001600160a01b031685528601516001600160601b03168685015292840192908501906001016132cb565b5091979650505050505050565b6000806040838503121561332257600080fd5b61332b83612b80565b915061314260208401612b80565b60006040828403121561334b57600080fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156133b5576133b561338b565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600081600019048311821515161561345c5761345c61338b565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261348657613486613461565b500490565b60006060828403121561349d57600080fd5b604051606081018181106001600160401b03821117156134bf576134bf612b97565b604052823581526134d260208401612b80565b60208201526134e360408401612f9b565b60408201529392505050565b60006020828403121561350157600080fd5b5051919050565b602080825260069082015265232927ad22a760d11b604082015260600190565b600181811c9082168061353c57607f821691505b6020821081141561334b57634e487b7160e01b600052602260045260246000fd5b60006040828403121561356f57600080fd5b604051604081018181106001600160401b038211171561359157613591612b97565b60405261359d83612b80565b81526135ab60208401612f9b565b60208201529392505050565b6000828210156135c9576135c961338b565b500390565b600082198211156135e1576135e161338b565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600b908201526a496e76616c69642062707360a81b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8054600090600181811c908083168061371057607f831692505b602080841082141561373257634e487b7160e01b600052602260045260246000fd5b818015613746576001811461375757613784565b60ff19861689528489019650613784565b60008881526020902060005b8681101561377c5781548b820152908501908301613763565b505084890196505b50505050505092915050565b600061379c82866136f6565b84516137ac818360208901612d0a565b6137b8818301866136f6565b979650505050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906137f690830184612d36565b9695505050505050565b60006020828403121561381257600080fd5b81516115f481612b4d565b60008261382c5761382c613461565b500690565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220efb52db0061b2917949fb149880afb278cda4c643a9020cc9e72f677476df35c64736f6c63430008090033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getTokenRoyaltiesCount()": {
            "details": "See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}."
          },
          "getTokenRoyaltyByIndex(uint256)": {
            "details": "See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "See {IEIP2981RoyaltyOverride-royaltyInfo}."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_1949": {
              "entryPoint": null,
              "id": 1949,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_798": {
              "entryPoint": null,
              "id": 798,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_9071": {
              "entryPoint": null,
              "id": 9071,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@__ERC2771ContextOwnable_init_14099": {
              "entryPoint": 1321,
              "id": 14099,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@__ERC2771ContextOwnable_init_unchained_14111": {
              "entryPoint": 2286,
              "id": 14111,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@__ERC721AutoIdMinterExtension_init_5843": {
              "entryPoint": 1105,
              "id": 5843,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@__ERC721AutoIdMinterExtension_init_unchained_5869": {
              "entryPoint": 1926,
              "id": 5869,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@__ERC721BulkifyExtension_init_6009": {
              "entryPoint": 1374,
              "id": 6009,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721BulkifyExtension_init_unchained_6022": {
              "entryPoint": 2362,
              "id": 6022,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721CollectionMetadataExtension_init_6192": {
              "entryPoint": 992,
              "id": 6192,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@__ERC721CollectionMetadataExtension_init_unchained_6237": {
              "entryPoint": 1595,
              "id": 6237,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@__ERC721OwnerManagedExtension_init_6878": {
              "entryPoint": 1215,
              "id": 6878,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721OwnerManagedExtension_init_unchained_6891": {
              "entryPoint": 2069,
              "id": 6891,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721OwnerMintExtension_init_6984": {
              "entryPoint": 1161,
              "id": 6984,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721OwnerMintExtension_init_unchained_6997": {
              "entryPoint": 2009,
              "id": 6997,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721PrefixedMetadataExtension_init_7499": {
              "entryPoint": 1047,
              "id": 7499,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@__ERC721PrefixedMetadataExtension_init_unchained_7535": {
              "entryPoint": 1757,
              "id": 7535,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@__ERC721RoyaltyExtension_init_8202": {
              "entryPoint": 1267,
              "id": 8202,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@__ERC721RoyaltyExtension_init_unchained_8250": {
              "entryPoint": 2129,
              "id": 8250,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_afterTokenTransfer_2751": {
              "entryPoint": null,
              "id": 2751,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_2740": {
              "entryPoint": null,
              "id": 2740,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_checkOnERC721Received_2729": {
              "entryPoint": 3229,
              "id": 2729,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_exists_2325": {
              "entryPoint": null,
              "id": 2325,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_incrementTokenId_5964": {
              "entryPoint": 2456,
              "id": 5964,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_mintTo_5956": {
              "entryPoint": 1426,
              "id": 5956,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_mint_2476": {
              "entryPoint": 2901,
              "id": 2476,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_14154": {
              "entryPoint": 766,
              "id": 14154,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_msgSender_3717": {
              "entryPoint": 1576,
              "id": 3717,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_msgSender_9182": {
              "entryPoint": 155,
              "id": 9182,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_registerInterface_4732": {
              "entryPoint": 2481,
              "id": 4732,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_safeMint_2381": {
              "entryPoint": 2422,
              "id": 2381,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_safeMint_2410": {
              "entryPoint": 2843,
              "id": 2410,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_setDefaultRoyalty_249": {
              "entryPoint": 2613,
              "id": 249,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_setInitializedVersion_1020": {
              "entryPoint": 823,
              "id": 1020,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_transferOwnership_878": {
              "entryPoint": 183,
              "id": 878,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@initialize_9169": {
              "entryPoint": 274,
              "id": 9169,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@isContract_3428": {
              "entryPoint": 1580,
              "id": 3428,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isTrustedForwarder_14135": {
              "entryPoint": null,
              "id": 14135,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@totalSupply_5914": {
              "entryPoint": null,
              "id": 5914,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_address_fromMemory": {
              "entryPoint": 4022,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_array_address_dyn_fromMemory": {
              "entryPoint": 4046,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_uint256_dyn_fromMemory": {
              "entryPoint": 4170,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_string_fromMemory": {
              "entryPoint": 3876,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4_fromMemory": {
              "entryPoint": 5138,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_struct$_Config_$9052_memory_ptr_fromMemory": {
              "entryPoint": 4287,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_uint16_fromMemory": {
              "entryPoint": 4268,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 5052,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint16__to_t_address_t_uint16__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4970,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_282912c0dfceceb28d77d0333f496b83948f9ba5b3154358a8b140b849289dee__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4790,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8cdecbb23ec02783743afd77310df6afab5a99f690f3465f9005641c64075aff__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8e422f8423f8fbfe2947b9ae08d4901c410485ed2cfc594249b8dfe3de24f405__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b241956482006da0262aee1fc6c67748f0e9540db02038beca23605c4807d33d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 4868,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 3774,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_memory_1669": {
              "entryPoint": 3730,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_array_address_dyn": {
              "entryPoint": 3984,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 4943,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 3825,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 5189,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 4760,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 4738,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 4716,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 3708,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:11119:104",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:104",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46:95:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "63:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "70:3:104",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "75:10:104",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "66:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "66:20:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "56:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "56:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "56:31:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "103:1:104",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "106:4:104",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "96:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "96:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "96:15:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "127:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "130:4:104",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "120:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "120:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "120:15:104"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14:127:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "192:209:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "202:19:104",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "218:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "212:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "212:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "202:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "230:37:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "252:6:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "260:6:104",
                                "type": "",
                                "value": "0x0160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "248:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "248:19:104"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "234:10:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "342:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "344:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "344:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "344:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "285:10:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "305:2:104",
                                            "type": "",
                                            "value": "64"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "309:1:104",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "301:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "301:10:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "313:1:104",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "297:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "297:18:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "282:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "282:34:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "321:10:104"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "333:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "318:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "318:22:104"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "279:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "279:62:104"
                          },
                          "nodeType": "YulIf",
                          "src": "276:88:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "380:2:104",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "384:10:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "373:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "373:22:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "373:22:104"
                        }
                      ]
                    },
                    "name": "allocate_memory_1669",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "181:6:104",
                        "type": ""
                      }
                    ],
                    "src": "146:255:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "451:230:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "461:19:104",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "477:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "471:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "471:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "461:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "489:58:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "511:6:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "527:4:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "533:2:104",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "523:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "523:13:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "542:2:104",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "538:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "538:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "519:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "519:27:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "507:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "507:40:104"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "493:10:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "622:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "624:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "624:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "624:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "565:10:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "585:2:104",
                                            "type": "",
                                            "value": "64"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "589:1:104",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "581:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "581:10:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "593:1:104",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "577:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "577:18:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "562:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "562:34:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "601:10:104"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "613:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "598:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "598:22:104"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "559:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "559:62:104"
                          },
                          "nodeType": "YulIf",
                          "src": "556:88:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "660:2:104",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "664:10:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "653:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "653:22:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "653:22:104"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "431:4:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "440:6:104",
                        "type": ""
                      }
                    ],
                    "src": "406:275:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "739:205:104",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "749:10:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "758:1:104",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "753:1:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "818:63:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "843:3:104"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "848:1:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "839:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "839:11:104"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "862:3:104"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "867:1:104"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "858:3:104"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "858:11:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "852:5:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "852:18:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "832:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "832:39:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "832:39:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "779:1:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "782:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "776:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "776:13:104"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "790:19:104",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "792:15:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "801:1:104"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "804:2:104",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "797:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "797:10:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "792:1:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "772:3:104",
                            "statements": []
                          },
                          "src": "768:113:104"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "907:31:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "920:3:104"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "925:6:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "916:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "916:16:104"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "934:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "909:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "909:27:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "909:27:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "896:1:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "899:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "893:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "893:13:104"
                          },
                          "nodeType": "YulIf",
                          "src": "890:48:104"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "717:3:104",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "722:3:104",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "727:6:104",
                        "type": ""
                      }
                    ],
                    "src": "686:258:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1013:433:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1062:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1071:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1074:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1064:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1064:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1064:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1041:6:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1049:4:104",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1037:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1037:17:104"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "1056:3:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1033:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1033:27:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1026:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1026:35:104"
                          },
                          "nodeType": "YulIf",
                          "src": "1023:55:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1087:23:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1103:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1097:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1097:13:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1091:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1149:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1151:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1151:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1151:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1125:2:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1137:2:104",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1141:1:104",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1133:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1133:10:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1145:1:104",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1129:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1129:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1122:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1122:26:104"
                          },
                          "nodeType": "YulIf",
                          "src": "1119:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1180:70:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1223:2:104"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1227:4:104",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1219:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1219:13:104"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1238:2:104",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "1234:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1234:7:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1215:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1215:27:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1244:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1211:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1211:38:104"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1195:15:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1195:55:104"
                          },
                          "variables": [
                            {
                              "name": "array_1",
                              "nodeType": "YulTypedName",
                              "src": "1184:7:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "1266:7:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1275:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1259:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1259:19:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1259:19:104"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1326:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1335:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1338:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1328:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1328:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1328:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1301:6:104"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1309:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1297:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1297:15:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1314:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1293:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1293:26:104"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1321:3:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1290:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1290:35:104"
                          },
                          "nodeType": "YulIf",
                          "src": "1287:55:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1377:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1385:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1373:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1373:17:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1396:7:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1405:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1392:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1392:18:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1412:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1351:21:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1351:64:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1351:64:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1424:16:104",
                          "value": {
                            "name": "array_1",
                            "nodeType": "YulIdentifier",
                            "src": "1433:7:104"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "1424:5:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "987:6:104",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "995:3:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1003:5:104",
                        "type": ""
                      }
                    ],
                    "src": "949:497:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1520:114:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1564:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1566:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1566:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1566:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1536:6:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1552:2:104",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1556:1:104",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1548:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1548:10:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1560:1:104",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1544:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1544:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1533:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1533:30:104"
                          },
                          "nodeType": "YulIf",
                          "src": "1530:56:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1595:33:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1611:1:104",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1614:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1607:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1607:14:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1623:4:104",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1603:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1603:25:104"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "1595:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_array_address_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "1500:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "1511:4:104",
                        "type": ""
                      }
                    ],
                    "src": "1451:183:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1699:117:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1709:22:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1724:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1718:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1718:13:104"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1709:5:104"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1794:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1803:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1806:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1796:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1796:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1796:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1753:5:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1764:5:104"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1779:3:104",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1784:1:104",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1775:3:104"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1775:11:104"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1788:1:104",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1771:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1771:19:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1760:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1760:31:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1750:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1750:42:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1743:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1743:50:104"
                          },
                          "nodeType": "YulIf",
                          "src": "1740:70:104"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1678:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1689:5:104",
                        "type": ""
                      }
                    ],
                    "src": "1639:177:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1896:608:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1945:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1954:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1957:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1947:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1947:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1947:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1924:6:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1932:4:104",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1920:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1920:17:104"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "1939:3:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1916:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1916:27:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1909:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1909:35:104"
                          },
                          "nodeType": "YulIf",
                          "src": "1906:55:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1970:23:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1986:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1980:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1980:13:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1974:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2002:14:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2012:4:104",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "2006:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2025:71:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2092:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_address_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "2052:39:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2052:43:104"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2036:15:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2036:60:104"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "2029:3:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2105:16:104",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "2118:3:104"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "2109:5:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "2137:3:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2142:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2130:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2130:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2130:15:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2154:19:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "2165:3:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2170:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2161:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2161:12:104"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "2154:3:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2182:46:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2204:6:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2216:1:104",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2219:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "2212:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2212:10:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2200:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2200:23:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2225:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2196:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2196:32:104"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "2186:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2256:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2265:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2268:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2258:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2258:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2258:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2243:6:104"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2251:3:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2240:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2240:15:104"
                          },
                          "nodeType": "YulIf",
                          "src": "2237:35:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2281:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2296:6:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2304:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2292:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2292:15:104"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "2285:3:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2372:103:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "2393:3:104"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "2428:3:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_address_fromMemory",
                                        "nodeType": "YulIdentifier",
                                        "src": "2398:29:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2398:34:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2386:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2386:47:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2386:47:104"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2446:19:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "2457:3:104"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2462:2:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2453:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2453:12:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "2446:3:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "2327:3:104"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2332:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2324:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2324:15:104"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "2340:23:104",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2342:19:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "2353:3:104"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2358:2:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2349:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2349:12:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "2342:3:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "2320:3:104",
                            "statements": []
                          },
                          "src": "2316:159:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2484:14:104",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "2493:5:104"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "2484:5:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_address_dyn_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1870:6:104",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1878:3:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1886:5:104",
                        "type": ""
                      }
                    ],
                    "src": "1821:683:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2584:584:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2633:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2642:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2645:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2635:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2635:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2635:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2612:6:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2620:4:104",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2608:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2608:17:104"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2627:3:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2604:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2604:27:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2597:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2597:35:104"
                          },
                          "nodeType": "YulIf",
                          "src": "2594:55:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2658:23:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2674:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2668:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2668:13:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2662:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2690:14:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2700:4:104",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "2694:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2713:71:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2780:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_address_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "2740:39:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2740:43:104"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2724:15:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2724:60:104"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "2717:3:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2793:16:104",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "2806:3:104"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "2797:5:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "2825:3:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2830:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2818:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2818:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2818:15:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2842:19:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "2853:3:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2858:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2849:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2849:12:104"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "2842:3:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2870:46:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2892:6:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2904:1:104",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2907:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "2900:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2900:10:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2888:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2888:23:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2913:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2884:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2884:32:104"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "2874:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2944:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2953:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2956:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2946:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2946:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2946:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2931:6:104"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2939:3:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2928:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2928:15:104"
                          },
                          "nodeType": "YulIf",
                          "src": "2925:35:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2969:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2984:6:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2992:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2980:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2980:15:104"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "2973:3:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3060:79:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "3081:3:104"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "3092:3:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3086:5:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3086:10:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3074:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3074:23:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3074:23:104"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "3110:19:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "3121:3:104"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "3126:2:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3117:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3117:12:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "3110:3:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "3015:3:104"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3020:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3012:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3012:15:104"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3028:23:104",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3030:19:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "3041:3:104"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "3046:2:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3037:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3037:12:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "3030:3:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3008:3:104",
                            "statements": []
                          },
                          "src": "3004:135:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3148:14:104",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "3157:5:104"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "3148:5:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_uint256_dyn_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2558:6:104",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2566:3:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2574:5:104",
                        "type": ""
                      }
                    ],
                    "src": "2509:659:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3232:104:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3242:22:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3257:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3251:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3251:13:104"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3242:5:104"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3314:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3323:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3326:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3316:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3316:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3316:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3286:5:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "3297:5:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3304:6:104",
                                        "type": "",
                                        "value": "0xffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3293:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3293:18:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "3283:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3283:29:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3276:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3276:37:104"
                          },
                          "nodeType": "YulIf",
                          "src": "3273:57:104"
                        }
                      ]
                    },
                    "name": "abi_decode_uint16_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3211:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3222:5:104",
                        "type": ""
                      }
                    ],
                    "src": "3173:163:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3446:1946:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3492:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3501:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3504:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3494:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3494:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3494:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3467:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3476:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3463:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3463:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3488:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3459:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3459:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "3456:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3517:30:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3537:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3531:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3531:16:104"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3521:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3556:28:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3574:2:104",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3578:1:104",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3570:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3570:10:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3582:1:104",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3566:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3566:18:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3560:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3611:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3620:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3623:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3613:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3613:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3613:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3599:6:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3607:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3596:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3596:14:104"
                          },
                          "nodeType": "YulIf",
                          "src": "3593:34:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3636:32:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3650:9:104"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3661:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3646:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3646:22:104"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "3640:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3710:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3719:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3722:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3712:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3712:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3712:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3688:7:104"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3697:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3684:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3684:16:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3702:6:104",
                                "type": "",
                                "value": "0x0160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3680:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3680:29:104"
                          },
                          "nodeType": "YulIf",
                          "src": "3677:49:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3735:35:104",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_memory_1669",
                              "nodeType": "YulIdentifier",
                              "src": "3748:20:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3748:22:104"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3739:5:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3779:25:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "3801:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3795:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3795:9:104"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "3783:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3833:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3842:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3845:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3835:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3835:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3835:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "3819:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3829:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3816:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3816:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "3813:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3865:5:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "3905:2:104"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3909:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3901:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3901:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3920:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "3872:28:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3872:56:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3858:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3858:71:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3858:71:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3938:34:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3964:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3968:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3960:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3960:11:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3954:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3954:18:104"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "3942:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4001:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4010:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4013:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4003:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4003:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4003:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "3987:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3997:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3984:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3984:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "3981:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4037:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4044:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4033:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4033:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4082:2:104"
                                      },
                                      {
                                        "name": "offset_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4086:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4078:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4078:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4097:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4049:28:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4049:56:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4026:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4026:80:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4026:80:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4115:34:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4141:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4145:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4137:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4137:11:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4131:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4131:18:104"
                          },
                          "variables": [
                            {
                              "name": "offset_3",
                              "nodeType": "YulTypedName",
                              "src": "4119:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4178:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4187:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4190:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4180:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4180:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4180:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "4164:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4174:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4161:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4161:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "4158:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4214:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4221:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4210:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4210:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4259:2:104"
                                      },
                                      {
                                        "name": "offset_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "4263:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4255:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4255:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4274:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4226:28:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4226:56:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4203:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4203:80:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4203:80:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4292:34:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4318:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4322:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4314:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4314:11:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4308:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4308:18:104"
                          },
                          "variables": [
                            {
                              "name": "offset_4",
                              "nodeType": "YulTypedName",
                              "src": "4296:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4355:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4364:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4367:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4357:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4357:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4357:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_4",
                                "nodeType": "YulIdentifier",
                                "src": "4341:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4351:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4338:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4338:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "4335:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4391:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4398:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4387:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4387:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4436:2:104"
                                      },
                                      {
                                        "name": "offset_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "4440:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4432:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4432:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4451:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4403:28:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4403:56:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4380:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4380:80:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4380:80:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4469:35:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4495:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4499:3:104",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4491:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4491:12:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4485:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4485:19:104"
                          },
                          "variables": [
                            {
                              "name": "offset_5",
                              "nodeType": "YulTypedName",
                              "src": "4473:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4533:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4542:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4545:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4535:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4535:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4535:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_5",
                                "nodeType": "YulIdentifier",
                                "src": "4519:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4529:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4516:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4516:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "4513:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4569:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4576:3:104",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4565:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4565:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4615:2:104"
                                      },
                                      {
                                        "name": "offset_5",
                                        "nodeType": "YulIdentifier",
                                        "src": "4619:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4611:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4611:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4630:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4582:28:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4582:56:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4558:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4558:81:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4558:81:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4648:35:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4674:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4678:3:104",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4670:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4670:12:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4664:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4664:19:104"
                          },
                          "variables": [
                            {
                              "name": "offset_6",
                              "nodeType": "YulTypedName",
                              "src": "4652:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4712:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4721:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4724:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4714:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4714:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4714:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_6",
                                "nodeType": "YulIdentifier",
                                "src": "4698:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4708:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4695:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4695:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "4692:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4748:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4755:3:104",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4744:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4744:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4805:2:104"
                                      },
                                      {
                                        "name": "offset_6",
                                        "nodeType": "YulIdentifier",
                                        "src": "4809:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4801:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4801:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4820:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4761:39:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4761:67:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4737:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4737:92:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4737:92:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4838:35:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4864:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4868:3:104",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4860:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4860:12:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4854:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4854:19:104"
                          },
                          "variables": [
                            {
                              "name": "offset_7",
                              "nodeType": "YulTypedName",
                              "src": "4842:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4902:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4911:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4914:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4904:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4904:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4904:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_7",
                                "nodeType": "YulIdentifier",
                                "src": "4888:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4898:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4885:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4885:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "4882:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4938:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4945:3:104",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4934:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4934:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "4995:2:104"
                                      },
                                      {
                                        "name": "offset_7",
                                        "nodeType": "YulIdentifier",
                                        "src": "4999:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4991:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4991:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5010:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_uint256_dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "4951:39:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4951:67:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4927:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4927:92:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4927:92:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5039:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5046:3:104",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5035:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5035:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "5062:2:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5066:3:104",
                                        "type": "",
                                        "value": "224"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5058:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5058:12:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5052:5:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5052:19:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5028:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5028:44:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5028:44:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5081:13:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5091:3:104",
                            "type": "",
                            "value": "256"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "5085:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5114:5:104"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "5121:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5110:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5110:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "5160:2:104"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "5164:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5156:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5156:11:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5126:29:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5126:42:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5103:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5103:66:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5103:66:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5178:13:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5188:3:104",
                            "type": "",
                            "value": "288"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "5182:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5211:5:104"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "5218:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5207:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5207:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "5256:2:104"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "5260:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5252:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5252:11:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint16_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5223:28:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5223:41:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5200:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5200:65:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5200:65:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5274:13:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5284:3:104",
                            "type": "",
                            "value": "320"
                          },
                          "variables": [
                            {
                              "name": "_5",
                              "nodeType": "YulTypedName",
                              "src": "5278:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5307:5:104"
                                  },
                                  {
                                    "name": "_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "5314:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5303:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5303:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "5353:2:104"
                                      },
                                      {
                                        "name": "_5",
                                        "nodeType": "YulIdentifier",
                                        "src": "5357:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5349:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5349:11:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5319:29:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5319:42:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5296:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5296:66:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5296:66:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5371:15:104",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5381:5:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5371:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_Config_$9052_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3412:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3423:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3435:6:104",
                        "type": ""
                      }
                    ],
                    "src": "3341:2051:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5571:177:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5588:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5599:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5581:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5581:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5581:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5622:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5633:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5618:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5618:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5638:2:104",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5611:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5611:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5611:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5661:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5672:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5657:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5657:18:104"
                              },
                              {
                                "hexValue": "4552433732312f494e56414c49445f494e495449414c5f41524753",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5677:29:104",
                                "type": "",
                                "value": "ERC721/INVALID_INITIAL_ARGS"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5650:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5650:57:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5650:57:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5716:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5728:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5739:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5724:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5724:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5716:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8e422f8423f8fbfe2947b9ae08d4901c410485ed2cfc594249b8dfe3de24f405__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5548:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5562:4:104",
                        "type": ""
                      }
                    ],
                    "src": "5397:351:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5785:95:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5802:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5809:3:104",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5814:10:104",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "5805:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5805:20:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5795:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5795:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5795:31:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5842:1:104",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5845:4:104",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5835:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5835:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5835:15:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5866:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5869:4:104",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "5859:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5859:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5859:15:104"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "5753:127:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5917:95:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5934:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5941:3:104",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5946:10:104",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "5937:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5937:20:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5927:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5927:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5927:31:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5974:1:104",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5977:4:104",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5967:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5967:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5967:15:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5998:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6001:4:104",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "5991:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5991:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5991:15:104"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "5885:127:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6064:88:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6095:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "6097:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6097:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6097:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6080:5:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6091:1:104",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "6087:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6087:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "6077:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6077:17:104"
                          },
                          "nodeType": "YulIf",
                          "src": "6074:43:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6126:20:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6137:5:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6144:1:104",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6133:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6133:13:104"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "6126:3:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6046:5:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "6056:3:104",
                        "type": ""
                      }
                    ],
                    "src": "6017:135:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6264:87:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6274:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6286:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6297:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6282:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6282:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6274:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6316:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6331:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6339:4:104",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6327:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6327:17:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6309:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6309:36:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6309:36:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6233:9:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6244:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6255:4:104",
                        "type": ""
                      }
                    ],
                    "src": "6157:194:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6530:236:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6547:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6558:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6540:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6540:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6540:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6581:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6592:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6577:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6577:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6597:2:104",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6570:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6570:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6570:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6620:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6631:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6616:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6616:18:104"
                              },
                              {
                                "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6636:34:104",
                                "type": "",
                                "value": "Initializable: contract is alrea"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6609:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6609:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6609:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6691:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6702:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6687:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6687:18:104"
                              },
                              {
                                "hexValue": "647920696e697469616c697a6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6707:16:104",
                                "type": "",
                                "value": "dy initialized"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6680:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6680:44:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6680:44:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6733:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6745:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6756:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6741:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6741:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6733:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6507:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6521:4:104",
                        "type": ""
                      }
                    ],
                    "src": "6356:410:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6945:233:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6962:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6973:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6955:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6955:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6955:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6996:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7007:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6992:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6992:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7012:2:104",
                                "type": "",
                                "value": "43"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6985:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6985:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6985:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7035:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7046:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7031:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7031:18:104"
                              },
                              {
                                "hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7051:34:104",
                                "type": "",
                                "value": "Initializable: contract is not i"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7024:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7024:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7024:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7106:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7117:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7102:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7102:18:104"
                              },
                              {
                                "hexValue": "6e697469616c697a696e67",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7122:13:104",
                                "type": "",
                                "value": "nitializing"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7095:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7095:41:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7095:41:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7145:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7157:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7168:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7153:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7153:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7145:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6922:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6936:4:104",
                        "type": ""
                      }
                    ],
                    "src": "6771:407:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7231:80:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7258:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "7260:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7260:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7260:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "7247:1:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "7254:1:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "7250:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7250:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7244:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7244:13:104"
                          },
                          "nodeType": "YulIf",
                          "src": "7241:39:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7289:16:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "7300:1:104"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "7303:1:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7296:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7296:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "7289:3:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "7214:1:104",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "7217:1:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "7223:3:104",
                        "type": ""
                      }
                    ],
                    "src": "7183:128:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7490:164:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7507:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7518:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7500:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7500:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7500:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7541:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7552:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7537:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7537:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7557:2:104",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7530:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7530:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7530:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7580:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7591:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7576:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7576:18:104"
                              },
                              {
                                "hexValue": "455843454544535f535550504c59",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7596:16:104",
                                "type": "",
                                "value": "EXCEEDS_SUPPLY"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7569:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7569:44:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7569:44:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7622:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7634:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7645:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7630:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7630:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7622:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8cdecbb23ec02783743afd77310df6afab5a99f690f3465f9005641c64075aff__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7467:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7481:4:104",
                        "type": ""
                      }
                    ],
                    "src": "7316:338:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7833:178:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7850:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7861:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7843:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7843:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7843:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7884:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7895:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7880:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7880:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7900:2:104",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7873:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7873:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7873:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7923:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7934:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7919:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7919:18:104"
                              },
                              {
                                "hexValue": "4552433136353a20696e76616c696420696e74657266616365206964",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7939:30:104",
                                "type": "",
                                "value": "ERC165: invalid interface id"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7912:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7912:58:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7912:58:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7979:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7991:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8002:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7987:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7987:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7979:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_282912c0dfceceb28d77d0333f496b83948f9ba5b3154358a8b140b849289dee__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7810:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7824:4:104",
                        "type": ""
                      }
                    ],
                    "src": "7659:352:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8190:161:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8207:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8218:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8200:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8200:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8200:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8241:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8252:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8237:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8237:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8257:2:104",
                                "type": "",
                                "value": "11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8230:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8230:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8230:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8280:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8291:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8276:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8276:18:104"
                              },
                              {
                                "hexValue": "496e76616c696420627073",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8296:13:104",
                                "type": "",
                                "value": "Invalid bps"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8269:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8269:41:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8269:41:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8319:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8331:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8342:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8327:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8327:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8319:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b241956482006da0262aee1fc6c67748f0e9540db02038beca23605c4807d33d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8167:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8181:4:104",
                        "type": ""
                      }
                    ],
                    "src": "8016:335:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8483:158:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8493:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8505:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8516:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8501:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8501:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8493:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8535:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8550:6:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8566:3:104",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8571:1:104",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "8562:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8562:11:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8575:1:104",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "8558:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8558:19:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8546:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8546:32:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8528:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8528:51:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8528:51:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8599:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8610:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8595:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8595:18:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8619:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8627:6:104",
                                    "type": "",
                                    "value": "0xffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8615:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8615:19:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8588:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8588:47:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8588:47:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint16__to_t_address_t_uint16__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8444:9:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8455:6:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8463:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8474:4:104",
                        "type": ""
                      }
                    ],
                    "src": "8356:285:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8820:240:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8837:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8848:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8830:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8830:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8830:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8871:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8882:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8867:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8867:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8887:2:104",
                                "type": "",
                                "value": "50"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8860:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8860:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8860:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8910:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8921:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8906:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8906:18:104"
                              },
                              {
                                "hexValue": "4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8926:34:104",
                                "type": "",
                                "value": "ERC721: transfer to non ERC721Re"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8899:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8899:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8899:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8981:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8992:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8977:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8977:18:104"
                              },
                              {
                                "hexValue": "63656976657220696d706c656d656e746572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8997:20:104",
                                "type": "",
                                "value": "ceiver implementer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8970:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8970:48:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8970:48:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9027:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9039:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9050:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9035:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9035:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9027:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8797:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8811:4:104",
                        "type": ""
                      }
                    ],
                    "src": "8646:414:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9239:182:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9256:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9267:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9249:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9249:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9249:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9290:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9301:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9286:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9286:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9306:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9279:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9279:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9279:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9329:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9340:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9325:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9325:18:104"
                              },
                              {
                                "hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9345:34:104",
                                "type": "",
                                "value": "ERC721: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9318:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9318:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9318:62:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9389:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9401:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9412:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9397:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9397:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9389:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9216:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9230:4:104",
                        "type": ""
                      }
                    ],
                    "src": "9065:356:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9600:178:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9617:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9628:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9610:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9610:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9610:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9651:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9662:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9647:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9647:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9667:2:104",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9640:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9640:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9640:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9690:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9701:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9686:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9686:18:104"
                              },
                              {
                                "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9706:30:104",
                                "type": "",
                                "value": "ERC721: token already minted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9679:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9679:58:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9679:58:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9746:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9758:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9769:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9754:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9754:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9746:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9577:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9591:4:104",
                        "type": ""
                      }
                    ],
                    "src": "9426:352:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9986:451:104",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9996:29:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10014:3:104",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10019:1:104",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "10010:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10010:11:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10023:1:104",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "10006:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10006:19:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10000:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10041:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10056:6:104"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10064:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10052:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10052:15:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10034:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10034:34:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10034:34:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10088:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10099:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10084:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10084:18:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10108:6:104"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10116:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10104:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10104:15:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10077:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10077:43:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10077:43:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10140:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10151:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10136:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10136:18:104"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "10156:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10129:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10129:34:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10129:34:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10183:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10194:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10179:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10179:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10199:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10172:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10172:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10172:31:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10212:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "10232:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10226:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10226:13:104"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "10216:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10259:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10270:3:104",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10255:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10255:19:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10276:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10248:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10248:35:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10248:35:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "10318:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10326:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10314:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10314:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10335:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10346:3:104",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10331:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10331:19:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10352:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "10292:21:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10292:67:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10292:67:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10368:63:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10384:9:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "10403:6:104"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10411:2:104",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "10399:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10399:15:104"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10420:2:104",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "10416:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10416:7:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "10395:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10395:29:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10380:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10380:45:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10427:3:104",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10376:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10376:55:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10368:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9931:9:104",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "9942:6:104",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9950:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9958:6:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9966:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9977:4:104",
                        "type": ""
                      }
                    ],
                    "src": "9783:654:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10522:210:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10568:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10577:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10580:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10570:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10570:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10570:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10543:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10552:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10539:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10539:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10564:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10535:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10535:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "10532:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10593:29:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10612:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10606:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10606:16:104"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "10597:5:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10686:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10695:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10698:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10688:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10688:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10688:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "10644:5:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "10655:5:104"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10666:3:104",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10671:10:104",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "10662:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10662:20:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "10651:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10651:32:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "10641:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10641:43:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "10634:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10634:51:104"
                          },
                          "nodeType": "YulIf",
                          "src": "10631:71:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10711:15:104",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "10721:5:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10711:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10488:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10499:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10511:6:104",
                        "type": ""
                      }
                    ],
                    "src": "10442:290:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10792:325:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10802:22:104",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10816:1:104",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "10819:4:104"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "10812:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10812:12:104"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "10802:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10833:38:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "10863:4:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10869:1:104",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "10859:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10859:12:104"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "10837:18:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10910:31:104",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "10912:27:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "10926:6:104"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10934:4:104",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "10922:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10922:17:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "10912:6:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "10890:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "10883:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10883:26:104"
                          },
                          "nodeType": "YulIf",
                          "src": "10880:61:104"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11000:111:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11021:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11028:3:104",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11033:10:104",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "11024:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11024:20:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11014:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11014:31:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11014:31:104"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11065:1:104",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11068:4:104",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11058:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11058:15:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11058:15:104"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11093:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11096:4:104",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11086:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11086:15:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11086:15:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "10956:18:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "10979:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10987:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "10976:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10976:14:104"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "10953:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10953:38:104"
                          },
                          "nodeType": "YulIf",
                          "src": "10950:161:104"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "10772:4:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "10781:6:104",
                        "type": ""
                      }
                    ],
                    "src": "10737:380:104"
                  }
                ]
              },
              "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_1669() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0160)\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        if gt(_1, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function array_allocation_size_array_address_dyn(length) -> size\n    {\n        if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_array_address_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, abi_decode_address_fromMemory(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_uint256_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_uint16_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_struct$_Config_$9052_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x0160) { revert(0, 0) }\n        let value := allocate_memory_1669()\n        let offset_1 := mload(_2)\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(value, abi_decode_string_fromMemory(add(_2, offset_1), dataEnd))\n        let offset_2 := mload(add(_2, 32))\n        if gt(offset_2, _1) { revert(0, 0) }\n        mstore(add(value, 32), abi_decode_string_fromMemory(add(_2, offset_2), dataEnd))\n        let offset_3 := mload(add(_2, 64))\n        if gt(offset_3, _1) { revert(0, 0) }\n        mstore(add(value, 64), abi_decode_string_fromMemory(add(_2, offset_3), dataEnd))\n        let offset_4 := mload(add(_2, 96))\n        if gt(offset_4, _1) { revert(0, 0) }\n        mstore(add(value, 96), abi_decode_string_fromMemory(add(_2, offset_4), dataEnd))\n        let offset_5 := mload(add(_2, 128))\n        if gt(offset_5, _1) { revert(0, 0) }\n        mstore(add(value, 128), abi_decode_string_fromMemory(add(_2, offset_5), dataEnd))\n        let offset_6 := mload(add(_2, 160))\n        if gt(offset_6, _1) { revert(0, 0) }\n        mstore(add(value, 160), abi_decode_array_address_dyn_fromMemory(add(_2, offset_6), dataEnd))\n        let offset_7 := mload(add(_2, 192))\n        if gt(offset_7, _1) { revert(0, 0) }\n        mstore(add(value, 192), abi_decode_array_uint256_dyn_fromMemory(add(_2, offset_7), dataEnd))\n        mstore(add(value, 224), mload(add(_2, 224)))\n        let _3 := 256\n        mstore(add(value, _3), abi_decode_address_fromMemory(add(_2, _3)))\n        let _4 := 288\n        mstore(add(value, _4), abi_decode_uint16_fromMemory(add(_2, _4)))\n        let _5 := 320\n        mstore(add(value, _5), abi_decode_address_fromMemory(add(_2, _5)))\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_8e422f8423f8fbfe2947b9ae08d4901c410485ed2cfc594249b8dfe3de24f405__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"ERC721/INVALID_INITIAL_ARGS\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_8cdecbb23ec02783743afd77310df6afab5a99f690f3465f9005641c64075aff__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"EXCEEDS_SUPPLY\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_282912c0dfceceb28d77d0333f496b83948f9ba5b3154358a8b140b849289dee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC165: invalid interface id\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b241956482006da0262aee1fc6c67748f0e9540db02038beca23605c4807d33d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Invalid bps\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint16__to_t_address_t_uint16__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, 0xffff))\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        let length := mload(value3)\n        mstore(add(headStart, 128), length)\n        copy_memory_to_memory(add(value3, 32), add(headStart, 160), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 160)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
              "id": 104,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "608060405260006012553480156200001657600080fd5b5060405162004d0f38038062004d0f8339810160408190526200003991620010bf565b80516020820151620000546200004e6200009b565b620000b7565b81516200006990600390602085019062000dd6565b5080516200007f90600490602084019062000dd6565b5050506200009481336200011260201b60201c565b5062001482565b6000620000b2620002fe60201b620017011760201c565b905090565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600062000120600162000337565b9050801562000139576000805461ff0019166101001790555b8260c00151518360a001515114620001985760405162461bcd60e51b815260206004820152601b60248201527f4552433732312f494e56414c49445f494e495449414c5f41524753000000000060448201526064015b60405180910390fd5b620001a382620000b7565b825160208401516040850151620001bc929190620003e0565b620001d6836060015184608001516200041760201b60201c565b60e0830151620001e69062000451565b620001f062000489565b620001fa620004bf565b62000216836101000151846101200151620004f360201b60201c565b610140830151620002279062000529565b620002316200055e565b60e083015160105560005b8360a0015151811015620002b1576200029c8460a0015182815181106200026757620002676200126c565b60200260200101518560c0015183815181106200028857620002886200126c565b60200260200101516200059260201b60201c565b80620002a88162001298565b9150506200023c565b508015620002f9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6002546000906001600160a01b031633141562000322575060131936013560601c90565b620000b26200062860201b620017231760201c565b60008054610100900460ff161562000397578160ff1660011480156200037057506200036e306200062c60201b620017271760201c565b155b6200038f5760405162461bcd60e51b81526004016200018f90620012b6565b506000919050565b60005460ff808416911610620003c15760405162461bcd60e51b81526004016200018f90620012b6565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166200040a5760405162461bcd60e51b81526004016200018f9062001304565b620002f98383836200063b565b600054610100900460ff16620004415760405162461bcd60e51b81526004016200018f9062001304565b6200044d8282620006dd565b5050565b600054610100900460ff166200047b5760405162461bcd60e51b81526004016200018f9062001304565b620004868162000786565b50565b600054610100900460ff16620004b35760405162461bcd60e51b81526004016200018f9062001304565b620004bd620007d9565b565b600054610100900460ff16620004e95760405162461bcd60e51b81526004016200018f9062001304565b620004bd62000815565b600054610100900460ff166200051d5760405162461bcd60e51b81526004016200018f9062001304565b6200044d828262000851565b600054610100900460ff16620005535760405162461bcd60e51b81526004016200018f9062001304565b6200048681620008ee565b600054610100900460ff16620005885760405162461bcd60e51b81526004016200018f9062001304565b620004bd6200093a565b60105481620005a060125490565b620005ac91906200134f565b1115620005ed5760405162461bcd60e51b815260206004820152600e60248201526d455843454544535f535550504c5960901b60448201526064016200018f565b60005b81811015620002f95760125462000608848262000976565b6200061262000998565b50806200061f8162001298565b915050620005f0565b3390565b6001600160a01b03163b151590565b600054610100900460ff16620006655760405162461bcd60e51b81526004016200018f9062001304565b82516200067a90600990602086019062000dd6565b5081516200069090600a90602085019062000dd6565b508051620006a690600b90602084019062000dd6565b50620006b9633d96f4ff60e11b620009b1565b620006cb6380ac58cd60e01b620009b1565b620002f9635b5e139f60e01b620009b1565b600054610100900460ff16620007075760405162461bcd60e51b81526004016200018f9062001304565b81516200071c90600c90602085019062000dd6565b5080516200073290600d90602084019062000dd6565b5060408051808201909152600580825264173539b7b760d91b60209092019182526200076191600e9162000dd6565b5062000774631f2f406b60e01b620009b1565b6200044d635b5e139f60e01b620009b1565b600054610100900460ff16620007b05760405162461bcd60e51b81526004016200018f9062001304565b6010819055620007c76330f487b560e11b620009b1565b620004866380ac58cd60e01b620009b1565b600054610100900460ff16620008035760405162461bcd60e51b81526004016200018f9062001304565b620004bd631aa1577160e11b620009b1565b600054610100900460ff166200083f5760405162461bcd60e51b81526004016200018f9062001304565b620004bd63948e2d5360e01b620009b1565b600054610100900460ff166200087b5760405162461bcd60e51b81526004016200018f9062001304565b6200088d633a47bf5160e11b620009b1565b6200089f63152a902d60e11b620009b1565b620008b163c69dbd8f60e01b620009b1565b620008c363656cb66560e11b620009b1565b604080518082019091526001600160a01b038316815261ffff82166020820152620002f98162000a35565b600054610100900460ff16620009185760405162461bcd60e51b81526004016200018f9062001304565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16620009645760405162461bcd60e51b81526004016200018f9062001304565b620004bd632a7c3e4960e01b620009b1565b6200044d82826040518060200160405280600081525062000b1b60201b60201c565b60128054906000620009aa8362001298565b9190505550565b6001600160e01b0319808216141562000a0d5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e746572666163652069640000000060448201526064016200018f565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b612710816020015161ffff161062000a7e5760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016200018f565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260148054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419262000b1092916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b62000b27838362000b55565b62000b36600084848462000c9d565b620002f95760405162461bcd60e51b81526004016200018f906200136a565b6001600160a01b03821662000bad5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016200018f565b6000818152600560205260409020546001600160a01b03161562000c145760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016200018f565b6001600160a01b038216600090815260066020526040812080546001929062000c3f9084906200134f565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600062000cbe846001600160a01b03166200062c60201b620017271760201c565b1562000dca576001600160a01b03841663150b7a0262000cdd6200009b565b8786866040518563ffffffff1660e01b815260040162000d019493929190620013bc565b602060405180830381600087803b15801562000d1c57600080fd5b505af192505050801562000d4f575060408051601f3d908101601f1916820190925262000d4c9181019062001412565b60015b62000daf573d80801562000d80576040519150601f19603f3d011682016040523d82523d6000602084013e62000d85565b606091505b50805162000da75760405162461bcd60e51b81526004016200018f906200136a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062000dce565b5060015b949350505050565b82805462000de49062001445565b90600052602060002090601f01602090048101928262000e08576000855562000e53565b82601f1062000e2357805160ff191683800117855562000e53565b8280016001018555821562000e53579182015b8281111562000e5357825182559160200191906001019062000e36565b5062000e6192915062000e65565b5090565b5b8082111562000e61576000815560010162000e66565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171562000eb85762000eb862000e7c565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000ee95762000ee962000e7c565b604052919050565b60005b8381101562000f0e57818101518382015260200162000ef4565b8381111562000f1e576000848401525b50505050565b600082601f83011262000f3657600080fd5b81516001600160401b0381111562000f525762000f5262000e7c565b62000f67601f8201601f191660200162000ebe565b81815284602083860101111562000f7d57600080fd5b62000dce82602083016020870162000ef1565b60006001600160401b0382111562000fac5762000fac62000e7c565b5060051b60200190565b80516001600160a01b0381168114620003db57600080fd5b600082601f83011262000fe057600080fd5b8151602062000ff962000ff38362000f90565b62000ebe565b82815260059290921b840181019181810190868411156200101957600080fd5b8286015b848110156200103f57620010318162000fb6565b83529183019183016200101d565b509695505050505050565b600082601f8301126200105c57600080fd5b815160206200106f62000ff38362000f90565b82815260059290921b840181019181810190868411156200108f57600080fd5b8286015b848110156200103f578051835291830191830162001093565b805161ffff81168114620003db57600080fd5b600060208284031215620010d257600080fd5b81516001600160401b0380821115620010ea57600080fd5b9083019061016082860312156200110057600080fd5b6200110a62000e92565b8251828111156200111a57600080fd5b620011288782860162000f24565b8252506020830151828111156200113e57600080fd5b6200114c8782860162000f24565b6020830152506040830151828111156200116557600080fd5b620011738782860162000f24565b6040830152506060830151828111156200118c57600080fd5b6200119a8782860162000f24565b606083015250608083015182811115620011b357600080fd5b620011c18782860162000f24565b60808301525060a083015182811115620011da57600080fd5b620011e88782860162000fce565b60a08301525060c0830151828111156200120157600080fd5b6200120f878286016200104a565b60c08301525060e083015160e082015261010091506200123182840162000fb6565b82820152610120915062001247828401620010ac565b8282015261014091506200125d82840162000fb6565b91810191909152949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620012af57620012af62001282565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000821982111562001365576200136562001282565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060018060a01b038087168352808616602084015250836040830152608060608301528251806080840152620013fb8160a085016020870162000ef1565b601f01601f19169190910160a00195945050505050565b6000602082840312156200142557600080fd5b81516001600160e01b0319811681146200143e57600080fd5b9392505050565b600181811c908216806200145a57607f821691505b602082108114156200147c57634e487b7160e01b600052602260045260246000fd5b50919050565b61387d80620014926000396000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c80637885fdc7116101375780637885fdc71461046f5780637e9803421461049d5780638da5cb5b146104a5578063938e3d7b146104ad578063948e2d53146104c057806395d89b41146104c857806399e0dd7c146104d0578063a22cb465146104e3578063a821d908146104f6578063a9852bfb14610503578063b88d4fde14610516578063ba4695fd14610529578063c0ac998314610531578063c29de63014610539578063c87b56dd14610546578063cad96cca14610559578063d5abeb0114610579578063da74222814610582578063dbbc853b14610595578063e8a3d4851461059d578063e985e9c5146105a5578063ef60ceaf146105b8578063f2fde38b146105cb578063f384702f146105de57600080fd5b806301ffc9a714610245578063059fb6f71461026d5780630653aca51461028257806306fdde03146102c4578063081812fc146102d9578063095ea7b3146102f9578063167446071461030c57806318160ddd1461031457806323b872dd146103265780632a55205a146103395780632fe388be1461036b5780633542aee21461037e5780633574a2dd1461039157806340c1d8a1146103a457806342842e0e146103b75780635136dcc7146103ca57806356c022bb146103dd578063572b6c05146103f05780635a9b0b89146104035780636352211e146104265780636f8b44b01461043957806370a082311461044c578063715018a61461045f5780637313cba914610467575b600080fd5b610258610253366004612b63565b6105eb565b60405190151581526020015b60405180910390f35b61028061027b366004612c94565b6105fc565b005b610295610290366004612cf1565b61069c565b60408051825181526020808401516001600160a01b0316908201529181015161ffff1690820152606001610264565b6102cc610721565b6040516102649190612d62565b6102ec6102e7366004612cf1565b610730565b6040516102649190612d75565b610280610307366004612d89565b6107bd565b6102806108e0565b6012545b604051908152602001610264565b610280610334366004612db3565b61092e565b61034c610347366004612def565b610966565b604080516001600160a01b039093168352602083019190915201610264565b610280610379366004612e73565b610a2b565b61028061038c366004612d89565b610b90565b61028061039f366004612f67565b610bdd565b6102806103b2366004612fad565b610c2f565b6102806103c5366004612db3565b610ddc565b6102806103d836600461314b565b610df7565b6002546102ec906001600160a01b031681565b6102586103fe3660046131bf565b610e91565b61040b610ea5565b60408051938452602084019290925290820152606001610264565b6102ec610434366004612cf1565b610fbe565b610280610447366004612cf1565b611035565b61031861045a3660046131bf565b6110e2565b610280611169565b6102cc6111b4565b60145461048f906001600160a01b03811690600160a01b900461ffff1682565b6040516102649291906131da565b610318611246565b6102ec611252565b6102806104bb366004612f67565b611267565b6102806112b9565b6102cc611307565b6102806104de366004612f67565b611311565b6102806104f13660046131f7565b611386565b6013546102589060ff1681565b610280610511366004612f67565b611398565b610280610524366004613233565b61140d565b610280611446565b6102cc611494565b600f546102589060ff1681565b6102cc610554366004612cf1565b6114a3565b61056c610567366004612cf1565b6114ae565b60405161026491906132ae565b61031860105481565b6102806105903660046131bf565b611569565b6102cc6115ca565b6102cc6115d9565b6102586105b336600461330f565b6115e8565b6102806105c6366004613339565b6115fb565b6102806105d93660046131bf565b611654565b6011546102589060ff1681565b60006105f682611736565b92915050565b60005b815181101561069657306001600160a01b03166323b872dd858585858151811061062b5761062b613351565b60200260200101516040518463ffffffff1660e01b815260040161065193929190613367565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b50505050808061068e906133a1565b9150506105ff565b50505050565b60408051606081018252600080825260208201819052918101829052906106c4601684611772565b6000818152601560209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b606061072b61177e565b905090565b600061073b8261178d565b6107a15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600760205260409020546001600160a01b031690565b60006107c882610fbe565b9050806001600160a01b0316836001600160a01b031614156108365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610798565b806001600160a01b03166108486117aa565b6001600160a01b031614806108645750610864816105b36117aa565b6108d15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610798565b6108db83836117b4565b505050565b6108e86117aa565b6001600160a01b03166108f9611252565b6001600160a01b03161461091f5760405162461bcd60e51b8152600401610798906133bc565b6011805460ff19166001179055565b61093f6109396117aa565b82611822565b61095b5760405162461bcd60e51b8152600401610798906133f1565b6108db8383836118ec565b60008281526015602052604081205481906001600160a01b0316156109cb576000848152601560205260409020546001600160a01b03811690612710906109b890600160a01b900461ffff1686613442565b6109c29190613477565b91509150610a24565b6014546001600160a01b0316158015906109f15750601454600160a01b900461ffff1615155b15610a1d576014546001600160a01b03811690612710906109b890600160a01b900461ffff1686613442565b5060009050805b9250929050565b8151835114610a765760405162461bcd60e51b815260206004820152601760248201527608ca49e9abea89ebe988a9c8ea890be9a92a69a82a8869604b1b6044820152606401610798565b8051835114610ac45760405162461bcd60e51b815260206004820152601a60248201527908ca49e9abea89e968a9cbe988a9c8ea890be9a92a69a82a886960331b6044820152606401610798565b60005b815181101561069657306001600160a01b03166323b872dd858381518110610af157610af1613351565b6020026020010151858481518110610b0b57610b0b613351565b6020026020010151858581518110610b2557610b25613351565b60200260200101516040518463ffffffff1660e01b8152600401610b4b93929190613367565b600060405180830381600087803b158015610b6557600080fd5b505af1158015610b79573d6000803e3d6000fd5b505050508080610b88906133a1565b915050610ac7565b610b986117aa565b6001600160a01b0316610ba9611252565b6001600160a01b031614610bcf5760405162461bcd60e51b8152600401610798906133bc565b610bd98282611a88565b5050565b610be56117aa565b6001600160a01b0316610bf6611252565b6001600160a01b031614610c1c5760405162461bcd60e51b8152600401610798906133bc565b8051610bd990600c906020840190612ab4565b6000610c3b6001611b11565b90508015610c53576000805461ff0019166101001790555b8260c00151518360a001515114610caa5760405162461bcd60e51b815260206004820152601b60248201527a4552433732312f494e56414c49445f494e495449414c5f4152475360281b6044820152606401610798565b610cb382611ba5565b610cca836000015184602001518560400151611c00565b610cdc83606001518460800151611c32565b610ce98360e00151611c63565b610cf1611c93565b610cf9611cc2565b610d0d836101000151846101200151611cf1565b610d1b836101400151611d22565b610d23611d52565b60e083015160105560005b8360a0015151811015610d9157610d7f8460a001518281518110610d5457610d54613351565b60200260200101518560c001518381518110610d7257610d72613351565b6020026020010151611a88565b80610d89816133a1565b915050610d2e565b5080156108db576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6108db8383836040518060200160405280600081525061140d565b610dff6117aa565b6001600160a01b0316610e10611252565b6001600160a01b031614610e365760405162461bcd60e51b8152600401610798906133bc565b610bd98282808060200260200160405190810160405280939291908181526020016000905b82821015610e8757610e786060830286013681900381019061348b565b81526020019060010190610e5b565b5050505050611d81565b6002546001600160a01b0391821691161490565b600080808080610eb36117aa565b6001600160a01b031614610f3e57306370a08231610ecf6117aa565b6040518263ffffffff1660e01b8152600401610eeb9190612d75565b60206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b91906134ef565b90505b601054306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7a57600080fd5b505afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb291906134ef565b90959094509092509050565b6000818152600560205260408120546001600160a01b0316806105f65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610798565b61103d6117aa565b6001600160a01b031661104e611252565b6001600160a01b0316146110745760405162461bcd60e51b8152600401610798906133bc565b60115460ff16156110975760405162461bcd60e51b815260040161079890613508565b6012548110156110dd5760405162461bcd60e51b81526020600482015260116024820152704c4f5745525f5448414e5f535550504c5960781b6044820152606401610798565b601055565b60006001600160a01b03821661114d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610798565b506001600160a01b031660009081526006602052604090205490565b6111716117aa565b6001600160a01b0316611182611252565b6001600160a01b0316146111a85760405162461bcd60e51b8152600401610798906133bc565b6111b26000611ba5565b565b6060600c80546111c390613528565b80601f01602080910402602001604051908101604052809291908181526020018280546111ef90613528565b801561123c5780601f106112115761010080835404028352916020019161123c565b820191906000526020600020905b81548152906001019060200180831161121f57829003601f168201915b5050505050905090565b600061072b6016611f28565b6000546201000090046001600160a01b031690565b61126f6117aa565b6001600160a01b0316611280611252565b6001600160a01b0316146112a65760405162461bcd60e51b8152600401610798906133bc565b8051610bd990600b906020840190612ab4565b6112c16117aa565b6001600160a01b03166112d2611252565b6001600160a01b0316146112f85760405162461bcd60e51b8152600401610798906133bc565b6013805460ff19166001179055565b606061072b611f32565b6113196117aa565b6001600160a01b031661132a611252565b6001600160a01b0316146113505760405162461bcd60e51b8152600401610798906133bc565b600f5460ff16156113735760405162461bcd60e51b815260040161079890613508565b8051610bd990600d906020840190612ab4565b610bd96113916117aa565b8383611f41565b6113a06117aa565b6001600160a01b03166113b1611252565b6001600160a01b0316146113d75760405162461bcd60e51b8152600401610798906133bc565b600f5460ff16156113fa5760405162461bcd60e51b815260040161079890613508565b8051610bd990600e906020840190612ab4565b61141e6114186117aa565b83611822565b61143a5760405162461bcd60e51b8152600401610798906133f1565b6106968484848461200c565b61144e6117aa565b6001600160a01b031661145f611252565b6001600160a01b0316146114855760405162461bcd60e51b8152600401610798906133bc565b600f805460ff19166001179055565b6060600d80546111c390613528565b60606105f68261203f565b604080516001808252818301909252606091816020015b60408051808201909152600080825260208201528152602001906001900390816114c557505060145481519192506001600160a01b031690829060009061150e5761150e613351565b60209081029190910101516001600160a01b039190911690526014548151600160a01b90910461ffff1690829060009061154a5761154a613351565b6020908102919091018101516001600160601b03909216910152919050565b6115716117aa565b6001600160a01b0316611582611252565b6001600160a01b0316146115a85760405162461bcd60e51b8152600401610798906133bc565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600e80546111c390613528565b6060600b80546111c390613528565b60006115f4838361211b565b9392505050565b6116036117aa565b6001600160a01b0316611614611252565b6001600160a01b03161461163a5760405162461bcd60e51b8152600401610798906133bc565b61165161164c3683900383018361355d565b61217f565b50565b61165c6117aa565b6001600160a01b031661166d611252565b6001600160a01b0316146116935760405162461bcd60e51b8152600401610798906133bc565b6001600160a01b0381166116f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610798565b61165181611ba5565b600061170c33610e91565b1561171e575060131936013560601c90565b503390565b3390565b6001600160a01b03163b151590565b60006301ffc9a760e01b6001600160e01b0319831614806105f65750506001600160e01b03191660009081526001602052604090205460ff1690565b60006115f4838361222a565b6060600980546111c390613528565b6000908152600560205260409020546001600160a01b0316151590565b600061072b611701565b600081815260076020526040902080546001600160a01b0319166001600160a01b03841690811790915581906117e982610fbe565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061182d8261178d565b61188e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610798565b600061189983610fbe565b9050806001600160a01b0316846001600160a01b031614806118c057506118c081856115e8565b806118e45750836001600160a01b03166118d984610730565b6001600160a01b0316145b949350505050565b826001600160a01b03166118ff82610fbe565b6001600160a01b0316146119635760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610798565b6001600160a01b0382166119c55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610798565b6119d06000826117b4565b6001600160a01b03831660009081526006602052604081208054600192906119f99084906135b7565b90915550506001600160a01b0382166000908152600660205260408120805460019290611a279084906135ce565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60105481611a9560125490565b611a9f91906135ce565b1115611ade5760405162461bcd60e51b815260206004820152600e60248201526d455843454544535f535550504c5960901b6044820152606401610798565b60005b818110156108db57601254611af68482612254565b611afe61226e565b5080611b09816133a1565b915050611ae1565b60008054610100900460ff1615611b5f578160ff166001148015611b3b5750611b3930611727565b155b611b575760405162461bcd60e51b8152600401610798906135e6565b506000919050565b60005460ff808416911610611b865760405162461bcd60e51b8152600401610798906135e6565b506000805460ff191660ff92909216919091179055600190565b919050565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600054610100900460ff16611c275760405162461bcd60e51b815260040161079890613634565b6108db838383612285565b600054610100900460ff16611c595760405162461bcd60e51b815260040161079890613634565b610bd98282612318565b600054610100900460ff16611c8a5760405162461bcd60e51b815260040161079890613634565b611651816123b4565b600054610100900460ff16611cba5760405162461bcd60e51b815260040161079890613634565b6111b2612400565b600054610100900460ff16611ce95760405162461bcd60e51b815260040161079890613634565b6111b2612437565b600054610100900460ff16611d185760405162461bcd60e51b815260040161079890613634565b610bd9828261246e565b600054610100900460ff16611d495760405162461bcd60e51b815260040161079890613634565b611651816124fe565b600054610100900460ff16611d795760405162461bcd60e51b815260040161079890613634565b6111b2612525565b60005b8151811015610bd9576000828281518110611da157611da1613351565b60200260200101519050612710816040015161ffff1610611dd45760405162461bcd60e51b81526004016107989061367f565b60208101516001600160a01b0316611e4d578051600090815260156020526040902080546001600160b01b03191690558051611e129060169061255c565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611f15565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152601590945294909220925183549451909216600160a01b026001600160b01b03199094169116179190911790558051611ebb90601690612568565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080611f20816133a1565b915050611d84565b60006105f6825490565b6060600a80546111c390613528565b816001600160a01b0316836001600160a01b03161415611f9f5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610798565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6120178484846118ec565b61202384848484612574565b6106965760405162461bcd60e51b8152600401610798906136a4565b60606000600d805461205090613528565b9050116120e757600c805461206490613528565b80601f016020809104026020016040519081016040528092919081815260200182805461209090613528565b80156120dd5780601f106120b2576101008083540402835291602001916120dd565b820191906000526020600020905b8154815290600101906020018083116120c057829003601f168201915b50505050506105f6565b600d6120f28361268f565b600e60405160200161210693929190613790565b60405160208183030381529060405292915050565b60135460009060ff1661215157612130611252565b6001600160a01b0316826001600160a01b03161415612151575060016105f6565b6001600160a01b0380841660009081526008602090815260408083209386168352929052205460ff166115f4565b612710816020015161ffff16106121a85760405162461bcd60e51b81526004016107989061367f565b60408051808201825282516001600160a01b03168082526020808501805161ffff1691909301819052601480546001600160b01b031916909217600160a01b9091021790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419261221f92916131da565b60405180910390a150565b600082600001828154811061224157612241613351565b9060005260206000200154905092915050565b610bd982826040518060200160405280600081525061278c565b6012805490600061227e836133a1565b9190505550565b600054610100900460ff166122ac5760405162461bcd60e51b815260040161079890613634565b82516122bf906009906020860190612ab4565b5081516122d390600a906020850190612ab4565b5080516122e790600b906020840190612ab4565b506122f8633d96f4ff60e11b6127bf565b6123086380ac58cd60e01b6127bf565b6108db635b5e139f60e01b6127bf565b600054610100900460ff1661233f5760405162461bcd60e51b815260040161079890613634565b815161235290600c906020850190612ab4565b50805161236690600d906020840190612ab4565b5060408051808201909152600580825264173539b7b760d91b602090920191825261239391600e91612ab4565b506123a4631f2f406b60e01b6127bf565b610bd9635b5e139f60e01b6127bf565b600054610100900460ff166123db5760405162461bcd60e51b815260040161079890613634565b60108190556123f06330f487b560e11b6127bf565b6116516380ac58cd60e01b6127bf565b600054610100900460ff166124275760405162461bcd60e51b815260040161079890613634565b6111b2631aa1577160e11b6127bf565b600054610100900460ff1661245e5760405162461bcd60e51b815260040161079890613634565b6111b263948e2d5360e01b6127bf565b600054610100900460ff166124955760405162461bcd60e51b815260040161079890613634565b6124a5633a47bf5160e11b6127bf565b6124b563152a902d60e11b6127bf565b6124c563c69dbd8f60e01b6127bf565b6124d563656cb66560e11b6127bf565b604080518082019091526001600160a01b038316815261ffff821660208201526108db8161217f565b600054610100900460ff166115a85760405162461bcd60e51b815260040161079890613634565b600054610100900460ff1661254c5760405162461bcd60e51b815260040161079890613634565b6111b2632a7c3e4960e01b6127bf565b60006115f48383612840565b60006115f48383612933565b6000612588846001600160a01b0316611727565b1561268457836001600160a01b031663150b7a026125a46117aa565b8786866040518563ffffffff1660e01b81526004016125c694939291906137c3565b602060405180830381600087803b1580156125e057600080fd5b505af1925050508015612610575060408051601f3d908101601f1916820190925261260d91810190613800565b60015b61266a573d80801561263e576040519150601f19603f3d011682016040523d82523d6000602084013e612643565b606091505b5080516126625760405162461bcd60e51b8152600401610798906136a4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506118e4565b506001949350505050565b6060816126b35750506040805180820190915260018152600360fc1b602082015290565b8160005b81156126dd57806126c7816133a1565b91506126d69050600a83613477565b91506126b7565b6000816001600160401b038111156126f7576126f7612b97565b6040519080825280601f01601f191660200182016040528015612721576020820181803683370190505b5090505b84156118e4576127366001836135b7565b9150612743600a8661381d565b61274e9060306135ce565b60f81b81838151811061276357612763613351565b60200101906001600160f81b031916908160001a905350612785600a86613477565b9450612725565b6127968383612982565b6127a36000848484612574565b6108db5760405162461bcd60e51b8152600401610798906136a4565b6001600160e01b031980821614156128185760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610798565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600081815260018301602052604081205480156129295760006128646001836135b7565b8554909150600090612878906001906135b7565b90508181146128dd57600086600001828154811061289857612898613351565b90600052602060002001549050808760000184815481106128bb576128bb613351565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128ee576128ee613831565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f6565b60009150506105f6565b600081815260018301602052604081205461297a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f6565b5060006105f6565b6001600160a01b0382166129d85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610798565b6129e18161178d565b15612a2d5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606401610798565b6001600160a01b0382166000908152600660205260408120805460019290612a569084906135ce565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612ac090613528565b90600052602060002090601f016020900481019282612ae25760008555612b28565b82601f10612afb57805160ff1916838001178555612b28565b82800160010185558215612b28579182015b82811115612b28578251825591602001919060010190612b0d565b50612b34929150612b38565b5090565b5b80821115612b345760008155600101612b39565b6001600160e01b03198116811461165157600080fd5b600060208284031215612b7557600080fd5b81356115f481612b4d565b80356001600160a01b0381168114611ba057600080fd5b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715612bd057612bd0612b97565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612bfe57612bfe612b97565b604052919050565b60006001600160401b03821115612c1f57612c1f612b97565b5060051b60200190565b600082601f830112612c3a57600080fd5b81356020612c4f612c4a83612c06565b612bd6565b82815260059290921b84018101918181019086841115612c6e57600080fd5b8286015b84811015612c895780358352918301918301612c72565b509695505050505050565b600080600060608486031215612ca957600080fd5b612cb284612b80565b9250612cc060208501612b80565b915060408401356001600160401b03811115612cdb57600080fd5b612ce786828701612c29565b9150509250925092565b600060208284031215612d0357600080fd5b5035919050565b60005b83811015612d25578181015183820152602001612d0d565b838111156106965750506000910152565b60008151808452612d4e816020860160208601612d0a565b601f01601f19169290920160200192915050565b6020815260006115f46020830184612d36565b6001600160a01b0391909116815260200190565b60008060408385031215612d9c57600080fd5b612da583612b80565b946020939093013593505050565b600080600060608486031215612dc857600080fd5b612dd184612b80565b9250612ddf60208501612b80565b9150604084013590509250925092565b60008060408385031215612e0257600080fd5b50508035926020909101359150565b600082601f830112612e2257600080fd5b81356020612e32612c4a83612c06565b82815260059290921b84018101918181019086841115612e5157600080fd5b8286015b84811015612c8957612e6681612b80565b8352918301918301612e55565b600080600060608486031215612e8857600080fd5b83356001600160401b0380821115612e9f57600080fd5b612eab87838801612e11565b94506020860135915080821115612ec157600080fd5b612ecd87838801612e11565b93506040860135915080821115612ee357600080fd5b50612ce786828701612c29565b60006001600160401b03831115612f0957612f09612b97565b612f1c601f8401601f1916602001612bd6565b9050828152838383011115612f3057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612f5857600080fd5b6115f483833560208501612ef0565b600060208284031215612f7957600080fd5b81356001600160401b03811115612f8f57600080fd5b6118e484828501612f47565b803561ffff81168114611ba057600080fd5b60008060408385031215612fc057600080fd5b82356001600160401b0380821115612fd757600080fd5b908401906101608287031215612fec57600080fd5b612ff4612bad565b82358281111561300357600080fd5b61300f88828601612f47565b82525060208301358281111561302457600080fd5b61303088828601612f47565b60208301525060408301358281111561304857600080fd5b61305488828601612f47565b60408301525060608301358281111561306c57600080fd5b61307888828601612f47565b60608301525060808301358281111561309057600080fd5b61309c88828601612f47565b60808301525060a0830135828111156130b457600080fd5b6130c088828601612e11565b60a08301525060c0830135828111156130d857600080fd5b6130e488828601612c29565b60c08301525060e083013560e08201526101009150613104828401612b80565b828201526101209150613118828401612f9b565b82820152610140915061312c828401612b80565b8282015280945050505061314260208401612b80565b90509250929050565b6000806020838503121561315e57600080fd5b82356001600160401b038082111561317557600080fd5b818501915085601f83011261318957600080fd5b81358181111561319857600080fd5b8660206060830285010111156131ad57600080fd5b60209290920196919550909350505050565b6000602082840312156131d157600080fd5b6115f482612b80565b6001600160a01b0392909216825261ffff16602082015260400190565b6000806040838503121561320a57600080fd5b61321383612b80565b91506020830135801515811461322857600080fd5b809150509250929050565b6000806000806080858703121561324957600080fd5b61325285612b80565b935061326060208601612b80565b92506040850135915060608501356001600160401b0381111561328257600080fd5b8501601f8101871361329357600080fd5b6132a287823560208401612ef0565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b8281101561330257815180516001600160a01b031685528601516001600160601b03168685015292840192908501906001016132cb565b5091979650505050505050565b6000806040838503121561332257600080fd5b61332b83612b80565b915061314260208401612b80565b60006040828403121561334b57600080fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156133b5576133b561338b565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600081600019048311821515161561345c5761345c61338b565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261348657613486613461565b500490565b60006060828403121561349d57600080fd5b604051606081018181106001600160401b03821117156134bf576134bf612b97565b604052823581526134d260208401612b80565b60208201526134e360408401612f9b565b60408201529392505050565b60006020828403121561350157600080fd5b5051919050565b602080825260069082015265232927ad22a760d11b604082015260600190565b600181811c9082168061353c57607f821691505b6020821081141561334b57634e487b7160e01b600052602260045260246000fd5b60006040828403121561356f57600080fd5b604051604081018181106001600160401b038211171561359157613591612b97565b60405261359d83612b80565b81526135ab60208401612f9b565b60208201529392505050565b6000828210156135c9576135c961338b565b500390565b600082198211156135e1576135e161338b565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600b908201526a496e76616c69642062707360a81b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8054600090600181811c908083168061371057607f831692505b602080841082141561373257634e487b7160e01b600052602260045260246000fd5b818015613746576001811461375757613784565b60ff19861689528489019650613784565b60008881526020902060005b8681101561377c5781548b820152908501908301613763565b505084890196505b50505050505092915050565b600061379c82866136f6565b84516137ac818360208901612d0a565b6137b8818301866136f6565b979650505050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906137f690830184612d36565b9695505050505050565b60006020828403121561381257600080fd5b81516115f481612b4d565b60008261382c5761382c613461565b500690565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220efb52db0061b2917949fb149880afb278cda4c643a9020cc9e72f677476df35c64736f6c63430008090033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x12 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4D0F CODESIZE SUB DUP1 PUSH3 0x4D0F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x39 SWAP2 PUSH3 0x10BF JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH3 0x54 PUSH3 0x4E PUSH3 0x9B JUMP JUMPDEST PUSH3 0xB7 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x69 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0xDD6 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x7F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0xDD6 JUMP JUMPDEST POP POP POP PUSH3 0x94 DUP2 CALLER PUSH3 0x112 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x1482 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB2 PUSH3 0x2FE PUSH1 0x20 SHL PUSH3 0x1701 OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH3 0x10000 DUP2 DUP2 MUL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT DUP6 AND OR DUP6 SSTORE PUSH1 0x40 MLOAD SWAP4 DIV SWAP2 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x120 PUSH1 0x1 PUSH3 0x337 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH3 0x139 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST DUP3 PUSH1 0xC0 ADD MLOAD MLOAD DUP4 PUSH1 0xA0 ADD MLOAD MLOAD EQ PUSH3 0x198 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732312F494E56414C49445F494E495449414C5F415247530000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x1A3 DUP3 PUSH3 0xB7 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH3 0x1BC SWAP3 SWAP2 SWAP1 PUSH3 0x3E0 JUMP JUMPDEST PUSH3 0x1D6 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD PUSH3 0x417 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MLOAD PUSH3 0x1E6 SWAP1 PUSH3 0x451 JUMP JUMPDEST PUSH3 0x1F0 PUSH3 0x489 JUMP JUMPDEST PUSH3 0x1FA PUSH3 0x4BF JUMP JUMPDEST PUSH3 0x216 DUP4 PUSH2 0x100 ADD MLOAD DUP5 PUSH2 0x120 ADD MLOAD PUSH3 0x4F3 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MLOAD PUSH3 0x227 SWAP1 PUSH3 0x529 JUMP JUMPDEST PUSH3 0x231 PUSH3 0x55E JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0x10 SSTORE PUSH1 0x0 JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x2B1 JUMPI PUSH3 0x29C DUP5 PUSH1 0xA0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x267 JUMPI PUSH3 0x267 PUSH3 0x126C JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0xC0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x288 JUMPI PUSH3 0x288 PUSH3 0x126C JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH3 0x592 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 PUSH3 0x2A8 DUP2 PUSH3 0x1298 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x23C JUMP JUMPDEST POP DUP1 ISZERO PUSH3 0x2F9 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH3 0x322 JUMPI POP PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH3 0xB2 PUSH3 0x628 PUSH1 0x20 SHL PUSH3 0x1723 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x397 JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH3 0x370 JUMPI POP PUSH3 0x36E ADDRESS PUSH3 0x62C PUSH1 0x20 SHL PUSH3 0x1727 OR PUSH1 0x20 SHR JUMP JUMPDEST ISZERO JUMPDEST PUSH3 0x38F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x12B6 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH3 0x3C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x12B6 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x40A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x2F9 DUP4 DUP4 DUP4 PUSH3 0x63B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x441 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x44D DUP3 DUP3 PUSH3 0x6DD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x47B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x486 DUP2 PUSH3 0x786 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x4B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x4BD PUSH3 0x7D9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x4E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x4BD PUSH3 0x815 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x51D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x44D DUP3 DUP3 PUSH3 0x851 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x553 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x486 DUP2 PUSH3 0x8EE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x588 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x4BD PUSH3 0x93A JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 PUSH3 0x5A0 PUSH1 0x12 SLOAD SWAP1 JUMP JUMPDEST PUSH3 0x5AC SWAP2 SWAP1 PUSH3 0x134F JUMP JUMPDEST GT ISZERO PUSH3 0x5ED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x455843454544535F535550504C59 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x18F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x2F9 JUMPI PUSH1 0x12 SLOAD PUSH3 0x608 DUP5 DUP3 PUSH3 0x976 JUMP JUMPDEST PUSH3 0x612 PUSH3 0x998 JUMP JUMPDEST POP DUP1 PUSH3 0x61F DUP2 PUSH3 0x1298 JUMP JUMPDEST SWAP2 POP POP PUSH3 0x5F0 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x665 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST DUP3 MLOAD PUSH3 0x67A SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH3 0xDD6 JUMP JUMPDEST POP DUP2 MLOAD PUSH3 0x690 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0xDD6 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x6A6 SWAP1 PUSH1 0xB SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0xDD6 JUMP JUMPDEST POP PUSH3 0x6B9 PUSH4 0x3D96F4FF PUSH1 0xE1 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH3 0x6CB PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH3 0x2F9 PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x707 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x71C SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0xDD6 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x732 SWAP1 PUSH1 0xD SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0xDD6 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP1 DUP3 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH3 0x761 SWAP2 PUSH1 0xE SWAP2 PUSH3 0xDD6 JUMP JUMPDEST POP PUSH3 0x774 PUSH4 0x1F2F406B PUSH1 0xE0 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH3 0x44D PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x7B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH1 0x10 DUP2 SWAP1 SSTORE PUSH3 0x7C7 PUSH4 0x30F487B5 PUSH1 0xE1 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH3 0x486 PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x803 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x4BD PUSH4 0x1AA15771 PUSH1 0xE1 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x83F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x4BD PUSH4 0x948E2D53 PUSH1 0xE0 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x87B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x88D PUSH4 0x3A47BF51 PUSH1 0xE1 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH3 0x89F PUSH4 0x152A902D PUSH1 0xE1 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH3 0x8B1 PUSH4 0xC69DBD8F PUSH1 0xE0 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH3 0x8C3 PUSH4 0x656CB665 PUSH1 0xE1 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH2 0xFFFF DUP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0x2F9 DUP2 PUSH3 0xA35 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x918 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0x964 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x1304 JUMP JUMPDEST PUSH3 0x4BD PUSH4 0x2A7C3E49 PUSH1 0xE0 SHL PUSH3 0x9B1 JUMP JUMPDEST PUSH3 0x44D DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH3 0xB1B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x12 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH3 0x9AA DUP4 PUSH3 0x1298 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP1 DUP3 AND EQ ISZERO PUSH3 0xA0D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433136353A20696E76616C696420696E7465726661636520696400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x18F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2710 DUP2 PUSH1 0x20 ADD MLOAD PUSH2 0xFFFF AND LT PUSH3 0xA7E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x496E76616C696420627073 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x18F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 MLOAD PUSH2 0xFFFF AND SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x14 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT SWAP1 SWAP3 AND SWAP1 SWAP3 OR OR SWAP1 SSTORE DUP3 MLOAD SWAP1 MLOAD SWAP2 MLOAD PUSH32 0x2C5EA6E4103E78CB101E796FB2DACE540362FC542CBFF5145EAA24AF7DD8FE41 SWAP3 PUSH3 0xB10 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH2 0xFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH3 0xB27 DUP4 DUP4 PUSH3 0xB55 JUMP JUMPDEST PUSH3 0xB36 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH3 0xC9D JUMP JUMPDEST PUSH3 0x2F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x136A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0xBAD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x18F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH3 0xC14 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x18F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH3 0xC3F SWAP1 DUP5 SWAP1 PUSH3 0x134F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xCBE DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x62C PUSH1 0x20 SHL PUSH3 0x1727 OR PUSH1 0x20 SHR JUMP JUMPDEST ISZERO PUSH3 0xDCA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH4 0x150B7A02 PUSH3 0xCDD PUSH3 0x9B JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xD01 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x13BC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xD1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH3 0xD4F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH3 0xD4C SWAP2 DUP2 ADD SWAP1 PUSH3 0x1412 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH3 0xDAF JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH3 0xD80 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0xD85 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH3 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x18F SWAP1 PUSH3 0x136A JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH3 0xDCE JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0xDE4 SWAP1 PUSH3 0x1445 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xE08 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE53 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xE23 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE53 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE53 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE53 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xE36 JUMP JUMPDEST POP PUSH3 0xE61 SWAP3 SWAP2 POP PUSH3 0xE65 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xE61 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xE66 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0xEB8 JUMPI PUSH3 0xEB8 PUSH3 0xE7C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0xEE9 JUMPI PUSH3 0xEE9 PUSH3 0xE7C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xF0E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0xEF4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0xF1E JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xF36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0xF52 JUMPI PUSH3 0xF52 PUSH3 0xE7C JUMP JUMPDEST PUSH3 0xF67 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH3 0xEBE JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH3 0xF7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xDCE DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH3 0xEF1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH3 0xFAC JUMPI PUSH3 0xFAC PUSH3 0xE7C JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xFE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH3 0xFF9 PUSH3 0xFF3 DUP4 PUSH3 0xF90 JUMP JUMPDEST PUSH3 0xEBE JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH3 0x1019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x103F JUMPI PUSH3 0x1031 DUP2 PUSH3 0xFB6 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH3 0x101D JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x105C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH3 0x106F PUSH3 0xFF3 DUP4 PUSH3 0xF90 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH3 0x108F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x103F JUMPI DUP1 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH3 0x1093 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH3 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x10D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x10EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH2 0x160 DUP3 DUP7 SUB SLT ISZERO PUSH3 0x1100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x110A PUSH3 0xE92 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x111A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1128 DUP8 DUP3 DUP7 ADD PUSH3 0xF24 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x114C DUP8 DUP3 DUP7 ADD PUSH3 0xF24 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x1165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1173 DUP8 DUP3 DUP7 ADD PUSH3 0xF24 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x118C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x119A DUP8 DUP3 DUP7 ADD PUSH3 0xF24 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x11B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x11C1 DUP8 DUP3 DUP7 ADD PUSH3 0xF24 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x11DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x11E8 DUP8 DUP3 DUP7 ADD PUSH3 0xFCE JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x1201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x120F DUP8 DUP3 DUP7 ADD PUSH3 0x104A JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH3 0x1231 DUP3 DUP5 ADD PUSH3 0xFB6 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH3 0x1247 DUP3 DUP5 ADD PUSH3 0x10AC JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH3 0x125D DUP3 DUP5 ADD PUSH3 0xFB6 JUMP JUMPDEST SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x12AF JUMPI PUSH3 0x12AF PUSH3 0x1282 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x1365 JUMPI PUSH3 0x1365 PUSH3 0x1282 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE DUP3 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH3 0x13FB DUP2 PUSH1 0xA0 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0xEF1 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0xA0 ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1425 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH3 0x143E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x145A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x147C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x387D DUP1 PUSH3 0x1492 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x240 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7885FDC7 GT PUSH2 0x137 JUMPI DUP1 PUSH4 0x7885FDC7 EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0x7E980342 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4A5 JUMPI DUP1 PUSH4 0x938E3D7B EQ PUSH2 0x4AD JUMPI DUP1 PUSH4 0x948E2D53 EQ PUSH2 0x4C0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0x99E0DD7C EQ PUSH2 0x4D0 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0xA821D908 EQ PUSH2 0x4F6 JUMPI DUP1 PUSH4 0xA9852BFB EQ PUSH2 0x503 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x516 JUMPI DUP1 PUSH4 0xBA4695FD EQ PUSH2 0x529 JUMPI DUP1 PUSH4 0xC0AC9983 EQ PUSH2 0x531 JUMPI DUP1 PUSH4 0xC29DE630 EQ PUSH2 0x539 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0xCAD96CCA EQ PUSH2 0x559 JUMPI DUP1 PUSH4 0xD5ABEB01 EQ PUSH2 0x579 JUMPI DUP1 PUSH4 0xDA742228 EQ PUSH2 0x582 JUMPI DUP1 PUSH4 0xDBBC853B EQ PUSH2 0x595 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x59D JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x5A5 JUMPI DUP1 PUSH4 0xEF60CEAF EQ PUSH2 0x5B8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5CB JUMPI DUP1 PUSH4 0xF384702F EQ PUSH2 0x5DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x59FB6F7 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0x653ACA5 EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2F9 JUMPI DUP1 PUSH4 0x16744607 EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0x2FE388BE EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x3542AEE2 EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x3574A2DD EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x40C1D8A1 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0x5136DCC7 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x56C022BB EQ PUSH2 0x3DD JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0x5A9B0B89 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x426 JUMPI DUP1 PUSH4 0x6F8B44B0 EQ PUSH2 0x439 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0x7313CBA9 EQ PUSH2 0x467 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x258 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B63 JUMP JUMPDEST PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x280 PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x2C94 JUMP JUMPDEST PUSH2 0x5FC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x295 PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE SWAP2 DUP2 ADD MLOAD PUSH2 0xFFFF AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x264 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x721 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP2 SWAP1 PUSH2 0x2D62 JUMP JUMPDEST PUSH2 0x2EC PUSH2 0x2E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0x730 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP2 SWAP1 PUSH2 0x2D75 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x307 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D89 JUMP JUMPDEST PUSH2 0x7BD JUMP JUMPDEST PUSH2 0x280 PUSH2 0x8E0 JUMP JUMPDEST PUSH1 0x12 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x264 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x334 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB3 JUMP JUMPDEST PUSH2 0x92E JUMP JUMPDEST PUSH2 0x34C PUSH2 0x347 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DEF JUMP JUMPDEST PUSH2 0x966 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x264 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x379 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E73 JUMP JUMPDEST PUSH2 0xA2B JUMP JUMPDEST PUSH2 0x280 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x2D89 JUMP JUMPDEST PUSH2 0xB90 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x2F67 JUMP JUMPDEST PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x280 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FAD JUMP JUMPDEST PUSH2 0xC2F JUMP JUMPDEST PUSH2 0x280 PUSH2 0x3C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB3 JUMP JUMPDEST PUSH2 0xDDC JUMP JUMPDEST PUSH2 0x280 PUSH2 0x3D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x314B JUMP JUMPDEST PUSH2 0xDF7 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x2EC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x3FE CALLDATASIZE PUSH1 0x4 PUSH2 0x31BF JUMP JUMPDEST PUSH2 0xE91 JUMP JUMPDEST PUSH2 0x40B PUSH2 0xEA5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x264 JUMP JUMPDEST PUSH2 0x2EC PUSH2 0x434 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0xFBE JUMP JUMPDEST PUSH2 0x280 PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0x1035 JUMP JUMPDEST PUSH2 0x318 PUSH2 0x45A CALLDATASIZE PUSH1 0x4 PUSH2 0x31BF JUMP JUMPDEST PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x1169 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x11B4 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH2 0x48F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP3 SWAP2 SWAP1 PUSH2 0x31DA JUMP JUMPDEST PUSH2 0x318 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x2EC PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x4BB CALLDATASIZE PUSH1 0x4 PUSH2 0x2F67 JUMP JUMPDEST PUSH2 0x1267 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x1307 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x4DE CALLDATASIZE PUSH1 0x4 PUSH2 0x2F67 JUMP JUMPDEST PUSH2 0x1311 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x4F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x31F7 JUMP JUMPDEST PUSH2 0x1386 JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH2 0x258 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x511 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F67 JUMP JUMPDEST PUSH2 0x1398 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x524 CALLDATASIZE PUSH1 0x4 PUSH2 0x3233 JUMP JUMPDEST PUSH2 0x140D JUMP JUMPDEST PUSH2 0x280 PUSH2 0x1446 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x1494 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH2 0x258 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x554 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0x14A3 JUMP JUMPDEST PUSH2 0x56C PUSH2 0x567 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0x14AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP2 SWAP1 PUSH2 0x32AE JUMP JUMPDEST PUSH2 0x318 PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x590 CALLDATASIZE PUSH1 0x4 PUSH2 0x31BF JUMP JUMPDEST PUSH2 0x1569 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x15CA JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x15D9 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x5B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x330F JUMP JUMPDEST PUSH2 0x15E8 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x5C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3339 JUMP JUMPDEST PUSH2 0x15FB JUMP JUMPDEST PUSH2 0x280 PUSH2 0x5D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x31BF JUMP JUMPDEST PUSH2 0x1654 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH2 0x258 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP3 PUSH2 0x1736 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x696 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD DUP6 DUP6 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x62B JUMPI PUSH2 0x62B PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x651 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3367 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x67F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0x68E SWAP1 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5FF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x6C4 PUSH1 0x16 DUP5 PUSH2 0x1772 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND DUP4 MSTORE PUSH2 0xFFFF PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV DUP3 AND DUP4 DUP6 ADD SWAP1 DUP2 MSTORE DUP6 MLOAD PUSH1 0x60 DUP2 ADD DUP8 MSTORE SWAP7 DUP8 MSTORE SWAP3 MLOAD AND SWAP3 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE MLOAD AND SWAP1 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x72B PUSH2 0x177E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x73B DUP3 PUSH2 0x178D JUMP JUMPDEST PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C8 DUP3 PUSH2 0xFBE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x836 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x848 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x864 JUMPI POP PUSH2 0x864 DUP2 PUSH2 0x5B3 PUSH2 0x17AA JUMP JUMPDEST PUSH2 0x8D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x1B995C881B9BDC88185C1C1C9BDD995908199BDC88185B1B PUSH1 0x42 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0x8DB DUP4 DUP4 PUSH2 0x17B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x8E8 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8F9 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x91F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x11 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x93F PUSH2 0x939 PUSH2 0x17AA JUMP JUMPDEST DUP3 PUSH2 0x1822 JUMP JUMPDEST PUSH2 0x95B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x8DB DUP4 DUP4 DUP4 PUSH2 0x18EC JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x9CB JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x9B8 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP7 PUSH2 0x3442 JUMP JUMPDEST PUSH2 0x9C2 SWAP2 SWAP1 PUSH2 0x3477 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xA24 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x9F1 JUMPI POP PUSH1 0x14 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xA1D JUMPI PUSH1 0x14 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x9B8 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP7 PUSH2 0x3442 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP DUP1 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xA76 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x8CA49E9ABEA89EBE988A9C8EA890BE9A92A69A82A8869 PUSH1 0x4B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST DUP1 MLOAD DUP4 MLOAD EQ PUSH2 0xAC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH26 0x8CA49E9ABEA89E968A9CBE988A9C8EA890BE9A92A69A82A8869 PUSH1 0x33 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x696 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAF1 JUMPI PUSH2 0xAF1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xB0B JUMPI PUSH2 0xB0B PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB25 JUMPI PUSH2 0xB25 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB4B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3367 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0xB88 SWAP1 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAC7 JUMP JUMPDEST PUSH2 0xB98 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBA9 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBCF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH2 0xBD9 DUP3 DUP3 PUSH2 0x1A88 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xBE5 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBF6 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST DUP1 MLOAD PUSH2 0xBD9 SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC3B PUSH1 0x1 PUSH2 0x1B11 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xC53 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST DUP3 PUSH1 0xC0 ADD MLOAD MLOAD DUP4 PUSH1 0xA0 ADD MLOAD MLOAD EQ PUSH2 0xCAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x4552433732312F494E56414C49445F494E495449414C5F41524753 PUSH1 0x28 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0xCB3 DUP3 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0xCCA DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x1C00 JUMP JUMPDEST PUSH2 0xCDC DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x1C32 JUMP JUMPDEST PUSH2 0xCE9 DUP4 PUSH1 0xE0 ADD MLOAD PUSH2 0x1C63 JUMP JUMPDEST PUSH2 0xCF1 PUSH2 0x1C93 JUMP JUMPDEST PUSH2 0xCF9 PUSH2 0x1CC2 JUMP JUMPDEST PUSH2 0xD0D DUP4 PUSH2 0x100 ADD MLOAD DUP5 PUSH2 0x120 ADD MLOAD PUSH2 0x1CF1 JUMP JUMPDEST PUSH2 0xD1B DUP4 PUSH2 0x140 ADD MLOAD PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0xD23 PUSH2 0x1D52 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0x10 SSTORE PUSH1 0x0 JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xD91 JUMPI PUSH2 0xD7F DUP5 PUSH1 0xA0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD54 JUMPI PUSH2 0xD54 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0xC0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD72 JUMPI PUSH2 0xD72 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1A88 JUMP JUMPDEST DUP1 PUSH2 0xD89 DUP2 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD2E JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x8DB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x8DB DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x140D JUMP JUMPDEST PUSH2 0xDFF PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE10 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH2 0xBD9 DUP3 DUP3 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xE87 JUMPI PUSH2 0xE78 PUSH1 0x60 DUP4 MUL DUP7 ADD CALLDATASIZE DUP2 SWAP1 SUB DUP2 ADD SWAP1 PUSH2 0x348B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xE5B JUMP JUMPDEST POP POP POP POP POP PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 PUSH2 0xEB3 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xF3E JUMPI ADDRESS PUSH4 0x70A08231 PUSH2 0xECF PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEEB SWAP2 SWAP1 PUSH2 0x2D75 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF3B SWAP2 SWAP1 PUSH2 0x34EF JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x10 SLOAD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF8E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFB2 SWAP2 SWAP1 PUSH2 0x34EF JUMP JUMPDEST SWAP1 SWAP6 SWAP1 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x5F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0x103D PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x104E PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1074 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1097 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH1 0x12 SLOAD DUP2 LT ISZERO PUSH2 0x10DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x4C4F5745525F5448414E5F535550504C59 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x10 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x114D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1171 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1182 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH2 0x11B2 PUSH1 0x0 PUSH2 0x1BA5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0xC DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x11EF SWAP1 PUSH2 0x3528 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x123C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1211 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x123C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x121F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x72B PUSH1 0x16 PUSH2 0x1F28 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x126F PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1280 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x12A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST DUP1 MLOAD PUSH2 0xBD9 SWAP1 PUSH1 0xB SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST PUSH2 0x12C1 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12D2 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x12F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x13 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x72B PUSH2 0x1F32 JUMP JUMPDEST PUSH2 0x1319 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x132A PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1350 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1373 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3508 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xBD9 SWAP1 PUSH1 0xD SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST PUSH2 0xBD9 PUSH2 0x1391 PUSH2 0x17AA JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1F41 JUMP JUMPDEST PUSH2 0x13A0 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x13B1 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x13D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x13FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3508 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xBD9 SWAP1 PUSH1 0xE SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST PUSH2 0x141E PUSH2 0x1418 PUSH2 0x17AA JUMP JUMPDEST DUP4 PUSH2 0x1822 JUMP JUMPDEST PUSH2 0x143A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x696 DUP5 DUP5 DUP5 DUP5 PUSH2 0x200C JUMP JUMPDEST PUSH2 0x144E PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x145F PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1485 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0xF DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0xD DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5F6 DUP3 PUSH2 0x203F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x14C5 JUMPI POP POP PUSH1 0x14 SLOAD DUP2 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x150E JUMPI PUSH2 0x150E PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 MSTORE PUSH1 0x14 SLOAD DUP2 MLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH2 0xFFFF AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x154A JUMPI PUSH2 0x154A PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP3 AND SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1571 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1582 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x15A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0xE DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F4 DUP4 DUP4 PUSH2 0x211B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1603 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1614 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x163A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH2 0x1651 PUSH2 0x164C CALLDATASIZE DUP4 SWAP1 SUB DUP4 ADD DUP4 PUSH2 0x355D JUMP JUMPDEST PUSH2 0x217F JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x165C PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x166D PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1693 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x16F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0x1651 DUP2 PUSH2 0x1BA5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170C CALLER PUSH2 0xE91 JUMP JUMPDEST ISZERO PUSH2 0x171E JUMPI POP PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x5F6 JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F4 DUP4 DUP4 PUSH2 0x222A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x72B PUSH2 0x1701 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x17E9 DUP3 PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x182D DUP3 PUSH2 0x178D JUMP JUMPDEST PUSH2 0x188E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1899 DUP4 PUSH2 0xFBE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x18C0 JUMPI POP PUSH2 0x18C0 DUP2 DUP6 PUSH2 0x15E8 JUMP JUMPDEST DUP1 PUSH2 0x18E4 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18D9 DUP5 PUSH2 0x730 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18FF DUP3 PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1963 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x19C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0x19D0 PUSH1 0x0 DUP3 PUSH2 0x17B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x19F9 SWAP1 DUP5 SWAP1 PUSH2 0x35B7 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1A27 SWAP1 DUP5 SWAP1 PUSH2 0x35CE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 PUSH2 0x1A95 PUSH1 0x12 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1A9F SWAP2 SWAP1 PUSH2 0x35CE JUMP JUMPDEST GT ISZERO PUSH2 0x1ADE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x455843454544535F535550504C59 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8DB JUMPI PUSH1 0x12 SLOAD PUSH2 0x1AF6 DUP5 DUP3 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0x1AFE PUSH2 0x226E JUMP JUMPDEST POP DUP1 PUSH2 0x1B09 DUP2 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1B5F JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x1B3B JUMPI POP PUSH2 0x1B39 ADDRESS PUSH2 0x1727 JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0x1B57 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x35E6 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0x1B86 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x35E6 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH3 0x10000 DUP2 DUP2 MUL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT DUP6 AND OR DUP6 SSTORE PUSH1 0x40 MLOAD SWAP4 DIV SWAP2 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C27 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x8DB DUP4 DUP4 DUP4 PUSH2 0x2285 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0xBD9 DUP3 DUP3 PUSH2 0x2318 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x1651 DUP2 PUSH2 0x23B4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1CBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH2 0x2400 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1CE9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH2 0x2437 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0xBD9 DUP3 DUP3 PUSH2 0x246E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D49 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x1651 DUP2 PUSH2 0x24FE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH2 0x2525 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xBD9 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DA1 JUMPI PUSH2 0x1DA1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x2710 DUP2 PUSH1 0x40 ADD MLOAD PUSH2 0xFFFF AND LT PUSH2 0x1DD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x367F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1E4D JUMPI DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND SWAP1 SSTORE DUP1 MLOAD PUSH2 0x1E12 SWAP1 PUSH1 0x16 SWAP1 PUSH2 0x255C JUMP JUMPDEST POP DUP1 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xA2870857763BD9AE76C957F869F16B31C18DD3BB4C7B4D3A4496DC5C57C657F9 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1F15 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE DUP5 DUP5 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND DUP4 DUP6 ADD SWAP1 DUP2 MSTORE DUP7 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 SWAP1 SWAP5 MSTORE SWAP5 SWAP1 SWAP3 KECCAK256 SWAP3 MLOAD DUP4 SLOAD SWAP5 MLOAD SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT SWAP1 SWAP5 AND SWAP2 AND OR SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 MLOAD PUSH2 0x1EBB SWAP1 PUSH1 0x16 SWAP1 PUSH2 0x2568 JUMP JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 DUP1 DUP6 ADD MLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0xFFFF AND DUP3 DUP3 ADD MSTORE MLOAD PUSH32 0x389B70FB0887F01E83784EB1C4C589F740ECA53B00ED0F45E41DB5D079719ABB SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 JUMPDEST POP DUP1 PUSH2 0x1F20 DUP2 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1D84 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1F9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x22A9219B99189D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x2017 DUP5 DUP5 DUP5 PUSH2 0x18EC JUMP JUMPDEST PUSH2 0x2023 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2574 JUMP JUMPDEST PUSH2 0x696 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x36A4 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0xD DUP1 SLOAD PUSH2 0x2050 SWAP1 PUSH2 0x3528 JUMP JUMPDEST SWAP1 POP GT PUSH2 0x20E7 JUMPI PUSH1 0xC DUP1 SLOAD PUSH2 0x2064 SWAP1 PUSH2 0x3528 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2090 SWAP1 PUSH2 0x3528 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x20DD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x20B2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x20DD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20C0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0xD PUSH2 0x20F2 DUP4 PUSH2 0x268F JUMP JUMPDEST PUSH1 0xE PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2106 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3790 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x2151 JUMPI PUSH2 0x2130 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x2151 JUMPI POP PUSH1 0x1 PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x15F4 JUMP JUMPDEST PUSH2 0x2710 DUP2 PUSH1 0x20 ADD MLOAD PUSH2 0xFFFF AND LT PUSH2 0x21A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x367F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 MLOAD PUSH2 0xFFFF AND SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x14 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 MUL OR SWAP1 SSTORE DUP3 MLOAD SWAP1 MLOAD SWAP2 MLOAD PUSH32 0x2C5EA6E4103E78CB101E796FB2DACE540362FC542CBFF5145EAA24AF7DD8FE41 SWAP3 PUSH2 0x221F SWAP3 SWAP2 PUSH2 0x31DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2241 JUMPI PUSH2 0x2241 PUSH2 0x3351 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBD9 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x278C JUMP JUMPDEST PUSH1 0x12 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x227E DUP4 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x22BF SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST POP DUP2 MLOAD PUSH2 0x22D3 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x22E7 SWAP1 PUSH1 0xB SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST POP PUSH2 0x22F8 PUSH4 0x3D96F4FF PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x2308 PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x8DB PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x233F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x2352 SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x2366 SWAP1 PUSH1 0xD SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP1 DUP3 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH2 0x2393 SWAP2 PUSH1 0xE SWAP2 PUSH2 0x2AB4 JUMP JUMPDEST POP PUSH2 0x23A4 PUSH4 0x1F2F406B PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0xBD9 PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH1 0x10 DUP2 SWAP1 SSTORE PUSH2 0x23F0 PUSH4 0x30F487B5 PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x1651 PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2427 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH4 0x1AA15771 PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x245E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH4 0x948E2D53 PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2495 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x24A5 PUSH4 0x3A47BF51 PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x24B5 PUSH4 0x152A902D PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x24C5 PUSH4 0xC69DBD8F PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x24D5 PUSH4 0x656CB665 PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH2 0xFFFF DUP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x8DB DUP2 PUSH2 0x217F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x15A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x254C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH4 0x2A7C3E49 PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F4 DUP4 DUP4 PUSH2 0x2840 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F4 DUP4 DUP4 PUSH2 0x2933 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2588 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1727 JUMP JUMPDEST ISZERO PUSH2 0x2684 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x150B7A02 PUSH2 0x25A4 PUSH2 0x17AA JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25C6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x37C3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2610 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x260D SWAP2 DUP2 ADD SWAP1 PUSH2 0x3800 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x266A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x263E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2643 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0x2662 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x36A4 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x18E4 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x26B3 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x26DD JUMPI DUP1 PUSH2 0x26C7 DUP2 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x26D6 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x3477 JUMP JUMPDEST SWAP2 POP PUSH2 0x26B7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x26F7 JUMPI PUSH2 0x26F7 PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2721 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x18E4 JUMPI PUSH2 0x2736 PUSH1 0x1 DUP4 PUSH2 0x35B7 JUMP JUMPDEST SWAP2 POP PUSH2 0x2743 PUSH1 0xA DUP7 PUSH2 0x381D JUMP JUMPDEST PUSH2 0x274E SWAP1 PUSH1 0x30 PUSH2 0x35CE JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2763 JUMPI PUSH2 0x2763 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x2785 PUSH1 0xA DUP7 PUSH2 0x3477 JUMP JUMPDEST SWAP5 POP PUSH2 0x2725 JUMP JUMPDEST PUSH2 0x2796 DUP4 DUP4 PUSH2 0x2982 JUMP JUMPDEST PUSH2 0x27A3 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x2574 JUMP JUMPDEST PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x36A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x2818 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH28 0x115490CC4D8D4E881A5B9D985B1A59081A5B9D195C999858D9481A59 PUSH1 0x22 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x2929 JUMPI PUSH1 0x0 PUSH2 0x2864 PUSH1 0x1 DUP4 PUSH2 0x35B7 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2878 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x35B7 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x28DD JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2898 JUMPI PUSH2 0x2898 PUSH2 0x3351 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x28BB JUMPI PUSH2 0x28BB PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x28EE JUMPI PUSH2 0x28EE PUSH2 0x3831 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x297A JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x5F6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x29D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0x29E1 DUP2 PUSH2 0x178D JUMP JUMPDEST ISZERO PUSH2 0x2A2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH28 0x115490CDCC8C4E881D1BDAD95B88185B1C9958591E481B5A5B9D1959 PUSH1 0x22 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x2A56 SWAP1 DUP5 SWAP1 PUSH2 0x35CE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2AC0 SWAP1 PUSH2 0x3528 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x2AE2 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2B28 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x2AFB JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2B28 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2B28 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2B28 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2B0D JUMP JUMPDEST POP PUSH2 0x2B34 SWAP3 SWAP2 POP PUSH2 0x2B38 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2B34 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2B39 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x15F4 DUP2 PUSH2 0x2B4D JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1BA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2BD0 JUMPI PUSH2 0x2BD0 PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2BFE JUMPI PUSH2 0x2BFE PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x2C1F JUMPI PUSH2 0x2C1F PUSH2 0x2B97 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2C4F PUSH2 0x2C4A DUP4 PUSH2 0x2C06 JUMP JUMPDEST PUSH2 0x2BD6 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x2C6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2C89 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2C72 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2CA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2CB2 DUP5 PUSH2 0x2B80 JUMP JUMPDEST SWAP3 POP PUSH2 0x2CC0 PUSH1 0x20 DUP6 ADD PUSH2 0x2B80 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2CDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2CE7 DUP7 DUP3 DUP8 ADD PUSH2 0x2C29 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2D25 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2D0D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x696 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2D4E DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2D0A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x15F4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2D36 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DA5 DUP4 PUSH2 0x2B80 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2DC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DD1 DUP5 PUSH2 0x2B80 JUMP JUMPDEST SWAP3 POP PUSH2 0x2DDF PUSH1 0x20 DUP6 ADD PUSH2 0x2B80 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2E32 PUSH2 0x2C4A DUP4 PUSH2 0x2C06 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x2E51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2C89 JUMPI PUSH2 0x2E66 DUP2 PUSH2 0x2B80 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2E55 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2E88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2E9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2EAB DUP8 DUP4 DUP9 ADD PUSH2 0x2E11 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2EC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2ECD DUP8 DUP4 DUP9 ADD PUSH2 0x2E11 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2EE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE7 DUP7 DUP3 DUP8 ADD PUSH2 0x2C29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT ISZERO PUSH2 0x2F09 JUMPI PUSH2 0x2F09 PUSH2 0x2B97 JUMP JUMPDEST PUSH2 0x2F1C PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2BD6 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x2F30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2F58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15F4 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x2EF0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2F8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18E4 DUP5 DUP3 DUP6 ADD PUSH2 0x2F47 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1BA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2FD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH2 0x160 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x2FEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2FF4 PUSH2 0x2BAD JUMP JUMPDEST DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x3003 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x300F DUP9 DUP3 DUP7 ADD PUSH2 0x2F47 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x3024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3030 DUP9 DUP3 DUP7 ADD PUSH2 0x2F47 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x3048 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3054 DUP9 DUP3 DUP7 ADD PUSH2 0x2F47 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x306C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3078 DUP9 DUP3 DUP7 ADD PUSH2 0x2F47 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x3090 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x309C DUP9 DUP3 DUP7 ADD PUSH2 0x2F47 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x30B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30C0 DUP9 DUP3 DUP7 ADD PUSH2 0x2E11 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x30D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30E4 DUP9 DUP3 DUP7 ADD PUSH2 0x2C29 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 DUP4 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x3104 DUP3 DUP5 ADD PUSH2 0x2B80 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x3118 DUP3 DUP5 ADD PUSH2 0x2F9B JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x312C DUP3 DUP5 ADD PUSH2 0x2B80 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE DUP1 SWAP5 POP POP POP POP PUSH2 0x3142 PUSH1 0x20 DUP5 ADD PUSH2 0x2B80 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x315E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 PUSH1 0x60 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x31AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15F4 DUP3 PUSH2 0x2B80 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH2 0xFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x320A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3213 DUP4 PUSH2 0x2B80 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3252 DUP6 PUSH2 0x2B80 JUMP JUMPDEST SWAP4 POP PUSH2 0x3260 PUSH1 0x20 DUP7 ADD PUSH2 0x2B80 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x3293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x32A2 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2EF0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3302 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP7 DUP6 ADD MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x32CB JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x332B DUP4 PUSH2 0x2B80 JUMP JUMPDEST SWAP2 POP PUSH2 0x3142 PUSH1 0x20 DUP5 ADD PUSH2 0x2B80 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x334B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x33B5 JUMPI PUSH2 0x33B5 PUSH2 0x338B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x345C JUMPI PUSH2 0x345C PUSH2 0x338B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3486 JUMPI PUSH2 0x3486 PUSH2 0x3461 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x349D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x34BF JUMPI PUSH2 0x34BF PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP2 MSTORE PUSH2 0x34D2 PUSH1 0x20 DUP5 ADD PUSH2 0x2B80 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x34E3 PUSH1 0x40 DUP5 ADD PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3501 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x6 SWAP1 DUP3 ADD MSTORE PUSH6 0x232927AD22A7 PUSH1 0xD1 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x353C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x334B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x356F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x3591 JUMPI PUSH2 0x3591 PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MSTORE PUSH2 0x359D DUP4 PUSH2 0x2B80 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x35AB PUSH1 0x20 DUP5 ADD PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x35C9 JUMPI PUSH2 0x35C9 PUSH2 0x338B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x35E1 JUMPI PUSH2 0x35E1 PUSH2 0x338B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x496E76616C696420627073 PUSH1 0xA8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND DUP1 PUSH2 0x3710 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x3732 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x3746 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x3757 JUMPI PUSH2 0x3784 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x3784 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x377C JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x3763 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x379C DUP3 DUP7 PUSH2 0x36F6 JUMP JUMPDEST DUP5 MLOAD PUSH2 0x37AC DUP2 DUP4 PUSH1 0x20 DUP10 ADD PUSH2 0x2D0A JUMP JUMPDEST PUSH2 0x37B8 DUP2 DUP4 ADD DUP7 PUSH2 0x36F6 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x37F6 SWAP1 DUP4 ADD DUP5 PUSH2 0x2D36 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3812 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15F4 DUP2 PUSH2 0x2B4D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x382C JUMPI PUSH2 0x382C PUSH2 0x3461 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0xB5 0x2D 0xB0 MOD SHL 0x29 OR SWAP5 SWAP16 0xB1 0x49 DUP9 EXP 0xFB 0x27 DUP13 0xDA 0x4C PUSH5 0x3A9020CC9E PUSH19 0xF677476DF35C64736F6C634300080900330000 ",
          "sourceMap": "640:4227:49:-:0;;;1004:1:33;969:36;;1358:116:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1399:11;;1412:13;;;;921:32:5;940:12;:10;:12::i;:::-;921:18;:32::i;:::-;1456:13:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1479:17:13;;;;:7;;:17;;;;;:::i;:::-;;1390:113;;1437:30:49::1;1448:6;1456:10;1437;;;:30;;:::i;:::-;1358:116:::0;640:4227;;2624:196;2758:14;2795:18;:16;;;;;:18;;:::i;:::-;2788:25;;2624:196;:::o;2270:187:5:-;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:5;;;2362:6;2378:17;;;-1:-1:-1;;;;;;2378:17:5;;;;;2410:40;;2362:6;;;;;;;2378:17;;2362:6;;2410:40;;;2333:124;2270:187;:::o;1480:1138:49:-;3100:19:6;3122:25;3145:1;3122:22;:25::i;:::-;3100:47;;3161:14;3157:65;;;3191:13;:20;;-1:-1:-1;;3191:20:6;;;;;3157:65;1642:6:49::1;:21;;;:28;1610:6;:21;;;:28;:60;1589:134;;;::::0;-1:-1:-1;;;1589:134:49;;5599:2:104;1589:134:49::1;::::0;::::1;5581:21:104::0;5638:2;5618:18;;;5611:30;5677:29;5657:18;;;5650:57;5724:18;;1589:134:49::1;;;;;;;;;1734:28;1753:8:::0;1734:18:::1;:28::i;:::-;1827:11:::0;;1852:13:::1;::::0;::::1;::::0;1879:18:::1;::::0;::::1;::::0;1773:134:::1;::::0;1827:11;1852:13;1773:40:::1;:134::i;:::-;1917:118;1969:6;:21;;;2004:6;:21;;;1917:38;;;:118;;:::i;:::-;2080:16;::::0;::::1;::::0;2045:52:::1;::::0;:34:::1;:52::i;:::-;2107:33;:31;:33::i;:::-;2150:36;:34;:36::i;:::-;2196:119;2239:6;:28;;;2281:6;:24;;;2196:29;;;:119;;:::i;:::-;2354:23;::::0;::::1;::::0;2325:53:::1;::::0;:28:::1;:53::i;:::-;2388:31;:29;:31::i;:::-;2442:16;::::0;::::1;::::0;2430:9:::1;:28:::0;2474:9:::1;2469:143;2493:6;:21;;;:28;2489:1;:32;2469:143;;;2542:59;2550:6;:21;;;2572:1;2550:24;;;;;;;;:::i;:::-;;;;;;;2576:6;:21;;;2598:1;2576:24;;;;;;;;:::i;:::-;;;;;;;2542:7;;;:59;;:::i;:::-;2523:3:::0;::::1;::::0;::::1;:::i;:::-;;;;2469:143;;;;3246:14:6::0;3242:99;;;3292:5;3276:21;;-1:-1:-1;;3276:21:6;;;3316:14;;-1:-1:-1;6309:36:104;;3316:14:6;;6297:2:104;6282:18;3316:14:6;;;;;;;3242:99;3090:257;1480:1138:49;;:::o;1078:445:71:-;1048:17;;1180:14;;-1:-1:-1;;;;;1048:17:71;1233:10;1035:30;1210:307;;;-1:-1:-1;;;1416:14:71;1412:23;1399:37;1395:2;1391:46;1078:445;:::o;1210:307::-;1488:18;:16;;;;;:18;;:::i;5276:797:6:-;5340:4;5673:13;;;;;;;5669:398;;;5727:7;:12;;5738:1;5727:12;:50;;;;;5744:33;5771:4;5744:18;;;;;:33;;:::i;:::-;5743:34;5727:50;5702:155;;;;-1:-1:-1;;;5702:155:6;;;;;;;:::i;:::-;-1:-1:-1;5878:5:6;;5276:797;-1:-1:-1;5276:797:6:o;5669:398::-;5922:12;;:22;;;;:12;;:22;5914:81;;;;-1:-1:-1;;;5914:81:6;;;;;;;:::i;:::-;-1:-1:-1;6009:12:6;:22;;-1:-1:-1;;6009:22:6;;;;;;;;;;;;-1:-1:-1;;5276:797:6:o;5669:398::-;5276:797;;;:::o;931:321:35:-;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1119:126:35::1;1183:5:::0;1202:7;1223:12;1119:50:::1;:126::i;1600:291:43:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1768:116:43::1;1830:15:::0;1859;1768:48:::1;:116::i;:::-;1600:291:::0;;:::o;1012:183:33:-;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1132:56:33::1;1177:10:::0;1132:44:::1;:56::i;:::-;1012:183:::0;:::o;640:129:40:-;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;719:43:40::1;:41;:43::i;:::-;640:129::o:0;717:135:39:-;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;799:46:39::1;:44;:46::i;1383:278:47:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1538:116:47::1;1591:22:::0;1627:17;1538:39:::1;:116::i;401:183:71:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;521:56:71::1;560:16:::0;521:38:::1;:56::i;758:125:34:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;835:41:34::1;:39;:41::i;2008:310:33:-:0;2104:9;;2095:5;2079:13;1960:15;;;1890:92;2079:13;:21;;;;:::i;:::-;:34;;2071:61;;;;-1:-1:-1;;;2071:61:33;;7518:2:104;2071:61:33;;;7500:21:104;7557:2;7537:18;;;7530:30;-1:-1:-1;;;7576:18:104;;;7569:44;7630:18;;2071:61:33;7316:338:104;2071:61:33;2148:9;2143:169;2167:5;2163:1;:9;2143:169;;;2214:15;;2243:25;2253:2;2214:15;2243:9;:25::i;:::-;2282:19;:17;:19::i;:::-;-1:-1:-1;2174:3:33;;;;:::i;:::-;;;;2143:169;;640:96:21;719:10;;640:96::o;1175:320:20:-;-1:-1:-1;;;;;1465:19:20;;:23;;;1175:320::o;1258:505:35:-;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1456:13:35;;::::1;::::0;:5:::1;::::0;:13:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;1479:17:35;;::::1;::::0;:7:::1;::::0;:17:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;1506:27:35;;::::1;::::0;:12:::1;::::0;:27:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;1544:94:35::1;-1:-1:-1::0;;;1544:18:35::1;:94::i;:::-;1648:45;-1:-1:-1::0;;;1648:18:35::1;:45::i;:::-;1703:53;-1:-1:-1::0;;;1703:18:35::1;:53::i;1897:440:43:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;2075:33:43;;::::1;::::0;:15:::1;::::0;:33:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2118:33:43;;::::1;::::0;:15:::1;::::0;:33:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2161:25:43::1;::::0;;;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;;;2161:25:43::1;::::0;;::::1;::::0;;;::::1;::::0;:15:::1;::::0;:25:::1;:::i;:::-;-1:-1:-1::0;2197:70:43::1;-1:-1:-1::0;;;2197:18:43::1;:70::i;:::-;2277:53;-1:-1:-1::0;;;2277:18:43::1;:53::i;1201:291:33:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1331:9:33::1;:22:::0;;;1364:66:::1;-1:-1:-1::0;;;1364:18:33::1;:66::i;:::-;1440:45;-1:-1:-1::0;;;1440:18:33::1;:45::i;775:179:40:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;884:63:40::1;-1:-1:-1::0;;;884:18:40::1;:63::i;858:185:39:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;970:66:39::1;-1:-1:-1::0;;;970:18:39::1;:66::i;1667:596:47:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1832:61:47::1;-1:-1:-1::0;;;1832:18:47::1;:61::i;:::-;1903:46;-1:-1:-1::0;;;1903:18:47::1;:46::i;:::-;1959:61;-1:-1:-1::0;;;1959:18:47::1;:61::i;:::-;2030:58;-1:-1:-1::0;;;2030:18:47::1;:58::i;:::-;2129:89;::::0;;;;::::1;::::0;;;-1:-1:-1;;;;;2129:89:47;::::1;::::0;;::::1;::::0;::::1;;::::0;::::1;::::0;2229:27:::1;2129:89:::0;2229:18:::1;:27::i;590:173:71:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;720:17:71::1;:36:::0;;-1:-1:-1;;;;;;720:36:71::1;-1:-1:-1::0;;;;;720:36:71;;;::::1;::::0;;;::::1;::::0;;590:173::o;889:175:34:-;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;996:61:34::1;-1:-1:-1::0;;;996:18:34::1;:61::i;8117:108:13:-:0;8192:26;8202:2;8206:7;8192:26;;;;;;;;;;;;:9;;;:26;;:::i;2387:72:33:-;2435:15;:17;;;:15;:17;;;:::i;:::-;;;;;;2387:72::o;1178:198:28:-;-1:-1:-1;;;;;;1261:25:28;;;;;1253:66;;;;-1:-1:-1;;;1253:66:28;;7861:2:104;1253:66:28;;;7843:21:104;7900:2;7880:18;;;7873:30;7939;7919:18;;;7912:58;7987:18;;1253:66:28;7659:352:104;1253:66:28;-1:-1:-1;;;;;;1329:33:28;;;;;1365:4;1329:33;;;;;;;;:40;;-1:-1:-1;;1329:40:28;;;;;;1178:198::o;2155:261:1:-;2253:5;2239:7;:11;;;:19;;;2231:43;;;;-1:-1:-1;;;2231:43:1;;8218:2:104;2231:43:1;;;8200:21:104;8257:2;8237:18;;;8230:30;-1:-1:-1;;;8276:18:104;;;8269:41;8327:18;;2231:43:1;8016:335:104;2231:43:1;2301:44;;;;;;;;2314:17;;-1:-1:-1;;;;;2301:44:1;;;;;2333:11;;;;;2301:44;;;;;;;;;2284:14;:61;;-1:-1:-1;;;2284:61:1;;;-1:-1:-1;;;;;;2284:61:1;;;;;;;;;2378:17;;2397:11;;2360:49;;;;;;2378:17;-1:-1:-1;;;;;8546:32:104;;;;8528:51;;8627:6;8615:19;8610:2;8595:18;;8588:47;8516:2;8501:18;;8356:285;2360:49:1;;;;;;;;2155:261;:::o;8446:311:13:-;8571:18;8577:2;8581:7;8571:5;:18::i;:::-;8620:54;8651:1;8655:2;8659:7;8668:5;8620:22;:54::i;:::-;8599:151;;;;-1:-1:-1;;;8599:151:13;;;;;;;:::i;9079:427::-;-1:-1:-1;;;;;9158:16:13;;9150:61;;;;-1:-1:-1;;;9150:61:13;;9267:2:104;9150:61:13;;;9249:21:104;;;9286:18;;;9279:30;9345:34;9325:18;;;9318:62;9397:18;;9150:61:13;9065:356:104;9150:61:13;7225:4;7248:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7248:16:13;:30;9221:58;;;;-1:-1:-1;;;9221:58:13;;9628:2:104;9221:58:13;;;9610:21:104;9667:2;9647:18;;;9640:30;9706;9686:18;;;9679:58;9754:18;;9221:58:13;9426:352:104;9221:58:13;-1:-1:-1;;;;;9346:13:13;;;;;;:9;:13;;;;;:18;;9363:1;;9346:13;:18;;9363:1;;9346:18;:::i;:::-;;;;-1:-1:-1;;9374:16:13;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9374:21:13;-1:-1:-1;;;;;9374:21:13;;;;;;;;9411:33;;9374:16;;;9411:33;;9374:16;;9411:33;1600:291:43;;:::o;12335:778:13:-;12485:4;12505:15;:2;-1:-1:-1;;;;;12505:13:13;;;;;;:15;;:::i;:::-;12501:606;;;-1:-1:-1;;;;;12540:36:13;;;12577:12;:10;:12::i;:::-;12591:4;12597:7;12606:5;12540:72;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12540:72:13;;;;;;;;-1:-1:-1;;12540:72:13;;;;;;;;;;;;:::i;:::-;;;12536:519;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12779:13:13;;12775:266;;12821:60;;-1:-1:-1;;;12821:60:13;;;;;;;:::i;12775:266::-;12993:6;12987:13;12978:6;12974:2;12970:15;12963:38;12536:519;-1:-1:-1;;;;;;12662:51:13;-1:-1:-1;;;12662:51:13;;-1:-1:-1;12655:58:13;;12501:606;-1:-1:-1;13092:4:13;12501:606;12335:778;;;;;;:::o;640:4227:49:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;640:4227:49;;;-1:-1:-1;640:4227:49;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:104;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:255;218:2;212:9;260:6;248:19;;-1:-1:-1;;;;;282:34:104;;318:22;;;279:62;276:88;;;344:18;;:::i;:::-;380:2;373:22;146:255;:::o;406:275::-;477:2;471:9;542:2;523:13;;-1:-1:-1;;519:27:104;507:40;;-1:-1:-1;;;;;562:34:104;;598:22;;;559:62;556:88;;;624:18;;:::i;:::-;660:2;653:22;406:275;;-1:-1:-1;406:275:104:o;686:258::-;758:1;768:113;782:6;779:1;776:13;768:113;;;858:11;;;852:18;839:11;;;832:39;804:2;797:10;768:113;;;899:6;896:1;893:13;890:48;;;934:1;925:6;920:3;916:16;909:27;890:48;;686:258;;;:::o;949:497::-;1003:5;1056:3;1049:4;1041:6;1037:17;1033:27;1023:55;;1074:1;1071;1064:12;1023:55;1097:13;;-1:-1:-1;;;;;1122:26:104;;1119:52;;;1151:18;;:::i;:::-;1195:55;1238:2;1219:13;;-1:-1:-1;;1215:27:104;1244:4;1211:38;1195:55;:::i;:::-;1275:2;1266:7;1259:19;1321:3;1314:4;1309:2;1301:6;1297:15;1293:26;1290:35;1287:55;;;1338:1;1335;1328:12;1287:55;1351:64;1412:2;1405:4;1396:7;1392:18;1385:4;1377:6;1373:17;1351:64;:::i;1451:183::-;1511:4;-1:-1:-1;;;;;1533:30:104;;1530:56;;;1566:18;;:::i;:::-;-1:-1:-1;1611:1:104;1607:14;1623:4;1603:25;;1451:183::o;1639:177::-;1718:13;;-1:-1:-1;;;;;1760:31:104;;1750:42;;1740:70;;1806:1;1803;1796:12;1821:683;1886:5;1939:3;1932:4;1924:6;1920:17;1916:27;1906:55;;1957:1;1954;1947:12;1906:55;1986:6;1980:13;2012:4;2036:60;2052:43;2092:2;2052:43;:::i;:::-;2036:60;:::i;:::-;2130:15;;;2216:1;2212:10;;;;2200:23;;2196:32;;;2161:12;;;;2240:15;;;2237:35;;;2268:1;2265;2258:12;2237:35;2304:2;2296:6;2292:15;2316:159;2332:6;2327:3;2324:15;2316:159;;;2398:34;2428:3;2398:34;:::i;:::-;2386:47;;2453:12;;;;2349;;2316:159;;;-1:-1:-1;2493:5:104;1821:683;-1:-1:-1;;;;;;1821:683:104:o;2509:659::-;2574:5;2627:3;2620:4;2612:6;2608:17;2604:27;2594:55;;2645:1;2642;2635:12;2594:55;2674:6;2668:13;2700:4;2724:60;2740:43;2780:2;2740:43;:::i;2724:60::-;2818:15;;;2904:1;2900:10;;;;2888:23;;2884:32;;;2849:12;;;;2928:15;;;2925:35;;;2956:1;2953;2946:12;2925:35;2992:2;2984:6;2980:15;3004:135;3020:6;3015:3;3012:15;3004:135;;;3086:10;;3074:23;;3117:12;;;;3037;;3004:135;;3173:163;3251:13;;3304:6;3293:18;;3283:29;;3273:57;;3326:1;3323;3316:12;3341:2051;3435:6;3488:2;3476:9;3467:7;3463:23;3459:32;3456:52;;;3504:1;3501;3494:12;3456:52;3531:16;;-1:-1:-1;;;;;3596:14:104;;;3593:34;;;3623:1;3620;3613:12;3593:34;3646:22;;;;3702:6;3684:16;;;3680:29;3677:49;;;3722:1;3719;3712:12;3677:49;3748:22;;:::i;:::-;3801:2;3795:9;3829:2;3819:8;3816:16;3813:36;;;3845:1;3842;3835:12;3813:36;3872:56;3920:7;3909:8;3905:2;3901:17;3872:56;:::i;:::-;3865:5;3858:71;;3968:2;3964;3960:11;3954:18;3997:2;3987:8;3984:16;3981:36;;;4013:1;4010;4003:12;3981:36;4049:56;4097:7;4086:8;4082:2;4078:17;4049:56;:::i;:::-;4044:2;4037:5;4033:14;4026:80;;4145:2;4141;4137:11;4131:18;4174:2;4164:8;4161:16;4158:36;;;4190:1;4187;4180:12;4158:36;4226:56;4274:7;4263:8;4259:2;4255:17;4226:56;:::i;:::-;4221:2;4214:5;4210:14;4203:80;;4322:2;4318;4314:11;4308:18;4351:2;4341:8;4338:16;4335:36;;;4367:1;4364;4357:12;4335:36;4403:56;4451:7;4440:8;4436:2;4432:17;4403:56;:::i;:::-;4398:2;4391:5;4387:14;4380:80;;4499:3;4495:2;4491:12;4485:19;4529:2;4519:8;4516:16;4513:36;;;4545:1;4542;4535:12;4513:36;4582:56;4630:7;4619:8;4615:2;4611:17;4582:56;:::i;:::-;4576:3;4569:5;4565:15;4558:81;;4678:3;4674:2;4670:12;4664:19;4708:2;4698:8;4695:16;4692:36;;;4724:1;4721;4714:12;4692:36;4761:67;4820:7;4809:8;4805:2;4801:17;4761:67;:::i;:::-;4755:3;4748:5;4744:15;4737:92;;4868:3;4864:2;4860:12;4854:19;4898:2;4888:8;4885:16;4882:36;;;4914:1;4911;4904:12;4882:36;4951:67;5010:7;4999:8;4995:2;4991:17;4951:67;:::i;:::-;4945:3;4938:5;4934:15;4927:92;;5066:3;5062:2;5058:12;5052:19;5046:3;5039:5;5035:15;5028:44;5091:3;5081:13;;5126:42;5164:2;5160;5156:11;5126:42;:::i;:::-;5121:2;5114:5;5110:14;5103:66;5188:3;5178:13;;5223:41;5260:2;5256;5252:11;5223:41;:::i;:::-;5218:2;5211:5;5207:14;5200:65;5284:3;5274:13;;5319:42;5357:2;5353;5349:11;5319:42;:::i;:::-;5303:14;;;5296:66;;;;5307:5;3341:2051;-1:-1:-1;;;;3341:2051:104:o;5753:127::-;5814:10;5809:3;5805:20;5802:1;5795:31;5845:4;5842:1;5835:15;5869:4;5866:1;5859:15;5885:127;5946:10;5941:3;5937:20;5934:1;5927:31;5977:4;5974:1;5967:15;6001:4;5998:1;5991:15;6017:135;6056:3;-1:-1:-1;;6077:17:104;;6074:43;;;6097:18;;:::i;:::-;-1:-1:-1;6144:1:104;6133:13;;6017:135::o;6356:410::-;6558:2;6540:21;;;6597:2;6577:18;;;6570:30;6636:34;6631:2;6616:18;;6609:62;-1:-1:-1;;;6702:2:104;6687:18;;6680:44;6756:3;6741:19;;6356:410::o;6771:407::-;6973:2;6955:21;;;7012:2;6992:18;;;6985:30;7051:34;7046:2;7031:18;;7024:62;-1:-1:-1;;;7117:2:104;7102:18;;7095:41;7168:3;7153:19;;6771:407::o;7183:128::-;7223:3;7254:1;7250:6;7247:1;7244:13;7241:39;;;7260:18;;:::i;:::-;-1:-1:-1;7296:9:104;;7183:128::o;8646:414::-;8848:2;8830:21;;;8887:2;8867:18;;;8860:30;8926:34;8921:2;8906:18;;8899:62;-1:-1:-1;;;8992:2:104;8977:18;;8970:48;9050:3;9035:19;;8646:414::o;9783:654::-;9977:4;10023:1;10019;10014:3;10010:11;10006:19;10064:2;10056:6;10052:15;10041:9;10034:34;10116:2;10108:6;10104:15;10099:2;10088:9;10084:18;10077:43;;10156:6;10151:2;10140:9;10136:18;10129:34;10199:3;10194:2;10183:9;10179:18;10172:31;10232:6;10226:13;10276:6;10270:3;10259:9;10255:19;10248:35;10292:67;10352:6;10346:3;10335:9;10331:19;10326:2;10318:6;10314:15;10292:67;:::i;:::-;10420:2;10399:15;-1:-1:-1;;10395:29:104;10380:45;;;;10427:3;10376:55;;9783:654;-1:-1:-1;;;;;9783:654:104:o;10442:290::-;10511:6;10564:2;10552:9;10543:7;10539:23;10535:32;10532:52;;;10580:1;10577;10570:12;10532:52;10606:16;;-1:-1:-1;;;;;;10651:32:104;;10641:43;;10631:71;;10698:1;10695;10688:12;10631:71;10721:5;10442:290;-1:-1:-1;;;10442:290:104:o;10737:380::-;10816:1;10812:12;;;;10859;;;10880:61;;10934:4;10926:6;10922:17;10912:27;;10880:61;10987:2;10979:6;10976:14;10956:18;10953:38;10950:161;;;11033:10;11028:3;11024:20;11021:1;11014:31;11068:4;11065:1;11058:15;11096:4;11093:1;11086:15;10950:161;;10737:380;;;:::o;:::-;640:4227:49;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@__ERC2771ContextOwnable_init_14099": {
              "entryPoint": 7458,
              "id": 14099,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@__ERC2771ContextOwnable_init_unchained_14111": {
              "entryPoint": 9470,
              "id": 14111,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@__ERC721AutoIdMinterExtension_init_5843": {
              "entryPoint": 7267,
              "id": 5843,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@__ERC721AutoIdMinterExtension_init_unchained_5869": {
              "entryPoint": 9140,
              "id": 5869,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@__ERC721BulkifyExtension_init_6009": {
              "entryPoint": 7506,
              "id": 6009,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721BulkifyExtension_init_unchained_6022": {
              "entryPoint": 9509,
              "id": 6022,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721CollectionMetadataExtension_init_6192": {
              "entryPoint": 7168,
              "id": 6192,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@__ERC721CollectionMetadataExtension_init_unchained_6237": {
              "entryPoint": 8837,
              "id": 6237,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@__ERC721OwnerManagedExtension_init_6878": {
              "entryPoint": 7362,
              "id": 6878,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721OwnerManagedExtension_init_unchained_6891": {
              "entryPoint": 9271,
              "id": 6891,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721OwnerMintExtension_init_6984": {
              "entryPoint": 7315,
              "id": 6984,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721OwnerMintExtension_init_unchained_6997": {
              "entryPoint": 9216,
              "id": 6997,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@__ERC721PrefixedMetadataExtension_init_7499": {
              "entryPoint": 7218,
              "id": 7499,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@__ERC721PrefixedMetadataExtension_init_unchained_7535": {
              "entryPoint": 8984,
              "id": 7535,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@__ERC721RoyaltyExtension_init_8202": {
              "entryPoint": 7409,
              "id": 8202,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@__ERC721RoyaltyExtension_init_unchained_8250": {
              "entryPoint": 9326,
              "id": 8250,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_add_5248": {
              "entryPoint": 10547,
              "id": 5248,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_afterTokenTransfer_2751": {
              "entryPoint": null,
              "id": 2751,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approve_2635": {
              "entryPoint": 6068,
              "id": 2635,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_at_5382": {
              "entryPoint": 8746,
              "id": 5382,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_beforeTokenTransfer_2740": {
              "entryPoint": null,
              "id": 2740,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_checkOnERC721Received_2729": {
              "entryPoint": 9588,
              "id": 2729,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_contains_5351": {
              "entryPoint": null,
              "id": 5351,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_exists_2325": {
              "entryPoint": 6029,
              "id": 2325,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_incrementTokenId_5964": {
              "entryPoint": 8814,
              "id": 5964,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_isApprovedOrOwner_2366": {
              "entryPoint": 6178,
              "id": 2366,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_length_5365": {
              "entryPoint": null,
              "id": 5365,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_mintTo_5956": {
              "entryPoint": 6792,
              "id": 5956,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_mint_2476": {
              "entryPoint": 10626,
              "id": 2476,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_14154": {
              "entryPoint": 5889,
              "id": 14154,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_msgSender_3717": {
              "entryPoint": 5923,
              "id": 3717,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_msgSender_9182": {
              "entryPoint": 6058,
              "id": 9182,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_registerInterface_4732": {
              "entryPoint": 10175,
              "id": 4732,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_remove_5332": {
              "entryPoint": 10304,
              "id": 5332,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_safeMint_2381": {
              "entryPoint": 8788,
              "id": 2381,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_safeMint_2410": {
              "entryPoint": 10124,
              "id": 2410,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_safeTransfer_2307": {
              "entryPoint": 8204,
              "id": 2307,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_setApprovalForAll_2667": {
              "entryPoint": 8001,
              "id": 2667,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_setDefaultRoyalty_249": {
              "entryPoint": 8575,
              "id": 249,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_setInitializedVersion_1020": {
              "entryPoint": 6929,
              "id": 1020,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_setTokenRoyalties_217": {
              "entryPoint": 7553,
              "id": 217,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transferOwnership_878": {
              "entryPoint": 7077,
              "id": 878,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transfer_2611": {
              "entryPoint": 6380,
              "id": 2611,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_trustedForwarder_14087": {
              "entryPoint": null,
              "id": 14087,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@add_5685": {
              "entryPoint": 9576,
              "id": 5685,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@approve_2146": {
              "entryPoint": 1981,
              "id": 2146,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@at_5763": {
              "entryPoint": 6002,
              "id": 5763,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@balanceOf_2004": {
              "entryPoint": 4322,
              "id": 2004,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@contractURI_6291": {
              "entryPoint": 5593,
              "id": 6291,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@defaultRoyalty_86": {
              "entryPoint": null,
              "id": 86,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@freezeMaxSupply_5906": {
              "entryPoint": 2272,
              "id": 5906,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@freezeTokenURI_7593": {
              "entryPoint": 5190,
              "id": 7593,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@getApproved_2167": {
              "entryPoint": 1840,
              "id": 2167,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getInfo_9315": {
              "entryPoint": 3749,
              "id": 9315,
              "parameterSlots": 0,
              "returnSlots": 3
            },
            "@getRaribleV2Royalties_8326": {
              "entryPoint": 5294,
              "id": 8326,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getTokenRoyaltiesCount_261": {
              "entryPoint": 4678,
              "id": 261,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getTokenRoyaltyByIndex_294": {
              "entryPoint": 1692,
              "id": 294,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@initialize_9169": {
              "entryPoint": 3119,
              "id": 9169,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@isApprovedForAll_2202": {
              "entryPoint": null,
              "id": 2202,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isApprovedForAll_6933": {
              "entryPoint": 8475,
              "id": 6933,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isApprovedForAll_9240": {
              "entryPoint": 5608,
              "id": 9240,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isContract_3428": {
              "entryPoint": 5927,
              "id": 3428,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isTrustedForwarder_14135": {
              "entryPoint": 3729,
              "id": 14135,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@length_5742": {
              "entryPoint": 7976,
              "id": 5742,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@managementPowerRevoked_6869": {
              "entryPoint": null,
              "id": 6869,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@maxSupplyFrozen_5828": {
              "entryPoint": null,
              "id": 5828,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@maxSupply_5826": {
              "entryPoint": null,
              "id": 5826,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@mintByOwner_7012": {
              "entryPoint": 2960,
              "id": 7012,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@name_6274": {
              "entryPoint": 6014,
              "id": 6274,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@name_9208": {
              "entryPoint": 1825,
              "id": 9208,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@ownerOf_2032": {
              "entryPoint": 4030,
              "id": 2032,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@owner_807": {
              "entryPoint": 4690,
              "id": 807,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@placeholderURI_7617": {
              "entryPoint": 4532,
              "id": 7617,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@remove_5706": {
              "entryPoint": 9564,
              "id": 5706,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@renounceOwnership_835": {
              "entryPoint": 4457,
              "id": 835,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@revokeManagementPower_6901": {
              "entryPoint": 4793,
              "id": 6901,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@royaltyInfo_364": {
              "entryPoint": 2406,
              "id": 364,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@safeTransferFrom_2248": {
              "entryPoint": 3548,
              "id": 2248,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@safeTransferFrom_2278": {
              "entryPoint": 5133,
              "id": 2278,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@setApprovalForAll_2184": {
              "entryPoint": 4998,
              "id": 2184,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@setContractURI_6249": {
              "entryPoint": 4711,
              "id": 6249,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setDefaultRoyalty_8283": {
              "entryPoint": 5627,
              "id": 8283,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setMaxSupply_5896": {
              "entryPoint": 4149,
              "id": 5896,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setPlaceholderURI_7547": {
              "entryPoint": 3037,
              "id": 7547,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setTokenRoyalties_8267": {
              "entryPoint": 3575,
              "id": 8267,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@setTokenURIPrefix_7565": {
              "entryPoint": 4881,
              "id": 7565,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setTokenURISuffix_7583": {
              "entryPoint": 5016,
              "id": 7583,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setTrustedForwarder_14123": {
              "entryPoint": 5481,
              "id": 14123,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@supportsInterface_4681": {
              "entryPoint": null,
              "id": 4681,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_4712": {
              "entryPoint": 5942,
              "id": 4712,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_9261": {
              "entryPoint": 1515,
              "id": 9261,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@symbol_6283": {
              "entryPoint": 7986,
              "id": 6283,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@symbol_9221": {
              "entryPoint": 4871,
              "id": 9221,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@toString_3886": {
              "entryPoint": 9871,
              "id": 3886,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenURIFrozen_7484": {
              "entryPoint": null,
              "id": 7484,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@tokenURIPrefix_7625": {
              "entryPoint": 5268,
              "id": 7625,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@tokenURISuffix_7633": {
              "entryPoint": 5578,
              "id": 7633,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@tokenURI_7666": {
              "entryPoint": 8255,
              "id": 7666,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenURI_9277": {
              "entryPoint": 5283,
              "id": 9277,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@totalSupply_5914": {
              "entryPoint": null,
              "id": 5914,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@transferFromBulk_6076": {
              "entryPoint": 1532,
              "id": 6076,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@transferFromBulk_6139": {
              "entryPoint": 2603,
              "id": 6139,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@transferFrom_2229": {
              "entryPoint": 2350,
              "id": 2229,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@transferOwnership_858": {
              "entryPoint": 5716,
              "id": 858,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_address": {
              "entryPoint": 11136,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_array_address_dyn": {
              "entryPoint": 11793,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_uint256_dyn": {
              "entryPoint": 11305,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_available_length_string": {
              "entryPoint": 12016,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_string": {
              "entryPoint": 12103,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 12735,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 13071,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": 11412,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 11699,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
              "entryPoint": 12851,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_bool": {
              "entryPoint": 12791,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 11657,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": 11891,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_array$_t_struct$_TokenRoyaltyConfig_$35_calldata_ptr_$dyn_calldata_ptr": {
              "entryPoint": 12619,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 11107,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4_fromMemory": {
              "entryPoint": 14336,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptr": {
              "entryPoint": 12135,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_struct$_Config_$9052_memory_ptrt_address": {
              "entryPoint": 12205,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_struct$_TokenRoyaltyConfig_$35_memory_ptr": {
              "entryPoint": 13451,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_struct$_TokenRoyalty_$28_calldata_ptr": {
              "entryPoint": 13113,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_struct$_TokenRoyalty_$28_memory_ptr": {
              "entryPoint": 13661,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 11505,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 13551,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_uint256": {
              "entryPoint": 11759,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_uint16": {
              "entryPoint": 12187,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_string": {
              "entryPoint": 11574,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_string_storage": {
              "entryPoint": 14070,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 14224,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 11637,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 13159,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 14275,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint16__to_t_address_t_uint16__fromStack_reversed": {
              "entryPoint": 12762,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_struct$_Part_$15020_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Part_$15020_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 12974,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 11618,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 13988,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_282912c0dfceceb28d77d0333f496b83948f9ba5b3154358a8b140b849289dee__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 13798,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7c78561e9c3b6dc2802172fb2041fc3504da930f63dfaf87b57359e924c17eb9__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 13576,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8cdecbb23ec02783743afd77310df6afab5a99f690f3465f9005641c64075aff__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8e422f8423f8fbfe2947b9ae08d4901c410485ed2cfc594249b8dfe3de24f405__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 13244,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a85d29b09685a306a376b5c084fbb5d595b4718ad9a9d03a4e83e73c8af5bed8__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b241956482006da0262aee1fc6c67748f0e9540db02038beca23605c4807d33d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 13951,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 13297,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 13876,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_da1562f5b06cdbe3b7834c1499be3abf3945795ef1d9be227a4afb60ec9d2263__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e34834cbfacaabcb36f3c81ca1a95e73bb2a5f2aadc5cfc24763773efc900660__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_TokenRoyaltyConfig_$35_memory_ptr__to_t_struct$_TokenRoyaltyConfig_$35_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_address_t_uint16__to_t_uint256_t_address_t_uint16__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 11222,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_memory_4080": {
              "entryPoint": 11181,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_array_uint256_dyn": {
              "entryPoint": 11270,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 13774,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 13431,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 13378,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 13751,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 11530,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 13608,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 13217,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mod_t_uint256": {
              "entryPoint": 14365,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 13195,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 13409,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x31": {
              "entryPoint": 14385,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 13137,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 11159,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_bytes4": {
              "entryPoint": 11085,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:30025:104",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:104",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "58:87:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "123:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "132:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "135:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "125:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "125:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "125:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "81:5:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "92:5:104"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "103:3:104",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "108:10:104",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "99:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "99:20:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "88:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "88:32:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "78:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "78:43:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "71:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "71:51:104"
                          },
                          "nodeType": "YulIf",
                          "src": "68:71:104"
                        }
                      ]
                    },
                    "name": "validator_revert_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "47:5:104",
                        "type": ""
                      }
                    ],
                    "src": "14:131:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "219:176:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "265:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "274:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "277:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "267:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "267:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "267:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "240:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "249:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "236:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "236:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "261:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "232:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "232:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "229:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "290:36:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "316:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "303:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "303:23:104"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "294:5:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "359:5:104"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "335:23:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "335:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "335:30:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "374:15:104",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "384:5:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "374:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "185:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "196:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "208:6:104",
                        "type": ""
                      }
                    ],
                    "src": "150:245:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "495:92:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "505:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "517:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "528:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "513:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "513:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "505:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "547:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "572:6:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "565:6:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "565:14:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "558:6:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "558:22:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "540:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "540:41:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "540:41:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "464:9:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "475:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "486:4:104",
                        "type": ""
                      }
                    ],
                    "src": "400:187:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "641:124:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "651:29:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "673:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "660:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "660:20:104"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "651:5:104"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "743:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "752:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "755:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "745:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "745:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "745:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "702:5:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "713:5:104"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "728:3:104",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "733:1:104",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "724:3:104"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "724:11:104"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "737:1:104",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "720:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "720:19:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "709:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "709:31:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "699:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "699:42:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "692:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "692:50:104"
                          },
                          "nodeType": "YulIf",
                          "src": "689:70:104"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "620:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "631:5:104",
                        "type": ""
                      }
                    ],
                    "src": "592:173:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "802:95:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "819:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "826:3:104",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "831:10:104",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "822:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "822:20:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "812:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "812:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "812:31:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "859:1:104",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "862:4:104",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "852:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "852:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "852:15:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "883:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "886:4:104",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "876:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "876:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "876:15:104"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "770:127:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "948:209:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "958:19:104",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "974:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "968:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "968:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "958:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "986:37:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1008:6:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1016:6:104",
                                "type": "",
                                "value": "0x0160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1004:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1004:19:104"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "990:10:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1098:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1100:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1100:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1100:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1041:10:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1053:18:104",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1038:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1038:34:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1077:10:104"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1089:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1074:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1074:22:104"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1035:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1035:62:104"
                          },
                          "nodeType": "YulIf",
                          "src": "1032:88:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1136:2:104",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1140:10:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1129:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1129:22:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1129:22:104"
                        }
                      ]
                    },
                    "name": "allocate_memory_4080",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "937:6:104",
                        "type": ""
                      }
                    ],
                    "src": "902:255:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1207:230:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1217:19:104",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1233:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1227:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1227:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "1217:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1245:58:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1267:6:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "1283:4:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1289:2:104",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1279:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1279:13:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1298:2:104",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "1294:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1294:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1275:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1275:27:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1263:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1263:40:104"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "1249:10:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1378:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1380:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1380:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1380:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1321:10:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1333:18:104",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1318:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1318:34:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1357:10:104"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1369:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1354:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1354:22:104"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1315:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1315:62:104"
                          },
                          "nodeType": "YulIf",
                          "src": "1312:88:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1416:2:104",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1420:10:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1409:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1409:22:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1409:22:104"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "1187:4:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "1196:6:104",
                        "type": ""
                      }
                    ],
                    "src": "1162:275:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1511:114:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1555:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1557:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1557:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1557:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1527:6:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1535:18:104",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1524:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1524:30:104"
                          },
                          "nodeType": "YulIf",
                          "src": "1521:56:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1586:33:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1602:1:104",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1605:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1598:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1598:14:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1614:4:104",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1594:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1594:25:104"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "1586:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "1491:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "1502:4:104",
                        "type": ""
                      }
                    ],
                    "src": "1442:183:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1694:598:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1743:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1752:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1755:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1745:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1745:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1745:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1722:6:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1730:4:104",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1718:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1718:17:104"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "1737:3:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1714:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1714:27:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1707:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1707:35:104"
                          },
                          "nodeType": "YulIf",
                          "src": "1704:55:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1768:30:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1791:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1778:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1778:20:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1772:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1807:14:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1817:4:104",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1811:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1830:71:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1897:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_uint256_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "1857:39:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1857:43:104"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1841:15:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1841:60:104"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "1834:3:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1910:16:104",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "1923:3:104"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "1914:5:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1942:3:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1947:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1935:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1935:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1935:15:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1959:19:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1970:3:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1975:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1966:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1966:12:104"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "1959:3:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1987:46:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2009:6:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2021:1:104",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2024:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "2017:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2017:10:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2005:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2005:23:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2030:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2001:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2001:32:104"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "1991:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2061:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2070:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2073:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2063:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2063:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2063:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2048:6:104"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2056:3:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2045:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2045:15:104"
                          },
                          "nodeType": "YulIf",
                          "src": "2042:35:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2086:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2101:6:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2109:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2097:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2097:15:104"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "2090:3:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2177:86:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "2198:3:104"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "2216:3:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldataload",
                                        "nodeType": "YulIdentifier",
                                        "src": "2203:12:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2203:17:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2191:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2191:30:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2191:30:104"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2234:19:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "2245:3:104"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2250:2:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2241:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2241:12:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "2234:3:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "2132:3:104"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2137:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2129:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2129:15:104"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "2145:23:104",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2147:19:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "2158:3:104"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2163:2:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2154:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2154:12:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "2147:3:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "2125:3:104",
                            "statements": []
                          },
                          "src": "2121:142:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2272:14:104",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "2281:5:104"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "2272:5:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1668:6:104",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1676:3:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1684:5:104",
                        "type": ""
                      }
                    ],
                    "src": "1630:662:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2426:367:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2472:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2481:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2484:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2474:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2474:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2474:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2447:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2456:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2443:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2443:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2468:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2439:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2439:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "2436:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2497:39:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2526:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2507:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2507:29:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2497:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2545:48:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2578:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2589:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2574:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2574:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "2555:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2555:38:104"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2545:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2602:46:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2633:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2644:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2629:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2629:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2616:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2616:32:104"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "2606:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2691:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2700:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2703:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2693:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2693:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2693:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2663:6:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2671:18:104",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2660:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2660:30:104"
                          },
                          "nodeType": "YulIf",
                          "src": "2657:50:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2716:71:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2759:9:104"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2770:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2755:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2755:22:104"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2779:7:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "2726:28:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2726:61:104"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2716:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2376:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2387:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2399:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2407:6:104",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2415:6:104",
                        "type": ""
                      }
                    ],
                    "src": "2297:496:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2868:110:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2914:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2923:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2926:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2916:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2916:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2916:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2889:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2898:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2885:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2885:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2910:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2881:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2881:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "2878:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2939:33:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2962:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2949:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2949:23:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2939:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2834:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2845:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2857:6:104",
                        "type": ""
                      }
                    ],
                    "src": "2798:180:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3152:248:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3162:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3174:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3185:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3170:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3170:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3162:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3204:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3221:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3215:5:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3215:13:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3197:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3197:32:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3197:32:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3249:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3260:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3245:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3245:20:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "3281:6:104"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3289:4:104",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3277:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3277:17:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "3271:5:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3271:24:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3305:3:104",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3310:1:104",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "3301:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3301:11:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3314:1:104",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3297:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3297:19:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3267:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3267:50:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3238:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3238:80:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3238:80:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3338:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3349:4:104",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3334:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3334:20:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "3370:6:104"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3378:4:104",
                                            "type": "",
                                            "value": "0x40"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3366:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3366:17:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "3360:5:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3360:24:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3386:6:104",
                                    "type": "",
                                    "value": "0xffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3356:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3356:37:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3327:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3327:67:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3327:67:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_TokenRoyaltyConfig_$35_memory_ptr__to_t_struct$_TokenRoyaltyConfig_$35_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3121:9:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3132:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3143:4:104",
                        "type": ""
                      }
                    ],
                    "src": "2983:417:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3458:205:104",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3468:10:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3477:1:104",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "3472:1:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3537:63:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "3562:3:104"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3567:1:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3558:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3558:11:104"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "3581:3:104"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3586:1:104"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3577:3:104"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3577:11:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3571:5:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3571:18:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3551:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3551:39:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3551:39:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3498:1:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3501:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3495:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3495:13:104"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3509:19:104",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3511:15:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3520:1:104"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3523:2:104",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3516:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3516:10:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3511:1:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3491:3:104",
                            "statements": []
                          },
                          "src": "3487:113:104"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3626:31:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "3639:3:104"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "3644:6:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3635:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3635:16:104"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3653:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3628:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3628:27:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3628:27:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3615:1:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3618:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3612:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3612:13:104"
                          },
                          "nodeType": "YulIf",
                          "src": "3609:48:104"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "3436:3:104",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "3441:3:104",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "3446:6:104",
                        "type": ""
                      }
                    ],
                    "src": "3405:258:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3718:208:104",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3728:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3748:5:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3742:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3742:12:104"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3732:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3770:3:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3775:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3763:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3763:19:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3763:19:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3817:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3824:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3813:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3813:16:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3835:3:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3840:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3831:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3831:14:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3847:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3791:21:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3791:63:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3791:63:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3863:57:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3878:3:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "3891:6:104"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3899:2:104",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3887:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3887:15:104"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3908:2:104",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "3904:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3904:7:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3883:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3883:29:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3874:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3874:39:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3915:4:104",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3870:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3870:50:104"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3863:3:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3695:5:104",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3702:3:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3710:3:104",
                        "type": ""
                      }
                    ],
                    "src": "3668:258:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4052:99:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4069:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4080:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4062:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4062:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4062:21:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4092:53:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4118:6:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4130:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4141:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4126:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4126:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "4100:17:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4100:45:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4092:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4021:9:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4032:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4043:4:104",
                        "type": ""
                      }
                    ],
                    "src": "3931:220:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4257:102:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4267:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4279:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4290:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4275:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4275:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4267:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4309:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4324:6:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4340:3:104",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4345:1:104",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "4336:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4336:11:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4349:1:104",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "4332:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4332:19:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4320:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4320:32:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4302:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4302:51:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4302:51:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4226:9:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4237:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4248:4:104",
                        "type": ""
                      }
                    ],
                    "src": "4156:203:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4451:167:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4497:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4506:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4509:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4499:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4499:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4499:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4472:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4481:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4468:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4468:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4493:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4464:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4464:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "4461:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4522:39:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4551:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4532:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4532:29:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4522:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4570:42:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4597:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4608:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4593:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4593:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4580:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4580:32:104"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4570:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4409:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4420:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4432:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4440:6:104",
                        "type": ""
                      }
                    ],
                    "src": "4364:254:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4724:76:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4734:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4746:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4757:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4742:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4742:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4734:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4776:9:104"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4787:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4769:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4769:25:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4769:25:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4693:9:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4704:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4715:4:104",
                        "type": ""
                      }
                    ],
                    "src": "4623:177:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4909:224:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4955:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4964:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4967:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4957:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4957:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4957:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4930:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4939:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4926:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4926:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4951:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4922:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4922:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "4919:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4980:39:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5009:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4990:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4990:29:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4980:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5028:48:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5061:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5072:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5057:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5057:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "5038:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5038:38:104"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5028:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5085:42:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5112:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5123:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5108:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5108:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5095:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5095:32:104"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5085:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4859:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4870:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4882:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4890:6:104",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4898:6:104",
                        "type": ""
                      }
                    ],
                    "src": "4805:328:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5225:161:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5271:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5280:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5283:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5273:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5273:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5273:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5246:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5255:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5242:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5242:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5267:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5238:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5238:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "5235:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5296:33:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5319:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5306:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5306:23:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5296:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5338:42:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5365:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5376:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5361:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5361:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5348:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5348:32:104"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5338:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5183:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5194:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5206:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5214:6:104",
                        "type": ""
                      }
                    ],
                    "src": "5138:248:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5520:145:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5530:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5542:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5553:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5538:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5538:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5530:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5572:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5587:6:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5603:3:104",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5608:1:104",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "5599:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5599:11:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5612:1:104",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5595:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5595:19:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5583:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5583:32:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5565:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5565:51:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5565:51:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5636:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5647:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5632:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5632:18:104"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "5652:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5625:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5625:34:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5625:34:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5481:9:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5492:6:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5500:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5511:4:104",
                        "type": ""
                      }
                    ],
                    "src": "5391:274:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5734:604:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5783:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5792:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5795:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5785:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5785:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5785:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5762:6:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5770:4:104",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5758:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5758:17:104"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "5777:3:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5754:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5754:27:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5747:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5747:35:104"
                          },
                          "nodeType": "YulIf",
                          "src": "5744:55:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5808:30:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5831:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5818:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5818:20:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5812:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5847:14:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5857:4:104",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "5851:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5870:71:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5937:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_uint256_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "5897:39:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5897:43:104"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "5881:15:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5881:60:104"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "5874:3:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5950:16:104",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "5963:3:104"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "5954:5:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "5982:3:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5987:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5975:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5975:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5975:15:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5999:19:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "6010:3:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6015:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6006:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6006:12:104"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "5999:3:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6027:46:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6049:6:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6061:1:104",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "6064:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6057:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6057:10:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6045:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6045:23:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6070:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6041:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6041:32:104"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "6031:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6101:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6110:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6113:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6103:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6103:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6103:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6088:6:104"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "6096:3:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6085:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6085:15:104"
                          },
                          "nodeType": "YulIf",
                          "src": "6082:35:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6126:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6141:6:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6149:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6137:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6137:15:104"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "6130:3:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6217:92:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "6238:3:104"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "6262:3:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_address",
                                        "nodeType": "YulIdentifier",
                                        "src": "6243:18:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6243:23:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "6231:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6231:36:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6231:36:104"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "6280:19:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "6291:3:104"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "6296:2:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6287:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6287:12:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "6280:3:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "6172:3:104"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6177:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6169:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6169:15:104"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "6185:23:104",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "6187:19:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "6198:3:104"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "6203:2:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6194:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6194:12:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "6187:3:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "6165:3:104",
                            "statements": []
                          },
                          "src": "6161:148:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6318:14:104",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "6327:5:104"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "6318:5:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_address_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "5708:6:104",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5716:3:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "5724:5:104",
                        "type": ""
                      }
                    ],
                    "src": "5670:668:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6522:642:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6568:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6577:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6580:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6570:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6570:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6570:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6543:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6552:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6539:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6539:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6564:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6535:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6535:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "6532:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6593:37:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6620:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6607:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6607:23:104"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "6597:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6639:28:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6649:18:104",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6643:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6694:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6703:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6706:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6696:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6696:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6696:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6682:6:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6690:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6679:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6679:14:104"
                          },
                          "nodeType": "YulIf",
                          "src": "6676:34:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6719:71:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6762:9:104"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6773:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6758:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6758:22:104"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6782:7:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "6729:28:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6729:61:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6719:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6799:48:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6832:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6843:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6828:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6828:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6815:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6815:32:104"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "6803:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6876:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6885:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6888:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6878:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6878:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6878:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "6862:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6872:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6859:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6859:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "6856:36:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6901:73:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6944:9:104"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6955:8:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6940:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6940:24:104"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6966:7:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "6911:28:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6911:63:104"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "6901:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6983:48:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7016:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7027:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7012:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7012:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6999:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6999:32:104"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "6987:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7060:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7069:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7072:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7062:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7062:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7062:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "7046:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7056:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7043:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7043:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "7040:36:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7085:73:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7128:9:104"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7139:8:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7124:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7124:24:104"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7150:7:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "7095:28:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7095:63:104"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "7085:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6472:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6483:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6495:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6503:6:104",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "6511:6:104",
                        "type": ""
                      }
                    ],
                    "src": "6343:821:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7244:332:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7288:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "7290:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7290:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7290:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7260:6:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7268:18:104",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7257:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7257:30:104"
                          },
                          "nodeType": "YulIf",
                          "src": "7254:56:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7319:66:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "7356:6:104"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7364:2:104",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7352:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7352:15:104"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7373:2:104",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "7369:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7369:7:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7348:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7348:29:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7379:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7344:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7344:40:104"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "7328:15:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7328:57:104"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "7319:5:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "7401:5:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7408:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7394:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7394:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7394:21:104"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7453:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7462:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7465:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7455:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7455:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7455:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "7434:3:104"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7439:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7430:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7430:16:104"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "7448:3:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7427:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7427:25:104"
                          },
                          "nodeType": "YulIf",
                          "src": "7424:45:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "7495:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7502:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7491:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7491:16:104"
                              },
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "7509:3:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7514:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "7478:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7478:43:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7478:43:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array",
                                        "nodeType": "YulIdentifier",
                                        "src": "7545:5:104"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "7552:6:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7541:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7541:18:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7561:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7537:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7537:29:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7568:1:104",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7530:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7530:40:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7530:40:104"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "7213:3:104",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "7218:6:104",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7226:3:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "7234:5:104",
                        "type": ""
                      }
                    ],
                    "src": "7169:407:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7634:169:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7683:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7692:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7695:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7685:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7685:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7685:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "7662:6:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7670:4:104",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7658:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7658:17:104"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "7677:3:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7654:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7654:27:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7647:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7647:35:104"
                          },
                          "nodeType": "YulIf",
                          "src": "7644:55:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7708:89:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "7756:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7764:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7752:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7752:17:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "7784:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7771:12:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7771:20:104"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "7793:3:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_string",
                              "nodeType": "YulIdentifier",
                              "src": "7717:34:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7717:80:104"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "7708:5:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "7608:6:104",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7616:3:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "7624:5:104",
                        "type": ""
                      }
                    ],
                    "src": "7581:222:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7888:242:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7934:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7943:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7946:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7936:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7936:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7936:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7909:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7918:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7905:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7905:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7930:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7901:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7901:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "7898:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7959:37:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7986:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7973:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7973:23:104"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "7963:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8039:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8048:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8051:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8041:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8041:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8041:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8011:6:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8019:18:104",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8008:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8008:30:104"
                          },
                          "nodeType": "YulIf",
                          "src": "8005:50:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8064:60:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8096:9:104"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "8107:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8092:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8092:22:104"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8116:7:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string",
                              "nodeType": "YulIdentifier",
                              "src": "8074:17:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8074:50:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8064:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7854:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7865:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7877:6:104",
                        "type": ""
                      }
                    ],
                    "src": "7808:322:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8183:111:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8193:29:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8215:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8202:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8202:20:104"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "8193:5:104"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8272:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8281:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8284:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8274:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8274:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8274:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "8244:5:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "8255:5:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8262:6:104",
                                        "type": "",
                                        "value": "0xffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "8251:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8251:18:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "8241:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8241:29:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "8234:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8234:37:104"
                          },
                          "nodeType": "YulIf",
                          "src": "8231:57:104"
                        }
                      ]
                    },
                    "name": "abi_decode_uint16",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "8162:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "8173:5:104",
                        "type": ""
                      }
                    ],
                    "src": "8135:159:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8410:1956:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8456:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8465:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8468:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8458:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8458:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8458:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8431:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8440:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8427:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8427:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8452:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8423:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8423:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "8420:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8481:37:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8508:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8495:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8495:23:104"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "8485:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8527:28:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8537:18:104",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "8531:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8582:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8591:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8594:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8584:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8584:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8584:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8570:6:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8578:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8567:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8567:14:104"
                          },
                          "nodeType": "YulIf",
                          "src": "8564:34:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8607:32:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8621:9:104"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8632:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8617:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8617:22:104"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "8611:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8681:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8690:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8693:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8683:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8683:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8683:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8659:7:104"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8668:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8655:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8655:16:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8673:6:104",
                                "type": "",
                                "value": "0x0160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8651:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8651:29:104"
                          },
                          "nodeType": "YulIf",
                          "src": "8648:49:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8706:35:104",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_memory_4080",
                              "nodeType": "YulIdentifier",
                              "src": "8719:20:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8719:22:104"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "8710:5:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8750:32:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "8779:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8766:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8766:16:104"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "8754:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8811:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8820:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8823:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8813:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8813:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8813:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "8797:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8807:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8794:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8794:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "8791:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8843:5:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "8872:2:104"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "8876:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8868:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8868:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8887:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string",
                                  "nodeType": "YulIdentifier",
                                  "src": "8850:17:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8850:45:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8836:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8836:60:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8836:60:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8905:41:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8938:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8942:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8934:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8934:11:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8921:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8921:25:104"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "8909:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8975:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8984:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8987:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8977:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8977:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8977:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "8961:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8971:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8958:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8958:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "8955:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9011:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9018:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9007:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9007:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "9045:2:104"
                                      },
                                      {
                                        "name": "offset_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "9049:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9041:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9041:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9060:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string",
                                  "nodeType": "YulIdentifier",
                                  "src": "9023:17:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9023:45:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9000:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9000:69:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9000:69:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9078:41:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9111:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9115:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9107:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9107:11:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9094:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9094:25:104"
                          },
                          "variables": [
                            {
                              "name": "offset_3",
                              "nodeType": "YulTypedName",
                              "src": "9082:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9148:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9157:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9160:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9150:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9150:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9150:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "9134:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9144:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9131:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9131:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "9128:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9184:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9191:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9180:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9180:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "9218:2:104"
                                      },
                                      {
                                        "name": "offset_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "9222:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9214:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9214:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9233:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string",
                                  "nodeType": "YulIdentifier",
                                  "src": "9196:17:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9196:45:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9173:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9173:69:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9173:69:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9251:41:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9284:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9288:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9280:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9280:11:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9267:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9267:25:104"
                          },
                          "variables": [
                            {
                              "name": "offset_4",
                              "nodeType": "YulTypedName",
                              "src": "9255:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9321:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9330:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9333:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9323:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9323:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9323:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_4",
                                "nodeType": "YulIdentifier",
                                "src": "9307:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9317:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9304:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9304:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "9301:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9357:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9364:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9353:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9353:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "9391:2:104"
                                      },
                                      {
                                        "name": "offset_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "9395:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9387:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9387:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9406:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string",
                                  "nodeType": "YulIdentifier",
                                  "src": "9369:17:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9369:45:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9346:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9346:69:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9346:69:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9424:42:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9457:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9461:3:104",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9453:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9453:12:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9440:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9440:26:104"
                          },
                          "variables": [
                            {
                              "name": "offset_5",
                              "nodeType": "YulTypedName",
                              "src": "9428:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9495:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9504:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9507:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9497:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9497:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9497:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_5",
                                "nodeType": "YulIdentifier",
                                "src": "9481:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9491:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9478:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9478:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "9475:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9531:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9538:3:104",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9527:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9527:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "9566:2:104"
                                      },
                                      {
                                        "name": "offset_5",
                                        "nodeType": "YulIdentifier",
                                        "src": "9570:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9562:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9562:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9581:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string",
                                  "nodeType": "YulIdentifier",
                                  "src": "9544:17:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9544:45:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9520:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9520:70:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9520:70:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9599:42:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9632:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9636:3:104",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9628:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9628:12:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9615:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9615:26:104"
                          },
                          "variables": [
                            {
                              "name": "offset_6",
                              "nodeType": "YulTypedName",
                              "src": "9603:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9670:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9679:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9682:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9672:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9672:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9672:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_6",
                                "nodeType": "YulIdentifier",
                                "src": "9656:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9666:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9653:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9653:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "9650:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9706:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9713:3:104",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9702:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9702:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "9752:2:104"
                                      },
                                      {
                                        "name": "offset_6",
                                        "nodeType": "YulIdentifier",
                                        "src": "9756:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9748:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9748:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9767:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "9719:28:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9719:56:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9695:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9695:81:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9695:81:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9785:42:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9818:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9822:3:104",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9814:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9814:12:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9801:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9801:26:104"
                          },
                          "variables": [
                            {
                              "name": "offset_7",
                              "nodeType": "YulTypedName",
                              "src": "9789:8:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9856:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9865:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9868:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9858:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9858:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9858:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_7",
                                "nodeType": "YulIdentifier",
                                "src": "9842:8:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9852:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9839:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9839:16:104"
                          },
                          "nodeType": "YulIf",
                          "src": "9836:36:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9892:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9899:3:104",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9888:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9888:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "9938:2:104"
                                      },
                                      {
                                        "name": "offset_7",
                                        "nodeType": "YulIdentifier",
                                        "src": "9942:8:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9934:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9934:17:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9953:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_uint256_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "9905:28:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9905:56:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9881:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9881:81:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9881:81:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9982:5:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9989:3:104",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9978:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9978:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10012:2:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10016:3:104",
                                        "type": "",
                                        "value": "224"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10008:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10008:12:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "9995:12:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9995:26:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9971:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9971:51:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9971:51:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10031:13:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10041:3:104",
                            "type": "",
                            "value": "256"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "10035:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "10064:5:104"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "10071:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10060:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10060:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10099:2:104"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "10103:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10095:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10095:11:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "10076:18:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10076:31:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10053:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10053:55:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10053:55:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10117:13:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10127:3:104",
                            "type": "",
                            "value": "288"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "10121:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "10150:5:104"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "10157:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10146:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10146:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10184:2:104"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "10188:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10180:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10180:11:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint16",
                                  "nodeType": "YulIdentifier",
                                  "src": "10162:17:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10162:30:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10139:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10139:54:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10139:54:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10202:13:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10212:3:104",
                            "type": "",
                            "value": "320"
                          },
                          "variables": [
                            {
                              "name": "_5",
                              "nodeType": "YulTypedName",
                              "src": "10206:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "10235:5:104"
                                  },
                                  {
                                    "name": "_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "10242:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10231:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10231:14:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10270:2:104"
                                      },
                                      {
                                        "name": "_5",
                                        "nodeType": "YulIdentifier",
                                        "src": "10274:2:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10266:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10266:11:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "10247:18:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10247:31:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10224:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10224:55:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10224:55:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10288:15:104",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "10298:5:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10288:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10312:48:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10345:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10356:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10341:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10341:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "10322:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10322:38:104"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10312:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_Config_$9052_memory_ptrt_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8368:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "8379:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8391:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8399:6:104",
                        "type": ""
                      }
                    ],
                    "src": "8299:2067:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10512:513:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10558:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10567:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10570:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10560:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10560:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10560:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10533:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10542:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10529:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10529:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10554:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10525:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10525:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "10522:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10583:37:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10610:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10597:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10597:23:104"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "10587:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10629:28:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10639:18:104",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10633:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10684:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10693:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10696:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10686:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10686:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10686:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10672:6:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10680:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10669:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10669:14:104"
                          },
                          "nodeType": "YulIf",
                          "src": "10666:34:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10709:32:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10723:9:104"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10734:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10719:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10719:22:104"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "10713:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10789:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10798:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10801:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10791:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10791:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10791:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10768:2:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10772:4:104",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10764:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10764:13:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10779:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "10760:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10760:27:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "10753:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10753:35:104"
                          },
                          "nodeType": "YulIf",
                          "src": "10750:55:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10814:30:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "10841:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10828:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10828:16:104"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "10818:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10871:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10880:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10883:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10873:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10873:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10873:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10859:6:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10867:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10856:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10856:14:104"
                          },
                          "nodeType": "YulIf",
                          "src": "10853:34:104"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10948:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10957:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10960:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10950:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10950:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10950:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10910:2:104"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "10918:6:104"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10926:4:104",
                                            "type": "",
                                            "value": "0x60"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "10914:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10914:17:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10906:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10906:26:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10934:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10902:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10902:35:104"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10939:7:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10899:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10899:48:104"
                          },
                          "nodeType": "YulIf",
                          "src": "10896:68:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10973:21:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "10987:2:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10991:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10983:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10983:11:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10973:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11003:16:104",
                          "value": {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "11013:6:104"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "11003:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_struct$_TokenRoyaltyConfig_$35_calldata_ptr_$dyn_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10470:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10481:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10493:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10501:6:104",
                        "type": ""
                      }
                    ],
                    "src": "10371:654:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11100:116:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11146:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11155:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11158:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11148:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11148:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11148:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11121:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11130:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11117:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11117:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11142:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "11113:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11113:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "11110:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11171:39:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11200:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "11181:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11181:29:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11171:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11066:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11077:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11089:6:104",
                        "type": ""
                      }
                    ],
                    "src": "11030:186:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11378:162:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11388:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11400:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11411:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11396:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11396:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11388:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11430:9:104"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11441:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11423:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11423:25:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11423:25:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11468:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11479:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11464:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11464:18:104"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "11484:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11457:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11457:34:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11457:34:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11511:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11522:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11507:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11507:18:104"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "11527:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11500:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11500:34:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11500:34:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11331:9:104",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "11342:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11350:6:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11358:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11369:4:104",
                        "type": ""
                      }
                    ],
                    "src": "11221:319:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11672:158:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11682:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11694:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11705:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11690:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11690:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11682:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11724:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "11739:6:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11755:3:104",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11760:1:104",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "11751:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11751:11:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11764:1:104",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "11747:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11747:19:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11735:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11735:32:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11717:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11717:51:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11717:51:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11788:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11799:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11784:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11784:18:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11808:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11816:6:104",
                                    "type": "",
                                    "value": "0xffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11804:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11804:19:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11777:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11777:47:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11777:47:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint16__to_t_address_t_uint16__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11633:9:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11644:6:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11652:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11663:4:104",
                        "type": ""
                      }
                    ],
                    "src": "11545:285:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11919:263:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11965:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11974:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11977:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11967:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11967:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11967:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11940:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11949:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11936:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11936:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11961:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "11932:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11932:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "11929:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11990:39:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12019:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "12000:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12000:29:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11990:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12038:45:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12068:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12079:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12064:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12064:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12051:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12051:32:104"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "12042:5:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12136:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12145:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12148:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12138:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12138:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12138:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "12105:5:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "12126:5:104"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "12119:6:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12119:13:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "12112:6:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12112:21:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "12102:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12102:32:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "12095:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12095:40:104"
                          },
                          "nodeType": "YulIf",
                          "src": "12092:60:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12161:15:104",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "12171:5:104"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "12161:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11877:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11888:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11900:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11908:6:104",
                        "type": ""
                      }
                    ],
                    "src": "11835:347:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12317:537:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12364:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12373:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12376:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12366:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12366:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12366:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12338:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12347:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12334:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12334:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12359:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12330:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12330:33:104"
                          },
                          "nodeType": "YulIf",
                          "src": "12327:53:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12389:39:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12418:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "12399:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12399:29:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "12389:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12437:48:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12470:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12481:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12466:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12466:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "12447:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12447:38:104"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "12437:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12494:42:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12521:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12532:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12517:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12517:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12504:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12504:32:104"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "12494:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12545:46:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12576:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12587:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12572:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12572:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12559:12:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12559:32:104"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "12549:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12634:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12643:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12646:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12636:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12636:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12636:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "12606:6:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12614:18:104",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12603:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12603:30:104"
                          },
                          "nodeType": "YulIf",
                          "src": "12600:50:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12659:32:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12673:9:104"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "12684:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12669:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12669:22:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "12663:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12739:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12748:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12751:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12741:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12741:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12741:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "12718:2:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12722:4:104",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12714:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12714:13:104"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12729:7:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "12710:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12710:27:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "12703:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12703:35:104"
                          },
                          "nodeType": "YulIf",
                          "src": "12700:55:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12764:84:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12813:2:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12817:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12809:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12809:11:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12835:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12822:12:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12822:16:104"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12840:7:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_string",
                              "nodeType": "YulIdentifier",
                              "src": "12774:34:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12774:74:104"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "12764:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12259:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "12270:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12282:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "12290:6:104",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "12298:6:104",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "12306:6:104",
                        "type": ""
                      }
                    ],
                    "src": "12187:667:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13056:638:104",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13066:12:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13076:2:104",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "13070:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13087:32:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13105:9:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "13116:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13101:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13101:18:104"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "13091:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13135:9:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "13146:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13128:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13128:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13128:21:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13158:17:104",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "13169:6:104"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "13162:3:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13184:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "13204:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "13198:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13198:13:104"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "13188:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "13227:6:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13235:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13220:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13220:22:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13220:22:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13251:12:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13261:2:104",
                            "type": "",
                            "value": "64"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "13255:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13272:25:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13283:9:104"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "13294:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13279:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13279:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "13272:3:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13306:29:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "13324:6:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "13332:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13320:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13320:15:104"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "13310:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13344:10:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13353:1:104",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "13348:1:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13412:256:104",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "13426:23:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "13442:6:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "13436:5:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13436:13:104"
                                },
                                "variables": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulTypedName",
                                    "src": "13430:2:104",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "13469:3:104"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "13484:2:104"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "13478:5:104"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13478:9:104"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "13497:3:104",
                                                  "type": "",
                                                  "value": "160"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "13502:1:104",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "13493:3:104"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "13493:11:104"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "13506:1:104",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "13489:3:104"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13489:19:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "13474:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13474:35:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13462:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13462:48:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13462:48:104"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "13534:3:104"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "13539:2:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "13530:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13530:12:104"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "_3",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13558:2:104"
                                                },
                                                {
                                                  "name": "_1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13562:2:104"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "13554:3:104"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "13554:11:104"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "13548:5:104"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13548:18:104"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "13576:2:104",
                                                  "type": "",
                                                  "value": "96"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "13580:1:104",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "13572:3:104"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "13572:10:104"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "13584:1:104",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "13568:3:104"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13568:18:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "13544:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13544:43:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13523:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13523:65:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13523:65:104"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "13601:19:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "13612:3:104"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "13617:2:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "13608:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13608:12:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "13601:3:104"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "13633:25:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "13647:6:104"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "13655:2:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "13643:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13643:15:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "13633:6:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "13374:1:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13377:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "13371:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13371:13:104"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "13385:18:104",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "13387:14:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "13396:1:104"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13399:1:104",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "13392:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13392:9:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "13387:1:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "13367:3:104",
                            "statements": []
                          },
                          "src": "13363:305:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13677:11:104",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "13685:3:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13677:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_struct$_Part_$15020_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Part_$15020_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13025:9:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13036:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13047:4:104",
                        "type": ""
                      }
                    ],
                    "src": "12859:835:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13786:173:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13832:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13841:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13844:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13834:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13834:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13834:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13807:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13816:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13803:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13803:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13828:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "13799:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13799:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "13796:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13857:39:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13886:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "13867:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13867:29:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "13857:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13905:48:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13938:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13949:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13934:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13934:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "13915:18:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13915:38:104"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "13905:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13744:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13755:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13767:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "13775:6:104",
                        "type": ""
                      }
                    ],
                    "src": "13699:260:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14064:96:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14110:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14119:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14122:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14112:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14112:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14112:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14085:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14094:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14081:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14081:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14106:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14077:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14077:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "14074:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14135:19:104",
                          "value": {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "14145:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "14135:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_TokenRoyalty_$28_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14030:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14041:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14053:6:104",
                        "type": ""
                      }
                    ],
                    "src": "13964:196:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14197:95:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14214:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14221:3:104",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14226:10:104",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14217:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14217:20:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14207:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14207:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14207:31:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14254:1:104",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14257:4:104",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14247:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14247:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14247:15:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14278:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14281:4:104",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "14271:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14271:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14271:15:104"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14165:127:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14454:218:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14464:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14476:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14487:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14472:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14472:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14464:4:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14499:29:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14517:3:104",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14522:1:104",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14513:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14513:11:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14526:1:104",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "14509:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14509:19:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "14503:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14544:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "14559:6:104"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14567:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14555:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14555:15:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14537:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14537:34:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14537:34:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14591:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14602:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14587:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14587:18:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14611:6:104"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14619:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14607:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14607:15:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14580:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14580:43:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14580:43:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14643:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14654:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14639:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14639:18:104"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "14659:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14632:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14632:34:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14632:34:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14407:9:104",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "14418:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "14426:6:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14434:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14445:4:104",
                        "type": ""
                      }
                    ],
                    "src": "14297:375:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14709:95:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14726:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14733:3:104",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14738:10:104",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14729:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14729:20:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14719:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14719:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14719:31:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14766:1:104",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14769:4:104",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14759:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14759:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14759:15:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14790:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14793:4:104",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "14783:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14783:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14783:15:104"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14677:127:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14856:88:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14887:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "14889:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14889:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14889:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14872:5:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14883:1:104",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "14879:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14879:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "14869:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14869:17:104"
                          },
                          "nodeType": "YulIf",
                          "src": "14866:43:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14918:20:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14929:5:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14936:1:104",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14925:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14925:13:104"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "14918:3:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "14838:5:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "14848:3:104",
                        "type": ""
                      }
                    ],
                    "src": "14809:135:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15123:234:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15140:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15151:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15133:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15133:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15133:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15174:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15185:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15170:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15170:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15190:2:104",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15163:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15163:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15163:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15213:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15224:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15209:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15209:18:104"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f76656420717565727920666f72206e6f6e6578",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15229:34:104",
                                "type": "",
                                "value": "ERC721: approved query for nonex"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15202:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15202:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15202:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15284:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15295:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15280:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15280:18:104"
                              },
                              {
                                "hexValue": "697374656e7420746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15300:14:104",
                                "type": "",
                                "value": "istent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15273:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15273:42:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15273:42:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15324:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15336:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15347:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15332:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15332:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15324:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15100:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15114:4:104",
                        "type": ""
                      }
                    ],
                    "src": "14949:408:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15536:223:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15553:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15564:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15546:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15546:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15546:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15587:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15598:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15583:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15583:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15603:2:104",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15576:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15576:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15576:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15626:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15637:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15622:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15622:18:104"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15642:34:104",
                                "type": "",
                                "value": "ERC721: approval to current owne"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15615:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15615:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15615:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15697:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15708:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15693:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15693:18:104"
                              },
                              {
                                "hexValue": "72",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15713:3:104",
                                "type": "",
                                "value": "r"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15686:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15686:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15686:31:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15726:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15738:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15749:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15734:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15734:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15726:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15513:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15527:4:104",
                        "type": ""
                      }
                    ],
                    "src": "15362:397:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15938:246:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15955:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15966:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15948:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15948:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15948:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15989:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16000:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15985:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15985:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16005:2:104",
                                "type": "",
                                "value": "56"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15978:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15978:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15978:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16028:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16039:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16024:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16024:18:104"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f74206f77",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16044:34:104",
                                "type": "",
                                "value": "ERC721: approve caller is not ow"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16017:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16017:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16017:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16099:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16110:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16095:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16095:18:104"
                              },
                              {
                                "hexValue": "6e6572206e6f7220617070726f76656420666f7220616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16115:26:104",
                                "type": "",
                                "value": "ner nor approved for all"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16088:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16088:54:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16088:54:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16151:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16163:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16174:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16159:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16159:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16151:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15915:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15929:4:104",
                        "type": ""
                      }
                    ],
                    "src": "15764:420:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16363:182:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16380:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16391:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16373:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16373:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16373:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16414:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16425:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16410:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16410:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16430:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16403:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16403:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16403:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16453:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16464:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16449:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16449:18:104"
                              },
                              {
                                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16469:34:104",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16442:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16442:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16442:62:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16513:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16525:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16536:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16521:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16521:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16513:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16340:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16354:4:104",
                        "type": ""
                      }
                    ],
                    "src": "16189:356:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16724:239:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16741:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16752:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16734:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16734:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16734:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16775:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16786:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16771:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16771:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16791:2:104",
                                "type": "",
                                "value": "49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16764:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16764:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16764:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16814:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16825:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16810:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16810:18:104"
                              },
                              {
                                "hexValue": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16830:34:104",
                                "type": "",
                                "value": "ERC721: transfer caller is not o"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16803:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16803:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16803:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16885:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16896:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16881:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16881:18:104"
                              },
                              {
                                "hexValue": "776e6572206e6f7220617070726f766564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16901:19:104",
                                "type": "",
                                "value": "wner nor approved"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16874:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16874:47:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16874:47:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16930:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16942:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16953:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16938:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16938:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16930:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16701:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16715:4:104",
                        "type": ""
                      }
                    ],
                    "src": "16550:413:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17020:116:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17079:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "17081:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17081:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17081:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "17051:1:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "17044:6:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17044:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "17037:6:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17037:17:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "17059:1:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "17070:1:104",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "17066:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "17066:6:104"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "17074:1:104"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "17062:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17062:14:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "17056:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17056:21:104"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17033:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17033:45:104"
                          },
                          "nodeType": "YulIf",
                          "src": "17030:71:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17110:20:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "17125:1:104"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "17128:1:104"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "17121:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17121:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "17110:7:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "16999:1:104",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "17002:1:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "17008:7:104",
                        "type": ""
                      }
                    ],
                    "src": "16968:168:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17173:95:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17190:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17197:3:104",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17202:10:104",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "17193:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17193:20:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17183:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17183:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17183:31:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17230:1:104",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17233:4:104",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17223:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17223:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17223:15:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17254:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17257:4:104",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "17247:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17247:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17247:15:104"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "17141:127:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17319:74:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17342:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "17344:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17344:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17344:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "17339:1:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "17332:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17332:9:104"
                          },
                          "nodeType": "YulIf",
                          "src": "17329:35:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17373:14:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "17382:1:104"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "17385:1:104"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "17378:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17378:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "17373:1:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "17304:1:104",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "17307:1:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "17313:1:104",
                        "type": ""
                      }
                    ],
                    "src": "17273:120:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17572:173:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17589:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17600:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17582:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17582:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17582:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17623:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17634:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17619:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17619:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17639:2:104",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17612:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17612:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17612:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17662:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17673:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17658:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17658:18:104"
                              },
                              {
                                "hexValue": "46524f4d5f544f5f4c454e4754485f4d49534d41544348",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17678:25:104",
                                "type": "",
                                "value": "FROM_TO_LENGTH_MISMATCH"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17651:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17651:53:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17651:53:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17713:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17725:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17736:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17721:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17721:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17713:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_da1562f5b06cdbe3b7834c1499be3abf3945795ef1d9be227a4afb60ec9d2263__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17549:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17563:4:104",
                        "type": ""
                      }
                    ],
                    "src": "17398:347:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17924:176:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17941:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17952:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17934:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17934:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17934:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17975:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17986:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17971:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17971:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17991:2:104",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17964:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17964:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17964:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18014:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18025:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18010:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18010:18:104"
                              },
                              {
                                "hexValue": "46524f4d5f544f4b454e5f4c454e4754485f4d49534d41544348",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18030:28:104",
                                "type": "",
                                "value": "FROM_TOKEN_LENGTH_MISMATCH"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18003:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18003:56:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18003:56:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18068:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18080:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18091:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18076:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18076:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18068:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a85d29b09685a306a376b5c084fbb5d595b4718ad9a9d03a4e83e73c8af5bed8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17901:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17915:4:104",
                        "type": ""
                      }
                    ],
                    "src": "17750:350:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18279:177:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18296:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18307:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18289:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18289:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18289:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18330:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18341:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18326:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18326:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18346:2:104",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18319:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18319:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18319:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18369:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18380:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18365:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18365:18:104"
                              },
                              {
                                "hexValue": "4552433732312f494e56414c49445f494e495449414c5f41524753",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18385:29:104",
                                "type": "",
                                "value": "ERC721/INVALID_INITIAL_ARGS"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18358:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18358:57:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18358:57:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18424:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18436:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18447:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18432:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18432:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18424:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8e422f8423f8fbfe2947b9ae08d4901c410485ed2cfc594249b8dfe3de24f405__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18256:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18270:4:104",
                        "type": ""
                      }
                    ],
                    "src": "18105:351:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18568:87:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18578:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18590:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18601:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18586:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18586:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18578:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18620:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "18635:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18643:4:104",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18631:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18631:17:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18613:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18613:36:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18613:36:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18537:9:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18548:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18559:4:104",
                        "type": ""
                      }
                    ],
                    "src": "18461:194:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18764:486:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18810:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18819:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18822:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18812:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18812:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18812:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "18785:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18794:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "18781:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18781:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18806:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "18777:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18777:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "18774:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18835:23:104",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18855:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "18849:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18849:9:104"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "18839:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18867:33:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "18889:6:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18897:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18885:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18885:15:104"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "18871:10:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18975:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "18977:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18977:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18977:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18918:10:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18930:18:104",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "18915:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18915:34:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18954:10:104"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18966:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "18951:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18951:22:104"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "18912:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18912:62:104"
                          },
                          "nodeType": "YulIf",
                          "src": "18909:88:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19013:2:104",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "19017:10:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19006:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19006:22:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19006:22:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "19044:6:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19065:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "19052:12:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19052:23:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19037:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19037:39:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19037:39:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "19096:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19104:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19092:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19092:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "19132:9:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19143:2:104",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19128:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19128:18:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "19109:18:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19109:38:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19085:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19085:63:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19085:63:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "19168:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19176:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19164:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19164:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "19203:9:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19214:2:104",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19199:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19199:18:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint16",
                                  "nodeType": "YulIdentifier",
                                  "src": "19181:17:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19181:37:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19157:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19157:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19157:62:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19228:16:104",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "19238:6:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "19228:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_TokenRoyaltyConfig_$35_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18730:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "18741:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18753:6:104",
                        "type": ""
                      }
                    ],
                    "src": "18660:590:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19336:103:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19382:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19391:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19394:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "19384:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19384:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19384:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "19357:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19366:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "19353:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19353:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19378:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "19349:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19349:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "19346:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19407:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19423:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19417:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19417:16:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "19407:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19302:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "19313:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19325:6:104",
                        "type": ""
                      }
                    ],
                    "src": "19255:184:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19618:231:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19635:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19646:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19628:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19628:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19628:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19669:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19680:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19665:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19665:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19685:2:104",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19658:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19658:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19658:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19708:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19719:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19704:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19704:18:104"
                              },
                              {
                                "hexValue": "4552433732313a206f776e657220717565727920666f72206e6f6e6578697374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19724:34:104",
                                "type": "",
                                "value": "ERC721: owner query for nonexist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19697:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19697:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19697:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19779:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19790:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19775:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19775:18:104"
                              },
                              {
                                "hexValue": "656e7420746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19795:11:104",
                                "type": "",
                                "value": "ent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19768:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19768:39:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19768:39:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19816:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19828:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19839:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19824:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19824:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19816:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19595:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19609:4:104",
                        "type": ""
                      }
                    ],
                    "src": "19444:405:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20028:155:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20045:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20056:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20038:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20038:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20038:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20079:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20090:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20075:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20075:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20095:1:104",
                                "type": "",
                                "value": "6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20068:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20068:29:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20068:29:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20117:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20128:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20113:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20113:18:104"
                              },
                              {
                                "hexValue": "46524f5a454e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20133:8:104",
                                "type": "",
                                "value": "FROZEN"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20106:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20106:36:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20106:36:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20151:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20163:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20174:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20159:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20159:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20151:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7c78561e9c3b6dc2802172fb2041fc3504da930f63dfaf87b57359e924c17eb9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20005:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20019:4:104",
                        "type": ""
                      }
                    ],
                    "src": "19854:329:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20362:167:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20379:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20390:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20372:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20372:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20372:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20413:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20424:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20409:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20409:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20429:2:104",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20402:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20402:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20402:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20452:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20463:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20448:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20448:18:104"
                              },
                              {
                                "hexValue": "4c4f5745525f5448414e5f535550504c59",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20468:19:104",
                                "type": "",
                                "value": "LOWER_THAN_SUPPLY"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20441:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20441:47:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20441:47:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20497:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20509:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20520:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20505:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20505:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20497:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e34834cbfacaabcb36f3c81ca1a95e73bb2a5f2aadc5cfc24763773efc900660__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20339:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20353:4:104",
                        "type": ""
                      }
                    ],
                    "src": "20188:341:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20708:232:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20725:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20736:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20718:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20718:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20718:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20759:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20770:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20755:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20755:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20775:2:104",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20748:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20748:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20748:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20798:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20809:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20794:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20794:18:104"
                              },
                              {
                                "hexValue": "4552433732313a2062616c616e636520717565727920666f7220746865207a65",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20814:34:104",
                                "type": "",
                                "value": "ERC721: balance query for the ze"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20787:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20787:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20787:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20869:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20880:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20865:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20865:18:104"
                              },
                              {
                                "hexValue": "726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20885:12:104",
                                "type": "",
                                "value": "ro address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20858:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20858:40:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20858:40:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20907:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20919:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20930:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20915:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20915:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20907:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20685:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20699:4:104",
                        "type": ""
                      }
                    ],
                    "src": "20534:406:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21000:325:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21010:22:104",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21024:1:104",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "21027:4:104"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "21020:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21020:12:104"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "21010:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21041:38:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "21071:4:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21077:1:104",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21067:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21067:12:104"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "21045:18:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21118:31:104",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "21120:27:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "21134:6:104"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21142:4:104",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "21130:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21130:17:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "21120:6:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "21098:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "21091:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21091:26:104"
                          },
                          "nodeType": "YulIf",
                          "src": "21088:61:104"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21208:111:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21229:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "21236:3:104",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "21241:10:104",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "21232:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "21232:20:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "21222:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21222:31:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21222:31:104"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21273:1:104",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21276:4:104",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "21266:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21266:15:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21266:15:104"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21301:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21304:4:104",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "21294:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21294:15:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21294:15:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "21164:18:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "21187:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21195:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "21184:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21184:14:104"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "21161:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21161:38:104"
                          },
                          "nodeType": "YulIf",
                          "src": "21158:161:104"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "20980:4:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "20989:6:104",
                        "type": ""
                      }
                    ],
                    "src": "20945:380:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21428:420:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21474:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21483:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21486:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "21476:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21476:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21476:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "21449:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21458:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "21445:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21445:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21470:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "21441:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21441:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "21438:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21499:23:104",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21519:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "21513:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21513:9:104"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "21503:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21531:33:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "21553:6:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21561:2:104",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21549:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21549:15:104"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "21535:10:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21639:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "21641:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21641:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21641:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "21582:10:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21594:18:104",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "21579:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21579:34:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "21618:10:104"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "21630:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "21615:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21615:22:104"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "21576:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21576:62:104"
                          },
                          "nodeType": "YulIf",
                          "src": "21573:88:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21677:2:104",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "21681:10:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21670:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21670:22:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21670:22:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "21708:6:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21735:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "21716:18:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21716:29:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21701:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21701:45:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21701:45:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "21766:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21774:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21762:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21762:15:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "21801:9:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21812:2:104",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "21797:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21797:18:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint16",
                                  "nodeType": "YulIdentifier",
                                  "src": "21779:17:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21779:37:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21755:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21755:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21755:62:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21826:16:104",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "21836:6:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "21826:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_TokenRoyalty_$28_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21394:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "21405:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21417:6:104",
                        "type": ""
                      }
                    ],
                    "src": "21330:518:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22027:228:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22044:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22055:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22037:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22037:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22037:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22078:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22089:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22074:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22074:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22094:2:104",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22067:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22067:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22067:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22117:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22128:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22113:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22113:18:104"
                              },
                              {
                                "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22133:34:104",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22106:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22106:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22106:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22188:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22199:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22184:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22184:18:104"
                              },
                              {
                                "hexValue": "646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22204:8:104",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22177:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22177:36:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22177:36:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22222:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22234:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22245:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22230:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22230:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22222:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22004:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22018:4:104",
                        "type": ""
                      }
                    ],
                    "src": "21853:402:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22434:234:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22451:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22462:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22444:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22444:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22444:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22485:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22496:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22481:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22481:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22501:2:104",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22474:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22474:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22474:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22524:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22535:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22520:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22520:18:104"
                              },
                              {
                                "hexValue": "4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22540:34:104",
                                "type": "",
                                "value": "ERC721: operator query for nonex"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22513:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22513:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22513:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22595:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22606:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22591:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22591:18:104"
                              },
                              {
                                "hexValue": "697374656e7420746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22611:14:104",
                                "type": "",
                                "value": "istent token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22584:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22584:42:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22584:42:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22635:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22647:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22658:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22643:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22643:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22635:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22411:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22425:4:104",
                        "type": ""
                      }
                    ],
                    "src": "22260:408:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22847:227:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22864:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22875:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22857:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22857:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22857:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22898:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22909:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22894:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22894:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22914:2:104",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22887:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22887:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22887:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22937:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22948:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22933:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22933:18:104"
                              },
                              {
                                "hexValue": "4552433732313a207472616e736665722066726f6d20696e636f727265637420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22953:34:104",
                                "type": "",
                                "value": "ERC721: transfer from incorrect "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22926:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22926:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22926:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23008:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23019:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23004:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23004:18:104"
                              },
                              {
                                "hexValue": "6f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "23024:7:104",
                                "type": "",
                                "value": "owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22997:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22997:35:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22997:35:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23041:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23053:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23064:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23049:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23049:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23041:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22824:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22838:4:104",
                        "type": ""
                      }
                    ],
                    "src": "22673:401:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23253:226:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23270:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23281:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23263:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23263:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23263:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23304:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23315:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23300:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23300:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23320:2:104",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23293:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23293:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23293:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23343:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23354:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23339:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23339:18:104"
                              },
                              {
                                "hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f20616464",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "23359:34:104",
                                "type": "",
                                "value": "ERC721: transfer to the zero add"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23332:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23332:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23332:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23414:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23425:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23410:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23410:18:104"
                              },
                              {
                                "hexValue": "72657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "23430:6:104",
                                "type": "",
                                "value": "ress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23403:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23403:34:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23403:34:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23446:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23458:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23469:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23454:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23454:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23446:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23230:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23244:4:104",
                        "type": ""
                      }
                    ],
                    "src": "23079:400:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23533:76:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23555:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "23557:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23557:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23557:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "23549:1:104"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "23552:1:104"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "23546:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23546:8:104"
                          },
                          "nodeType": "YulIf",
                          "src": "23543:34:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23586:17:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "23598:1:104"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "23601:1:104"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "23594:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23594:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "23586:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "23515:1:104",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "23518:1:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "23524:4:104",
                        "type": ""
                      }
                    ],
                    "src": "23484:125:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23662:80:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23689:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "23691:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23691:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23691:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "23678:1:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "23685:1:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "23681:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23681:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "23675:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23675:13:104"
                          },
                          "nodeType": "YulIf",
                          "src": "23672:39:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23720:16:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "23731:1:104"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "23734:1:104"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23727:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23727:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "23720:3:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "23645:1:104",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "23648:1:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "23654:3:104",
                        "type": ""
                      }
                    ],
                    "src": "23614:128:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23921:164:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23938:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23949:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23931:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23931:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23931:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23972:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23983:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23968:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23968:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23988:2:104",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23961:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23961:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23961:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24011:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24022:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24007:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24007:18:104"
                              },
                              {
                                "hexValue": "455843454544535f535550504c59",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24027:16:104",
                                "type": "",
                                "value": "EXCEEDS_SUPPLY"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24000:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24000:44:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24000:44:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24053:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24065:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24076:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24061:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24061:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24053:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8cdecbb23ec02783743afd77310df6afab5a99f690f3465f9005641c64075aff__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23898:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23912:4:104",
                        "type": ""
                      }
                    ],
                    "src": "23747:338:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24264:236:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24281:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24292:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24274:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24274:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24274:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24315:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24326:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24311:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24311:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24331:2:104",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24304:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24304:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24304:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24354:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24365:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24350:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24350:18:104"
                              },
                              {
                                "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24370:34:104",
                                "type": "",
                                "value": "Initializable: contract is alrea"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24343:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24343:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24343:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24425:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24436:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24421:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24421:18:104"
                              },
                              {
                                "hexValue": "647920696e697469616c697a6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24441:16:104",
                                "type": "",
                                "value": "dy initialized"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24414:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24414:44:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24414:44:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24467:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24479:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24490:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24475:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24475:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24467:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24241:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24255:4:104",
                        "type": ""
                      }
                    ],
                    "src": "24090:410:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24679:233:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24696:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24707:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24689:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24689:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24689:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24730:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24741:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24726:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24726:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24746:2:104",
                                "type": "",
                                "value": "43"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24719:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24719:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24719:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24769:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24780:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24765:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24765:18:104"
                              },
                              {
                                "hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24785:34:104",
                                "type": "",
                                "value": "Initializable: contract is not i"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24758:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24758:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24758:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24840:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24851:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24836:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24836:18:104"
                              },
                              {
                                "hexValue": "6e697469616c697a696e67",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24856:13:104",
                                "type": "",
                                "value": "nitializing"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24829:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24829:41:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24829:41:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24879:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24891:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24902:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24887:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24887:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24879:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24656:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24670:4:104",
                        "type": ""
                      }
                    ],
                    "src": "24505:407:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25091:161:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25108:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25119:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25101:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25101:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25101:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25142:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25153:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25138:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25138:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25158:2:104",
                                "type": "",
                                "value": "11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25131:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25131:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25131:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25181:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25192:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25177:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25177:18:104"
                              },
                              {
                                "hexValue": "496e76616c696420627073",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25197:13:104",
                                "type": "",
                                "value": "Invalid bps"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25170:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25170:41:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25170:41:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25220:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25232:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25243:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25228:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25228:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25220:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b241956482006da0262aee1fc6c67748f0e9540db02038beca23605c4807d33d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25068:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25082:4:104",
                        "type": ""
                      }
                    ],
                    "src": "24917:335:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25412:201:104",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "25422:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25434:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25445:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25430:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25430:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25422:4:104"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25464:9:104"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "25475:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25457:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25457:25:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25457:25:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25502:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25513:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25498:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25498:18:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "25522:6:104"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "25538:3:104",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "25543:1:104",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "25534:3:104"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "25534:11:104"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25547:1:104",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "25530:3:104"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25530:19:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "25518:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25518:32:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25491:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25491:60:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25491:60:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25571:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25582:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25567:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25567:18:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "25591:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25599:6:104",
                                    "type": "",
                                    "value": "0xffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "25587:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25587:19:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25560:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25560:47:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25560:47:104"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_address_t_uint16__to_t_uint256_t_address_t_uint16__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25365:9:104",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "25376:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "25384:6:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "25392:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25403:4:104",
                        "type": ""
                      }
                    ],
                    "src": "25257:356:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25792:175:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25809:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25820:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25802:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25802:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25802:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25843:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25854:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25839:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25839:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25859:2:104",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25832:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25832:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25832:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25882:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25893:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25878:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25878:18:104"
                              },
                              {
                                "hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25898:27:104",
                                "type": "",
                                "value": "ERC721: approve to caller"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25871:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25871:55:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25871:55:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25935:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25947:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25958:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25943:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25943:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25935:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25769:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25783:4:104",
                        "type": ""
                      }
                    ],
                    "src": "25618:349:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26146:240:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26163:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26174:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26156:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26156:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26156:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26197:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26208:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26193:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26193:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26213:2:104",
                                "type": "",
                                "value": "50"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26186:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26186:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26186:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26236:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26247:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26232:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26232:18:104"
                              },
                              {
                                "hexValue": "4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26252:34:104",
                                "type": "",
                                "value": "ERC721: transfer to non ERC721Re"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26225:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26225:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26225:62:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26307:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26318:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26303:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26303:18:104"
                              },
                              {
                                "hexValue": "63656976657220696d706c656d656e746572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26323:20:104",
                                "type": "",
                                "value": "ceiver implementer"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26296:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26296:48:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26296:48:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26353:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26365:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26376:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26361:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26361:19:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26353:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26123:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26137:4:104",
                        "type": ""
                      }
                    ],
                    "src": "25972:414:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26447:65:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26464:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "26467:3:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26457:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26457:14:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26457:14:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26480:26:104",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26498:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26501:4:104",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "26488:9:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26488:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "26480:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "26430:3:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "26438:4:104",
                        "type": ""
                      }
                    ],
                    "src": "26391:121:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26575:915:104",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26585:29:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26608:5:104"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "26602:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26602:12:104"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "26589:9:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26623:15:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26637:1:104",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "26627:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26647:11:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26657:1:104",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "26651:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26667:28:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "26681:2:104"
                              },
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "26685:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "26677:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26677:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "26667:6:104"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26704:44:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "26734:9:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "26745:2:104"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "26730:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26730:18:104"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "26708:18:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26787:31:104",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "26789:27:104",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "26803:6:104"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26811:4:104",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "26799:3:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26799:17:104"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "26789:6:104"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "26767:18:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "26760:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26760:26:104"
                          },
                          "nodeType": "YulIf",
                          "src": "26757:61:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26827:12:104",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "26837:2:104",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "26831:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26898:111:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26919:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "26926:3:104",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "26931:10:104",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "26922:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "26922:20:104"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "26912:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26912:31:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26912:31:104"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26963:1:104",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26966:4:104",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "26956:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26956:15:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26956:15:104"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26991:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "26994:4:104",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "26984:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26984:15:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26984:15:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "26854:18:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "26877:6:104"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "26885:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "26874:2:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26874:14:104"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "26851:2:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26851:38:104"
                          },
                          "nodeType": "YulIf",
                          "src": "26848:161:104"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "27059:97:104",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "27080:3:104"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "27089:9:104"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "27104:3:104",
                                                  "type": "",
                                                  "value": "255"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "27100:3:104"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "27100:8:104"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "27085:3:104"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "27085:24:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "27073:6:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "27073:37:104"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "27073:37:104"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "27123:23:104",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "27134:3:104"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "27139:6:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "27130:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "27130:16:104"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "27123:3:104"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "27052:104:104",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27057:1:104",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "27172:312:104",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "27186:51:104",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "27231:5:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "27201:29:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "27201:36:104"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "27190:7:104",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "27250:10:104",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "27259:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "27254:1:104",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "27327:111:104",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "pos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "27356:3:104"
                                                  },
                                                  {
                                                    "name": "i",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "27361:1:104"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "27352:3:104"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "27352:11:104"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "27371:7:104"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "27365:5:104"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "27365:14:104"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "27345:6:104"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "27345:35:104"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "27345:35:104"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "27397:27:104",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "27412:7:104"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "27421:2:104"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "27408:3:104"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "27408:16:104"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "27397:7:104"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "27284:1:104"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "27287:6:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "27281:2:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "27281:13:104"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "27295:19:104",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "27297:15:104",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "27306:1:104"
                                              },
                                              {
                                                "name": "_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "27309:2:104"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "27302:3:104"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "27302:10:104"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "27297:1:104"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "27277:3:104",
                                      "statements": []
                                    },
                                    "src": "27273:165:104"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "27451:23:104",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "27462:3:104"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "27467:6:104"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "27458:3:104"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "27458:16:104"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "27451:3:104"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "27165:319:104",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27170:1:104",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "27025:18:104"
                          },
                          "nodeType": "YulSwitch",
                          "src": "27018:466:104"
                        }
                      ]
                    },
                    "name": "abi_encode_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "26552:5:104",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "26559:3:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "26567:3:104",
                        "type": ""
                      }
                    ],
                    "src": "26517:973:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27724:227:104",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27734:48:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "27770:6:104"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "27778:3:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string_storage",
                              "nodeType": "YulIdentifier",
                              "src": "27744:25:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27744:38:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "27738:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27791:27:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "27811:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "27805:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27805:13:104"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "27795:6:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27853:6:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27861:4:104",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27849:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27849:17:104"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "27868:2:104"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "27872:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "27827:21:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27827:52:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27827:52:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27888:57:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "27921:6:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27933:2:104"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "27937:6:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27929:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27929:15:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string_storage",
                              "nodeType": "YulIdentifier",
                              "src": "27895:25:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27895:50:104"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "27888:3:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "27684:3:104",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "27689:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "27697:6:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "27705:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "27716:3:104",
                        "type": ""
                      }
                    ],
                    "src": "27495:456:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28159:286:104",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "28169:29:104",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28187:3:104",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28192:1:104",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "28183:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28183:11:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28196:1:104",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "28179:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28179:19:104"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "28173:2:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28214:9:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "28229:6:104"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "28237:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "28225:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28225:15:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28207:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28207:34:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28207:34:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28261:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28272:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28257:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28257:18:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "28281:6:104"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "28289:2:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "28277:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28277:15:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28250:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28250:43:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28250:43:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28313:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28324:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28309:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28309:18:104"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "28329:6:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28302:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28302:34:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28302:34:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28356:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28367:2:104",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28352:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28352:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28372:3:104",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28345:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28345:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28345:31:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28385:54:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "28411:6:104"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28423:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28434:3:104",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28419:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28419:19:104"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "28393:17:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28393:46:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28385:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28104:9:104",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "28115:6:104",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "28123:6:104",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "28131:6:104",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "28139:6:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28150:4:104",
                        "type": ""
                      }
                    ],
                    "src": "27956:489:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28530:169:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "28576:16:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "28585:1:104",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "28588:1:104",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "28578:6:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "28578:12:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "28578:12:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "28551:7:104"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28560:9:104"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "28547:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28547:23:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28572:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "28543:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28543:32:104"
                          },
                          "nodeType": "YulIf",
                          "src": "28540:52:104"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "28601:29:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28620:9:104"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "28614:5:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28614:16:104"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "28605:5:104",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "28663:5:104"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "28639:23:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28639:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28639:30:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28678:15:104",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "28688:5:104"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "28678:6:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28496:9:104",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "28507:7:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "28519:6:104",
                        "type": ""
                      }
                    ],
                    "src": "28450:249:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28742:74:104",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "28765:22:104",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "28767:16:104"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "28767:18:104"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "28767:18:104"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "28762:1:104"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "28755:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28755:9:104"
                          },
                          "nodeType": "YulIf",
                          "src": "28752:35:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28796:14:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "28805:1:104"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "28808:1:104"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "28801:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28801:9:104"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "28796:1:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "28727:1:104",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "28730:1:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "28736:1:104",
                        "type": ""
                      }
                    ],
                    "src": "28704:112:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28995:178:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29012:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29023:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29005:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29005:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29005:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29046:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29057:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29042:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29042:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29062:2:104",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29035:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29035:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29035:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29085:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29096:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29081:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29081:18:104"
                              },
                              {
                                "hexValue": "4552433136353a20696e76616c696420696e74657266616365206964",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29101:30:104",
                                "type": "",
                                "value": "ERC165: invalid interface id"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29074:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29074:58:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29074:58:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29141:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29153:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29164:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29149:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29149:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29141:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_282912c0dfceceb28d77d0333f496b83948f9ba5b3154358a8b140b849289dee__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28972:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28986:4:104",
                        "type": ""
                      }
                    ],
                    "src": "28821:352:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29210:95:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29227:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29234:3:104",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29239:10:104",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "29230:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29230:20:104"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29220:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29220:31:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29220:31:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29267:1:104",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29270:4:104",
                                "type": "",
                                "value": "0x31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29260:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29260:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29260:15:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29291:1:104",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29294:4:104",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "29284:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29284:15:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29284:15:104"
                        }
                      ]
                    },
                    "name": "panic_error_0x31",
                    "nodeType": "YulFunctionDefinition",
                    "src": "29178:127:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29484:182:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29501:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29512:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29494:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29494:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29494:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29535:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29546:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29531:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29531:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29551:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29524:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29524:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29524:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29574:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29585:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29570:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29570:18:104"
                              },
                              {
                                "hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29590:34:104",
                                "type": "",
                                "value": "ERC721: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29563:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29563:62:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29563:62:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29634:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29646:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29657:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29642:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29642:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29634:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29461:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29475:4:104",
                        "type": ""
                      }
                    ],
                    "src": "29310:356:104"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29845:178:104",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29862:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29873:2:104",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29855:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29855:21:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29855:21:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29896:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29907:2:104",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29892:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29892:18:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29912:2:104",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29885:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29885:30:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29885:30:104"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29935:9:104"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29946:2:104",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29931:3:104"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29931:18:104"
                              },
                              {
                                "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29951:30:104",
                                "type": "",
                                "value": "ERC721: token already minted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29924:6:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29924:58:104"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29924:58:104"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29991:26:104",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30003:9:104"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30014:2:104",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29999:3:104"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29999:18:104"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29991:4:104"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29822:9:104",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29836:4:104",
                        "type": ""
                      }
                    ],
                    "src": "29671:352:104"
                  }
                ]
              },
              "contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_4080() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0160)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_uint256_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint256_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_struct$_TokenRoyaltyConfig_$35_memory_ptr__to_t_struct$_TokenRoyaltyConfig_$35_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), sub(shl(160, 1), 1)))\n        mstore(add(headStart, 0x40), and(mload(add(value0, 0x40)), 0xffff))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_array_address_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_uint256_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_address_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        array := allocate_memory(add(and(add(length, 31), not(31)), 0x20))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), src, length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_struct$_Config_$9052_memory_ptrt_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x0160) { revert(0, 0) }\n        let value := allocate_memory_4080()\n        let offset_1 := calldataload(_2)\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(value, abi_decode_string(add(_2, offset_1), dataEnd))\n        let offset_2 := calldataload(add(_2, 32))\n        if gt(offset_2, _1) { revert(0, 0) }\n        mstore(add(value, 32), abi_decode_string(add(_2, offset_2), dataEnd))\n        let offset_3 := calldataload(add(_2, 64))\n        if gt(offset_3, _1) { revert(0, 0) }\n        mstore(add(value, 64), abi_decode_string(add(_2, offset_3), dataEnd))\n        let offset_4 := calldataload(add(_2, 96))\n        if gt(offset_4, _1) { revert(0, 0) }\n        mstore(add(value, 96), abi_decode_string(add(_2, offset_4), dataEnd))\n        let offset_5 := calldataload(add(_2, 128))\n        if gt(offset_5, _1) { revert(0, 0) }\n        mstore(add(value, 128), abi_decode_string(add(_2, offset_5), dataEnd))\n        let offset_6 := calldataload(add(_2, 160))\n        if gt(offset_6, _1) { revert(0, 0) }\n        mstore(add(value, 160), abi_decode_array_address_dyn(add(_2, offset_6), dataEnd))\n        let offset_7 := calldataload(add(_2, 192))\n        if gt(offset_7, _1) { revert(0, 0) }\n        mstore(add(value, 192), abi_decode_array_uint256_dyn(add(_2, offset_7), dataEnd))\n        mstore(add(value, 224), calldataload(add(_2, 224)))\n        let _3 := 256\n        mstore(add(value, _3), abi_decode_address(add(_2, _3)))\n        let _4 := 288\n        mstore(add(value, _4), abi_decode_uint16(add(_2, _4)))\n        let _5 := 320\n        mstore(add(value, _5), abi_decode_address(add(_2, _5)))\n        value0 := value\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_struct$_TokenRoyaltyConfig_$35_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, mul(length, 0x60)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint16__to_t_address_t_uint16__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, 0xffff))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_struct$_Part_$15020_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Part_$15020_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            mstore(pos, and(mload(_3), sub(shl(160, 1), 1)))\n            mstore(add(pos, _1), and(mload(add(_3, _1)), sub(shl(96, 1), 1)))\n            pos := add(pos, _2)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_struct$_TokenRoyalty_$28_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := headStart\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: approved query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not ow\")\n        mstore(add(headStart, 96), \"ner nor approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"ERC721: transfer caller is not o\")\n        mstore(add(headStart, 96), \"wner nor approved\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_da1562f5b06cdbe3b7834c1499be3abf3945795ef1d9be227a4afb60ec9d2263__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"FROM_TO_LENGTH_MISMATCH\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a85d29b09685a306a376b5c084fbb5d595b4718ad9a9d03a4e83e73c8af5bed8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"FROM_TOKEN_LENGTH_MISMATCH\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8e422f8423f8fbfe2947b9ae08d4901c410485ed2cfc594249b8dfe3de24f405__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"ERC721/INVALID_INITIAL_ARGS\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_struct$_TokenRoyaltyConfig_$35_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 96)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, calldataload(headStart))\n        mstore(add(memPtr, 32), abi_decode_address(add(headStart, 32)))\n        mstore(add(memPtr, 64), abi_decode_uint16(add(headStart, 64)))\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: owner query for nonexist\")\n        mstore(add(headStart, 96), \"ent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7c78561e9c3b6dc2802172fb2041fc3504da930f63dfaf87b57359e924c17eb9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 6)\n        mstore(add(headStart, 64), \"FROZEN\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e34834cbfacaabcb36f3c81ca1a95e73bb2a5f2aadc5cfc24763773efc900660__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"LOWER_THAN_SUPPLY\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"ERC721: balance query for the ze\")\n        mstore(add(headStart, 96), \"ro address\")\n        tail := add(headStart, 128)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_decode_tuple_t_struct$_TokenRoyalty_$28_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, abi_decode_address(headStart))\n        mstore(add(memPtr, 32), abi_decode_uint16(add(headStart, 32)))\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"ERC721: operator query for nonex\")\n        mstore(add(headStart, 96), \"istent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_8cdecbb23ec02783743afd77310df6afab5a99f690f3465f9005641c64075aff__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"EXCEEDS_SUPPLY\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b241956482006da0262aee1fc6c67748f0e9540db02038beca23605c4807d33d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Invalid bps\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_uint16__to_t_uint256_t_address_t_uint16__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), and(value2, 0xffff))\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_string_storage(value, pos) -> ret\n    {\n        let slotValue := sload(value)\n        let length := 0\n        let _1 := 1\n        length := shr(_1, slotValue)\n        let outOfPlaceEncoding := and(slotValue, _1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        let _2 := 32\n        if eq(outOfPlaceEncoding, lt(length, _2))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n        switch outOfPlaceEncoding\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, length)\n        }\n        case 1 {\n            let dataPos := array_dataslot_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_storage_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        let _1 := abi_encode_string_storage(value0, pos)\n        let length := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), _1, length)\n        end := abi_encode_string_storage(value2, add(_1, length))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_282912c0dfceceb28d77d0333f496b83948f9ba5b3154358a8b140b849289dee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC165: invalid interface id\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n}",
              "id": 104,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106102405760003560e01c80637885fdc7116101375780637885fdc71461046f5780637e9803421461049d5780638da5cb5b146104a5578063938e3d7b146104ad578063948e2d53146104c057806395d89b41146104c857806399e0dd7c146104d0578063a22cb465146104e3578063a821d908146104f6578063a9852bfb14610503578063b88d4fde14610516578063ba4695fd14610529578063c0ac998314610531578063c29de63014610539578063c87b56dd14610546578063cad96cca14610559578063d5abeb0114610579578063da74222814610582578063dbbc853b14610595578063e8a3d4851461059d578063e985e9c5146105a5578063ef60ceaf146105b8578063f2fde38b146105cb578063f384702f146105de57600080fd5b806301ffc9a714610245578063059fb6f71461026d5780630653aca51461028257806306fdde03146102c4578063081812fc146102d9578063095ea7b3146102f9578063167446071461030c57806318160ddd1461031457806323b872dd146103265780632a55205a146103395780632fe388be1461036b5780633542aee21461037e5780633574a2dd1461039157806340c1d8a1146103a457806342842e0e146103b75780635136dcc7146103ca57806356c022bb146103dd578063572b6c05146103f05780635a9b0b89146104035780636352211e146104265780636f8b44b01461043957806370a082311461044c578063715018a61461045f5780637313cba914610467575b600080fd5b610258610253366004612b63565b6105eb565b60405190151581526020015b60405180910390f35b61028061027b366004612c94565b6105fc565b005b610295610290366004612cf1565b61069c565b60408051825181526020808401516001600160a01b0316908201529181015161ffff1690820152606001610264565b6102cc610721565b6040516102649190612d62565b6102ec6102e7366004612cf1565b610730565b6040516102649190612d75565b610280610307366004612d89565b6107bd565b6102806108e0565b6012545b604051908152602001610264565b610280610334366004612db3565b61092e565b61034c610347366004612def565b610966565b604080516001600160a01b039093168352602083019190915201610264565b610280610379366004612e73565b610a2b565b61028061038c366004612d89565b610b90565b61028061039f366004612f67565b610bdd565b6102806103b2366004612fad565b610c2f565b6102806103c5366004612db3565b610ddc565b6102806103d836600461314b565b610df7565b6002546102ec906001600160a01b031681565b6102586103fe3660046131bf565b610e91565b61040b610ea5565b60408051938452602084019290925290820152606001610264565b6102ec610434366004612cf1565b610fbe565b610280610447366004612cf1565b611035565b61031861045a3660046131bf565b6110e2565b610280611169565b6102cc6111b4565b60145461048f906001600160a01b03811690600160a01b900461ffff1682565b6040516102649291906131da565b610318611246565b6102ec611252565b6102806104bb366004612f67565b611267565b6102806112b9565b6102cc611307565b6102806104de366004612f67565b611311565b6102806104f13660046131f7565b611386565b6013546102589060ff1681565b610280610511366004612f67565b611398565b610280610524366004613233565b61140d565b610280611446565b6102cc611494565b600f546102589060ff1681565b6102cc610554366004612cf1565b6114a3565b61056c610567366004612cf1565b6114ae565b60405161026491906132ae565b61031860105481565b6102806105903660046131bf565b611569565b6102cc6115ca565b6102cc6115d9565b6102586105b336600461330f565b6115e8565b6102806105c6366004613339565b6115fb565b6102806105d93660046131bf565b611654565b6011546102589060ff1681565b60006105f682611736565b92915050565b60005b815181101561069657306001600160a01b03166323b872dd858585858151811061062b5761062b613351565b60200260200101516040518463ffffffff1660e01b815260040161065193929190613367565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b50505050808061068e906133a1565b9150506105ff565b50505050565b60408051606081018252600080825260208201819052918101829052906106c4601684611772565b6000818152601560209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b606061072b61177e565b905090565b600061073b8261178d565b6107a15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600760205260409020546001600160a01b031690565b60006107c882610fbe565b9050806001600160a01b0316836001600160a01b031614156108365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610798565b806001600160a01b03166108486117aa565b6001600160a01b031614806108645750610864816105b36117aa565b6108d15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610798565b6108db83836117b4565b505050565b6108e86117aa565b6001600160a01b03166108f9611252565b6001600160a01b03161461091f5760405162461bcd60e51b8152600401610798906133bc565b6011805460ff19166001179055565b61093f6109396117aa565b82611822565b61095b5760405162461bcd60e51b8152600401610798906133f1565b6108db8383836118ec565b60008281526015602052604081205481906001600160a01b0316156109cb576000848152601560205260409020546001600160a01b03811690612710906109b890600160a01b900461ffff1686613442565b6109c29190613477565b91509150610a24565b6014546001600160a01b0316158015906109f15750601454600160a01b900461ffff1615155b15610a1d576014546001600160a01b03811690612710906109b890600160a01b900461ffff1686613442565b5060009050805b9250929050565b8151835114610a765760405162461bcd60e51b815260206004820152601760248201527608ca49e9abea89ebe988a9c8ea890be9a92a69a82a8869604b1b6044820152606401610798565b8051835114610ac45760405162461bcd60e51b815260206004820152601a60248201527908ca49e9abea89e968a9cbe988a9c8ea890be9a92a69a82a886960331b6044820152606401610798565b60005b815181101561069657306001600160a01b03166323b872dd858381518110610af157610af1613351565b6020026020010151858481518110610b0b57610b0b613351565b6020026020010151858581518110610b2557610b25613351565b60200260200101516040518463ffffffff1660e01b8152600401610b4b93929190613367565b600060405180830381600087803b158015610b6557600080fd5b505af1158015610b79573d6000803e3d6000fd5b505050508080610b88906133a1565b915050610ac7565b610b986117aa565b6001600160a01b0316610ba9611252565b6001600160a01b031614610bcf5760405162461bcd60e51b8152600401610798906133bc565b610bd98282611a88565b5050565b610be56117aa565b6001600160a01b0316610bf6611252565b6001600160a01b031614610c1c5760405162461bcd60e51b8152600401610798906133bc565b8051610bd990600c906020840190612ab4565b6000610c3b6001611b11565b90508015610c53576000805461ff0019166101001790555b8260c00151518360a001515114610caa5760405162461bcd60e51b815260206004820152601b60248201527a4552433732312f494e56414c49445f494e495449414c5f4152475360281b6044820152606401610798565b610cb382611ba5565b610cca836000015184602001518560400151611c00565b610cdc83606001518460800151611c32565b610ce98360e00151611c63565b610cf1611c93565b610cf9611cc2565b610d0d836101000151846101200151611cf1565b610d1b836101400151611d22565b610d23611d52565b60e083015160105560005b8360a0015151811015610d9157610d7f8460a001518281518110610d5457610d54613351565b60200260200101518560c001518381518110610d7257610d72613351565b6020026020010151611a88565b80610d89816133a1565b915050610d2e565b5080156108db576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6108db8383836040518060200160405280600081525061140d565b610dff6117aa565b6001600160a01b0316610e10611252565b6001600160a01b031614610e365760405162461bcd60e51b8152600401610798906133bc565b610bd98282808060200260200160405190810160405280939291908181526020016000905b82821015610e8757610e786060830286013681900381019061348b565b81526020019060010190610e5b565b5050505050611d81565b6002546001600160a01b0391821691161490565b600080808080610eb36117aa565b6001600160a01b031614610f3e57306370a08231610ecf6117aa565b6040518263ffffffff1660e01b8152600401610eeb9190612d75565b60206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b91906134ef565b90505b601054306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7a57600080fd5b505afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb291906134ef565b90959094509092509050565b6000818152600560205260408120546001600160a01b0316806105f65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610798565b61103d6117aa565b6001600160a01b031661104e611252565b6001600160a01b0316146110745760405162461bcd60e51b8152600401610798906133bc565b60115460ff16156110975760405162461bcd60e51b815260040161079890613508565b6012548110156110dd5760405162461bcd60e51b81526020600482015260116024820152704c4f5745525f5448414e5f535550504c5960781b6044820152606401610798565b601055565b60006001600160a01b03821661114d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610798565b506001600160a01b031660009081526006602052604090205490565b6111716117aa565b6001600160a01b0316611182611252565b6001600160a01b0316146111a85760405162461bcd60e51b8152600401610798906133bc565b6111b26000611ba5565b565b6060600c80546111c390613528565b80601f01602080910402602001604051908101604052809291908181526020018280546111ef90613528565b801561123c5780601f106112115761010080835404028352916020019161123c565b820191906000526020600020905b81548152906001019060200180831161121f57829003601f168201915b5050505050905090565b600061072b6016611f28565b6000546201000090046001600160a01b031690565b61126f6117aa565b6001600160a01b0316611280611252565b6001600160a01b0316146112a65760405162461bcd60e51b8152600401610798906133bc565b8051610bd990600b906020840190612ab4565b6112c16117aa565b6001600160a01b03166112d2611252565b6001600160a01b0316146112f85760405162461bcd60e51b8152600401610798906133bc565b6013805460ff19166001179055565b606061072b611f32565b6113196117aa565b6001600160a01b031661132a611252565b6001600160a01b0316146113505760405162461bcd60e51b8152600401610798906133bc565b600f5460ff16156113735760405162461bcd60e51b815260040161079890613508565b8051610bd990600d906020840190612ab4565b610bd96113916117aa565b8383611f41565b6113a06117aa565b6001600160a01b03166113b1611252565b6001600160a01b0316146113d75760405162461bcd60e51b8152600401610798906133bc565b600f5460ff16156113fa5760405162461bcd60e51b815260040161079890613508565b8051610bd990600e906020840190612ab4565b61141e6114186117aa565b83611822565b61143a5760405162461bcd60e51b8152600401610798906133f1565b6106968484848461200c565b61144e6117aa565b6001600160a01b031661145f611252565b6001600160a01b0316146114855760405162461bcd60e51b8152600401610798906133bc565b600f805460ff19166001179055565b6060600d80546111c390613528565b60606105f68261203f565b604080516001808252818301909252606091816020015b60408051808201909152600080825260208201528152602001906001900390816114c557505060145481519192506001600160a01b031690829060009061150e5761150e613351565b60209081029190910101516001600160a01b039190911690526014548151600160a01b90910461ffff1690829060009061154a5761154a613351565b6020908102919091018101516001600160601b03909216910152919050565b6115716117aa565b6001600160a01b0316611582611252565b6001600160a01b0316146115a85760405162461bcd60e51b8152600401610798906133bc565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600e80546111c390613528565b6060600b80546111c390613528565b60006115f4838361211b565b9392505050565b6116036117aa565b6001600160a01b0316611614611252565b6001600160a01b03161461163a5760405162461bcd60e51b8152600401610798906133bc565b61165161164c3683900383018361355d565b61217f565b50565b61165c6117aa565b6001600160a01b031661166d611252565b6001600160a01b0316146116935760405162461bcd60e51b8152600401610798906133bc565b6001600160a01b0381166116f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610798565b61165181611ba5565b600061170c33610e91565b1561171e575060131936013560601c90565b503390565b3390565b6001600160a01b03163b151590565b60006301ffc9a760e01b6001600160e01b0319831614806105f65750506001600160e01b03191660009081526001602052604090205460ff1690565b60006115f4838361222a565b6060600980546111c390613528565b6000908152600560205260409020546001600160a01b0316151590565b600061072b611701565b600081815260076020526040902080546001600160a01b0319166001600160a01b03841690811790915581906117e982610fbe565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061182d8261178d565b61188e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610798565b600061189983610fbe565b9050806001600160a01b0316846001600160a01b031614806118c057506118c081856115e8565b806118e45750836001600160a01b03166118d984610730565b6001600160a01b0316145b949350505050565b826001600160a01b03166118ff82610fbe565b6001600160a01b0316146119635760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610798565b6001600160a01b0382166119c55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610798565b6119d06000826117b4565b6001600160a01b03831660009081526006602052604081208054600192906119f99084906135b7565b90915550506001600160a01b0382166000908152600660205260408120805460019290611a279084906135ce565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60105481611a9560125490565b611a9f91906135ce565b1115611ade5760405162461bcd60e51b815260206004820152600e60248201526d455843454544535f535550504c5960901b6044820152606401610798565b60005b818110156108db57601254611af68482612254565b611afe61226e565b5080611b09816133a1565b915050611ae1565b60008054610100900460ff1615611b5f578160ff166001148015611b3b5750611b3930611727565b155b611b575760405162461bcd60e51b8152600401610798906135e6565b506000919050565b60005460ff808416911610611b865760405162461bcd60e51b8152600401610798906135e6565b506000805460ff191660ff92909216919091179055600190565b919050565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600054610100900460ff16611c275760405162461bcd60e51b815260040161079890613634565b6108db838383612285565b600054610100900460ff16611c595760405162461bcd60e51b815260040161079890613634565b610bd98282612318565b600054610100900460ff16611c8a5760405162461bcd60e51b815260040161079890613634565b611651816123b4565b600054610100900460ff16611cba5760405162461bcd60e51b815260040161079890613634565b6111b2612400565b600054610100900460ff16611ce95760405162461bcd60e51b815260040161079890613634565b6111b2612437565b600054610100900460ff16611d185760405162461bcd60e51b815260040161079890613634565b610bd9828261246e565b600054610100900460ff16611d495760405162461bcd60e51b815260040161079890613634565b611651816124fe565b600054610100900460ff16611d795760405162461bcd60e51b815260040161079890613634565b6111b2612525565b60005b8151811015610bd9576000828281518110611da157611da1613351565b60200260200101519050612710816040015161ffff1610611dd45760405162461bcd60e51b81526004016107989061367f565b60208101516001600160a01b0316611e4d578051600090815260156020526040902080546001600160b01b03191690558051611e129060169061255c565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611f15565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152601590945294909220925183549451909216600160a01b026001600160b01b03199094169116179190911790558051611ebb90601690612568565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080611f20816133a1565b915050611d84565b60006105f6825490565b6060600a80546111c390613528565b816001600160a01b0316836001600160a01b03161415611f9f5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610798565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6120178484846118ec565b61202384848484612574565b6106965760405162461bcd60e51b8152600401610798906136a4565b60606000600d805461205090613528565b9050116120e757600c805461206490613528565b80601f016020809104026020016040519081016040528092919081815260200182805461209090613528565b80156120dd5780601f106120b2576101008083540402835291602001916120dd565b820191906000526020600020905b8154815290600101906020018083116120c057829003601f168201915b50505050506105f6565b600d6120f28361268f565b600e60405160200161210693929190613790565b60405160208183030381529060405292915050565b60135460009060ff1661215157612130611252565b6001600160a01b0316826001600160a01b03161415612151575060016105f6565b6001600160a01b0380841660009081526008602090815260408083209386168352929052205460ff166115f4565b612710816020015161ffff16106121a85760405162461bcd60e51b81526004016107989061367f565b60408051808201825282516001600160a01b03168082526020808501805161ffff1691909301819052601480546001600160b01b031916909217600160a01b9091021790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419261221f92916131da565b60405180910390a150565b600082600001828154811061224157612241613351565b9060005260206000200154905092915050565b610bd982826040518060200160405280600081525061278c565b6012805490600061227e836133a1565b9190505550565b600054610100900460ff166122ac5760405162461bcd60e51b815260040161079890613634565b82516122bf906009906020860190612ab4565b5081516122d390600a906020850190612ab4565b5080516122e790600b906020840190612ab4565b506122f8633d96f4ff60e11b6127bf565b6123086380ac58cd60e01b6127bf565b6108db635b5e139f60e01b6127bf565b600054610100900460ff1661233f5760405162461bcd60e51b815260040161079890613634565b815161235290600c906020850190612ab4565b50805161236690600d906020840190612ab4565b5060408051808201909152600580825264173539b7b760d91b602090920191825261239391600e91612ab4565b506123a4631f2f406b60e01b6127bf565b610bd9635b5e139f60e01b6127bf565b600054610100900460ff166123db5760405162461bcd60e51b815260040161079890613634565b60108190556123f06330f487b560e11b6127bf565b6116516380ac58cd60e01b6127bf565b600054610100900460ff166124275760405162461bcd60e51b815260040161079890613634565b6111b2631aa1577160e11b6127bf565b600054610100900460ff1661245e5760405162461bcd60e51b815260040161079890613634565b6111b263948e2d5360e01b6127bf565b600054610100900460ff166124955760405162461bcd60e51b815260040161079890613634565b6124a5633a47bf5160e11b6127bf565b6124b563152a902d60e11b6127bf565b6124c563c69dbd8f60e01b6127bf565b6124d563656cb66560e11b6127bf565b604080518082019091526001600160a01b038316815261ffff821660208201526108db8161217f565b600054610100900460ff166115a85760405162461bcd60e51b815260040161079890613634565b600054610100900460ff1661254c5760405162461bcd60e51b815260040161079890613634565b6111b2632a7c3e4960e01b6127bf565b60006115f48383612840565b60006115f48383612933565b6000612588846001600160a01b0316611727565b1561268457836001600160a01b031663150b7a026125a46117aa565b8786866040518563ffffffff1660e01b81526004016125c694939291906137c3565b602060405180830381600087803b1580156125e057600080fd5b505af1925050508015612610575060408051601f3d908101601f1916820190925261260d91810190613800565b60015b61266a573d80801561263e576040519150601f19603f3d011682016040523d82523d6000602084013e612643565b606091505b5080516126625760405162461bcd60e51b8152600401610798906136a4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506118e4565b506001949350505050565b6060816126b35750506040805180820190915260018152600360fc1b602082015290565b8160005b81156126dd57806126c7816133a1565b91506126d69050600a83613477565b91506126b7565b6000816001600160401b038111156126f7576126f7612b97565b6040519080825280601f01601f191660200182016040528015612721576020820181803683370190505b5090505b84156118e4576127366001836135b7565b9150612743600a8661381d565b61274e9060306135ce565b60f81b81838151811061276357612763613351565b60200101906001600160f81b031916908160001a905350612785600a86613477565b9450612725565b6127968383612982565b6127a36000848484612574565b6108db5760405162461bcd60e51b8152600401610798906136a4565b6001600160e01b031980821614156128185760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610798565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600081815260018301602052604081205480156129295760006128646001836135b7565b8554909150600090612878906001906135b7565b90508181146128dd57600086600001828154811061289857612898613351565b90600052602060002001549050808760000184815481106128bb576128bb613351565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128ee576128ee613831565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f6565b60009150506105f6565b600081815260018301602052604081205461297a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f6565b5060006105f6565b6001600160a01b0382166129d85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610798565b6129e18161178d565b15612a2d5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606401610798565b6001600160a01b0382166000908152600660205260408120805460019290612a569084906135ce565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612ac090613528565b90600052602060002090601f016020900481019282612ae25760008555612b28565b82601f10612afb57805160ff1916838001178555612b28565b82800160010185558215612b28579182015b82811115612b28578251825591602001919060010190612b0d565b50612b34929150612b38565b5090565b5b80821115612b345760008155600101612b39565b6001600160e01b03198116811461165157600080fd5b600060208284031215612b7557600080fd5b81356115f481612b4d565b80356001600160a01b0381168114611ba057600080fd5b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715612bd057612bd0612b97565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612bfe57612bfe612b97565b604052919050565b60006001600160401b03821115612c1f57612c1f612b97565b5060051b60200190565b600082601f830112612c3a57600080fd5b81356020612c4f612c4a83612c06565b612bd6565b82815260059290921b84018101918181019086841115612c6e57600080fd5b8286015b84811015612c895780358352918301918301612c72565b509695505050505050565b600080600060608486031215612ca957600080fd5b612cb284612b80565b9250612cc060208501612b80565b915060408401356001600160401b03811115612cdb57600080fd5b612ce786828701612c29565b9150509250925092565b600060208284031215612d0357600080fd5b5035919050565b60005b83811015612d25578181015183820152602001612d0d565b838111156106965750506000910152565b60008151808452612d4e816020860160208601612d0a565b601f01601f19169290920160200192915050565b6020815260006115f46020830184612d36565b6001600160a01b0391909116815260200190565b60008060408385031215612d9c57600080fd5b612da583612b80565b946020939093013593505050565b600080600060608486031215612dc857600080fd5b612dd184612b80565b9250612ddf60208501612b80565b9150604084013590509250925092565b60008060408385031215612e0257600080fd5b50508035926020909101359150565b600082601f830112612e2257600080fd5b81356020612e32612c4a83612c06565b82815260059290921b84018101918181019086841115612e5157600080fd5b8286015b84811015612c8957612e6681612b80565b8352918301918301612e55565b600080600060608486031215612e8857600080fd5b83356001600160401b0380821115612e9f57600080fd5b612eab87838801612e11565b94506020860135915080821115612ec157600080fd5b612ecd87838801612e11565b93506040860135915080821115612ee357600080fd5b50612ce786828701612c29565b60006001600160401b03831115612f0957612f09612b97565b612f1c601f8401601f1916602001612bd6565b9050828152838383011115612f3057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612f5857600080fd5b6115f483833560208501612ef0565b600060208284031215612f7957600080fd5b81356001600160401b03811115612f8f57600080fd5b6118e484828501612f47565b803561ffff81168114611ba057600080fd5b60008060408385031215612fc057600080fd5b82356001600160401b0380821115612fd757600080fd5b908401906101608287031215612fec57600080fd5b612ff4612bad565b82358281111561300357600080fd5b61300f88828601612f47565b82525060208301358281111561302457600080fd5b61303088828601612f47565b60208301525060408301358281111561304857600080fd5b61305488828601612f47565b60408301525060608301358281111561306c57600080fd5b61307888828601612f47565b60608301525060808301358281111561309057600080fd5b61309c88828601612f47565b60808301525060a0830135828111156130b457600080fd5b6130c088828601612e11565b60a08301525060c0830135828111156130d857600080fd5b6130e488828601612c29565b60c08301525060e083013560e08201526101009150613104828401612b80565b828201526101209150613118828401612f9b565b82820152610140915061312c828401612b80565b8282015280945050505061314260208401612b80565b90509250929050565b6000806020838503121561315e57600080fd5b82356001600160401b038082111561317557600080fd5b818501915085601f83011261318957600080fd5b81358181111561319857600080fd5b8660206060830285010111156131ad57600080fd5b60209290920196919550909350505050565b6000602082840312156131d157600080fd5b6115f482612b80565b6001600160a01b0392909216825261ffff16602082015260400190565b6000806040838503121561320a57600080fd5b61321383612b80565b91506020830135801515811461322857600080fd5b809150509250929050565b6000806000806080858703121561324957600080fd5b61325285612b80565b935061326060208601612b80565b92506040850135915060608501356001600160401b0381111561328257600080fd5b8501601f8101871361329357600080fd5b6132a287823560208401612ef0565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b8281101561330257815180516001600160a01b031685528601516001600160601b03168685015292840192908501906001016132cb565b5091979650505050505050565b6000806040838503121561332257600080fd5b61332b83612b80565b915061314260208401612b80565b60006040828403121561334b57600080fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156133b5576133b561338b565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600081600019048311821515161561345c5761345c61338b565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261348657613486613461565b500490565b60006060828403121561349d57600080fd5b604051606081018181106001600160401b03821117156134bf576134bf612b97565b604052823581526134d260208401612b80565b60208201526134e360408401612f9b565b60408201529392505050565b60006020828403121561350157600080fd5b5051919050565b602080825260069082015265232927ad22a760d11b604082015260600190565b600181811c9082168061353c57607f821691505b6020821081141561334b57634e487b7160e01b600052602260045260246000fd5b60006040828403121561356f57600080fd5b604051604081018181106001600160401b038211171561359157613591612b97565b60405261359d83612b80565b81526135ab60208401612f9b565b60208201529392505050565b6000828210156135c9576135c961338b565b500390565b600082198211156135e1576135e161338b565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600b908201526a496e76616c69642062707360a81b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8054600090600181811c908083168061371057607f831692505b602080841082141561373257634e487b7160e01b600052602260045260246000fd5b818015613746576001811461375757613784565b60ff19861689528489019650613784565b60008881526020902060005b8681101561377c5781548b820152908501908301613763565b505084890196505b50505050505092915050565b600061379c82866136f6565b84516137ac818360208901612d0a565b6137b8818301866136f6565b979650505050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906137f690830184612d36565b9695505050505050565b60006020828403121561381257600080fd5b81516115f481612b4d565b60008261382c5761382c613461565b500690565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220efb52db0061b2917949fb149880afb278cda4c643a9020cc9e72f677476df35c64736f6c63430008090033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x240 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7885FDC7 GT PUSH2 0x137 JUMPI DUP1 PUSH4 0x7885FDC7 EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0x7E980342 EQ PUSH2 0x49D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4A5 JUMPI DUP1 PUSH4 0x938E3D7B EQ PUSH2 0x4AD JUMPI DUP1 PUSH4 0x948E2D53 EQ PUSH2 0x4C0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0x99E0DD7C EQ PUSH2 0x4D0 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x4E3 JUMPI DUP1 PUSH4 0xA821D908 EQ PUSH2 0x4F6 JUMPI DUP1 PUSH4 0xA9852BFB EQ PUSH2 0x503 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x516 JUMPI DUP1 PUSH4 0xBA4695FD EQ PUSH2 0x529 JUMPI DUP1 PUSH4 0xC0AC9983 EQ PUSH2 0x531 JUMPI DUP1 PUSH4 0xC29DE630 EQ PUSH2 0x539 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0xCAD96CCA EQ PUSH2 0x559 JUMPI DUP1 PUSH4 0xD5ABEB01 EQ PUSH2 0x579 JUMPI DUP1 PUSH4 0xDA742228 EQ PUSH2 0x582 JUMPI DUP1 PUSH4 0xDBBC853B EQ PUSH2 0x595 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x59D JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x5A5 JUMPI DUP1 PUSH4 0xEF60CEAF EQ PUSH2 0x5B8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5CB JUMPI DUP1 PUSH4 0xF384702F EQ PUSH2 0x5DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x59FB6F7 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0x653ACA5 EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2F9 JUMPI DUP1 PUSH4 0x16744607 EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x326 JUMPI DUP1 PUSH4 0x2A55205A EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0x2FE388BE EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x3542AEE2 EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x3574A2DD EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x40C1D8A1 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0x5136DCC7 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x56C022BB EQ PUSH2 0x3DD JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0x5A9B0B89 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x426 JUMPI DUP1 PUSH4 0x6F8B44B0 EQ PUSH2 0x439 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0x7313CBA9 EQ PUSH2 0x467 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x258 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B63 JUMP JUMPDEST PUSH2 0x5EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x280 PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x2C94 JUMP JUMPDEST PUSH2 0x5FC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x295 PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 ADD MSTORE SWAP2 DUP2 ADD MLOAD PUSH2 0xFFFF AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x264 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x721 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP2 SWAP1 PUSH2 0x2D62 JUMP JUMPDEST PUSH2 0x2EC PUSH2 0x2E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0x730 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP2 SWAP1 PUSH2 0x2D75 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x307 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D89 JUMP JUMPDEST PUSH2 0x7BD JUMP JUMPDEST PUSH2 0x280 PUSH2 0x8E0 JUMP JUMPDEST PUSH1 0x12 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x264 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x334 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB3 JUMP JUMPDEST PUSH2 0x92E JUMP JUMPDEST PUSH2 0x34C PUSH2 0x347 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DEF JUMP JUMPDEST PUSH2 0x966 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x264 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x379 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E73 JUMP JUMPDEST PUSH2 0xA2B JUMP JUMPDEST PUSH2 0x280 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x2D89 JUMP JUMPDEST PUSH2 0xB90 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x2F67 JUMP JUMPDEST PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x280 PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FAD JUMP JUMPDEST PUSH2 0xC2F JUMP JUMPDEST PUSH2 0x280 PUSH2 0x3C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB3 JUMP JUMPDEST PUSH2 0xDDC JUMP JUMPDEST PUSH2 0x280 PUSH2 0x3D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x314B JUMP JUMPDEST PUSH2 0xDF7 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x2EC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x3FE CALLDATASIZE PUSH1 0x4 PUSH2 0x31BF JUMP JUMPDEST PUSH2 0xE91 JUMP JUMPDEST PUSH2 0x40B PUSH2 0xEA5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x264 JUMP JUMPDEST PUSH2 0x2EC PUSH2 0x434 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0xFBE JUMP JUMPDEST PUSH2 0x280 PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0x1035 JUMP JUMPDEST PUSH2 0x318 PUSH2 0x45A CALLDATASIZE PUSH1 0x4 PUSH2 0x31BF JUMP JUMPDEST PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x1169 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x11B4 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH2 0x48F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP3 SWAP2 SWAP1 PUSH2 0x31DA JUMP JUMPDEST PUSH2 0x318 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x2EC PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x4BB CALLDATASIZE PUSH1 0x4 PUSH2 0x2F67 JUMP JUMPDEST PUSH2 0x1267 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x12B9 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x1307 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x4DE CALLDATASIZE PUSH1 0x4 PUSH2 0x2F67 JUMP JUMPDEST PUSH2 0x1311 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x4F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x31F7 JUMP JUMPDEST PUSH2 0x1386 JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH2 0x258 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x511 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F67 JUMP JUMPDEST PUSH2 0x1398 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x524 CALLDATASIZE PUSH1 0x4 PUSH2 0x3233 JUMP JUMPDEST PUSH2 0x140D JUMP JUMPDEST PUSH2 0x280 PUSH2 0x1446 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x1494 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH2 0x258 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x554 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0x14A3 JUMP JUMPDEST PUSH2 0x56C PUSH2 0x567 CALLDATASIZE PUSH1 0x4 PUSH2 0x2CF1 JUMP JUMPDEST PUSH2 0x14AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP2 SWAP1 PUSH2 0x32AE JUMP JUMPDEST PUSH2 0x318 PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x590 CALLDATASIZE PUSH1 0x4 PUSH2 0x31BF JUMP JUMPDEST PUSH2 0x1569 JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x15CA JUMP JUMPDEST PUSH2 0x2CC PUSH2 0x15D9 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x5B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x330F JUMP JUMPDEST PUSH2 0x15E8 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x5C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3339 JUMP JUMPDEST PUSH2 0x15FB JUMP JUMPDEST PUSH2 0x280 PUSH2 0x5D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x31BF JUMP JUMPDEST PUSH2 0x1654 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH2 0x258 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP3 PUSH2 0x1736 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x696 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD DUP6 DUP6 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x62B JUMPI PUSH2 0x62B PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x651 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3367 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x67F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0x68E SWAP1 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5FF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH2 0x6C4 PUSH1 0x16 DUP5 PUSH2 0x1772 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD DUP1 DUP5 ADD DUP5 MSTORE SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND DUP4 MSTORE PUSH2 0xFFFF PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV DUP3 AND DUP4 DUP6 ADD SWAP1 DUP2 MSTORE DUP6 MLOAD PUSH1 0x60 DUP2 ADD DUP8 MSTORE SWAP7 DUP8 MSTORE SWAP3 MLOAD AND SWAP3 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE MLOAD AND SWAP1 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x72B PUSH2 0x177E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x73B DUP3 PUSH2 0x178D JUMP JUMPDEST PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76656420717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C8 DUP3 PUSH2 0xFBE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x836 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x848 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x864 JUMPI POP PUSH2 0x864 DUP2 PUSH2 0x5B3 PUSH2 0x17AA JUMP JUMPDEST PUSH2 0x8D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F74206F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH24 0x1B995C881B9BDC88185C1C1C9BDD995908199BDC88185B1B PUSH1 0x42 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0x8DB DUP4 DUP4 PUSH2 0x17B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x8E8 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8F9 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x91F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x11 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x93F PUSH2 0x939 PUSH2 0x17AA JUMP JUMPDEST DUP3 PUSH2 0x1822 JUMP JUMPDEST PUSH2 0x95B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x8DB DUP4 DUP4 DUP4 PUSH2 0x18EC JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x9CB JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x9B8 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP7 PUSH2 0x3442 JUMP JUMPDEST PUSH2 0x9C2 SWAP2 SWAP1 PUSH2 0x3477 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xA24 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x9F1 JUMPI POP PUSH1 0x14 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xA1D JUMPI PUSH1 0x14 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x9B8 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH2 0xFFFF AND DUP7 PUSH2 0x3442 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP DUP1 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xA76 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x8CA49E9ABEA89EBE988A9C8EA890BE9A92A69A82A8869 PUSH1 0x4B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST DUP1 MLOAD DUP4 MLOAD EQ PUSH2 0xAC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH26 0x8CA49E9ABEA89E968A9CBE988A9C8EA890BE9A92A69A82A8869 PUSH1 0x33 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x696 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAF1 JUMPI PUSH2 0xAF1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xB0B JUMPI PUSH2 0xB0B PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB25 JUMPI PUSH2 0xB25 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB4B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3367 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0xB88 SWAP1 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAC7 JUMP JUMPDEST PUSH2 0xB98 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBA9 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xBCF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH2 0xBD9 DUP3 DUP3 PUSH2 0x1A88 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xBE5 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBF6 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST DUP1 MLOAD PUSH2 0xBD9 SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC3B PUSH1 0x1 PUSH2 0x1B11 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xC53 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST DUP3 PUSH1 0xC0 ADD MLOAD MLOAD DUP4 PUSH1 0xA0 ADD MLOAD MLOAD EQ PUSH2 0xCAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH27 0x4552433732312F494E56414C49445F494E495449414C5F41524753 PUSH1 0x28 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0xCB3 DUP3 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0xCCA DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x1C00 JUMP JUMPDEST PUSH2 0xCDC DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x1C32 JUMP JUMPDEST PUSH2 0xCE9 DUP4 PUSH1 0xE0 ADD MLOAD PUSH2 0x1C63 JUMP JUMPDEST PUSH2 0xCF1 PUSH2 0x1C93 JUMP JUMPDEST PUSH2 0xCF9 PUSH2 0x1CC2 JUMP JUMPDEST PUSH2 0xD0D DUP4 PUSH2 0x100 ADD MLOAD DUP5 PUSH2 0x120 ADD MLOAD PUSH2 0x1CF1 JUMP JUMPDEST PUSH2 0xD1B DUP4 PUSH2 0x140 ADD MLOAD PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0xD23 PUSH2 0x1D52 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0x10 SSTORE PUSH1 0x0 JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xD91 JUMPI PUSH2 0xD7F DUP5 PUSH1 0xA0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD54 JUMPI PUSH2 0xD54 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0xC0 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD72 JUMPI PUSH2 0xD72 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1A88 JUMP JUMPDEST DUP1 PUSH2 0xD89 DUP2 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD2E JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x8DB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x8DB DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x140D JUMP JUMPDEST PUSH2 0xDFF PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE10 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH2 0xBD9 DUP3 DUP3 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0xE87 JUMPI PUSH2 0xE78 PUSH1 0x60 DUP4 MUL DUP7 ADD CALLDATASIZE DUP2 SWAP1 SUB DUP2 ADD SWAP1 PUSH2 0x348B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xE5B JUMP JUMPDEST POP POP POP POP POP PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 PUSH2 0xEB3 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xF3E JUMPI ADDRESS PUSH4 0x70A08231 PUSH2 0xECF PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEEB SWAP2 SWAP1 PUSH2 0x2D75 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF17 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF3B SWAP2 SWAP1 PUSH2 0x34EF JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x10 SLOAD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF8E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFB2 SWAP2 SWAP1 PUSH2 0x34EF JUMP JUMPDEST SWAP1 SWAP6 SWAP1 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x5F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F776E657220717565727920666F72206E6F6E6578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x32B73A103A37B5B2B7 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0x103D PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x104E PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1074 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1097 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3508 JUMP JUMPDEST PUSH1 0x12 SLOAD DUP2 LT ISZERO PUSH2 0x10DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x4C4F5745525F5448414E5F535550504C59 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x10 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x114D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2062616C616E636520717565727920666F7220746865207A65 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x726F2061646472657373 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1171 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1182 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x11A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH2 0x11B2 PUSH1 0x0 PUSH2 0x1BA5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0xC DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x11EF SWAP1 PUSH2 0x3528 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x123C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1211 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x123C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x121F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x72B PUSH1 0x16 PUSH2 0x1F28 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x126F PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1280 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x12A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST DUP1 MLOAD PUSH2 0xBD9 SWAP1 PUSH1 0xB SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST PUSH2 0x12C1 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x12D2 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x12F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x13 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x72B PUSH2 0x1F32 JUMP JUMPDEST PUSH2 0x1319 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x132A PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1350 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1373 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3508 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xBD9 SWAP1 PUSH1 0xD SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST PUSH2 0xBD9 PUSH2 0x1391 PUSH2 0x17AA JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1F41 JUMP JUMPDEST PUSH2 0x13A0 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x13B1 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x13D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x13FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3508 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xBD9 SWAP1 PUSH1 0xE SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST PUSH2 0x141E PUSH2 0x1418 PUSH2 0x17AA JUMP JUMPDEST DUP4 PUSH2 0x1822 JUMP JUMPDEST PUSH2 0x143A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33F1 JUMP JUMPDEST PUSH2 0x696 DUP5 DUP5 DUP5 DUP5 PUSH2 0x200C JUMP JUMPDEST PUSH2 0x144E PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x145F PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1485 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0xF DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0xD DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5F6 DUP3 PUSH2 0x203F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x14C5 JUMPI POP POP PUSH1 0x14 SLOAD DUP2 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x150E JUMPI PUSH2 0x150E PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 MSTORE PUSH1 0x14 SLOAD DUP2 MLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH2 0xFFFF AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x154A JUMPI PUSH2 0x154A PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB SWAP1 SWAP3 AND SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1571 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1582 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x15A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0xE DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F4 DUP4 DUP4 PUSH2 0x211B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1603 PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1614 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x163A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH2 0x1651 PUSH2 0x164C CALLDATASIZE DUP4 SWAP1 SUB DUP4 ADD DUP4 PUSH2 0x355D JUMP JUMPDEST PUSH2 0x217F JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x165C PUSH2 0x17AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x166D PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1693 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x33BC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x16F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0x1651 DUP2 PUSH2 0x1BA5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x170C CALLER PUSH2 0xE91 JUMP JUMPDEST ISZERO PUSH2 0x171E JUMPI POP PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ DUP1 PUSH2 0x5F6 JUMPI POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F4 DUP4 DUP4 PUSH2 0x222A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x72B PUSH2 0x1701 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x17E9 DUP3 PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x182D DUP3 PUSH2 0x178D JUMP JUMPDEST PUSH2 0x188E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206F70657261746F7220717565727920666F72206E6F6E6578 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x34B9BA32B73A103A37B5B2B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1899 DUP4 PUSH2 0xFBE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x18C0 JUMPI POP PUSH2 0x18C0 DUP2 DUP6 PUSH2 0x15E8 JUMP JUMPDEST DUP1 PUSH2 0x18E4 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18D9 DUP5 PUSH2 0x730 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x18FF DUP3 PUSH2 0xFBE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1963 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x19C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0x19D0 PUSH1 0x0 DUP3 PUSH2 0x17B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x19F9 SWAP1 DUP5 SWAP1 PUSH2 0x35B7 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1A27 SWAP1 DUP5 SWAP1 PUSH2 0x35CE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP5 SWAP4 SWAP2 DUP8 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 PUSH2 0x1A95 PUSH1 0x12 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1A9F SWAP2 SWAP1 PUSH2 0x35CE JUMP JUMPDEST GT ISZERO PUSH2 0x1ADE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x455843454544535F535550504C59 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8DB JUMPI PUSH1 0x12 SLOAD PUSH2 0x1AF6 DUP5 DUP3 PUSH2 0x2254 JUMP JUMPDEST PUSH2 0x1AFE PUSH2 0x226E JUMP JUMPDEST POP DUP1 PUSH2 0x1B09 DUP2 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1B5F JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x1B3B JUMPI POP PUSH2 0x1B39 ADDRESS PUSH2 0x1727 JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0x1B57 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x35E6 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0x1B86 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x35E6 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH3 0x10000 DUP2 DUP2 MUL PUSH3 0x10000 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT DUP6 AND OR DUP6 SSTORE PUSH1 0x40 MLOAD SWAP4 DIV SWAP2 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C27 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x8DB DUP4 DUP4 DUP4 PUSH2 0x2285 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0xBD9 DUP3 DUP3 PUSH2 0x2318 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1C8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x1651 DUP2 PUSH2 0x23B4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1CBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH2 0x2400 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1CE9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH2 0x2437 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0xBD9 DUP3 DUP3 PUSH2 0x246E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D49 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x1651 DUP2 PUSH2 0x24FE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1D79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH2 0x2525 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xBD9 JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DA1 JUMPI PUSH2 0x1DA1 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x2710 DUP2 PUSH1 0x40 ADD MLOAD PUSH2 0xFFFF AND LT PUSH2 0x1DD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x367F JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1E4D JUMPI DUP1 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND SWAP1 SSTORE DUP1 MLOAD PUSH2 0x1E12 SWAP1 PUSH1 0x16 SWAP1 PUSH2 0x255C JUMP JUMPDEST POP DUP1 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xA2870857763BD9AE76C957F869F16B31C18DD3BB4C7B4D3A4496DC5C57C657F9 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x1F15 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE DUP5 DUP5 ADD MLOAD PUSH2 0xFFFF SWAP1 DUP2 AND DUP4 DUP6 ADD SWAP1 DUP2 MSTORE DUP7 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x15 SWAP1 SWAP5 MSTORE SWAP5 SWAP1 SWAP3 KECCAK256 SWAP3 MLOAD DUP4 SLOAD SWAP5 MLOAD SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT SWAP1 SWAP5 AND SWAP2 AND OR SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 MLOAD PUSH2 0x1EBB SWAP1 PUSH1 0x16 SWAP1 PUSH2 0x2568 JUMP JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 DUP1 DUP6 ADD MLOAD DUP2 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0xFFFF AND DUP3 DUP3 ADD MSTORE MLOAD PUSH32 0x389B70FB0887F01E83784EB1C4C589F740ECA53B00ED0F45E41DB5D079719ABB SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 JUMPDEST POP DUP1 PUSH2 0x1F20 DUP2 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1D84 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA DUP1 SLOAD PUSH2 0x11C3 SWAP1 PUSH2 0x3528 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1F9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x22A9219B99189D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x39 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x2017 DUP5 DUP5 DUP5 PUSH2 0x18EC JUMP JUMPDEST PUSH2 0x2023 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2574 JUMP JUMPDEST PUSH2 0x696 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x36A4 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0xD DUP1 SLOAD PUSH2 0x2050 SWAP1 PUSH2 0x3528 JUMP JUMPDEST SWAP1 POP GT PUSH2 0x20E7 JUMPI PUSH1 0xC DUP1 SLOAD PUSH2 0x2064 SWAP1 PUSH2 0x3528 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2090 SWAP1 PUSH2 0x3528 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x20DD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x20B2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x20DD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20C0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0xD PUSH2 0x20F2 DUP4 PUSH2 0x268F JUMP JUMPDEST PUSH1 0xE PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2106 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3790 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND PUSH2 0x2151 JUMPI PUSH2 0x2130 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x2151 JUMPI POP PUSH1 0x1 PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x15F4 JUMP JUMPDEST PUSH2 0x2710 DUP2 PUSH1 0x20 ADD MLOAD PUSH2 0xFFFF AND LT PUSH2 0x21A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x367F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 MLOAD PUSH2 0xFFFF AND SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x14 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT AND SWAP1 SWAP3 OR PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 MUL OR SWAP1 SSTORE DUP3 MLOAD SWAP1 MLOAD SWAP2 MLOAD PUSH32 0x2C5EA6E4103E78CB101E796FB2DACE540362FC542CBFF5145EAA24AF7DD8FE41 SWAP3 PUSH2 0x221F SWAP3 SWAP2 PUSH2 0x31DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2241 JUMPI PUSH2 0x2241 PUSH2 0x3351 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBD9 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x278C JUMP JUMPDEST PUSH1 0x12 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x227E DUP4 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x22BF SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST POP DUP2 MLOAD PUSH2 0x22D3 SWAP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x22E7 SWAP1 PUSH1 0xB SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST POP PUSH2 0x22F8 PUSH4 0x3D96F4FF PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x2308 PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x8DB PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x233F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x2352 SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x2366 SWAP1 PUSH1 0xD SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x2AB4 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP1 DUP3 MSTORE PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH2 0x2393 SWAP2 PUSH1 0xE SWAP2 PUSH2 0x2AB4 JUMP JUMPDEST POP PUSH2 0x23A4 PUSH4 0x1F2F406B PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0xBD9 PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH1 0x10 DUP2 SWAP1 SSTORE PUSH2 0x23F0 PUSH4 0x30F487B5 PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x1651 PUSH4 0x80AC58CD PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2427 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH4 0x1AA15771 PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x245E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH4 0x948E2D53 PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2495 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x24A5 PUSH4 0x3A47BF51 PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x24B5 PUSH4 0x152A902D PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x24C5 PUSH4 0xC69DBD8F PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH2 0x24D5 PUSH4 0x656CB665 PUSH1 0xE1 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH2 0xFFFF DUP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x8DB DUP2 PUSH2 0x217F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x15A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x254C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x3634 JUMP JUMPDEST PUSH2 0x11B2 PUSH4 0x2A7C3E49 PUSH1 0xE0 SHL PUSH2 0x27BF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F4 DUP4 DUP4 PUSH2 0x2840 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15F4 DUP4 DUP4 PUSH2 0x2933 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2588 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1727 JUMP JUMPDEST ISZERO PUSH2 0x2684 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x150B7A02 PUSH2 0x25A4 PUSH2 0x17AA JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25C6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x37C3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2610 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x260D SWAP2 DUP2 ADD SWAP1 PUSH2 0x3800 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x266A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x263E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2643 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0x2662 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x36A4 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x18E4 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0x26B3 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x26DD JUMPI DUP1 PUSH2 0x26C7 DUP2 PUSH2 0x33A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x26D6 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x3477 JUMP JUMPDEST SWAP2 POP PUSH2 0x26B7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x26F7 JUMPI PUSH2 0x26F7 PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2721 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST DUP5 ISZERO PUSH2 0x18E4 JUMPI PUSH2 0x2736 PUSH1 0x1 DUP4 PUSH2 0x35B7 JUMP JUMPDEST SWAP2 POP PUSH2 0x2743 PUSH1 0xA DUP7 PUSH2 0x381D JUMP JUMPDEST PUSH2 0x274E SWAP1 PUSH1 0x30 PUSH2 0x35CE JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2763 JUMPI PUSH2 0x2763 PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x2785 PUSH1 0xA DUP7 PUSH2 0x3477 JUMP JUMPDEST SWAP5 POP PUSH2 0x2725 JUMP JUMPDEST PUSH2 0x2796 DUP4 DUP4 PUSH2 0x2982 JUMP JUMPDEST PUSH2 0x27A3 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x2574 JUMP JUMPDEST PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x798 SWAP1 PUSH2 0x36A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x2818 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH28 0x115490CC4D8D4E881A5B9D985B1A59081A5B9D195C999858D9481A59 PUSH1 0x22 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x2929 JUMPI PUSH1 0x0 PUSH2 0x2864 PUSH1 0x1 DUP4 PUSH2 0x35B7 JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2878 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x35B7 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x28DD JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2898 JUMPI PUSH2 0x2898 PUSH2 0x3351 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x28BB JUMPI PUSH2 0x28BB PUSH2 0x3351 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x28EE JUMPI PUSH2 0x28EE PUSH2 0x3831 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x297A JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x5F6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x5F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x29D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH2 0x29E1 DUP2 PUSH2 0x178D JUMP JUMPDEST ISZERO PUSH2 0x2A2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH28 0x115490CDCC8C4E881D1BDAD95B88185B1C9958591E481B5A5B9D1959 PUSH1 0x22 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x798 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x2A56 SWAP1 DUP5 SWAP1 PUSH2 0x35CE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x2AC0 SWAP1 PUSH2 0x3528 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x2AE2 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2B28 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x2AFB JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2B28 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2B28 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2B28 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2B0D JUMP JUMPDEST POP PUSH2 0x2B34 SWAP3 SWAP2 POP PUSH2 0x2B38 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2B34 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2B39 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x15F4 DUP2 PUSH2 0x2B4D JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1BA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2BD0 JUMPI PUSH2 0x2BD0 PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2BFE JUMPI PUSH2 0x2BFE PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x2C1F JUMPI PUSH2 0x2C1F PUSH2 0x2B97 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2C4F PUSH2 0x2C4A DUP4 PUSH2 0x2C06 JUMP JUMPDEST PUSH2 0x2BD6 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x2C6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2C89 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2C72 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2CA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2CB2 DUP5 PUSH2 0x2B80 JUMP JUMPDEST SWAP3 POP PUSH2 0x2CC0 PUSH1 0x20 DUP6 ADD PUSH2 0x2B80 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2CDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2CE7 DUP7 DUP3 DUP8 ADD PUSH2 0x2C29 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2D25 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2D0D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x696 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2D4E DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2D0A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x15F4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2D36 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DA5 DUP4 PUSH2 0x2B80 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2DC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DD1 DUP5 PUSH2 0x2B80 JUMP JUMPDEST SWAP3 POP PUSH2 0x2DDF PUSH1 0x20 DUP6 ADD PUSH2 0x2B80 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x2E32 PUSH2 0x2C4A DUP4 PUSH2 0x2C06 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x2E51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x2C89 JUMPI PUSH2 0x2E66 DUP2 PUSH2 0x2B80 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x2E55 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2E88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2E9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2EAB DUP8 DUP4 DUP9 ADD PUSH2 0x2E11 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2EC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2ECD DUP8 DUP4 DUP9 ADD PUSH2 0x2E11 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2EE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE7 DUP7 DUP3 DUP8 ADD PUSH2 0x2C29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT ISZERO PUSH2 0x2F09 JUMPI PUSH2 0x2F09 PUSH2 0x2B97 JUMP JUMPDEST PUSH2 0x2F1C PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2BD6 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x2F30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2F58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15F4 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x2EF0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2F8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18E4 DUP5 DUP3 DUP6 ADD PUSH2 0x2F47 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x1BA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2FD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH2 0x160 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x2FEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2FF4 PUSH2 0x2BAD JUMP JUMPDEST DUP3 CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x3003 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x300F DUP9 DUP3 DUP7 ADD PUSH2 0x2F47 JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x3024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3030 DUP9 DUP3 DUP7 ADD PUSH2 0x2F47 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x3048 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3054 DUP9 DUP3 DUP7 ADD PUSH2 0x2F47 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x306C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3078 DUP9 DUP3 DUP7 ADD PUSH2 0x2F47 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x3090 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x309C DUP9 DUP3 DUP7 ADD PUSH2 0x2F47 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x30B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30C0 DUP9 DUP3 DUP7 ADD PUSH2 0x2E11 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x30D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30E4 DUP9 DUP3 DUP7 ADD PUSH2 0x2C29 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 DUP4 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 SWAP2 POP PUSH2 0x3104 DUP3 DUP5 ADD PUSH2 0x2B80 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH2 0x120 SWAP2 POP PUSH2 0x3118 DUP3 DUP5 ADD PUSH2 0x2F9B JUMP JUMPDEST DUP3 DUP3 ADD MSTORE PUSH2 0x140 SWAP2 POP PUSH2 0x312C DUP3 DUP5 ADD PUSH2 0x2B80 JUMP JUMPDEST DUP3 DUP3 ADD MSTORE DUP1 SWAP5 POP POP POP POP PUSH2 0x3142 PUSH1 0x20 DUP5 ADD PUSH2 0x2B80 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x315E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 PUSH1 0x60 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x31AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x31D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15F4 DUP3 PUSH2 0x2B80 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH2 0xFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x320A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3213 DUP4 PUSH2 0x2B80 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3252 DUP6 PUSH2 0x2B80 JUMP JUMPDEST SWAP4 POP PUSH2 0x3260 PUSH1 0x20 DUP7 ADD PUSH2 0x2B80 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x3293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x32A2 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2EF0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3302 JUMPI DUP2 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP7 DUP6 ADD MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x32CB JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x332B DUP4 PUSH2 0x2B80 JUMP JUMPDEST SWAP2 POP PUSH2 0x3142 PUSH1 0x20 DUP5 ADD PUSH2 0x2B80 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x334B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x33B5 JUMPI PUSH2 0x33B5 PUSH2 0x338B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722063616C6C6572206973206E6F74206F PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x1DDB995C881B9BDC88185C1C1C9BDD9959 PUSH1 0x7A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x345C JUMPI PUSH2 0x345C PUSH2 0x338B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3486 JUMPI PUSH2 0x3486 PUSH2 0x3461 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x349D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x34BF JUMPI PUSH2 0x34BF PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 CALLDATALOAD DUP2 MSTORE PUSH2 0x34D2 PUSH1 0x20 DUP5 ADD PUSH2 0x2B80 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x34E3 PUSH1 0x40 DUP5 ADD PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3501 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x6 SWAP1 DUP3 ADD MSTORE PUSH6 0x232927AD22A7 PUSH1 0xD1 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x353C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x334B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x356F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x3591 JUMPI PUSH2 0x3591 PUSH2 0x2B97 JUMP JUMPDEST PUSH1 0x40 MSTORE PUSH2 0x359D DUP4 PUSH2 0x2B80 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x35AB PUSH1 0x20 DUP5 ADD PUSH2 0x2F9B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x35C9 JUMPI PUSH2 0x35C9 PUSH2 0x338B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x35E1 JUMPI PUSH2 0x35E1 PUSH2 0x338B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x496E76616C696420627073 PUSH1 0xA8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND DUP1 PUSH2 0x3710 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x3732 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x3746 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x3757 JUMPI PUSH2 0x3784 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP10 MSTORE DUP5 DUP10 ADD SWAP7 POP PUSH2 0x3784 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x377C JUMPI DUP2 SLOAD DUP12 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP4 ADD PUSH2 0x3763 JUMP JUMPDEST POP POP DUP5 DUP10 ADD SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x379C DUP3 DUP7 PUSH2 0x36F6 JUMP JUMPDEST DUP5 MLOAD PUSH2 0x37AC DUP2 DUP4 PUSH1 0x20 DUP10 ADD PUSH2 0x2D0A JUMP JUMPDEST PUSH2 0x37B8 DUP2 DUP4 ADD DUP7 PUSH2 0x36F6 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x37F6 SWAP1 DUP4 ADD DUP5 PUSH2 0x2D36 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3812 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15F4 DUP2 PUSH2 0x2B4D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x382C JUMPI PUSH2 0x382C PUSH2 0x3461 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0xB5 0x2D 0xB0 MOD SHL 0x29 OR SWAP5 SWAP16 0xB1 0x49 DUP9 EXP 0xFB 0x27 DUP13 0xDA 0x4C PUSH5 0x3A9020CC9E PUSH19 0xF677476DF35C64736F6C634300080900330000 ",
          "sourceMap": "640:4227:49:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3741:483;;;;;;:::i;:::-;;:::i;:::-;;;565:14:104;;558:22;540:41;;528:2;513:18;3741:483:49;;;;;;;;1477:269:34;;;;;;:::i;:::-;;:::i;:::-;;2719:310:1;;;;;;:::i;:::-;;:::i;:::-;;;;3215:13:104;;3197:32;;3289:4;3277:17;;;3271:24;-1:-1:-1;;;;;3267:50:104;3245:20;;;3238:80;3366:17;;;3360:24;3386:6;3356:37;3334:20;;;3327:67;3185:2;3170:18;2719:310:1;2983:417:104;3042:204:49;;;:::i;:::-;;;;;;;:::i;4000:217:13:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3538:401::-;;;;;;:::i;:::-;;:::i;1781:85:33:-;;;:::i;1890:92::-;1960:15;;1890:92;;;4769:25:104;;;4757:2;4742:18;1890:92:33;4623:177:104;4727:330:13;;;;;;:::i;:::-;;:::i;3106:483:1:-;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;5583:32:104;;;5565:51;;5647:2;5632:18;;5625:34;;;;5538:18;3106:483:1;5391:274:104;1843:443:34;;;;;;:::i;:::-;;:::i;977:102:40:-;;;;;;:::i;:::-;;:::i;2360:113:43:-;;;;;;:::i;:::-;;:::i;1480:1138:49:-;;;;;;:::i;:::-;;:::i;5123:179:13:-;;;;;;:::i;:::-;;:::i;2269:230:47:-;;;;;;:::i;:::-;;:::i;362:32:71:-;;;;;-1:-1:-1;;;;;362:32:71;;;900:172;;;;;;:::i;:::-;;:::i;4484:381:49:-;;;:::i;:::-;;;;11423:25:104;;;11479:2;11464:18;;11457:34;;;;11507:18;;;11500:34;11411:2;11396:18;4484:381:49;11221:319:104;2191:235:13;;;;;;:::i;:::-;;:::i;1515:260:33:-;;;;;;:::i;:::-;;:::i;1929:205:13:-;;;;;;:::i;:::-;;:::i;1668:101:5:-;;;:::i;3144::43:-;;;:::i;491:34:1:-;;;;;-1:-1:-1;;;;;491:34:1;;;-1:-1:-1;;;491:34:1;;;;;;;;;;;;;;:::i;2504:127::-;;;:::i;1036:85:5:-;;;:::i;1786:107:35:-;;;;;;:::i;:::-;;:::i;1066:98:39:-;;;:::i;3252:208:49:-;;;:::i;2479:157:43:-;;;;;;:::i;:::-;;:::i;4284:153:13:-;;;;;;:::i;:::-;;:::i;676:34:39:-;;;;;;;;;2642:157:43;;;;;;:::i;:::-;;:::i;5368:320:13:-;;;;;;:::i;:::-;;:::i;2805:83:43:-;;;:::i;3251:101::-;;;:::i;1567:26::-;;;;;;;;;4230:248:49;;;;;;:::i;:::-;;:::i;2719:386:47:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;905:24:33:-;;;;;;769:125:71;;;;;;:::i;:::-;;:::i;3358:101:43:-;;;:::i;2361:95:35:-;;;:::i;3466:269:49:-;;;;;;:::i;:::-;;:::i;2505:208:47:-;;;;;;:::i;:::-;;:::i;1918:198:5:-;;;;;;:::i;:::-;;:::i;935:27:33:-;;;;;;;;;3741:483:49;4146:4;4173:44;4205:11;4173:31;:44::i;:::-;4166:51;3741:483;-1:-1:-1;;3741:483:49:o;1477:269:34:-;1616:9;1611:129;1635:8;:15;1631:1;:19;1611:129;;;1687:4;-1:-1:-1;;;;;1671:35:34;;1707:4;1713:2;1717:8;1726:1;1717:11;;;;;;;;:::i;:::-;;;;;;;1671:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1652:3;;;;;:::i;:::-;;;;1611:129;;;;1477:269;;;:::o;2719:310:1:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;2852:30:1;:20;2876:5;2852:23;:30::i;:::-;2892:27;2922:24;;;:15;:24;;;;;;;;;2892:54;;;;;;;;;-1:-1:-1;;;;;2892:54:1;;;;;;-1:-1:-1;;;2892:54:1;;;;;;;;;;;2963:59;;;;;;;;;;2991:17;;2963:59;;;;;;;;3010:11;2963:59;;;;;;2719:310;-1:-1:-1;;;2719:310:1:o;3042:204:49:-;3163:13;3199:40;:38;:40::i;:::-;3192:47;;3042:204;:::o;4000:217:13:-;4076:7;4103:16;4111:7;4103;:16::i;:::-;4095:73;;;;-1:-1:-1;;;4095:73:13;;15151:2:104;4095:73:13;;;15133:21:104;15190:2;15170:18;;;15163:30;15229:34;15209:18;;;15202:62;-1:-1:-1;;;15280:18:104;;;15273:42;15332:19;;4095:73:13;;;;;;;;;-1:-1:-1;4186:24:13;;;;:15;:24;;;;;;-1:-1:-1;;;;;4186:24:13;;4000:217::o;3538:401::-;3618:13;3634:23;3649:7;3634:14;:23::i;:::-;3618:39;;3681:5;-1:-1:-1;;;;;3675:11:13;:2;-1:-1:-1;;;;;3675:11:13;;;3667:57;;;;-1:-1:-1;;;3667:57:13;;15564:2:104;3667:57:13;;;15546:21:104;15603:2;15583:18;;;15576:30;15642:34;15622:18;;;15615:62;-1:-1:-1;;;15693:18:104;;;15686:31;15734:19;;3667:57:13;15362:397:104;3667:57:13;3772:5;-1:-1:-1;;;;;3756:21:13;:12;:10;:12::i;:::-;-1:-1:-1;;;;;3756:21:13;;:62;;;;3781:37;3798:5;3805:12;:10;:12::i;3781:37::-;3735:165;;;;-1:-1:-1;;;3735:165:13;;15966:2:104;3735:165:13;;;15948:21:104;16005:2;15985:18;;;15978:30;16044:34;16024:18;;;16017:62;-1:-1:-1;;;16095:18:104;;;16088:54;16159:19;;3735:165:13;15764:420:104;3735:165:13;3911:21;3920:2;3924:7;3911:8;:21::i;:::-;3608:331;3538:401;;:::o;1781:85:33:-;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;1837:15:33::1;:22:::0;;-1:-1:-1;;1837:22:33::1;1855:4;1837:22;::::0;;1781:85::o;4727:330:13:-;4916:41;4935:12;:10;:12::i;:::-;4949:7;4916:18;:41::i;:::-;4908:103;;;;-1:-1:-1;;;4908:103:13;;;;;;;:::i;:::-;5022:28;5032:4;5038:2;5042:7;5022:9;:28::i;3106:483:1:-;3189:7;3221:24;;;:15;:24;;;;;:34;3189:7;;-1:-1:-1;;;;;3221:34:1;:48;3217:164;;3293:24;;;;:15;:24;;;;;:34;-1:-1:-1;;;;;3293:34:1;;;3364:5;;3329:34;;-1:-1:-1;;;3335:28:1;;;;3329:5;:34;:::i;:::-;:40;;;;:::i;:::-;3285:85;;;;;;3217:164;3394:14;:24;-1:-1:-1;;;;;3394:24:1;:38;;;;:65;;-1:-1:-1;3436:14:1;:18;-1:-1:-1;;;3436:18:1;;;;:23;;3394:65;3390:161;;;3483:14;:24;-1:-1:-1;;;;;3483:24:1;;;3534:5;;3509:24;;-1:-1:-1;;;3515:18:1;;;;3509:5;:24;:::i;3390:161::-;-1:-1:-1;3576:1:1;;-1:-1:-1;3576:1:1;3106:483;;;;;;:::o;1843:443:34:-;2018:2;:9;2003:4;:11;:24;1995:60;;;;-1:-1:-1;;;1995:60:34;;17600:2:104;1995:60:34;;;17582:21:104;17639:2;17619:18;;;17612:30;-1:-1:-1;;;17658:18:104;;;17651:53;17721:18;;1995:60:34;17398:347:104;1995:60:34;2088:8;:15;2073:4;:11;:30;2065:69;;;;-1:-1:-1;;;2065:69:34;;17952:2:104;2065:69:34;;;17934:21:104;17991:2;17971:18;;;17964:30;-1:-1:-1;;;18010:18:104;;;18003:56;18076:18;;2065:69:34;17750:350:104;2065:69:34;2150:9;2145:135;2169:8;:15;2165:1;:19;2145:135;;;2221:4;-1:-1:-1;;;;;2205:35:34;;2241:4;2246:1;2241:7;;;;;;;;:::i;:::-;;;;;;;2250:2;2253:1;2250:5;;;;;;;;:::i;:::-;;;;;;;2257:8;2266:1;2257:11;;;;;;;;:::i;:::-;;;;;;;2205:64;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2186:3;;;;;:::i;:::-;;;;2145:135;;977:102:40;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;1054:18:40::1;1062:2;1066:5;1054:7;:18::i;:::-;977:102:::0;;:::o;2360:113:43:-;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;2440:26:43;;::::1;::::0;:15:::1;::::0;:26:::1;::::0;::::1;::::0;::::1;:::i;1480:1138:49:-:0;3100:19:6;3122:25;3145:1;3122:22;:25::i;:::-;3100:47;;3161:14;3157:65;;;3191:13;:20;;-1:-1:-1;;3191:20:6;;;;;3157:65;1642:6:49::1;:21;;;:28;1610:6;:21;;;:28;:60;1589:134;;;::::0;-1:-1:-1;;;1589:134:49;;18307:2:104;1589:134:49::1;::::0;::::1;18289:21:104::0;18346:2;18326:18;;;18319:30;-1:-1:-1;;;18365:18:104;;;18358:57;18432:18;;1589:134:49::1;18105:351:104::0;1589:134:49::1;1734:28;1753:8;1734:18;:28::i;:::-;1773:134;1827:6;:11;;;1852:6;:13;;;1879:6;:18;;;1773:40;:134::i;:::-;1917:118;1969:6;:21;;;2004:6;:21;;;1917:38;:118::i;:::-;2045:52;2080:6;:16;;;2045:34;:52::i;:::-;2107:33;:31;:33::i;:::-;2150:36;:34;:36::i;:::-;2196:119;2239:6;:28;;;2281:6;:24;;;2196:29;:119::i;:::-;2325:53;2354:6;:23;;;2325:28;:53::i;:::-;2388:31;:29;:31::i;:::-;2442:16;::::0;::::1;::::0;2430:9:::1;:28:::0;2474:9:::1;2469:143;2493:6;:21;;;:28;2489:1;:32;2469:143;;;2542:59;2550:6;:21;;;2572:1;2550:24;;;;;;;;:::i;:::-;;;;;;;2576:6;:21;;;2598:1;2576:24;;;;;;;;:::i;:::-;;;;;;;2542:7;:59::i;:::-;2523:3:::0;::::1;::::0;::::1;:::i;:::-;;;;2469:143;;;;3246:14:6::0;3242:99;;;3292:5;3276:21;;-1:-1:-1;;3276:21:6;;;3316:14;;-1:-1:-1;18613:36:104;;3316:14:6;;18601:2:104;18586:18;3316:14:6;;;;;;;3090:257;1480:1138:49;;:::o;5123:179:13:-;5256:39;5273:4;5279:2;5283:7;5256:39;;;;;;;;;;;;:16;:39::i;2269:230:47:-;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;2458:34:47::1;2477:14;;2458:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;::::1;;::::0;;::::1;::::0;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;:18;:34::i;900:172:71:-:0;1048:17;;-1:-1:-1;;;;;1035:30:71;;;1048:17;;1035:30;;900:172::o;4484:381:49:-;4563:18;;;;;4710:12;:10;:12::i;:::-;-1:-1:-1;;;;;4710:26:49;;4706:95;;4762:4;:14;4777:12;:10;:12::i;:::-;4762:28;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4752:38;;4706:95;4819:9;;4830:4;-1:-1:-1;;;;;4830:16:49;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4811:47;;;;-1:-1:-1;4850:7:49;;-1:-1:-1;4484:381:49;-1:-1:-1;4484:381:49:o;2191:235:13:-;2263:7;2298:16;;;:7;:16;;;;;;-1:-1:-1;;;;;2298:16:13;2332:19;2324:73;;;;-1:-1:-1;;;2324:73:13;;19646:2:104;2324:73:13;;;19628:21:104;19685:2;19665:18;;;19658:30;19724:34;19704:18;;;19697:62;-1:-1:-1;;;19775:18:104;;;19768:39;19824:19;;2324:73:13;19444:405:104;1515:260:33;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;1647:15:33::1;::::0;::::1;;1646:16;1638:35;;;;-1:-1:-1::0;;;1638:35:33::1;;;;;;;:::i;:::-;1960:15:::0;;1691:8:::1;:25;;1683:55;;;::::0;-1:-1:-1;;;1683:55:33;;20390:2:104;1683:55:33::1;::::0;::::1;20372:21:104::0;20429:2;20409:18;;;20402:30;-1:-1:-1;;;20448:18:104;;;20441:47;20505:18;;1683:55:33::1;20188:341:104::0;1683:55:33::1;1748:9;:20:::0;1515:260::o;1929:205:13:-;2001:7;-1:-1:-1;;;;;2028:19:13;;2020:74;;;;-1:-1:-1;;;2020:74:13;;20736:2:104;2020:74:13;;;20718:21:104;20775:2;20755:18;;;20748:30;20814:34;20794:18;;;20787:62;-1:-1:-1;;;20865:18:104;;;20858:40;20915:19;;2020:74:13;20534:406:104;2020:74:13;-1:-1:-1;;;;;;2111:16:13;;;;;:9;:16;;;;;;;1929:205::o;1668:101:5:-;1259:12;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;3144::43:-;3191:13;3223:15;3216:22;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3144:101;:::o;2504:127:1:-;2569:7;2595:29;:20;:27;:29::i;1036:85:5:-;1082:7;1108:6;;;;-1:-1:-1;;;;;1108:6:5;;1036:85::o;1786:107:35:-;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;1863:23:35;;::::1;::::0;:12:::1;::::0;:23:::1;::::0;::::1;::::0;::::1;:::i;1066:98:39:-:0;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;1128:22:39::1;:29:::0;;-1:-1:-1;;1128:29:39::1;1153:4;1128:29;::::0;;1066:98::o;3252:208:49:-;3375:13;3411:42;:40;:42::i;2479:157:43:-;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;2568:14:43::1;::::0;::::1;;2567:15;2559:34;;;;-1:-1:-1::0;;;2559:34:43::1;;;;;;;:::i;:::-;2603:26:::0;;::::1;::::0;:15:::1;::::0;:26:::1;::::0;::::1;::::0;::::1;:::i;4284:153:13:-:0;4378:52;4397:12;:10;:12::i;:::-;4411:8;4421;4378:18;:52::i;2642:157:43:-;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;2731:14:43::1;::::0;::::1;;2730:15;2722:34;;;;-1:-1:-1::0;;;2722:34:43::1;;;;;;;:::i;:::-;2766:26:::0;;::::1;::::0;:15:::1;::::0;:26:::1;::::0;::::1;::::0;::::1;:::i;5368:320:13:-:0;5537:41;5556:12;:10;:12::i;:::-;5570:7;5537:18;:41::i;:::-;5529:103;;;;-1:-1:-1;;;5529:103:13;;;;;;;:::i;:::-;5642:39;5656:4;5662:2;5666:7;5675:5;5642:13;:39::i;2805:83:43:-;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;2860:14:43::1;:21:::0;;-1:-1:-1;;2860:21:43::1;2877:4;2860:21;::::0;;2805:83::o;3251:101::-;3298:13;3330:15;3323:22;;;;;:::i;4230:248:49:-;4385:13;4421:50;4462:8;4421:40;:50::i;2719:386:47:-;2916:21;;;2935:1;2916:21;;;;;;;;;2863:28;;2916:21;;;;-1:-1:-1;;;;;;;;;;;;;;;;;2916:21:47;;;;;;;;;;;;-1:-1:-1;;2976:14:47;:24;2948:9;;;;-1:-1:-1;;;;;;2976:24:47;;2948:9;;2976:24;;2948:9;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;2948:53:47;;;;;;3029:14;:18;3011:9;;-1:-1:-1;;;3029:18:47;;;;;;3011:9;;2948:17;;3011:9;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;3011:36:47;;;:15;;:36;2719:386;;-1:-1:-1;2719:386:47:o;769:125:71:-;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;851:17:71::1;:36:::0;;-1:-1:-1;;;;;;851:36:71::1;-1:-1:-1::0;;;;;851:36:71;;;::::1;::::0;;;::::1;::::0;;769:125::o;3358:101:43:-;3405:13;3437:15;3430:22;;;;;:::i;2361:95:35:-;2405:13;2437:12;2430:19;;;;;:::i;3466:269:49:-;3640:4;3667:61;3712:5;3719:8;3667:44;:61::i;:::-;3660:68;3466:269;-1:-1:-1;;;3466:269:49:o;2505:208:47:-;1259:12:5;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;2679:27:47::1;;;::::0;;::::1;::::0;::::1;2698:7:::0;2679:27:::1;:::i;:::-;:18;:27::i;:::-;2505:208:::0;:::o;1918:198:5:-;1259:12;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:5;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:5;;1240:68;;;;-1:-1:-1;;;1240:68:5;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:5;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:5;;22055:2:104;1998:73:5::1;::::0;::::1;22037:21:104::0;22094:2;22074:18;;;22067:30;22133:34;22113:18;;;22106:62;-1:-1:-1;;;22184:18:104;;;22177:36;22230:19;;1998:73:5::1;21853:402:104::0;1998:73:5::1;2081:28;2100:8;2081:18;:28::i;1078:445:71:-:0;1180:14;1214:30;1233:10;1214:18;:30::i;:::-;1210:307;;;-1:-1:-1;;;1416:14:71;1412:23;1399:37;1395:2;1391:46;1078:445;:::o;1210:307::-;-1:-1:-1;719:10:21;;3042:204:49:o;640:96:21:-;719:10;;640:96::o;1175:320:20:-;-1:-1:-1;;;;;1465:19:20;;:23;;;1175:320::o;596:188:28:-;681:4;-1:-1:-1;;;;;;;;;937:40:27;;;704:73:28;;;-1:-1:-1;;;;;;;;744:33:28;;;;;:20;:33;;;;;;;;;596:188::o;11264:135:32:-;11335:7;11369:22;11373:3;11385:5;11369:3;:22::i;2149:98:35:-;2203:13;2235:5;2228:12;;;;;:::i;7160:125:13:-;7225:4;7248:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7248:16:13;:30;;;7160:125::o;2624:196:49:-;2758:14;2795:18;:16;:18::i;11169:171:13:-;11243:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;11243:29:13;-1:-1:-1;;;;;11243:29:13;;;;;;;;:24;;11296:23;11243:24;11296:14;:23::i;:::-;-1:-1:-1;;;;;11287:46:13;;;;;;;;;;;11169:171;;:::o;7443:344::-;7536:4;7560:16;7568:7;7560;:16::i;:::-;7552:73;;;;-1:-1:-1;;;7552:73:13;;22462:2:104;7552:73:13;;;22444:21:104;22501:2;22481:18;;;22474:30;22540:34;22520:18;;;22513:62;-1:-1:-1;;;22591:18:104;;;22584:42;22643:19;;7552:73:13;22260:408:104;7552:73:13;7635:13;7651:23;7666:7;7651:14;:23::i;:::-;7635:39;;7703:5;-1:-1:-1;;;;;7692:16:13;:7;-1:-1:-1;;;;;7692:16:13;;:52;;;;7712:32;7729:5;7736:7;7712:16;:32::i;:::-;7692:87;;;;7772:7;-1:-1:-1;;;;;7748:31:13;:20;7760:7;7748:11;:20::i;:::-;-1:-1:-1;;;;;7748:31:13;;7692:87;7684:96;7443:344;-1:-1:-1;;;;7443:344:13:o;10453:605::-;10607:4;-1:-1:-1;;;;;10580:31:13;:23;10595:7;10580:14;:23::i;:::-;-1:-1:-1;;;;;10580:31:13;;10572:81;;;;-1:-1:-1;;;10572:81:13;;22875:2:104;10572:81:13;;;22857:21:104;22914:2;22894:18;;;22887:30;22953:34;22933:18;;;22926:62;-1:-1:-1;;;23004:18:104;;;22997:35;23049:19;;10572:81:13;22673:401:104;10572:81:13;-1:-1:-1;;;;;10671:16:13;;10663:65;;;;-1:-1:-1;;;10663:65:13;;23281:2:104;10663:65:13;;;23263:21:104;23320:2;23300:18;;;23293:30;23359:34;23339:18;;;23332:62;-1:-1:-1;;;23410:18:104;;;23403:34;23454:19;;10663:65:13;23079:400:104;10663:65:13;10840:29;10857:1;10861:7;10840:8;:29::i;:::-;-1:-1:-1;;;;;10880:15:13;;;;;;:9;:15;;;;;:20;;10899:1;;10880:15;:20;;10899:1;;10880:20;:::i;:::-;;;;-1:-1:-1;;;;;;;10910:13:13;;;;;;:9;:13;;;;;:18;;10927:1;;10910:13;:18;;10927:1;;10910:18;:::i;:::-;;;;-1:-1:-1;;10938:16:13;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;10938:21:13;-1:-1:-1;;;;;10938:21:13;;;;;;;;;10975:27;;10938:16;;10975:27;;;;;;;3608:331;3538:401;;:::o;2008:310:33:-;2104:9;;2095:5;2079:13;1960:15;;;1890:92;2079:13;:21;;;;:::i;:::-;:34;;2071:61;;;;-1:-1:-1;;;2071:61:33;;23949:2:104;2071:61:33;;;23931:21:104;23988:2;23968:18;;;23961:30;-1:-1:-1;;;24007:18:104;;;24000:44;24061:18;;2071:61:33;23747:338:104;2071:61:33;2148:9;2143:169;2167:5;2163:1;:9;2143:169;;;2214:15;;2243:25;2253:2;2214:15;2243:9;:25::i;:::-;2282:19;:17;:19::i;:::-;-1:-1:-1;2174:3:33;;;;:::i;:::-;;;;2143:169;;5276:797:6;5340:4;5673:13;;;;;;;5669:398;;;5727:7;:12;;5738:1;5727:12;:50;;;;;5744:33;5771:4;5744:18;:33::i;:::-;5743:34;5727:50;5702:155;;;;-1:-1:-1;;;5702:155:6;;;;;;;:::i;:::-;-1:-1:-1;5878:5:6;;5276:797;-1:-1:-1;5276:797:6:o;5669:398::-;5922:12;;:22;;;;:12;;:22;5914:81;;;;-1:-1:-1;;;5914:81:6;;;;;;;:::i;:::-;-1:-1:-1;6009:12:6;:22;;-1:-1:-1;;6009:22:6;;;;;;;;;;;;-1:-1:-1;;5276:797:6:o;5669:398::-;5276:797;;;:::o;2270:187:5:-;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:5;;;2362:6;2378:17;;;-1:-1:-1;;;;;;2378:17:5;;;;;2410:40;;2362:6;;;;;;;2378:17;;2362:6;;2410:40;;;2333:124;2270:187;:::o;931:321:35:-;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1119:126:35::1;1183:5;1202:7;1223:12;1119:50;:126::i;1600:291:43:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1768:116:43::1;1830:15;1859;1768:48;:116::i;1012:183:33:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1132:56:33::1;1177:10;1132:44;:56::i;640:129:40:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;719:43:40::1;:41;:43::i;717:135:39:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;799:46:39::1;:44;:46::i;1383:278:47:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1538:116:47::1;1591:22;1627:17;1538:39;:116::i;401:183:71:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;521:56:71::1;560:16;521:38;:56::i;758:125:34:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;835:41:34::1;:39;:41::i;1106:866:1:-:0;1202:6;1197:769;1218:14;:21;1214:1;:25;1197:769;;;1260:39;1302:14;1317:1;1302:17;;;;;;;;:::i;:::-;;;;;;;1260:59;;1361:5;1341:13;:17;;;:25;;;1333:49;;;;-1:-1:-1;;;1333:49:1;;;;;;;:::i;:::-;1400:23;;;;-1:-1:-1;;;;;1400:37:1;1396:560;;1480:21;;1464:38;;;;:15;:38;;;;;1457:45;;-1:-1:-1;;;;;;1457:45:1;;;1548:21;;1520:50;;:20;;:27;:50::i;:::-;-1:-1:-1;1613:21:1;;1593:42;;4769:25:104;;;1593:42:1;;4757:2:104;4742:18;1593:42:1;;;;;;;1396:560;;;1715:56;;;;;;;;1728:23;;;;;-1:-1:-1;;;;;1715:56:1;;;;;1753:17;;;;1715:56;;;;;;;;;;1690:21;;-1:-1:-1;1674:38:1;;;:15;:38;;;;;;;:97;;;;;;;;;-1:-1:-1;;;1674:97:1;-1:-1:-1;;;;;;1674:97:1;;;;;;;;;;;;1814:21;;1789:47;;:20;;:24;:47::i;:::-;-1:-1:-1;1875:21:1;;1898:23;;;;;1923:17;;;;;1859:82;;25457:25:104;;;-1:-1:-1;;;;;25518:32:104;;;25498:18;;;25491:60;;;;25599:6;25587:19;25567:18;;;25560:47;1859:82:1;;;;;;25445:2:104;1859:82:1;;;1396:560;-1:-1:-1;1241:3:1;;;;:::i;:::-;;;;1197:769;;10810:112:32;10870:7;10896:19;10904:3;4043:18;;3961:107;2253:102:35;2309:13;2341:7;2334:14;;;;;:::i;11475:307:13:-;11625:8;-1:-1:-1;;;;;11616:17:13;:5;-1:-1:-1;;;;;11616:17:13;;;11608:55;;;;-1:-1:-1;;;11608:55:13;;25820:2:104;11608:55:13;;;25802:21:104;25859:2;25839:18;;;25832:30;-1:-1:-1;;;25878:18:104;;;25871:55;25943:18;;11608:55:13;25618:349:104;11608:55:13;-1:-1:-1;;;;;11673:25:13;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;11673:46:13;;;;;;;;;;11734:41;;540::104;;;11734::13;;513:18:104;11734:41:13;;;;;;;11475:307;;;:::o;6550:::-;6701:28;6711:4;6717:2;6721:7;6701:9;:28::i;:::-;6747:48;6770:4;6776:2;6780:7;6789:5;6747:22;:48::i;:::-;6739:111;;;;-1:-1:-1;;;6739:111:13;;;;;;;:::i;3465:515:43:-;3621:13;3701:1;3675:15;3669:29;;;;;:::i;:::-;;;:33;:304;;3958:15;3669:304;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3791:15;3832:26;3849:8;3832:16;:26::i;:::-;3884:15;3749:172;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3650:323;3465:515;-1:-1:-1;;3465:515:43:o;1272:356:39:-;1442:22;;1417:4;;1442:22;;1437:128;;1496:13;:11;:13::i;:::-;-1:-1:-1;;;;;1484:25:39;:8;-1:-1:-1;;;;;1484:25:39;;1480:75;;;-1:-1:-1;1536:4:39;1529:11;;1480:75;-1:-1:-1;;;;;4623:25:13;;;4600:4;4623:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;1582:39:39;4503:162:13;2155:261:1;2253:5;2239:7;:11;;;:19;;;2231:43;;;;-1:-1:-1;;;2231:43:1;;;;;;;:::i;:::-;2301:44;;;;;;;;2314:17;;-1:-1:-1;;;;;2301:44:1;;;;;2333:11;;;;;2301:44;;;;;;;;;2284:14;:61;;-1:-1:-1;;;;;;2284:61:1;;;;-1:-1:-1;;;2284:61:1;;;;;;2378:17;;2397:11;;2360:49;;;;;;2378:17;2360:49;:::i;:::-;;;;;;;;2155:261;:::o;4410:118:32:-;4477:7;4503:3;:11;;4515:5;4503:18;;;;;;;;:::i;:::-;;;;;;;;;4496:25;;4410:118;;;;:::o;8117:108:13:-;8192:26;8202:2;8206:7;8192:26;;;;;;;;;;;;:9;:26::i;2387:72:33:-;2435:15;:17;;;:15;:17;;;:::i;:::-;;;;;;2387:72::o;1258:505:35:-;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1456:13:35;;::::1;::::0;:5:::1;::::0;:13:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;1479:17:35;;::::1;::::0;:7:::1;::::0;:17:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;1506:27:35;;::::1;::::0;:12:::1;::::0;:27:::1;::::0;::::1;::::0;::::1;:::i;:::-;;1544:94;-1:-1:-1::0;;;1544:18:35::1;:94::i;:::-;1648:45;-1:-1:-1::0;;;1648:18:35::1;:45::i;:::-;1703:53;-1:-1:-1::0;;;1703:18:35::1;:53::i;1897:440:43:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;2075:33:43;;::::1;::::0;:15:::1;::::0;:33:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2118:33:43;;::::1;::::0;:15:::1;::::0;:33:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2161:25:43::1;::::0;;;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;;;2161:25:43::1;::::0;;::::1;::::0;;;::::1;::::0;:15:::1;::::0;:25:::1;:::i;:::-;;2197:70;-1:-1:-1::0;;;2197:18:43::1;:70::i;:::-;2277:53;-1:-1:-1::0;;;2277:18:43::1;:53::i;1201:291:33:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1331:9:33::1;:22:::0;;;1364:66:::1;-1:-1:-1::0;;;1364:18:33::1;:66::i;:::-;1440:45;-1:-1:-1::0;;;1440:18:33::1;:45::i;775:179:40:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;884:63:40::1;-1:-1:-1::0;;;884:18:40::1;:63::i;858:185:39:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;970:66:39::1;-1:-1:-1::0;;;970:18:39::1;:66::i;1667:596:47:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;1832:61:47::1;-1:-1:-1::0;;;1832:18:47::1;:61::i;:::-;1903:46;-1:-1:-1::0;;;1903:18:47::1;:46::i;:::-;1959:61;-1:-1:-1::0;;;1959:18:47::1;:61::i;:::-;2030:58;-1:-1:-1::0;;;2030:18:47::1;:58::i;:::-;2129:89;::::0;;;;::::1;::::0;;;-1:-1:-1;;;;;2129:89:47;::::1;::::0;;::::1;::::0;::::1;;::::0;::::1;::::0;2229:27:::1;2129:89:::0;2229:18:::1;:27::i;590:173:71:-:0;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;889:175:34:-;4687:13:6;;;;;;;4679:69;;;;-1:-1:-1;;;4679:69:6;;;;;;;:::i;:::-;996:61:34::1;-1:-1:-1::0;;;996:18:34::1;:61::i;10369:135:32:-:0;10439:4;10462:35;10470:3;10490:5;10462:7;:35::i;10072:129::-;10139:4;10162:32;10167:3;10187:5;10162:4;:32::i;12335:778:13:-;12485:4;12505:15;:2;-1:-1:-1;;;;;12505:13:13;;:15::i;:::-;12501:606;;;12556:2;-1:-1:-1;;;;;12540:36:13;;12577:12;:10;:12::i;:::-;12591:4;12597:7;12606:5;12540:72;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12540:72:13;;;;;;;;-1:-1:-1;;12540:72:13;;;;;;;;;;;;:::i;:::-;;;12536:519;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12779:13:13;;12775:266;;12821:60;;-1:-1:-1;;;12821:60:13;;;;;;;:::i;12775:266::-;12993:6;12987:13;12978:6;12974:2;12970:15;12963:38;12536:519;-1:-1:-1;;;;;;12662:51:13;-1:-1:-1;;;12662:51:13;;-1:-1:-1;12655:58:13;;12501:606;-1:-1:-1;13092:4:13;12335:778;;;;;;:::o;328:703:23:-;384:13;601:10;597:51;;-1:-1:-1;;627:10:23;;;;;;;;;;;;-1:-1:-1;;;627:10:23;;;;;328:703::o;597:51::-;672:5;657:12;711:75;718:9;;711:75;;743:8;;;;:::i;:::-;;-1:-1:-1;765:10:23;;-1:-1:-1;773:2:23;765:10;;:::i;:::-;;;711:75;;;795:19;827:6;-1:-1:-1;;;;;817:17:23;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:17:23;;795:39;;844:150;851:10;;844:150;;877:11;887:1;877:11;;:::i;:::-;;-1:-1:-1;945:10:23;953:2;945:5;:10;:::i;:::-;932:24;;:2;:24;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;902:56:23;;;;;;;;-1:-1:-1;972:11:23;981:2;972:11;;:::i;:::-;;;844:150;;8446:311:13;8571:18;8577:2;8581:7;8571:5;:18::i;:::-;8620:54;8651:1;8655:2;8659:7;8668:5;8620:22;:54::i;:::-;8599:151;;;;-1:-1:-1;;;8599:151:13;;;;;;;:::i;1178:198:28:-;-1:-1:-1;;;;;;1261:25:28;;;;;1253:66;;;;-1:-1:-1;;;1253:66:28;;29023:2:104;1253:66:28;;;29005:21:104;29062:2;29042:18;;;29035:30;-1:-1:-1;;;29081:18:104;;;29074:58;29149:18;;1253:66:28;28821:352:104;1253:66:28;-1:-1:-1;;;;;;1329:33:28;;;;;1365:4;1329:33;;;;;;;;:40;;-1:-1:-1;;1329:40:28;;;;;;1178:198::o;2284:1388:32:-;2350:4;2487:19;;;:12;;;:19;;;;;;2521:15;;2517:1149;;2890:21;2914:14;2927:1;2914:10;:14;:::i;:::-;2962:18;;2890:38;;-1:-1:-1;2942:17:32;;2962:22;;2983:1;;2962:22;:::i;:::-;2942:42;;3016:13;3003:9;:26;2999:398;;3049:17;3069:3;:11;;3081:9;3069:22;;;;;;;;:::i;:::-;;;;;;;;;3049:42;;3220:9;3191:3;:11;;3203:13;3191:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3303:23;;;:12;;;:23;;;;;:36;;;2999:398;3475:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3567:3;:12;;:19;3580:5;3567:19;;;;;;;;;;;3560:26;;;3608:4;3601:11;;;;;;;2517:1149;3650:5;3643:12;;;;;1712:404;1775:4;3849:19;;;:12;;;:19;;;;;;1791:319;;-1:-1:-1;1833:23:32;;;;;;;;:11;:23;;;;;;;;;;;;;2013:18;;1991:19;;;:12;;;:19;;;;;;:40;;;;2045:11;;1791:319;-1:-1:-1;2094:5:32;2087:12;;9079:427:13;-1:-1:-1;;;;;9158:16:13;;9150:61;;;;-1:-1:-1;;;9150:61:13;;29512:2:104;9150:61:13;;;29494:21:104;;;29531:18;;;29524:30;29590:34;29570:18;;;29563:62;29642:18;;9150:61:13;29310:356:104;9150:61:13;9230:16;9238:7;9230;:16::i;:::-;9229:17;9221:58;;;;-1:-1:-1;;;9221:58:13;;29873:2:104;9221:58:13;;;29855:21:104;29912:2;29892:18;;;29885:30;-1:-1:-1;;;29931:18:104;;;29924:58;29999:18;;9221:58:13;29671:352:104;9221:58:13;-1:-1:-1;;;;;9346:13:13;;;;;;:9;:13;;;;;:18;;9363:1;;9346:13;:18;;9363:1;;9346:18;:::i;:::-;;;;-1:-1:-1;;9374:16:13;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9374:21:13;-1:-1:-1;;;;;9374:21:13;;;;;;;;9411:33;;9374:16;;;9411:33;;9374:16;;9411:33;977:102:40;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:104;-1:-1:-1;;;;;;88:32:104;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:173::-;660:20;;-1:-1:-1;;;;;709:31:104;;699:42;;689:70;;755:1;752;745:12;770:127;831:10;826:3;822:20;819:1;812:31;862:4;859:1;852:15;886:4;883:1;876:15;902:255;974:2;968:9;1016:6;1004:19;;-1:-1:-1;;;;;1038:34:104;;1074:22;;;1035:62;1032:88;;;1100:18;;:::i;:::-;1136:2;1129:22;902:255;:::o;1162:275::-;1233:2;1227:9;1298:2;1279:13;;-1:-1:-1;;1275:27:104;1263:40;;-1:-1:-1;;;;;1318:34:104;;1354:22;;;1315:62;1312:88;;;1380:18;;:::i;:::-;1416:2;1409:22;1162:275;;-1:-1:-1;1162:275:104:o;1442:183::-;1502:4;-1:-1:-1;;;;;1527:6:104;1524:30;1521:56;;;1557:18;;:::i;:::-;-1:-1:-1;1602:1:104;1598:14;1614:4;1594:25;;1442:183::o;1630:662::-;1684:5;1737:3;1730:4;1722:6;1718:17;1714:27;1704:55;;1755:1;1752;1745:12;1704:55;1791:6;1778:20;1817:4;1841:60;1857:43;1897:2;1857:43;:::i;:::-;1841:60;:::i;:::-;1935:15;;;2021:1;2017:10;;;;2005:23;;2001:32;;;1966:12;;;;2045:15;;;2042:35;;;2073:1;2070;2063:12;2042:35;2109:2;2101:6;2097:15;2121:142;2137:6;2132:3;2129:15;2121:142;;;2203:17;;2191:30;;2241:12;;;;2154;;2121:142;;;-1:-1:-1;2281:5:104;1630:662;-1:-1:-1;;;;;;1630:662:104:o;2297:496::-;2399:6;2407;2415;2468:2;2456:9;2447:7;2443:23;2439:32;2436:52;;;2484:1;2481;2474:12;2436:52;2507:29;2526:9;2507:29;:::i;:::-;2497:39;;2555:38;2589:2;2578:9;2574:18;2555:38;:::i;:::-;2545:48;;2644:2;2633:9;2629:18;2616:32;-1:-1:-1;;;;;2663:6:104;2660:30;2657:50;;;2703:1;2700;2693:12;2657:50;2726:61;2779:7;2770:6;2759:9;2755:22;2726:61;:::i;:::-;2716:71;;;2297:496;;;;;:::o;2798:180::-;2857:6;2910:2;2898:9;2889:7;2885:23;2881:32;2878:52;;;2926:1;2923;2916:12;2878:52;-1:-1:-1;2949:23:104;;2798:180;-1:-1:-1;2798:180:104:o;3405:258::-;3477:1;3487:113;3501:6;3498:1;3495:13;3487:113;;;3577:11;;;3571:18;3558:11;;;3551:39;3523:2;3516:10;3487:113;;;3618:6;3615:1;3612:13;3609:48;;;-1:-1:-1;;3653:1:104;3635:16;;3628:27;3405:258::o;3668:::-;3710:3;3748:5;3742:12;3775:6;3770:3;3763:19;3791:63;3847:6;3840:4;3835:3;3831:14;3824:4;3817:5;3813:16;3791:63;:::i;:::-;3908:2;3887:15;-1:-1:-1;;3883:29:104;3874:39;;;;3915:4;3870:50;;3668:258;-1:-1:-1;;3668:258:104:o;3931:220::-;4080:2;4069:9;4062:21;4043:4;4100:45;4141:2;4130:9;4126:18;4118:6;4100:45;:::i;4156:203::-;-1:-1:-1;;;;;4320:32:104;;;;4302:51;;4290:2;4275:18;;4156:203::o;4364:254::-;4432:6;4440;4493:2;4481:9;4472:7;4468:23;4464:32;4461:52;;;4509:1;4506;4499:12;4461:52;4532:29;4551:9;4532:29;:::i;:::-;4522:39;4608:2;4593:18;;;;4580:32;;-1:-1:-1;;;4364:254:104:o;4805:328::-;4882:6;4890;4898;4951:2;4939:9;4930:7;4926:23;4922:32;4919:52;;;4967:1;4964;4957:12;4919:52;4990:29;5009:9;4990:29;:::i;:::-;4980:39;;5038:38;5072:2;5061:9;5057:18;5038:38;:::i;:::-;5028:48;;5123:2;5112:9;5108:18;5095:32;5085:42;;4805:328;;;;;:::o;5138:248::-;5206:6;5214;5267:2;5255:9;5246:7;5242:23;5238:32;5235:52;;;5283:1;5280;5273:12;5235:52;-1:-1:-1;;5306:23:104;;;5376:2;5361:18;;;5348:32;;-1:-1:-1;5138:248:104:o;5670:668::-;5724:5;5777:3;5770:4;5762:6;5758:17;5754:27;5744:55;;5795:1;5792;5785:12;5744:55;5831:6;5818:20;5857:4;5881:60;5897:43;5937:2;5897:43;:::i;5881:60::-;5975:15;;;6061:1;6057:10;;;;6045:23;;6041:32;;;6006:12;;;;6085:15;;;6082:35;;;6113:1;6110;6103:12;6082:35;6149:2;6141:6;6137:15;6161:148;6177:6;6172:3;6169:15;6161:148;;;6243:23;6262:3;6243:23;:::i;:::-;6231:36;;6287:12;;;;6194;;6161:148;;6343:821;6495:6;6503;6511;6564:2;6552:9;6543:7;6539:23;6535:32;6532:52;;;6580:1;6577;6570:12;6532:52;6620:9;6607:23;-1:-1:-1;;;;;6690:2:104;6682:6;6679:14;6676:34;;;6706:1;6703;6696:12;6676:34;6729:61;6782:7;6773:6;6762:9;6758:22;6729:61;:::i;:::-;6719:71;;6843:2;6832:9;6828:18;6815:32;6799:48;;6872:2;6862:8;6859:16;6856:36;;;6888:1;6885;6878:12;6856:36;6911:63;6966:7;6955:8;6944:9;6940:24;6911:63;:::i;:::-;6901:73;;7027:2;7016:9;7012:18;6999:32;6983:48;;7056:2;7046:8;7043:16;7040:36;;;7072:1;7069;7062:12;7040:36;;7095:63;7150:7;7139:8;7128:9;7124:24;7095:63;:::i;7169:407::-;7234:5;-1:-1:-1;;;;;7260:6:104;7257:30;7254:56;;;7290:18;;:::i;:::-;7328:57;7373:2;7352:15;;-1:-1:-1;;7348:29:104;7379:4;7344:40;7328:57;:::i;:::-;7319:66;;7408:6;7401:5;7394:21;7448:3;7439:6;7434:3;7430:16;7427:25;7424:45;;;7465:1;7462;7455:12;7424:45;7514:6;7509:3;7502:4;7495:5;7491:16;7478:43;7568:1;7561:4;7552:6;7545:5;7541:18;7537:29;7530:40;7169:407;;;;;:::o;7581:222::-;7624:5;7677:3;7670:4;7662:6;7658:17;7654:27;7644:55;;7695:1;7692;7685:12;7644:55;7717:80;7793:3;7784:6;7771:20;7764:4;7756:6;7752:17;7717:80;:::i;7808:322::-;7877:6;7930:2;7918:9;7909:7;7905:23;7901:32;7898:52;;;7946:1;7943;7936:12;7898:52;7986:9;7973:23;-1:-1:-1;;;;;8011:6:104;8008:30;8005:50;;;8051:1;8048;8041:12;8005:50;8074;8116:7;8107:6;8096:9;8092:22;8074:50;:::i;8135:159::-;8202:20;;8262:6;8251:18;;8241:29;;8231:57;;8284:1;8281;8274:12;8299:2067;8391:6;8399;8452:2;8440:9;8431:7;8427:23;8423:32;8420:52;;;8468:1;8465;8458:12;8420:52;8508:9;8495:23;-1:-1:-1;;;;;8578:2:104;8570:6;8567:14;8564:34;;;8594:1;8591;8584:12;8564:34;8617:22;;;;8673:6;8655:16;;;8651:29;8648:49;;;8693:1;8690;8683:12;8648:49;8719:22;;:::i;:::-;8779:2;8766:16;8807:2;8797:8;8794:16;8791:36;;;8823:1;8820;8813:12;8791:36;8850:45;8887:7;8876:8;8872:2;8868:17;8850:45;:::i;:::-;8843:5;8836:60;;8942:2;8938;8934:11;8921:25;8971:2;8961:8;8958:16;8955:36;;;8987:1;8984;8977:12;8955:36;9023:45;9060:7;9049:8;9045:2;9041:17;9023:45;:::i;:::-;9018:2;9011:5;9007:14;9000:69;;9115:2;9111;9107:11;9094:25;9144:2;9134:8;9131:16;9128:36;;;9160:1;9157;9150:12;9128:36;9196:45;9233:7;9222:8;9218:2;9214:17;9196:45;:::i;:::-;9191:2;9184:5;9180:14;9173:69;;9288:2;9284;9280:11;9267:25;9317:2;9307:8;9304:16;9301:36;;;9333:1;9330;9323:12;9301:36;9369:45;9406:7;9395:8;9391:2;9387:17;9369:45;:::i;:::-;9364:2;9357:5;9353:14;9346:69;;9461:3;9457:2;9453:12;9440:26;9491:2;9481:8;9478:16;9475:36;;;9507:1;9504;9497:12;9475:36;9544:45;9581:7;9570:8;9566:2;9562:17;9544:45;:::i;:::-;9538:3;9531:5;9527:15;9520:70;;9636:3;9632:2;9628:12;9615:26;9666:2;9656:8;9653:16;9650:36;;;9682:1;9679;9672:12;9650:36;9719:56;9767:7;9756:8;9752:2;9748:17;9719:56;:::i;:::-;9713:3;9706:5;9702:15;9695:81;;9822:3;9818:2;9814:12;9801:26;9852:2;9842:8;9839:16;9836:36;;;9868:1;9865;9858:12;9836:36;9905:56;9953:7;9942:8;9938:2;9934:17;9905:56;:::i;:::-;9899:3;9892:5;9888:15;9881:81;;10016:3;10012:2;10008:12;9995:26;9989:3;9982:5;9978:15;9971:51;10041:3;10031:13;;10076:31;10103:2;10099;10095:11;10076:31;:::i;:::-;10071:2;10064:5;10060:14;10053:55;10127:3;10117:13;;10162:30;10188:2;10184;10180:11;10162:30;:::i;:::-;10157:2;10150:5;10146:14;10139:54;10212:3;10202:13;;10247:31;10274:2;10270;10266:11;10247:31;:::i;:::-;10242:2;10235:5;10231:14;10224:55;10298:5;10288:15;;;;;10322:38;10356:2;10345:9;10341:18;10322:38;:::i;:::-;10312:48;;8299:2067;;;;;:::o;10371:654::-;10493:6;10501;10554:2;10542:9;10533:7;10529:23;10525:32;10522:52;;;10570:1;10567;10560:12;10522:52;10610:9;10597:23;-1:-1:-1;;;;;10680:2:104;10672:6;10669:14;10666:34;;;10696:1;10693;10686:12;10666:34;10734:6;10723:9;10719:22;10709:32;;10779:7;10772:4;10768:2;10764:13;10760:27;10750:55;;10801:1;10798;10791:12;10750:55;10841:2;10828:16;10867:2;10859:6;10856:14;10853:34;;;10883:1;10880;10873:12;10853:34;10939:7;10934:2;10926:4;10918:6;10914:17;10910:2;10906:26;10902:35;10899:48;10896:68;;;10960:1;10957;10950:12;10896:68;10991:2;10983:11;;;;;11013:6;;-1:-1:-1;10371:654:104;;-1:-1:-1;;;;10371:654:104:o;11030:186::-;11089:6;11142:2;11130:9;11121:7;11117:23;11113:32;11110:52;;;11158:1;11155;11148:12;11110:52;11181:29;11200:9;11181:29;:::i;11545:285::-;-1:-1:-1;;;;;11735:32:104;;;;11717:51;;11816:6;11804:19;11799:2;11784:18;;11777:47;11705:2;11690:18;;11545:285::o;11835:347::-;11900:6;11908;11961:2;11949:9;11940:7;11936:23;11932:32;11929:52;;;11977:1;11974;11967:12;11929:52;12000:29;12019:9;12000:29;:::i;:::-;11990:39;;12079:2;12068:9;12064:18;12051:32;12126:5;12119:13;12112:21;12105:5;12102:32;12092:60;;12148:1;12145;12138:12;12092:60;12171:5;12161:15;;;11835:347;;;;;:::o;12187:667::-;12282:6;12290;12298;12306;12359:3;12347:9;12338:7;12334:23;12330:33;12327:53;;;12376:1;12373;12366:12;12327:53;12399:29;12418:9;12399:29;:::i;:::-;12389:39;;12447:38;12481:2;12470:9;12466:18;12447:38;:::i;:::-;12437:48;;12532:2;12521:9;12517:18;12504:32;12494:42;;12587:2;12576:9;12572:18;12559:32;-1:-1:-1;;;;;12606:6:104;12603:30;12600:50;;;12646:1;12643;12636:12;12600:50;12669:22;;12722:4;12714:13;;12710:27;-1:-1:-1;12700:55:104;;12751:1;12748;12741:12;12700:55;12774:74;12840:7;12835:2;12822:16;12817:2;12813;12809:11;12774:74;:::i;:::-;12764:84;;;12187:667;;;;;;;:::o;12859:835::-;13076:2;13128:21;;;13198:13;;13101:18;;;13220:22;;;13047:4;;13076:2;13261;;13279:18;;;;13320:15;;;13047:4;13363:305;13377:6;13374:1;13371:13;13363:305;;;13436:13;;13478:9;;-1:-1:-1;;;;;13474:35:104;13462:48;;13554:11;;13548:18;-1:-1:-1;;;;;13544:43:104;13530:12;;;13523:65;13608:12;;;;13643:15;;;;13506:1;13392:9;13363:305;;;-1:-1:-1;13685:3:104;;12859:835;-1:-1:-1;;;;;;;12859:835:104:o;13699:260::-;13767:6;13775;13828:2;13816:9;13807:7;13803:23;13799:32;13796:52;;;13844:1;13841;13834:12;13796:52;13867:29;13886:9;13867:29;:::i;:::-;13857:39;;13915:38;13949:2;13938:9;13934:18;13915:38;:::i;13964:196::-;14053:6;14106:2;14094:9;14085:7;14081:23;14077:32;14074:52;;;14122:1;14119;14112:12;14074:52;-1:-1:-1;14145:9:104;13964:196;-1:-1:-1;13964:196:104:o;14165:127::-;14226:10;14221:3;14217:20;14214:1;14207:31;14257:4;14254:1;14247:15;14281:4;14278:1;14271:15;14297:375;-1:-1:-1;;;;;14555:15:104;;;14537:34;;14607:15;;;;14602:2;14587:18;;14580:43;14654:2;14639:18;;14632:34;;;;14487:2;14472:18;;14297:375::o;14677:127::-;14738:10;14733:3;14729:20;14726:1;14719:31;14769:4;14766:1;14759:15;14793:4;14790:1;14783:15;14809:135;14848:3;-1:-1:-1;;14869:17:104;;14866:43;;;14889:18;;:::i;:::-;-1:-1:-1;14936:1:104;14925:13;;14809:135::o;16189:356::-;16391:2;16373:21;;;16410:18;;;16403:30;16469:34;16464:2;16449:18;;16442:62;16536:2;16521:18;;16189:356::o;16550:413::-;16752:2;16734:21;;;16791:2;16771:18;;;16764:30;16830:34;16825:2;16810:18;;16803:62;-1:-1:-1;;;16896:2:104;16881:18;;16874:47;16953:3;16938:19;;16550:413::o;16968:168::-;17008:7;17074:1;17070;17066:6;17062:14;17059:1;17056:21;17051:1;17044:9;17037:17;17033:45;17030:71;;;17081:18;;:::i;:::-;-1:-1:-1;17121:9:104;;16968:168::o;17141:127::-;17202:10;17197:3;17193:20;17190:1;17183:31;17233:4;17230:1;17223:15;17257:4;17254:1;17247:15;17273:120;17313:1;17339;17329:35;;17344:18;;:::i;:::-;-1:-1:-1;17378:9:104;;17273:120::o;18660:590::-;18753:6;18806:2;18794:9;18785:7;18781:23;18777:32;18774:52;;;18822:1;18819;18812:12;18774:52;18855:2;18849:9;18897:2;18889:6;18885:15;18966:6;18954:10;18951:22;-1:-1:-1;;;;;18918:10:104;18915:34;18912:62;18909:88;;;18977:18;;:::i;:::-;19013:2;19006:22;19052:23;;19037:39;;19109:38;19143:2;19128:18;;19109:38;:::i;:::-;19104:2;19096:6;19092:15;19085:63;19181:37;19214:2;19203:9;19199:18;19181:37;:::i;:::-;19176:2;19164:15;;19157:62;19168:6;18660:590;-1:-1:-1;;;18660:590:104:o;19255:184::-;19325:6;19378:2;19366:9;19357:7;19353:23;19349:32;19346:52;;;19394:1;19391;19384:12;19346:52;-1:-1:-1;19417:16:104;;19255:184;-1:-1:-1;19255:184:104:o;19854:329::-;20056:2;20038:21;;;20095:1;20075:18;;;20068:29;-1:-1:-1;;;20128:2:104;20113:18;;20106:36;20174:2;20159:18;;19854:329::o;20945:380::-;21024:1;21020:12;;;;21067;;;21088:61;;21142:4;21134:6;21130:17;21120:27;;21088:61;21195:2;21187:6;21184:14;21164:18;21161:38;21158:161;;;21241:10;21236:3;21232:20;21229:1;21222:31;21276:4;21273:1;21266:15;21304:4;21301:1;21294:15;21330:518;21417:6;21470:2;21458:9;21449:7;21445:23;21441:32;21438:52;;;21486:1;21483;21476:12;21438:52;21519:2;21513:9;21561:2;21553:6;21549:15;21630:6;21618:10;21615:22;-1:-1:-1;;;;;21582:10:104;21579:34;21576:62;21573:88;;;21641:18;;:::i;:::-;21677:2;21670:22;21716:29;21735:9;21716:29;:::i;:::-;21708:6;21701:45;21779:37;21812:2;21801:9;21797:18;21779:37;:::i;:::-;21774:2;21762:15;;21755:62;21766:6;21330:518;-1:-1:-1;;;21330:518:104:o;23484:125::-;23524:4;23552:1;23549;23546:8;23543:34;;;23557:18;;:::i;:::-;-1:-1:-1;23594:9:104;;23484:125::o;23614:128::-;23654:3;23685:1;23681:6;23678:1;23675:13;23672:39;;;23691:18;;:::i;:::-;-1:-1:-1;23727:9:104;;23614:128::o;24090:410::-;24292:2;24274:21;;;24331:2;24311:18;;;24304:30;24370:34;24365:2;24350:18;;24343:62;-1:-1:-1;;;24436:2:104;24421:18;;24414:44;24490:3;24475:19;;24090:410::o;24505:407::-;24707:2;24689:21;;;24746:2;24726:18;;;24719:30;24785:34;24780:2;24765:18;;24758:62;-1:-1:-1;;;24851:2:104;24836:18;;24829:41;24902:3;24887:19;;24505:407::o;24917:335::-;25119:2;25101:21;;;25158:2;25138:18;;;25131:30;-1:-1:-1;;;25192:2:104;25177:18;;25170:41;25243:2;25228:18;;24917:335::o;25972:414::-;26174:2;26156:21;;;26213:2;26193:18;;;26186:30;26252:34;26247:2;26232:18;;26225:62;-1:-1:-1;;;26318:2:104;26303:18;;26296:48;26376:3;26361:19;;25972:414::o;26517:973::-;26602:12;;26567:3;;26657:1;26677:18;;;;26730;;;;26757:61;;26811:4;26803:6;26799:17;26789:27;;26757:61;26837:2;26885;26877:6;26874:14;26854:18;26851:38;26848:161;;;26931:10;26926:3;26922:20;26919:1;26912:31;26966:4;26963:1;26956:15;26994:4;26991:1;26984:15;26848:161;27025:18;27052:104;;;;27170:1;27165:319;;;;27018:466;;27052:104;-1:-1:-1;;27085:24:104;;27073:37;;27130:16;;;;-1:-1:-1;27052:104:104;;27165:319;26464:1;26457:14;;;26501:4;26488:18;;27259:1;27273:165;27287:6;27284:1;27281:13;27273:165;;;27365:14;;27352:11;;;27345:35;27408:16;;;;27302:10;;27273:165;;;27277:3;;27467:6;27462:3;27458:16;27451:23;;27018:466;;;;;;;26517:973;;;;:::o;27495:456::-;27716:3;27744:38;27778:3;27770:6;27744:38;:::i;:::-;27811:6;27805:13;27827:52;27872:6;27868:2;27861:4;27853:6;27849:17;27827:52;:::i;:::-;27895:50;27937:6;27933:2;27929:15;27921:6;27895:50;:::i;:::-;27888:57;27495:456;-1:-1:-1;;;;;;;27495:456:104:o;27956:489::-;-1:-1:-1;;;;;28225:15:104;;;28207:34;;28277:15;;28272:2;28257:18;;28250:43;28324:2;28309:18;;28302:34;;;28372:3;28367:2;28352:18;;28345:31;;;28150:4;;28393:46;;28419:19;;28411:6;28393:46;:::i;:::-;28385:54;27956:489;-1:-1:-1;;;;;;27956:489:104:o;28450:249::-;28519:6;28572:2;28560:9;28551:7;28547:23;28543:32;28540:52;;;28588:1;28585;28578:12;28540:52;28620:9;28614:16;28639:30;28663:5;28639:30;:::i;28704:112::-;28736:1;28762;28752:35;;28767:18;;:::i;:::-;-1:-1:-1;28801:9:104;;28704:112::o;29178:127::-;29239:10;29234:3;29230:20;29227:1;29220:31;29270:4;29267:1;29260:15;29294:4;29291:1;29284:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2892200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "_trustedForwarder()": "2714",
            "approve(address,uint256)": "infinite",
            "balanceOf(address)": "3052",
            "contractURI()": "infinite",
            "defaultRoyalty()": "2414",
            "freezeMaxSupply()": "28981",
            "freezeTokenURI()": "29090",
            "getApproved(uint256)": "4844",
            "getInfo()": "infinite",
            "getRaribleV2Royalties(uint256)": "infinite",
            "getTokenRoyaltiesCount()": "2392",
            "getTokenRoyaltyByIndex(uint256)": "7263",
            "initialize((string,string,string,string,string,address[],uint256[],uint256,address,uint16,address),address)": "infinite",
            "isApprovedForAll(address,address)": "infinite",
            "isTrustedForwarder(address)": "2868",
            "managementPowerRevoked()": "2475",
            "maxSupply()": "2647",
            "maxSupplyFrozen()": "2805",
            "mintByOwner(address,uint256)": "infinite",
            "name()": "infinite",
            "owner()": "2425",
            "ownerOf(uint256)": "2975",
            "placeholderURI()": "infinite",
            "renounceOwnership()": "30961",
            "revokeManagementPower()": "28936",
            "royaltyInfo(uint256,uint256)": "9395",
            "safeTransferFrom(address,address,uint256)": "infinite",
            "safeTransferFrom(address,address,uint256,bytes)": "infinite",
            "setApprovalForAll(address,bool)": "29106",
            "setContractURI(string)": "infinite",
            "setDefaultRoyalty((address,uint16))": "infinite",
            "setMaxSupply(uint256)": "31497",
            "setPlaceholderURI(string)": "infinite",
            "setTokenRoyalties((uint256,address,uint16)[])": "infinite",
            "setTokenURIPrefix(string)": "infinite",
            "setTokenURISuffix(string)": "infinite",
            "setTrustedForwarder(address)": "29425",
            "supportsInterface(bytes4)": "2650",
            "symbol()": "infinite",
            "tokenURI(uint256)": "infinite",
            "tokenURIFrozen()": "2585",
            "tokenURIPrefix()": "infinite",
            "tokenURISuffix()": "infinite",
            "totalSupply()": "2436",
            "transferFrom(address,address,uint256)": "infinite",
            "transferFromBulk(address,address,uint256[])": "infinite",
            "transferFromBulk(address[],address[],uint256[])": "infinite",
            "transferOwnership(address)": "31155"
          },
          "internal": {
            "_msgData()": "infinite",
            "_msgSender()": "2253"
          }
        },
        "methodIdentifiers": {
          "_trustedForwarder()": "56c022bb",
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "contractURI()": "e8a3d485",
          "defaultRoyalty()": "7885fdc7",
          "freezeMaxSupply()": "16744607",
          "freezeTokenURI()": "ba4695fd",
          "getApproved(uint256)": "081812fc",
          "getInfo()": "5a9b0b89",
          "getRaribleV2Royalties(uint256)": "cad96cca",
          "getTokenRoyaltiesCount()": "7e980342",
          "getTokenRoyaltyByIndex(uint256)": "0653aca5",
          "initialize((string,string,string,string,string,address[],uint256[],uint256,address,uint16,address),address)": "40c1d8a1",
          "isApprovedForAll(address,address)": "e985e9c5",
          "isTrustedForwarder(address)": "572b6c05",
          "managementPowerRevoked()": "a821d908",
          "maxSupply()": "d5abeb01",
          "maxSupplyFrozen()": "f384702f",
          "mintByOwner(address,uint256)": "3542aee2",
          "name()": "06fdde03",
          "owner()": "8da5cb5b",
          "ownerOf(uint256)": "6352211e",
          "placeholderURI()": "7313cba9",
          "renounceOwnership()": "715018a6",
          "revokeManagementPower()": "948e2d53",
          "royaltyInfo(uint256,uint256)": "2a55205a",
          "safeTransferFrom(address,address,uint256)": "42842e0e",
          "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
          "setApprovalForAll(address,bool)": "a22cb465",
          "setContractURI(string)": "938e3d7b",
          "setDefaultRoyalty((address,uint16))": "ef60ceaf",
          "setMaxSupply(uint256)": "6f8b44b0",
          "setPlaceholderURI(string)": "3574a2dd",
          "setTokenRoyalties((uint256,address,uint16)[])": "5136dcc7",
          "setTokenURIPrefix(string)": "99e0dd7c",
          "setTokenURISuffix(string)": "a9852bfb",
          "setTrustedForwarder(address)": "da742228",
          "supportsInterface(bytes4)": "01ffc9a7",
          "symbol()": "95d89b41",
          "tokenURI(uint256)": "c87b56dd",
          "tokenURIFrozen()": "c29de630",
          "tokenURIPrefix()": "c0ac9983",
          "tokenURISuffix()": "dbbc853b",
          "totalSupply()": "18160ddd",
          "transferFrom(address,address,uint256)": "23b872dd",
          "transferFromBulk(address,address,uint256[])": "059fb6f7",
          "transferFromBulk(address[],address[],uint256[])": "2fe388be",
          "transferOwnership(address)": "f2fde38b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"placeholderURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"initialHolders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initialAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"defaultRoyaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"internalType\":\"struct ERC721ManagedPrefixedCollection.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRoyaltyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_senderBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRoyaltiesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyaltyByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"placeholderURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"initialHolders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initialAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"defaultRoyaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"internalType\":\"struct ERC721ManagedPrefixedCollection.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementPowerRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeholderURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeManagementPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IEIP2981RoyaltyOverride.TokenRoyalty\",\"name\":\"royalty\",\"type\":\"tuple\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setPlaceholderURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig[]\",\"name\":\"royaltyConfigs\",\"type\":\"tuple[]\"}],\"name\":\"setTokenRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setTokenURISuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURISuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferFromBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferFromBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getTokenRoyaltiesCount()\":{\"details\":\"See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\"},\"getTokenRoyaltyByIndex(uint256)\":{\"details\":\"See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"See {IEIP2981RoyaltyOverride-royaltyInfo}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"transferFromBulk(address,address,uint256[])\":{\"notice\":\"Useful for when user wants to return tokens to get a refund, or when they want to transfer lots of tokens by paying gas fee only once.\"},\"transferFromBulk(address[],address[],uint256[])\":{\"notice\":\"Useful for transferring multiple tokens from/to multiple addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol\":\"ERC721ManagedPrefixedCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\ninterface IEIP2981RoyaltyOverride is IERC165 {\\n\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns(uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external view returns(TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n\\n}\\n\",\"keccak256\":\"0xb7f47d4711c6eb42dc5874ad916713ffb6e8754ad568cdb5e9b0c5fcb028c698\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/RoyaltyOverrideCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IRoyaltyOverride.sol\\\";\\nimport \\\"../specs/IEIP2981.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\nabstract contract EIP2981RoyaltyOverrideCore is IEIP2981, IEIP2981RoyaltyOverride, ERC165 {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    TokenRoyalty public defaultRoyalty;\\n    mapping(uint256 => TokenRoyalty) private _tokenRoyalties;\\n    EnumerableSet.UintSet private _tokensWithRoyalties;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IEIP2981).interfaceId || interfaceId == type(IEIP2981RoyaltyOverride).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Sets token royalties. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs) internal {\\n        for (uint i = 0; i < royaltyConfigs.length; i++) {\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\n            if (royaltyConfig.recipient == address(0)) {\\n                delete _tokenRoyalties[royaltyConfig.tokenId];\\n                _tokensWithRoyalties.remove(royaltyConfig.tokenId);\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\n            } else {\\n                _tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(royaltyConfig.recipient, royaltyConfig.bps);\\n                _tokensWithRoyalties.add(royaltyConfig.tokenId);\\n                emit TokenRoyaltySet(royaltyConfig.tokenId, royaltyConfig.recipient, royaltyConfig.bps);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets default royalty. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal {\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\n        defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\n     */\\n    function getTokenRoyaltiesCount() external override view returns(uint256) {\\n        return _tokensWithRoyalties.length();\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external override view returns(TokenRoyaltyConfig memory) {\\n        uint256 tokenId = _tokensWithRoyalties.at(index);\\n        TokenRoyalty memory royalty = _tokenRoyalties[tokenId];\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) public override view returns (address, uint256) {\\n        if (_tokenRoyalties[tokenId].recipient != address(0)) {\\n            return (_tokenRoyalties[tokenId].recipient, value*_tokenRoyalties[tokenId].bps/10000);\\n        }\\n        if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\\n            return (defaultRoyalty.recipient, value*defaultRoyalty.bps/10000);\\n        }\\n        return (address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0xfda6bb019fbae9b5a2fd0007e3b25b80dbc6abd78d121ced1dc6bb8935894491\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * EIP-2981\\n */\\ninterface IEIP2981 {\\n    /**\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n}\",\"keccak256\":\"0xa150218faf74c7d01e3d9aa712845a2bb519e7fc2ec854e2241c53e4cce163ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/collections/ERC721/extensions/ERC721AutoIdMinterExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721AutoIdMinterExtension {\\n    function setMaxSupply(uint256 newValue) external;\\n\\n    function freezeMaxSupply() external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\\n */\\nabstract contract ERC721AutoIdMinterExtension is\\n    IERC721AutoIdMinterExtension,\\n    ERC721CollectionMetadataExtension\\n{\\n    using SafeMath for uint256;\\n\\n    uint256 public maxSupply;\\n    bool public maxSupplyFrozen;\\n\\n    uint256 internal _currentTokenId = 0;\\n\\n    function __ERC721AutoIdMinterExtension_init(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721AutoIdMinterExtension_init_unchained(_maxSupply);\\n    }\\n\\n    function __ERC721AutoIdMinterExtension_init_unchained(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        maxSupply = _maxSupply;\\n\\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\\n        _registerInterface(type(IERC721).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMaxSupply(uint256 newValue) \\n        public\\n        virtual\\n        override \\n        onlyOwner \\n    {\\n        require(!maxSupplyFrozen, \\\"FROZEN\\\");\\n        require(newValue >= totalSupply(), \\\"LOWER_THAN_SUPPLY\\\");\\n        maxSupply = newValue;\\n    }\\n\\n    function freezeMaxSupply() external onlyOwner {\\n        maxSupplyFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _currentTokenId;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _mintTo(address to, uint256 count) internal {\\n        require(totalSupply() + count <= maxSupply, \\\"EXCEEDS_SUPPLY\\\");\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 newTokenId = _currentTokenId;\\n            _safeMint(to, newTokenId);\\n            _incrementTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Increments the value of _currentTokenId\\n     */\\n    function _incrementTokenId() internal {\\n        _currentTokenId++;\\n    }\\n}\\n\",\"keccak256\":\"0x219fe28ac3af2dad6e24cf4660ff324c529be9f94bf9cc4dedc7882c4b59afbd\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721BulkifyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721BulkifyExtension {\\n    function transferFromBulk(\\n        address from,\\n        address to,\\n        uint256[] memory tokenIds\\n    ) external;\\n\\n    function transferFromBulk(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory tokenIds\\n    ) external;\\n}\\n\\n/**\\n * @dev Extension to add bulk operations to a standard ERC721 contract.\\n */\\nabstract contract ERC721BulkifyExtension is\\n    IERC721BulkifyExtension,\\n    Initializable,\\n    ERC165Storage\\n{\\n    function __ERC721BulkifyExtension_init() internal onlyInitializing {\\n        __ERC721BulkifyExtension_init_unchained();\\n    }\\n\\n    function __ERC721BulkifyExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721BulkifyExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Useful for when user wants to return tokens to get a refund,\\n     * or when they want to transfer lots of tokens by paying gas fee only once.\\n     */\\n    function transferFromBulk(\\n        address from,\\n        address to,\\n        uint256[] memory tokenIds\\n    ) public virtual {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            IERC721(address(this)).transferFrom(from, to, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * Useful for transferring multiple tokens from/to multiple addresses.\\n     */\\n    function transferFromBulk(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory tokenIds\\n    ) public virtual {\\n        require(from.length == to.length, \\\"FROM_TO_LENGTH_MISMATCH\\\");\\n        require(from.length == tokenIds.length, \\\"FROM_TOKEN_LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            IERC721(address(this)).transferFrom(from[i], to[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c95a43bf11d316f391a9ba581a30ae3848004286e2bf896ba44a2c6295aefde\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721CollectionMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface IERC721CollectionMetadataExtension {\\n    function setContractURI(string memory newValue) external;\\n\\n    function contractURI() external view returns (string memory);\\n}\\n\\n/**\\n * @dev Extension to allow configuring contract-level collection metadata URI.\\n */\\nabstract contract ERC721CollectionMetadataExtension is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721\\n{\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    string private _contractURI;\\n\\n    function __ERC721CollectionMetadataExtension_init(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        __ERC721CollectionMetadataExtension_init_unchained(\\n            name_,\\n            symbol_,\\n            contractURI_\\n        );\\n    }\\n\\n    function __ERC721CollectionMetadataExtension_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _contractURI = contractURI_;\\n\\n        _registerInterface(\\n            type(IERC721CollectionMetadataExtension).interfaceId\\n        );\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setContractURI(string memory newValue) external onlyOwner {\\n        _contractURI = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n}\\n\",\"keccak256\":\"0xab1d9b4fc62d89dd5366c9a163eb8281a47e3384055d8479fb9fd82e5f109c7a\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721OwnerManagedExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721OwnerManagedExtension {\\n    function revokeManagementPower() external;\\n}\\n\\n/**\\n * @dev Extension to allow owner to transfer tokens on behalf of owners. Only useful for certain use-cases.\\n */\\nabstract contract ERC721OwnerManagedExtension is\\n    IERC721OwnerManagedExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension\\n{\\n    bool public managementPowerRevoked;\\n\\n    function __ERC721OwnerManagedExtension_init() internal onlyInitializing {\\n        __ERC721OwnerManagedExtension_init_unchained();\\n    }\\n\\n    function __ERC721OwnerManagedExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OwnerManagedExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function revokeManagementPower() external onlyOwner {\\n        managementPowerRevoked = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    /**\\n     * Override isApprovedForAll to allow owner to transfer tokens.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override(ERC721)\\n        returns (bool)\\n    {\\n        if (!managementPowerRevoked) {\\n            if (operator == super.owner()) {\\n                return true;\\n            }\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x6deb115af99c75403b41d4d4b26a1058515fb5754cb8ee6bbc6af8e5047bbb75\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721OwnerMintExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721OwnerMintExtension {\\n    function mintByOwner(address to, uint256 count) external;\\n}\\n\\n/**\\n * @dev Extension to allow owner to mint directly without paying.\\n */\\nabstract contract ERC721OwnerMintExtension is\\n    IERC721OwnerMintExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension\\n{\\n    function __ERC721OwnerMintExtension_init() internal onlyInitializing {\\n        __ERC721OwnerMintExtension_init_unchained();\\n    }\\n\\n    function __ERC721OwnerMintExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OwnerMintExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintByOwner(address to, uint256 count) external onlyOwner {\\n        _mintTo(to, count);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8188452369625a66ec260ecaa2c9cd139f4f4ae5c47eebedcb31c4e4c7f76267\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721PrefixedMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721PrefixedMetadataExtension {\\n    function setPlaceholderURI(string memory newValue) external;\\n\\n    function setTokenURIPrefix(string memory newValue) external;\\n\\n    function setTokenURISuffix(string memory newValue) external;\\n\\n    function placeholderURI() external view returns (string memory);\\n\\n    function tokenURIPrefix() external view returns (string memory);\\n\\n    function tokenURISuffix() external view returns (string memory);\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    function freezeTokenURI() external;\\n}\\n\\n/**\\n * @dev Extension to allow configuring tokens metadata URI.\\n *      In this extension tokens will have a shared token URI prefix,\\n *      therefore on tokenURI() token's ID will be appended to the base URI.\\n *      It also allows configuring a fallback \\\"placeholder\\\" URI when prefix is not set yet.\\n */\\nabstract contract ERC721PrefixedMetadataExtension is\\n    IERC721PrefixedMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721\\n{\\n    string internal _placeholderURI;\\n    string internal _tokenURIPrefix;\\n    string internal _tokenURISuffix;\\n\\n    bool public tokenURIFrozen;\\n\\n    function __ERC721PrefixedMetadataExtension_init(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        __ERC721PrefixedMetadataExtension_init_unchained(\\n            placeholderURI_,\\n            tokenURIPrefix_\\n        );\\n    }\\n\\n    function __ERC721PrefixedMetadataExtension_init_unchained(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        _placeholderURI = placeholderURI_;\\n        _tokenURIPrefix = tokenURIPrefix_;\\n        _tokenURISuffix = \\\".json\\\";\\n\\n        _registerInterface(type(IERC721PrefixedMetadataExtension).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPlaceholderURI(string memory newValue) external onlyOwner {\\n        _placeholderURI = newValue;\\n    }\\n\\n    function setTokenURIPrefix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"FROZEN\\\");\\n        _tokenURIPrefix = newValue;\\n    }\\n\\n    function setTokenURISuffix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"FROZEN\\\");\\n        _tokenURISuffix = newValue;\\n    }\\n\\n    function freezeTokenURI() external onlyOwner {\\n        tokenURIFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function placeholderURI() public view returns (string memory) {\\n        return _placeholderURI;\\n    }\\n\\n    function tokenURIPrefix() public view returns (string memory) {\\n        return _tokenURIPrefix;\\n    }\\n\\n    function tokenURISuffix() public view returns (string memory) {\\n        return _tokenURISuffix;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, IERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return\\n            bytes(_tokenURIPrefix).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        _tokenURIPrefix,\\n                        Strings.toString(_tokenId),\\n                        _tokenURISuffix\\n                    )\\n                )\\n                : _placeholderURI;\\n    }\\n}\\n\",\"keccak256\":\"0x9e3b9ff8ee1bc6e09d143782802713a9a7767ef160dfc1e76d993fa0e8bf4340\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721RoyaltyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/RoyaltyOverrideCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"../../../misc/rarible/IRoyalties.sol\\\";\\nimport \\\"../../../misc/rarible/LibPart.sol\\\";\\nimport \\\"../../../misc/rarible/LibRoyaltiesV2.sol\\\";\\n\\ninterface IERC721RoyaltyExtension {\\n    function setTokenRoyalties(\\n        IEIP2981RoyaltyOverride.TokenRoyaltyConfig[] calldata royaltyConfigs\\n    ) external;\\n\\n    function setDefaultRoyalty(\\n        IEIP2981RoyaltyOverride.TokenRoyalty calldata royalty\\n    ) external;\\n\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (LibPart.Part[] memory result);\\n}\\n\\n/**\\n * @dev Extension to signal configured royalty to famous marketplaces as well as ERC2981.\\n *\\n * This extension currently supports Standard ERC2981, Rarible.\\n * Note that OpenSea is supported via Flair metadata feature.\\n */\\nabstract contract ERC721RoyaltyExtension is\\n    IERC721RoyaltyExtension,\\n    IRoyalties,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    EIP2981RoyaltyOverrideCore\\n{\\n    function __ERC721RoyaltyExtension_init(\\n        address defaultRoyaltyReceiver,\\n        uint16 defaultRoyaltyBps\\n    ) internal onlyInitializing {\\n        __ERC721RoyaltyExtension_init_unchained(\\n            defaultRoyaltyReceiver,\\n            defaultRoyaltyBps\\n        );\\n    }\\n\\n    function __ERC721RoyaltyExtension_init_unchained(\\n        address defaultRoyaltyReceiver,\\n        uint16 defaultRoyaltyBps\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721RoyaltyExtension).interfaceId);\\n        _registerInterface(type(IEIP2981).interfaceId);\\n        _registerInterface(type(IEIP2981RoyaltyOverride).interfaceId);\\n        _registerInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES);\\n\\n        TokenRoyalty memory royalty = TokenRoyalty(\\n            defaultRoyaltyReceiver,\\n            defaultRoyaltyBps\\n        );\\n\\n        _setDefaultRoyalty(royalty);\\n    }\\n\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royaltyConfigs)\\n        external\\n        override(IEIP2981RoyaltyOverride, IERC721RoyaltyExtension)\\n        onlyOwner\\n    {\\n        _setTokenRoyalties(royaltyConfigs);\\n    }\\n\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty)\\n        external\\n        override(IEIP2981RoyaltyOverride, IERC721RoyaltyExtension)\\n        onlyOwner\\n    {\\n        _setDefaultRoyalty(royalty);\\n    }\\n\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        override(IRoyalties, IERC721RoyaltyExtension)\\n        returns (LibPart.Part[] memory result)\\n    {\\n        result = new LibPart.Part[](1);\\n\\n        result[0].account = payable(defaultRoyalty.recipient);\\n        result[0].value = defaultRoyalty.bps;\\n\\n        id;\\n        // avoid unused param warning\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, EIP2981RoyaltyOverrideCore)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf02d7891527aefe8e924496ce3924ea9c164c4a1e07c6dd370161c41fd72bd7d\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../../../common/meta-transactions/ERC2771ContextOwnable.sol\\\";\\nimport \\\"../extensions/ERC721CollectionMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721PrefixedMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721AutoIdMinterExtension.sol\\\";\\nimport \\\"../extensions/ERC721OwnerMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721OwnerManagedExtension.sol\\\";\\nimport \\\"../extensions/ERC721RoyaltyExtension.sol\\\";\\nimport \\\"../extensions/ERC721BulkifyExtension.sol\\\";\\n\\ncontract ERC721ManagedPrefixedCollection is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC2771ContextOwnable,\\n    ERC721CollectionMetadataExtension,\\n    ERC721PrefixedMetadataExtension,\\n    ERC721AutoIdMinterExtension,\\n    ERC721OwnerMintExtension,\\n    ERC721OwnerManagedExtension,\\n    ERC721RoyaltyExtension,\\n    ERC721BulkifyExtension\\n{\\n    struct Config {\\n        string name;\\n        string symbol;\\n        string contractURI;\\n        string placeholderURI;\\n        string tokenURIPrefix;\\n        address[] initialHolders;\\n        uint256[] initialAmounts;\\n        uint256 maxSupply;\\n        address defaultRoyaltyAddress;\\n        uint16 defaultRoyaltyBps;\\n        address trustedForwarder;\\n    }\\n\\n    constructor(Config memory config) ERC721(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        require(\\n            config.initialHolders.length == config.initialAmounts.length,\\n            \\\"ERC721/INVALID_INITIAL_ARGS\\\"\\n        );\\n\\n        _transferOwnership(deployer);\\n\\n        __ERC721CollectionMetadataExtension_init(\\n            config.name,\\n            config.symbol,\\n            config.contractURI\\n        );\\n        __ERC721PrefixedMetadataExtension_init(\\n            config.placeholderURI,\\n            config.tokenURIPrefix\\n        );\\n        __ERC721AutoIdMinterExtension_init(config.maxSupply);\\n        __ERC721OwnerMintExtension_init();\\n        __ERC721OwnerManagedExtension_init();\\n        __ERC721RoyaltyExtension_init(\\n            config.defaultRoyaltyAddress,\\n            config.defaultRoyaltyBps\\n        );\\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\\n        __ERC721BulkifyExtension_init();\\n\\n        maxSupply = config.maxSupply;\\n\\n        for (uint256 i = 0; i < config.initialHolders.length; i++) {\\n            _mintTo(config.initialHolders[i], config.initialAmounts[i]);\\n        }\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (address sender)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (bytes calldata)\\n    {\\n        return super._msgData();\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name()\\n        public\\n        view\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.symbol();\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721OwnerManagedExtension)\\n        returns (bool)\\n    {\\n        return ERC721OwnerManagedExtension.isApprovedForAll(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            ERC721CollectionMetadataExtension,\\n            ERC721OwnerMintExtension,\\n            ERC721OwnerManagedExtension,\\n            ERC721PrefixedMetadataExtension,\\n            ERC721RoyaltyExtension,\\n            ERC721BulkifyExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721PrefixedMetadataExtension.tokenURI(_tokenId);\\n    }\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            uint256 _maxSupply,\\n            uint256 _totalSupply,\\n            uint256 _senderBalance\\n        )\\n    {\\n        uint256 balance = 0;\\n\\n        if (_msgSender() != address(0)) {\\n            balance = this.balanceOf(_msgSender());\\n        }\\n\\n        return (maxSupply, this.totalSupply(), balance);\\n    }\\n}\\n\",\"keccak256\":\"0x74d01d7d2b663d1ef9e9c3c8c0d166e7ea9fd159816c3b85a1079b5f1e530a1d\",\"license\":\"AGPL-3.0\"},\"contracts/common/meta-transactions/ERC2771ContextOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextOwnable is Initializable, Context, Ownable {\\n    address public _trustedForwarder;\\n\\n    function __ERC2771ContextOwnable_init(address trustedForwarder)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC2771ContextOwnable_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771ContextOwnable_init_unchained(address trustedForwarder)\\n        internal\\n        onlyInitializing\\n    {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarder) public onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3dedaac5900cf7b1a07fd58464c66da127cf2899962249dbc2117eb39b9d3a64\",\"license\":\"MIT\"},\"contracts/misc/rarible/IRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface IRoyalties {\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x958b8627e821a3e4fddd8b2792de5768e84a3d9b9857e9eb22528514b6623a65\",\"license\":\"MIT\"},\"contracts/misc/rarible/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH =\\n        keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xa664a77beb3c3efff76ac265b377e53d7156dcdec00eaa0678795c2622559a15\",\"license\":\"MIT\"},\"contracts/misc/rarible/LibRoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\",\"keccak256\":\"0x887598ce08f9dfc515b9b9e767d4410f469cf29be131dee12f552784e3b4819c\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 886,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 889,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 782,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_owner",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4693,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_supportedInterfaces",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes4,t_bool)"
          },
          {
            "astId": 14087,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_trustedForwarder",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1912,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1914,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_symbol",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1918,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_owners",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 1922,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_balances",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1926,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 1932,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 6170,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_name",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 6172,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_symbol",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 6174,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_contractURI",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          },
          {
            "astId": 7478,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_placeholderURI",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 7480,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_tokenURIPrefix",
            "offset": 0,
            "slot": "13",
            "type": "t_string_storage"
          },
          {
            "astId": 7482,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_tokenURISuffix",
            "offset": 0,
            "slot": "14",
            "type": "t_string_storage"
          },
          {
            "astId": 7484,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "tokenURIFrozen",
            "offset": 0,
            "slot": "15",
            "type": "t_bool"
          },
          {
            "astId": 5826,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "maxSupply",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 5828,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "maxSupplyFrozen",
            "offset": 0,
            "slot": "17",
            "type": "t_bool"
          },
          {
            "astId": 5831,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_currentTokenId",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 6869,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "managementPowerRevoked",
            "offset": 0,
            "slot": "19",
            "type": "t_bool"
          },
          {
            "astId": 86,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "defaultRoyalty",
            "offset": 0,
            "slot": "20",
            "type": "t_struct(TokenRoyalty)28_storage"
          },
          {
            "astId": 91,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_tokenRoyalties",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_struct(TokenRoyalty)28_storage)"
          },
          {
            "astId": 94,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_tokensWithRoyalties",
            "offset": 0,
            "slot": "22",
            "type": "t_struct(UintSet)5664_storage"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "base": "t_bytes32",
            "encoding": "dynamic_array",
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes4": {
            "encoding": "inplace",
            "label": "bytes4",
            "numberOfBytes": "4"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "encoding": "mapping",
            "key": "t_bytes4",
            "label": "mapping(bytes4 => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_struct(TokenRoyalty)28_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct IEIP2981RoyaltyOverride.TokenRoyalty)",
            "numberOfBytes": "32",
            "value": "t_struct(TokenRoyalty)28_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Set)5206_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "astId": 5201,
                "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
                "label": "_values",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "astId": 5205,
                "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
                "label": "_indexes",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(TokenRoyalty)28_storage": {
            "encoding": "inplace",
            "label": "struct IEIP2981RoyaltyOverride.TokenRoyalty",
            "members": [
              {
                "astId": 25,
                "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
                "label": "recipient",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 27,
                "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
                "label": "bps",
                "offset": 20,
                "slot": "0",
                "type": "t_uint16"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(UintSet)5664_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableSet.UintSet",
            "members": [
              {
                "astId": 5663,
                "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
                "label": "_inner",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(Set)5206_storage"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint16": {
            "encoding": "inplace",
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "encoding": "inplace",
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "transferFromBulk(address,address,uint256[])": {
            "notice": "Useful for when user wants to return tokens to get a refund, or when they want to transfer lots of tokens by paying gas fee only once."
          },
          "transferFromBulk(address[],address[],uint256[])": {
            "notice": "Useful for transferring multiple tokens from/to multiple addresses."
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/collections/ERC721/extensions/ERC721AutoIdMinterExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721AutoIdMinterExtension {\\n    function setMaxSupply(uint256 newValue) external;\\n\\n    function freezeMaxSupply() external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\\n */\\nabstract contract ERC721AutoIdMinterExtension is\\n    IERC721AutoIdMinterExtension,\\n    ERC721CollectionMetadataExtension\\n{\\n    using SafeMath for uint256;\\n\\n    uint256 public maxSupply;\\n    bool public maxSupplyFrozen;\\n\\n    uint256 internal _currentTokenId = 0;\\n\\n    function __ERC721AutoIdMinterExtension_init(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721AutoIdMinterExtension_init_unchained(_maxSupply);\\n    }\\n\\n    function __ERC721AutoIdMinterExtension_init_unchained(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        maxSupply = _maxSupply;\\n\\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\\n        _registerInterface(type(IERC721).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMaxSupply(uint256 newValue) \\n        public\\n        virtual\\n        override \\n        onlyOwner \\n    {\\n        require(!maxSupplyFrozen, \\\"FROZEN\\\");\\n        require(newValue >= totalSupply(), \\\"LOWER_THAN_SUPPLY\\\");\\n        maxSupply = newValue;\\n    }\\n\\n    function freezeMaxSupply() external onlyOwner {\\n        maxSupplyFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _currentTokenId;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _mintTo(address to, uint256 count) internal {\\n        require(totalSupply() + count <= maxSupply, \\\"EXCEEDS_SUPPLY\\\");\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 newTokenId = _currentTokenId;\\n            _safeMint(to, newTokenId);\\n            _incrementTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Increments the value of _currentTokenId\\n     */\\n    function _incrementTokenId() internal {\\n        _currentTokenId++;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721CollectionMetadataExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface IERC721CollectionMetadataExtension {\\n    function setContractURI(string memory newValue) external;\\n\\n    function contractURI() external view returns (string memory);\\n}\\n\\n/**\\n * @dev Extension to allow configuring contract-level collection metadata URI.\\n */\\nabstract contract ERC721CollectionMetadataExtension is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721\\n{\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    string private _contractURI;\\n\\n    function __ERC721CollectionMetadataExtension_init(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        __ERC721CollectionMetadataExtension_init_unchained(\\n            name_,\\n            symbol_,\\n            contractURI_\\n        );\\n    }\\n\\n    function __ERC721CollectionMetadataExtension_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _contractURI = contractURI_;\\n\\n        _registerInterface(\\n            type(IERC721CollectionMetadataExtension).interfaceId\\n        );\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setContractURI(string memory newValue) external onlyOwner {\\n        _contractURI = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721AMinterExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport {IERC721AutoIdMinterExtension} from \\\"../../ERC721/extensions/ERC721AutoIdMinterExtension.sol\\\";\\n\\nimport \\\"./ERC721ACollectionMetadataExtension.sol\\\";\\n\\n/**\\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\\n */\\nabstract contract ERC721AMinterExtension is ERC721ACollectionMetadataExtension {\\n    using SafeMath for uint256;\\n\\n    uint256 public maxSupply;\\n    bool public maxSupplyFrozen;\\n\\n    function __ERC721AMinterExtension_init(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721AMinterExtension_init_unchained(_maxSupply);\\n    }\\n\\n    function __ERC721AMinterExtension_init_unchained(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        maxSupply = _maxSupply;\\n\\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721A).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMaxSupply(uint256 newValue) public virtual onlyOwner {\\n        require(!maxSupplyFrozen, \\\"BASE_URI_FROZEN\\\");\\n        require(newValue >= totalSupply(), \\\"LOWER_THAN_SUPPLY\\\");\\n        maxSupply = newValue;\\n    }\\n\\n    function freezeMaxSupply() external onlyOwner {\\n        maxSupplyFrozen = true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _mintTo(address to, uint256 count) internal {\\n        require(totalSupply() + count <= maxSupply, \\\"EXCEEDS_SUPPLY\\\");\\n        _safeMint(to, count);\\n    }\\n}\\n\"\n    },\n    \"erc721a/contracts/ERC721A.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.1.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev ERC721 token receiver interface.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\\n * including the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at `_startTokenId()`\\n * (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Mask of an entry in packed address data.\\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with `_mintERC2309`.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to `_mintERC2309`\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See `_packedOwnershipOf` implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see `_totalMinted`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to `_startTokenId()`\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an ownership that has an address and is not burned\\n                        // before an ownership that does not have an address and is not burned.\\n                        // Hence, curr will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed is zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << BITPOS_NEXT_INITIALIZED`.\\n            result := shl(BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 tokenId = startTokenId;\\n            uint256 end = startTokenId + quantity;\\n            do {\\n                emit Transfer(address(0), to, tokenId++);\\n            } while (tokenId < end);\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        mapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\\n        assembly {\\n            // Compute the slot.\\n            mstore(0x00, tokenId)\\n            mstore(0x20, tokenApprovalsPtr.slot)\\n            approvedAddressSlot := keccak256(0x00, 0x40)\\n            // Load the slot's value from storage.\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the `approvedAddress` is equals to `from` or `msgSender`.\\n     */\\n    function _isOwnerOrApproved(\\n        address approvedAddress,\\n        address from,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            from := and(from, BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, BITMASK_ADDRESS)\\n            // `msgSender == from || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, from), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << BITPOS_EXTRA_DATA;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred.\\n     * This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred.\\n     * This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\n            // We will need 1 32-byte word to store the length,\\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\n            ptr := add(mload(0x40), 128)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, ptr)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := ptr\\n\\n            // We write the string from the rightmost digit to the leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // Costs a bit more than early returning for the zero case,\\n            // but cheaper in terms of deployment and overall runtime costs.\\n            for {\\n                // Initialize and perform the first pass without check.\\n                let temp := value\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\n                ptr := sub(ptr, 1)\\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n            } temp {\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n            } {\\n                // Body of the for loop.\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n            }\\n\\n            let length := sub(end, ptr)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            ptr := sub(ptr, 32)\\n            // Store the length.\\n            mstore(ptr, length)\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721ACollectionMetadataExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport {IERC721CollectionMetadataExtension} from \\\"../../ERC721/extensions/ERC721CollectionMetadataExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow configuring contract-level collection metadata URI.\\n */\\nabstract contract ERC721ACollectionMetadataExtension is\\n    IERC721CollectionMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721A\\n{\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    string private _contractURI;\\n\\n    function __ERC721ACollectionMetadataExtension_init(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        __ERC721ACollectionMetadataExtension_init_unchained(\\n            name_,\\n            symbol_,\\n            contractURI_\\n        );\\n    }\\n\\n    function __ERC721ACollectionMetadataExtension_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _contractURI = contractURI_;\\n\\n        _registerInterface(\\n            type(IERC721CollectionMetadataExtension).interfaceId\\n        );\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721A).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setContractURI(string memory newValue) external onlyOwner {\\n        _contractURI = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721A)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n}\\n\"\n    },\n    \"erc721a/contracts/IERC721A.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.1.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\\n        uint24 extraData;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // ==============================\\n    //            IERC721\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // ==============================\\n    //        IERC721Metadata\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // ==============================\\n    //            IERC2309\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/presets/ERC721ATieredSalesCollection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../../../common/meta-transactions/ERC2771ContextOwnable.sol\\\";\\nimport \\\"../../ERC721/extensions/ERC721RoyaltyExtension.sol\\\";\\nimport \\\"../extensions/ERC721ACollectionMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721APrefixedMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721AMinterExtension.sol\\\";\\nimport \\\"../extensions/ERC721AOwnerMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721ATieringExtension.sol\\\";\\nimport \\\"../extensions/ERC721ARoleBasedMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721ARoleBasedLockableExtension.sol\\\";\\n\\ncontract ERC721ATieredSalesCollection is\\n    Ownable,\\n    ERC165Storage,\\n    WithdrawExtension,\\n    ERC721ACollectionMetadataExtension,\\n    ERC721APrefixedMetadataExtension,\\n    ERC721AOwnerMintExtension,\\n    ERC721ATieringExtension,\\n    ERC721ARoleBasedMintExtension,\\n    ERC721ARoleBasedLockableExtension,\\n    ERC721RoyaltyExtension,\\n    ERC2771ContextOwnable\\n{\\n    struct Config {\\n        string name;\\n        string symbol;\\n        string contractURI;\\n        string placeholderURI;\\n        string tokenURIPrefix;\\n        uint256 maxSupply;\\n        Tier[] tiers;\\n        address defaultRoyaltyAddress;\\n        uint16 defaultRoyaltyBps;\\n        address proceedsRecipient;\\n        address trustedForwarder;\\n    }\\n\\n    constructor(Config memory config) ERC721A(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, deployer);\\n\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(config.proceedsRecipient, WithdrawMode.ANYONE);\\n        __ERC721ACollectionMetadataExtension_init(\\n            config.name,\\n            config.symbol,\\n            config.contractURI\\n        );\\n        __ERC721APrefixedMetadataExtension_init(\\n            config.placeholderURI,\\n            config.tokenURIPrefix\\n        );\\n        __ERC721AMinterExtension_init(config.maxSupply);\\n        __ERC721AOwnerMintExtension_init();\\n        __ERC721ARoleBasedMintExtension_init(deployer);\\n        __ERC721ARoleBasedLockableExtension_init();\\n        __ERC721ATieringExtension_init(config.tiers);\\n        __ERC721RoyaltyExtension_init(\\n            config.defaultRoyaltyAddress,\\n            config.defaultRoyaltyBps\\n        );\\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextOwnable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextOwnable._msgData();\\n    }\\n\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual override(ERC721A, ERC721ALockableExtension) {\\n        ERC721ALockableExtension._beforeTokenTransfers(\\n            from,\\n            to,\\n            startTokenId,\\n            quantity\\n        );\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            ERC721ACollectionMetadataExtension,\\n            ERC721APrefixedMetadataExtension,\\n            ERC721AOwnerMintExtension,\\n            ERC721ARoleBasedMintExtension,\\n            ERC721RoyaltyExtension,\\n            ERC721ARoleBasedLockableExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name()\\n        public\\n        view\\n        override(ERC721A, ERC721ACollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721ACollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(ERC721A, ERC721ACollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721ACollectionMetadataExtension.symbol();\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A, ERC721APrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721APrefixedMetadataExtension.tokenURI(_tokenId);\\n    }\\n\\n    function setMaxSupply(uint256 newValue)\\n        public\\n        virtual\\n        override(ERC721AMinterExtension, ERC721ATieringExtension)\\n        onlyOwner\\n    {\\n        ERC721ATieringExtension.setMaxSupply(newValue);\\n    }\\n}\\n\"\n    },\n    \"contracts/common/WithdrawExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nenum WithdrawMode {\\n    OWNER,\\n    RECIPIENT,\\n    ANYONE,\\n    NOBODY\\n}\\n\\ninterface IWithdrawExtension {\\n    function setWithdrawRecipient(address _withdrawRecipient) external;\\n\\n    function lockWithdrawRecipient() external;\\n\\n    function revokeWithdrawPower() external;\\n\\n    function setWithdrawMode(WithdrawMode _withdrawMode) external;\\n\\n    function lockWithdrawMode() external;\\n\\n    function withdraw(\\n        address[] calldata claimTokens,\\n        uint256[] calldata amounts\\n    ) external;\\n}\\n\\nabstract contract WithdrawExtension is\\n    IWithdrawExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    event WithdrawPowerRevoked();\\n    event Withdrawn(address[] claimTokens, uint256[] amounts);\\n\\n    address public withdrawRecipient;\\n    bool public withdrawRecipientLocked;\\n\\n    bool public withdrawPowerRevoked;\\n\\n    WithdrawMode public withdrawMode;\\n    bool public withdrawModeLocked;\\n\\n    /* INTERNAL */\\n\\n    function __WithdrawExtension_init(\\n        address _withdrawRecipient,\\n        WithdrawMode _withdrawMode\\n    ) internal onlyInitializing {\\n        __WithdrawExtension_init_unchained(_withdrawRecipient, _withdrawMode);\\n    }\\n\\n    function __WithdrawExtension_init_unchained(\\n        address _withdrawRecipient,\\n        WithdrawMode _withdrawMode\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IWithdrawExtension).interfaceId);\\n\\n        withdrawRecipient = _withdrawRecipient;\\n        withdrawMode = _withdrawMode;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setWithdrawRecipient(address _withdrawRecipient)\\n        external\\n        onlyOwner\\n    {\\n        require(!withdrawRecipientLocked, \\\"LOCKED\\\");\\n        withdrawRecipient = _withdrawRecipient;\\n    }\\n\\n    function lockWithdrawRecipient() external onlyOwner {\\n        require(!withdrawRecipientLocked, \\\"LOCKED\\\");\\n        withdrawRecipientLocked = true;\\n    }\\n\\n    function setWithdrawMode(WithdrawMode _withdrawMode) external onlyOwner {\\n        require(!withdrawModeLocked, \\\"LOCKED\\\");\\n        withdrawMode = _withdrawMode;\\n    }\\n\\n    function lockWithdrawMode() external onlyOwner {\\n        require(!withdrawModeLocked, \\\"OCKED\\\");\\n        withdrawModeLocked = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function withdraw(\\n        address[] calldata claimTokens,\\n        uint256[] calldata amounts\\n    ) external {\\n        /**\\n         * We are using msg.sender for smaller attack surface when evaluating\\n         * the sender of the function call. If in future we want to handle \\\"withdraw\\\"\\n         * functionality via meta transactions, we should consider using `_msgSender`\\n         */\\n        _assertWithdrawAccess(msg.sender);\\n\\n        require(withdrawRecipient != address(0), \\\"WITHDRAW/NO_RECIPIENT\\\");\\n        require(!withdrawPowerRevoked, \\\"WITHDRAW/EMERGENCY_POWER_REVOKED\\\");\\n\\n        for (uint256 i = 0; i < claimTokens.length; i++) {\\n            if (claimTokens[i] == address(0)) {\\n                payable(withdrawRecipient).sendValue(amounts[i]);\\n            } else {\\n                IERC20(claimTokens[i]).transfer(withdrawRecipient, amounts[i]);\\n            }\\n        }\\n\\n        emit Withdrawn(claimTokens, amounts);\\n    }\\n\\n    function revokeWithdrawPower() external onlyOwner {\\n        withdrawPowerRevoked = true;\\n        emit WithdrawPowerRevoked();\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _assertWithdrawAccess(address account) internal view {\\n        if (withdrawMode == WithdrawMode.NOBODY) {\\n            revert(\\\"WITHDRAW/LOCKED\\\");\\n        } else if (withdrawMode == WithdrawMode.ANYONE) {\\n            return;\\n        } else if (withdrawMode == WithdrawMode.RECIPIENT) {\\n            require(withdrawRecipient == account, \\\"WITHDRAW/ONLY_RECIPIENT\\\");\\n        } else if (withdrawMode == WithdrawMode.OWNER) {\\n            require(owner() == account, \\\"WITHDRAW/ONLY_OWNER\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/common/meta-transactions/ERC2771ContextOwnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextOwnable is Initializable, Context, Ownable {\\n    address public _trustedForwarder;\\n\\n    function __ERC2771ContextOwnable_init(address trustedForwarder)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC2771ContextOwnable_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771ContextOwnable_init_unchained(address trustedForwarder)\\n        internal\\n        onlyInitializing\\n    {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarder) public onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721RoyaltyExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/RoyaltyOverrideCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"../../../misc/rarible/IRoyalties.sol\\\";\\nimport \\\"../../../misc/rarible/LibPart.sol\\\";\\nimport \\\"../../../misc/rarible/LibRoyaltiesV2.sol\\\";\\n\\ninterface IERC721RoyaltyExtension {\\n    function setTokenRoyalties(\\n        IEIP2981RoyaltyOverride.TokenRoyaltyConfig[] calldata royaltyConfigs\\n    ) external;\\n\\n    function setDefaultRoyalty(\\n        IEIP2981RoyaltyOverride.TokenRoyalty calldata royalty\\n    ) external;\\n\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (LibPart.Part[] memory result);\\n}\\n\\n/**\\n * @dev Extension to signal configured royalty to famous marketplaces as well as ERC2981.\\n *\\n * This extension currently supports Standard ERC2981, Rarible.\\n * Note that OpenSea is supported via Flair metadata feature.\\n */\\nabstract contract ERC721RoyaltyExtension is\\n    IERC721RoyaltyExtension,\\n    IRoyalties,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    EIP2981RoyaltyOverrideCore\\n{\\n    function __ERC721RoyaltyExtension_init(\\n        address defaultRoyaltyReceiver,\\n        uint16 defaultRoyaltyBps\\n    ) internal onlyInitializing {\\n        __ERC721RoyaltyExtension_init_unchained(\\n            defaultRoyaltyReceiver,\\n            defaultRoyaltyBps\\n        );\\n    }\\n\\n    function __ERC721RoyaltyExtension_init_unchained(\\n        address defaultRoyaltyReceiver,\\n        uint16 defaultRoyaltyBps\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721RoyaltyExtension).interfaceId);\\n        _registerInterface(type(IEIP2981).interfaceId);\\n        _registerInterface(type(IEIP2981RoyaltyOverride).interfaceId);\\n        _registerInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES);\\n\\n        TokenRoyalty memory royalty = TokenRoyalty(\\n            defaultRoyaltyReceiver,\\n            defaultRoyaltyBps\\n        );\\n\\n        _setDefaultRoyalty(royalty);\\n    }\\n\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royaltyConfigs)\\n        external\\n        override(IEIP2981RoyaltyOverride, IERC721RoyaltyExtension)\\n        onlyOwner\\n    {\\n        _setTokenRoyalties(royaltyConfigs);\\n    }\\n\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty)\\n        external\\n        override(IEIP2981RoyaltyOverride, IERC721RoyaltyExtension)\\n        onlyOwner\\n    {\\n        _setDefaultRoyalty(royalty);\\n    }\\n\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        override(IRoyalties, IERC721RoyaltyExtension)\\n        returns (LibPart.Part[] memory result)\\n    {\\n        result = new LibPart.Part[](1);\\n\\n        result[0].account = payable(defaultRoyalty.recipient);\\n        result[0].value = defaultRoyalty.bps;\\n\\n        id;\\n        // avoid unused param warning\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, EIP2981RoyaltyOverrideCore)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721APrefixedMetadataExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport {IERC721PrefixedMetadataExtension} from \\\"../../ERC721/extensions/ERC721PrefixedMetadataExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow configuring tokens metadata URI.\\n *      In this extension tokens will have a shared token URI prefix,\\n *      therefore on tokenURI() token's ID will be appended to the base URI.\\n *      It also allows configuring a fallback \\\"placeholder\\\" URI when prefix is not set yet.\\n */\\nabstract contract ERC721APrefixedMetadataExtension is\\n    IERC721PrefixedMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721A\\n{\\n    string internal _placeholderURI;\\n    string internal _tokenURIPrefix;\\n    string internal _tokenURISuffix;\\n\\n    bool public tokenURIFrozen;\\n\\n    function __ERC721APrefixedMetadataExtension_init(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        __ERC721APrefixedMetadataExtension_init_unchained(\\n            placeholderURI_,\\n            tokenURIPrefix_\\n        );\\n    }\\n\\n    function __ERC721APrefixedMetadataExtension_init_unchained(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        _placeholderURI = placeholderURI_;\\n        _tokenURIPrefix = tokenURIPrefix_;\\n        _tokenURISuffix = \\\".json\\\";\\n\\n        _registerInterface(type(IERC721PrefixedMetadataExtension).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPlaceholderURI(string memory newValue) external onlyOwner {\\n        _placeholderURI = newValue;\\n    }\\n\\n    function setTokenURIPrefix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"FROZEN\\\");\\n        _tokenURIPrefix = newValue;\\n    }\\n\\n    function setTokenURISuffix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"FROZEN\\\");\\n        _tokenURISuffix = newValue;\\n    }\\n\\n    function freezeTokenURI() external onlyOwner {\\n        tokenURIFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721A)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function placeholderURI() public view returns (string memory) {\\n        return _placeholderURI;\\n    }\\n\\n    function tokenURIPrefix() public view returns (string memory) {\\n        return _tokenURIPrefix;\\n    }\\n\\n    function tokenURISuffix() public view returns (string memory) {\\n        return _tokenURISuffix;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A, IERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return\\n            bytes(_tokenURIPrefix).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        _tokenURIPrefix,\\n                        Strings.toString(_tokenId),\\n                        _tokenURISuffix\\n                    )\\n                )\\n                : _placeholderURI;\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721AOwnerMintExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721OwnerMintExtension} from \\\"../../ERC721/extensions/ERC721OwnerMintExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow owner to mint directly without paying.\\n */\\nabstract contract ERC721AOwnerMintExtension is\\n    IERC721OwnerMintExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AMinterExtension\\n{\\n    function __ERC721AOwnerMintExtension_init() internal onlyInitializing {\\n        __ERC721AOwnerMintExtension_init_unchained();\\n    }\\n\\n    function __ERC721AOwnerMintExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OwnerMintExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintByOwner(address to, uint256 count) external onlyOwner {\\n        _mintTo(to, count);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721ACollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721ATieringExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721TieringExtension} from \\\"../../ERC721/extensions/ERC721TieringExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow multiple tiers for minting,\\n *      you can configure, different minting window, price, currency, max per wallet, and allowlist per tier.\\n */\\nabstract contract ERC721ATieringExtension is\\n    IERC721TieringExtension,\\n    Initializable,\\n    Ownable,\\n    ERC721AMinterExtension,\\n    ReentrancyGuard\\n{\\n    mapping(uint256 => Tier) public tiers;\\n\\n    uint256 public totalReserved;\\n\\n    mapping(uint256 => uint256) public tierMints;\\n\\n    mapping(uint256 => mapping(address => uint256)) internal walletMinted;\\n\\n    uint256 public reservedMints;\\n\\n    function __ERC721ATieringExtension_init(Tier[] memory _tiers)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721ATieringExtension_init_unchained(_tiers);\\n    }\\n\\n    function __ERC721ATieringExtension_init_unchained(Tier[] memory _tiers)\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721TieringExtension).interfaceId);\\n\\n        for (uint256 i = 0; i < _tiers.length; i++) {\\n            tiers[i] = _tiers[i];\\n            totalReserved += _tiers[i].reserved;\\n        }\\n    }\\n\\n    /* ADMIN */\\n\\n    function configureTiering(uint256 tierId, Tier calldata tier)\\n        public\\n        onlyOwner\\n    {\\n        require(tier.maxAllocation >= tierMints[tierId], \\\"LOWER_THAN_MINTED\\\");\\n\\n        if (tiers[tierId].reserved > 0) {\\n            require(tier.reserved >= tierMints[tierId], \\\"LOW_RESERVE_AMOUNT\\\");\\n        }\\n\\n        if (tierMints[tierId] > 0) {\\n            require(\\n                tier.maxPerWallet >= tiers[tierId].maxPerWallet,\\n                \\\"LOW_MAX_PER_WALLET\\\"\\n            );\\n        }\\n\\n        totalReserved -= tiers[tierId].reserved;\\n        tiers[tierId] = tier;\\n        totalReserved += tier.reserved;\\n\\n        require(totalReserved <= maxSupply, \\\"MAX_SUPPLY_EXCEEDED\\\");\\n    }\\n\\n    function configureTiering(\\n        uint256[] calldata _tierIds,\\n        Tier[] calldata _tiers\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < _tierIds.length; i++) {\\n            configureTiering(_tierIds[i], _tiers[i]);\\n        }\\n    }\\n\\n    /* PUBLIC */\\n\\n    function setMaxSupply(uint256 newValue)\\n        public\\n        virtual\\n        override(ERC721AMinterExtension)\\n        onlyOwner\\n    {\\n        ERC721AMinterExtension.setMaxSupply(newValue);\\n        require(\\n            newValue - totalSupply() >= totalReserved - reservedMints,\\n            \\\"LOWER_THAN_RESERVED\\\"\\n        );\\n    }\\n\\n    function onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) public view returns (bool) {\\n        return\\n            MerkleProof.verify(\\n                proof,\\n                tiers[tierId].merkleRoot,\\n                _generateMerkleLeaf(minter, maxAllowance)\\n            );\\n    }\\n\\n    function eligibleForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) public view returns (uint256 maxMintable) {\\n        require(tiers[tierId].maxPerWallet > 0, \\\"NOT_EXISTS\\\");\\n        require(block.timestamp >= tiers[tierId].start, \\\"NOT_STARTED\\\");\\n        require(block.timestamp <= tiers[tierId].end, \\\"ALREADY_ENDED\\\");\\n\\n        maxMintable = tiers[tierId].maxPerWallet - walletMinted[tierId][minter];\\n\\n        if (tiers[tierId].merkleRoot != bytes32(0)) {\\n            require(\\n                walletMinted[tierId][minter] < maxAllowance,\\n                \\\"MAXED_ALLOWANCE\\\"\\n            );\\n            require(\\n                onTierAllowlist(tierId, minter, maxAllowance, proof),\\n                \\\"NOT_ALLOWLISTED\\\"\\n            );\\n\\n            uint256 remainingAllowance = maxAllowance -\\n                walletMinted[tierId][minter];\\n\\n            if (maxMintable > remainingAllowance) {\\n                maxMintable = remainingAllowance;\\n            }\\n        }\\n    }\\n\\n    function mintByTier(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external payable nonReentrant {\\n        address minter = _msgSender();\\n\\n        uint256 maxMintable = eligibleForTier(\\n            tierId,\\n            minter,\\n            maxAllowance,\\n            proof\\n        );\\n\\n        require(count <= maxMintable, \\\"EXCEEDS_MAX\\\");\\n        require(count <= remainingForTier(tierId), \\\"EXCEEDS_ALLOCATION\\\");\\n        require(\\n            count + tierMints[tierId] <= tiers[tierId].maxAllocation,\\n            \\\"EXCEEDS_ALLOCATION\\\"\\n        );\\n\\n        if (tiers[tierId].currency == address(0)) {\\n            require(\\n                tiers[tierId].price * count <= msg.value,\\n                \\\"INSUFFICIENT_AMOUNT\\\"\\n            );\\n        } else {\\n            IERC20(tiers[tierId].currency).transferFrom(\\n                minter,\\n                address(this),\\n                tiers[tierId].price * count\\n            );\\n        }\\n\\n        walletMinted[tierId][minter] += count;\\n        tierMints[tierId] += count;\\n\\n        if (tiers[tierId].reserved > 0) {\\n            reservedMints += count;\\n        }\\n\\n        _mintTo(minter, count);\\n    }\\n\\n    function remainingForTier(uint256 tierId)\\n        public\\n        view\\n        returns (uint256 tierRemaining)\\n    {\\n        // Substract all the remaining reserved spots from the total remaining supply...\\n        tierRemaining =\\n            (maxSupply - totalSupply()) -\\n            (totalReserved - reservedMints);\\n\\n        // If this tier has reserved spots, add remaining spots back to result...\\n        if (tiers[tierId].reserved > 0) {\\n            tierRemaining += (tiers[tierId].reserved - tierMints[tierId]);\\n        }\\n    }\\n\\n    function walletMintedByTier(uint256 tierId, address wallet)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return walletMinted[tierId][wallet];\\n    }\\n\\n    /* PRIVATE */\\n\\n    function _generateMerkleLeaf(address account, uint256 maxAllowance)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(account, maxAllowance));\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721ARoleBasedMintExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721RoleBasedMintExtension} from \\\"../../ERC721/extensions/ERC721RoleBasedMintExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow holders of a OpenZepplin-based role to mint directly.\\n */\\nabstract contract ERC721ARoleBasedMintExtension is\\n    IERC721RoleBasedMintExtension,\\n    ERC165Storage,\\n    ERC721AMinterExtension,\\n    AccessControl\\n{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    function __ERC721ARoleBasedMintExtension_init(address minter)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721ARoleBasedMintExtension_init_unchained(minter);\\n    }\\n\\n    function __ERC721ARoleBasedMintExtension_init_unchained(address minter)\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721RoleBasedMintExtension).interfaceId);\\n\\n        _setupRole(MINTER_ROLE, minter);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintByRole(address to, uint256 count) external {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"NOT_MINTER_ROLE\\\");\\n\\n        _mintTo(to, count);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            AccessControl,\\n            ERC721ACollectionMetadataExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721ARoleBasedLockableExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ERC721ALockableExtension.sol\\\";\\n\\ninterface IERC721ARoleBasedLockableExtension {\\n    function hasRoleBasedLockableExtension() external view returns (bool);\\n}\\n\\n/**\\n * @dev Extension to allow locking NFTs, for use-cases like staking, without leaving holders wallet, using roles.\\n */\\nabstract contract ERC721ARoleBasedLockableExtension is\\n    IERC721ARoleBasedLockableExtension,\\n    ERC721ALockableExtension,\\n    AccessControl\\n{\\n    using BitMaps for BitMaps.BitMap;\\n\\n    bytes32 public constant LOCKER_ROLE = keccak256(\\\"LOCKER_ROLE\\\");\\n\\n    function __ERC721ARoleBasedLockableExtension_init()\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721ARoleBasedLockableExtension_init_unchained();\\n    }\\n\\n    function __ERC721ARoleBasedLockableExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(\\n            type(IERC721ARoleBasedLockableExtension).interfaceId\\n        );\\n    }\\n\\n    // ADMIN\\n\\n    /**\\n     * Locks token(s) to effectively lock them, while keeping in the same wallet.\\n     * This mechanism prevents them from being transferred, yet still will show correct owner.\\n     */\\n    function lock(uint256 tokenId) public virtual nonReentrant {\\n        require(hasRole(LOCKER_ROLE, msg.sender), \\\"NOT_LOCKER_ROLE\\\");\\n        _lock(tokenId);\\n    }\\n\\n    function lock(uint256[] calldata tokenIds) public virtual nonReentrant {\\n        require(hasRole(LOCKER_ROLE, msg.sender), \\\"STAKABLE_NOT_LOCKER_ROLE\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _lock(tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * Unlocks locked token(s) to be able to transfer.\\n     */\\n    function unlock(uint256 tokenId) public virtual nonReentrant {\\n        require(hasRole(LOCKER_ROLE, msg.sender), \\\"NOT_LOCKER_ROLE\\\");\\n        _unlock(tokenId);\\n    }\\n\\n    function unlock(uint256[] calldata tokenIds) public virtual nonReentrant {\\n        require(hasRole(LOCKER_ROLE, msg.sender), \\\"STAKABLE_NOT_LOCKER_ROLE\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _unlock(tokenIds[i]);\\n        }\\n    }\\n\\n    // PUBLIC\\n\\n    function hasRoleBasedLockableExtension()\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return true;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControl, ERC721ALockableExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\n    },\n    \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\ninterface IEIP2981RoyaltyOverride is IERC165 {\\n\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns(uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external view returns(TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n\\n}\\n\"\n    },\n    \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/RoyaltyOverrideCore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IRoyaltyOverride.sol\\\";\\nimport \\\"../specs/IEIP2981.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\nabstract contract EIP2981RoyaltyOverrideCore is IEIP2981, IEIP2981RoyaltyOverride, ERC165 {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    TokenRoyalty public defaultRoyalty;\\n    mapping(uint256 => TokenRoyalty) private _tokenRoyalties;\\n    EnumerableSet.UintSet private _tokensWithRoyalties;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IEIP2981).interfaceId || interfaceId == type(IEIP2981RoyaltyOverride).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Sets token royalties. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs) internal {\\n        for (uint i = 0; i < royaltyConfigs.length; i++) {\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\n            if (royaltyConfig.recipient == address(0)) {\\n                delete _tokenRoyalties[royaltyConfig.tokenId];\\n                _tokensWithRoyalties.remove(royaltyConfig.tokenId);\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\n            } else {\\n                _tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(royaltyConfig.recipient, royaltyConfig.bps);\\n                _tokensWithRoyalties.add(royaltyConfig.tokenId);\\n                emit TokenRoyaltySet(royaltyConfig.tokenId, royaltyConfig.recipient, royaltyConfig.bps);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets default royalty. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal {\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\n        defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\n     */\\n    function getTokenRoyaltiesCount() external override view returns(uint256) {\\n        return _tokensWithRoyalties.length();\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external override view returns(TokenRoyaltyConfig memory) {\\n        uint256 tokenId = _tokensWithRoyalties.at(index);\\n        TokenRoyalty memory royalty = _tokenRoyalties[tokenId];\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) public override view returns (address, uint256) {\\n        if (_tokenRoyalties[tokenId].recipient != address(0)) {\\n            return (_tokenRoyalties[tokenId].recipient, value*_tokenRoyalties[tokenId].bps/10000);\\n        }\\n        if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\\n            return (defaultRoyalty.recipient, value*defaultRoyalty.bps/10000);\\n        }\\n        return (address(0), 0);\\n    }\\n}\\n\"\n    },\n    \"contracts/misc/rarible/IRoyalties.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface IRoyalties {\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (LibPart.Part[] memory);\\n}\\n\"\n    },\n    \"contracts/misc/rarible/LibPart.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH =\\n        keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\"\n    },\n    \"contracts/misc/rarible/LibRoyaltiesV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\n    },\n    \"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * EIP-2981\\n */\\ninterface IEIP2981 {\\n    /**\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n}\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721PrefixedMetadataExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721PrefixedMetadataExtension {\\n    function setPlaceholderURI(string memory newValue) external;\\n\\n    function setTokenURIPrefix(string memory newValue) external;\\n\\n    function setTokenURISuffix(string memory newValue) external;\\n\\n    function placeholderURI() external view returns (string memory);\\n\\n    function tokenURIPrefix() external view returns (string memory);\\n\\n    function tokenURISuffix() external view returns (string memory);\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    function freezeTokenURI() external;\\n}\\n\\n/**\\n * @dev Extension to allow configuring tokens metadata URI.\\n *      In this extension tokens will have a shared token URI prefix,\\n *      therefore on tokenURI() token's ID will be appended to the base URI.\\n *      It also allows configuring a fallback \\\"placeholder\\\" URI when prefix is not set yet.\\n */\\nabstract contract ERC721PrefixedMetadataExtension is\\n    IERC721PrefixedMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721\\n{\\n    string internal _placeholderURI;\\n    string internal _tokenURIPrefix;\\n    string internal _tokenURISuffix;\\n\\n    bool public tokenURIFrozen;\\n\\n    function __ERC721PrefixedMetadataExtension_init(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        __ERC721PrefixedMetadataExtension_init_unchained(\\n            placeholderURI_,\\n            tokenURIPrefix_\\n        );\\n    }\\n\\n    function __ERC721PrefixedMetadataExtension_init_unchained(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        _placeholderURI = placeholderURI_;\\n        _tokenURIPrefix = tokenURIPrefix_;\\n        _tokenURISuffix = \\\".json\\\";\\n\\n        _registerInterface(type(IERC721PrefixedMetadataExtension).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPlaceholderURI(string memory newValue) external onlyOwner {\\n        _placeholderURI = newValue;\\n    }\\n\\n    function setTokenURIPrefix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"FROZEN\\\");\\n        _tokenURIPrefix = newValue;\\n    }\\n\\n    function setTokenURISuffix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"FROZEN\\\");\\n        _tokenURISuffix = newValue;\\n    }\\n\\n    function freezeTokenURI() external onlyOwner {\\n        tokenURIFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function placeholderURI() public view returns (string memory) {\\n        return _placeholderURI;\\n    }\\n\\n    function tokenURIPrefix() public view returns (string memory) {\\n        return _tokenURIPrefix;\\n    }\\n\\n    function tokenURISuffix() public view returns (string memory) {\\n        return _tokenURISuffix;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, IERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return\\n            bytes(_tokenURIPrefix).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        _tokenURIPrefix,\\n                        Strings.toString(_tokenId),\\n                        _tokenURISuffix\\n                    )\\n                )\\n                : _placeholderURI;\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721OwnerMintExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721OwnerMintExtension {\\n    function mintByOwner(address to, uint256 count) external;\\n}\\n\\n/**\\n * @dev Extension to allow owner to mint directly without paying.\\n */\\nabstract contract ERC721OwnerMintExtension is\\n    IERC721OwnerMintExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension\\n{\\n    function __ERC721OwnerMintExtension_init() internal onlyInitializing {\\n        __ERC721OwnerMintExtension_init_unchained();\\n    }\\n\\n    function __ERC721OwnerMintExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OwnerMintExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintByOwner(address to, uint256 count) external onlyOwner {\\n        _mintTo(to, count);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721TieringExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721TieringExtension {\\n    struct Tier {\\n        uint256 start;\\n        uint256 end;\\n        address currency;\\n        uint256 price;\\n        uint256 maxPerWallet;\\n        bytes32 merkleRoot;\\n        uint256 reserved;\\n        uint256 maxAllocation;\\n    }\\n\\n    function onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external view returns (bool);\\n\\n    function eligibleForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external view returns (uint256);\\n\\n    function mintByTier(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external payable;\\n}\\n\\n/**\\n * @dev Extension to allow multiple tiers for minting,\\n *      you can configure, different minting window, price, currency, max per wallet, and allowlist per tier.\\n */\\nabstract contract ERC721TieringExtension is\\n    IERC721TieringExtension,\\n    Initializable,\\n    Ownable,\\n    ERC721AutoIdMinterExtension,\\n    ReentrancyGuard\\n{\\n    mapping(uint256 => Tier) public tiers;\\n\\n    uint256 public totalReserved;\\n\\n    mapping(uint256 => uint256) public tierMints;\\n\\n    mapping(uint256 => mapping(address => uint256)) public walletMinted;\\n\\n    uint256 public reservedMints;\\n\\n    function __ERC721TieringExtension_init(Tier[] memory _tiers)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721TieringExtension_init_unchained(_tiers);\\n    }\\n\\n    function __ERC721TieringExtension_init_unchained(Tier[] memory _tiers)\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721TieringExtension).interfaceId);\\n\\n        for (uint256 i = 0; i < _tiers.length; i++) {\\n            tiers[i] = _tiers[i];\\n            totalReserved += _tiers[i].reserved;\\n        }\\n    }\\n\\n    /* ADMIN */\\n\\n    function configureTiering(uint256 tierId, Tier calldata tier)\\n        public\\n        onlyOwner\\n    {\\n        require(tier.maxAllocation >= tierMints[tierId], \\\"LOWER_THAN_MINTED\\\");\\n\\n        if (tiers[tierId].reserved > 0) {\\n            require(tier.reserved >= tierMints[tierId], \\\"LOW_RESERVE_AMOUNT\\\");\\n        }\\n\\n        if (tierMints[tierId] > 0) {\\n            require(\\n                tier.maxPerWallet >= tiers[tierId].maxPerWallet,\\n                \\\"LOW_MAX_PER_WALLET\\\"\\n            );\\n        }\\n\\n        totalReserved -= tiers[tierId].reserved;\\n        tiers[tierId] = tier;\\n        totalReserved += tier.reserved;\\n\\n        require(totalReserved <= maxSupply, \\\"MAX_SUPPLY_EXCEEDED\\\");\\n    }\\n\\n    function configureTiering(\\n        uint256[] calldata _tierIds,\\n        Tier[] calldata _tiers\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < _tierIds.length; i++) {\\n            configureTiering(_tierIds[i], _tiers[i]);\\n        }\\n    }\\n\\n    /* PUBLIC */\\n\\n    function setMaxSupply(uint256 newValue)\\n        public\\n        virtual\\n        override(ERC721AutoIdMinterExtension)\\n        onlyOwner\\n    {\\n        ERC721AutoIdMinterExtension.setMaxSupply(newValue);\\n        require(\\n            newValue - totalSupply() >= totalReserved - reservedMints,\\n            \\\"LOWER_THAN_RESERVED\\\"\\n        );\\n    }\\n\\n    function onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) public view returns (bool) {\\n        return\\n            MerkleProof.verify(\\n                proof,\\n                tiers[tierId].merkleRoot,\\n                _generateMerkleLeaf(minter, maxAllowance)\\n            );\\n    }\\n\\n    function eligibleForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) public view returns (uint256 maxMintable) {\\n        require(tiers[tierId].maxPerWallet > 0, \\\"NOT_EXISTS\\\");\\n        require(block.timestamp >= tiers[tierId].start, \\\"NOT_STARTED\\\");\\n        require(block.timestamp <= tiers[tierId].end, \\\"ALREADY_ENDED\\\");\\n\\n        maxMintable = tiers[tierId].maxPerWallet - walletMinted[tierId][minter];\\n\\n        if (tiers[tierId].merkleRoot != bytes32(0)) {\\n            require(\\n                walletMinted[tierId][minter] < maxAllowance,\\n                \\\"MAXED_ALLOWANCE\\\"\\n            );\\n            require(\\n                onTierAllowlist(tierId, minter, maxAllowance, proof),\\n                \\\"NOT_ALLOWLISTED\\\"\\n            );\\n\\n            uint256 remainingAllowance = maxAllowance -\\n                walletMinted[tierId][minter];\\n\\n            if (maxMintable > remainingAllowance) {\\n                maxMintable = remainingAllowance;\\n            }\\n        }\\n    }\\n\\n    function mintByTier(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external payable nonReentrant {\\n        address minter = _msgSender();\\n\\n        uint256 maxMintable = eligibleForTier(\\n            tierId,\\n            minter,\\n            maxAllowance,\\n            proof\\n        );\\n\\n        require(count <= maxMintable, \\\"EXCEEDS_MAX\\\");\\n        require(count <= remainingForTier(tierId), \\\"EXCEEDS_ALLOCATION\\\");\\n        require(\\n            count + tierMints[tierId] <= tiers[tierId].maxAllocation,\\n            \\\"EXCEEDS_ALLOCATION\\\"\\n        );\\n\\n        if (tiers[tierId].currency == address(0)) {\\n            require(\\n                tiers[tierId].price * count <= msg.value,\\n                \\\"INSUFFICIENT_AMOUNT\\\"\\n            );\\n        } else {\\n            IERC20(tiers[tierId].currency).transferFrom(\\n                minter,\\n                address(this),\\n                tiers[tierId].price * count\\n            );\\n        }\\n\\n        walletMinted[tierId][minter] += count;\\n        tierMints[tierId] += count;\\n\\n        if (tiers[tierId].reserved > 0) {\\n            reservedMints += count;\\n        }\\n\\n        _mintTo(minter, count);\\n    }\\n\\n    function remainingForTier(uint256 tierId)\\n        public\\n        view\\n        returns (uint256 tierRemaining)\\n    {\\n        // Substract all the remaining reserved spots from the total remaining supply...\\n        tierRemaining =\\n            (maxSupply - totalSupply()) -\\n            (totalReserved - reservedMints);\\n\\n        // If this tier has reserved spots, add remaining spots back to result...\\n        if (tiers[tierId].reserved > 0) {\\n            tierRemaining += (tiers[tierId].reserved - tierMints[tierId]);\\n        }\\n    }\\n\\n    function walletMintedByTier(uint256 tierId, address wallet)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return walletMinted[tierId][wallet];\\n    }\\n\\n    /* PRIVATE */\\n\\n    function _generateMerkleLeaf(address account, uint256 maxAllowance)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(account, maxAllowance));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721RoleBasedMintExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721RoleBasedMintExtension {\\n    function mintByRole(address to, uint256 count) external;\\n}\\n\\n/**\\n * @dev Extension to allow holders of a OpenZepplin-based role to mint directly.\\n */\\nabstract contract ERC721RoleBasedMintExtension is\\n    IERC721RoleBasedMintExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension,\\n    AccessControl\\n{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    function __ERC721RoleBasedMintExtension_init(address minter)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721RoleBasedMintExtension_init_unchained(minter);\\n    }\\n\\n    function __ERC721RoleBasedMintExtension_init_unchained(address minter)\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721RoleBasedMintExtension).interfaceId);\\n\\n        _setupRole(MINTER_ROLE, minter);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintByRole(address to, uint256 count) external {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"NOT_MINTER_ROLE\\\");\\n\\n        _mintTo(to, count);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            AccessControl,\\n            ERC721CollectionMetadataExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/structs/BitMaps.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721ALockableExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\ninterface IERC721ALockableExtension {\\n    function locked(uint256 tokenId) external view returns (bool);\\n\\n    function lock(uint256 tokenId) external;\\n\\n    function lock(uint256[] calldata tokenIds) external;\\n\\n    function unlock(uint256 tokenId) external;\\n\\n    function unlock(uint256[] calldata tokenIds) external;\\n}\\n\\n/**\\n * @dev Extension to allow locking NFTs, for use-cases like staking, without leaving holders wallet.\\n */\\nabstract contract ERC721ALockableExtension is\\n    IERC721ALockableExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AMinterExtension,\\n    ReentrancyGuard\\n{\\n    using BitMaps for BitMaps.BitMap;\\n\\n    BitMaps.BitMap internal lockedTokens;\\n\\n    function __ERC721ALockableExtension_init() internal onlyInitializing {\\n        __ERC721ALockableExtension_init_unchained();\\n    }\\n\\n    function __ERC721ALockableExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721ALockableExtension).interfaceId);\\n    }\\n\\n    // PUBLIC\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721ACollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * At this moment staking is only possible from a certain address (usually a smart contract).\\n     *\\n     * This is because in almost all cases you want another contract to perform custom logic on lock and unlock operations,\\n     * without allowing users to directly unlock their tokens and sell them, for example.\\n     */\\n    function _lock(uint256 tokenId) internal virtual {\\n        require(!lockedTokens.get(tokenId), \\\"LOCKED\\\");\\n        lockedTokens.set(tokenId);\\n    }\\n\\n    function _unlock(uint256 tokenId) internal virtual {\\n        require(lockedTokens.get(tokenId), \\\"NOT_LOCKED\\\");\\n        lockedTokens.unset(tokenId);\\n    }\\n\\n    /**\\n     * Returns if a token is locked or not.\\n     */\\n    function locked(uint256 tokenId) public view virtual returns (bool) {\\n        return lockedTokens.get(tokenId);\\n    }\\n\\n    function filterUnlocked(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory unlocked = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            if (!locked(ticketTokenIds[i])) {\\n                unlocked[i] = ticketTokenIds[i];\\n            }\\n        }\\n\\n        return unlocked;\\n    }\\n\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual override(ERC721A) {\\n        require(\\n            // We are not checking the quantity because it is only used during mint where users cannot stake/unstake.\\n            !lockedTokens.get(startTokenId),\\n            \\\"LOCKED\\\"\\n        );\\n        super._beforeTokenTransfers(from, to, startTokenId, quantity);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/presets/ERC721ASimpleSalesCollection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../../../common/meta-transactions/ERC2771ContextOwnable.sol\\\";\\nimport \\\"../../ERC721/extensions/ERC721RoyaltyExtension.sol\\\";\\nimport \\\"../extensions/ERC721ACollectionMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721APrefixedMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721AMinterExtension.sol\\\";\\nimport \\\"../extensions/ERC721AOwnerMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721APreSaleExtension.sol\\\";\\nimport \\\"../extensions/ERC721APublicSaleExtension.sol\\\";\\nimport \\\"../extensions/ERC721ARoleBasedMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721ARoleBasedLockableExtension.sol\\\";\\n\\ncontract ERC721ASimpleSalesCollection is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    WithdrawExtension,\\n    ERC721ACollectionMetadataExtension,\\n    ERC721APrefixedMetadataExtension,\\n    ERC721AMinterExtension,\\n    ERC721AOwnerMintExtension,\\n    ERC721APreSaleExtension,\\n    ERC721APublicSaleExtension,\\n    ERC721ARoleBasedMintExtension,\\n    ERC721ARoleBasedLockableExtension,\\n    ERC721RoyaltyExtension,\\n    ERC2771ContextOwnable\\n{\\n    struct Config {\\n        string name;\\n        string symbol;\\n        string contractURI;\\n        string placeholderURI;\\n        string tokenURIPrefix;\\n        uint256 maxSupply;\\n        uint256 preSalePrice;\\n        uint256 preSaleMaxMintPerWallet;\\n        uint256 publicSalePrice;\\n        uint256 publicSaleMaxMintPerTx;\\n        address defaultRoyaltyAddress;\\n        uint16 defaultRoyaltyBps;\\n        address proceedsRecipient;\\n        address trustedForwarder;\\n    }\\n\\n    constructor(Config memory config) ERC721A(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, deployer);\\n\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(config.proceedsRecipient, WithdrawMode.ANYONE);\\n        __ERC721ACollectionMetadataExtension_init(\\n            config.name,\\n            config.symbol,\\n            config.contractURI\\n        );\\n        __ERC721APrefixedMetadataExtension_init(\\n            config.placeholderURI,\\n            config.tokenURIPrefix\\n        );\\n        __ERC721AMinterExtension_init(config.maxSupply);\\n        __ERC721AOwnerMintExtension_init();\\n        __ERC721ARoleBasedMintExtension_init(deployer);\\n        __ERC721ARoleBasedLockableExtension_init();\\n        __ERC721APreSaleExtension_init_unchained(\\n            config.preSalePrice,\\n            config.preSaleMaxMintPerWallet\\n        );\\n        __ERC721APublicSaleExtension_init(\\n            config.publicSalePrice,\\n            config.publicSaleMaxMintPerTx\\n        );\\n        __ERC721RoyaltyExtension_init(\\n            config.defaultRoyaltyAddress,\\n            config.defaultRoyaltyBps\\n        );\\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (address sender)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (bytes calldata)\\n    {\\n        return super._msgData();\\n    }\\n\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual override(ERC721A, ERC721ALockableExtension) {\\n        ERC721ALockableExtension._beforeTokenTransfers(\\n            from,\\n            to,\\n            startTokenId,\\n            quantity\\n        );\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            ERC721ACollectionMetadataExtension,\\n            ERC721APrefixedMetadataExtension,\\n            ERC721APreSaleExtension,\\n            ERC721APublicSaleExtension,\\n            ERC721AOwnerMintExtension,\\n            ERC721ARoleBasedMintExtension,\\n            ERC721ARoleBasedLockableExtension,\\n            ERC721RoyaltyExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name()\\n        public\\n        view\\n        override(ERC721A, ERC721ACollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721ACollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(ERC721A, ERC721ACollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721ACollectionMetadataExtension.symbol();\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A, ERC721APrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721APrefixedMetadataExtension.tokenURI(_tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721APreSaleExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721PreSaleExtension} from \\\"../../ERC721/extensions/ERC721PreSaleExtension.sol\\\";\\n\\n/**\\n * @dev Extension to provide pre-sale capabilities for certain collectors to mint for a specific price.\\n */\\nabstract contract ERC721APreSaleExtension is\\n    IERC721PreSaleExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AMinterExtension,\\n    ReentrancyGuard\\n{\\n    uint256 public preSalePrice;\\n    uint256 public preSaleMaxMintPerWallet;\\n    bytes32 public preSaleAllowlistMerkleRoot;\\n    bool public preSaleStatus;\\n\\n    mapping(address => uint256) internal preSaleAllowlistClaimed;\\n\\n    function __ERC721APreSaleExtension_init(\\n        uint256 _preSalePrice,\\n        uint256 _preSaleMaxMintPerWallet\\n    ) internal onlyInitializing {\\n        __ERC721APreSaleExtension_init_unchained(\\n            _preSalePrice,\\n            _preSaleMaxMintPerWallet\\n        );\\n    }\\n\\n    function __ERC721APreSaleExtension_init_unchained(\\n        uint256 _preSalePrice,\\n        uint256 _preSaleMaxMintPerWallet\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721PreSaleExtension).interfaceId);\\n\\n        preSalePrice = _preSalePrice;\\n        preSaleMaxMintPerWallet = _preSaleMaxMintPerWallet;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPreSalePrice(uint256 newValue) external onlyOwner {\\n        preSalePrice = newValue;\\n    }\\n\\n    function setPreSaleMaxMintPerWallet(uint256 newValue) external onlyOwner {\\n        preSaleMaxMintPerWallet = newValue;\\n    }\\n\\n    function setAllowlistMerkleRoot(bytes32 newRoot) external onlyOwner {\\n        preSaleAllowlistMerkleRoot = newRoot;\\n    }\\n\\n    function togglePreSaleStatus(bool isActive) external onlyOwner {\\n        preSaleStatus = isActive;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721ACollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function onPreSaleAllowList(address minter, bytes32[] calldata proof)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            MerkleProof.verify(\\n                proof,\\n                preSaleAllowlistMerkleRoot,\\n                _generateMerkleLeaf(minter)\\n            );\\n    }\\n\\n    function mintPreSale(uint256 count, bytes32[] calldata proof)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(preSaleStatus, \\\"NOT_ACTIVE\\\");\\n\\n        address to = _msgSender();\\n\\n        require(\\n            MerkleProof.verify(\\n                proof,\\n                preSaleAllowlistMerkleRoot,\\n                _generateMerkleLeaf(to)\\n            ),\\n            \\\"WRONG_PROOF\\\"\\n        );\\n        require(\\n            preSaleAllowlistClaimed[to] + count <= preSaleMaxMintPerWallet,\\n            \\\"PRE_SALE_LIMIT\\\"\\n        );\\n        require(preSalePrice * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n\\n        preSaleAllowlistClaimed[to] += count;\\n\\n        _mintTo(to, count);\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _generateMerkleLeaf(address account)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(account));\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721APublicSaleExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721PublicSaleExtension} from \\\"../../ERC721/extensions/ERC721PublicSaleExtension.sol\\\";\\n\\n/**\\n * @dev Extension to provide pre-sale and public-sale capabilities for collectors to mint for a specific price.\\n */\\nabstract contract ERC721APublicSaleExtension is\\n    IERC721PublicSaleExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AMinterExtension,\\n    ReentrancyGuard\\n{\\n    uint256 public publicSalePrice;\\n    uint256 public publicSaleMaxMintPerTx;\\n    bool public publicSaleStatus;\\n\\n    function __ERC721APublicSaleExtension_init(\\n        uint256 _publicSalePrice,\\n        uint256 _publicSaleMaxMintPerTx\\n    ) internal onlyInitializing {\\n        __ERC721APublicSaleExtension_init_unchained(\\n            _publicSalePrice,\\n            _publicSaleMaxMintPerTx\\n        );\\n    }\\n\\n    function __ERC721APublicSaleExtension_init_unchained(\\n        uint256 _publicSalePrice,\\n        uint256 _publicSaleMaxMintPerTx\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721PublicSaleExtension).interfaceId);\\n\\n        publicSalePrice = _publicSalePrice;\\n        publicSaleMaxMintPerTx = _publicSaleMaxMintPerTx;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPublicSalePrice(uint256 newValue) external onlyOwner {\\n        publicSalePrice = newValue;\\n    }\\n\\n    function setPublicSaleMaxMintPerTx(uint256 newValue) external onlyOwner {\\n        publicSaleMaxMintPerTx = newValue;\\n    }\\n\\n    function togglePublicSaleStatus(bool isActive) external onlyOwner {\\n        publicSaleStatus = isActive;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721ACollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function mintPublicSale(address to, uint256 count)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(publicSaleStatus, \\\"PUBLIC_SALE_NOT_ACTIVE\\\");\\n        require(count <= publicSaleMaxMintPerTx, \\\"PUBLIC_SALE_LIMIT\\\");\\n        require(publicSalePrice * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n\\n        _mintTo(to, count);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721PreSaleExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721PreSaleExtension {\\n    function setPreSalePrice(uint256 newValue) external;\\n\\n    function setPreSaleMaxMintPerWallet(uint256 newValue) external;\\n\\n    function setAllowlistMerkleRoot(bytes32 newRoot) external;\\n\\n    function togglePreSaleStatus(bool isActive) external;\\n\\n    function onPreSaleAllowList(address minter, bytes32[] calldata proof)\\n        external\\n        view\\n        returns (bool);\\n\\n    function mintPreSale(uint256 count, bytes32[] calldata proof)\\n        external\\n        payable;\\n}\\n\\n/**\\n * @dev Extension to provide pre-sale capabilities for certain collectors to mint for a specific price.\\n */\\nabstract contract ERC721PreSaleExtension is\\n    IERC721PreSaleExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension,\\n    ReentrancyGuard\\n{\\n    uint256 public preSalePrice;\\n    uint256 public preSaleMaxMintPerWallet;\\n    bytes32 public preSaleAllowlistMerkleRoot;\\n    bool public preSaleStatus;\\n\\n    mapping(address => uint256) internal preSaleAllowlistClaimed;\\n\\n    function __ERC721PreSaleExtension_init(\\n        uint256 _preSalePrice,\\n        uint256 _preSaleMaxMintPerWallet\\n    ) internal onlyInitializing {\\n        __ERC721PreSaleExtension_init_unchained(\\n            _preSalePrice,\\n            _preSaleMaxMintPerWallet\\n        );\\n    }\\n\\n    function __ERC721PreSaleExtension_init_unchained(\\n        uint256 _preSalePrice,\\n        uint256 _preSaleMaxMintPerWallet\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721PreSaleExtension).interfaceId);\\n\\n        preSalePrice = _preSalePrice;\\n        preSaleMaxMintPerWallet = _preSaleMaxMintPerWallet;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPreSalePrice(uint256 newValue) external onlyOwner {\\n        preSalePrice = newValue;\\n    }\\n\\n    function setPreSaleMaxMintPerWallet(uint256 newValue) external onlyOwner {\\n        preSaleMaxMintPerWallet = newValue;\\n    }\\n\\n    function setAllowlistMerkleRoot(bytes32 newRoot) external onlyOwner {\\n        preSaleAllowlistMerkleRoot = newRoot;\\n    }\\n\\n    function togglePreSaleStatus(bool isActive) external onlyOwner {\\n        preSaleStatus = isActive;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function onPreSaleAllowList(address minter, bytes32[] calldata proof)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            MerkleProof.verify(\\n                proof,\\n                preSaleAllowlistMerkleRoot,\\n                _generateMerkleLeaf(minter)\\n            );\\n    }\\n\\n    function mintPreSale(uint256 count, bytes32[] calldata proof)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(preSaleStatus, \\\"NOT_ACTIVE\\\");\\n\\n        address to = _msgSender();\\n\\n        require(\\n            MerkleProof.verify(\\n                proof,\\n                preSaleAllowlistMerkleRoot,\\n                _generateMerkleLeaf(to)\\n            ),\\n            \\\"WRONG_PROOF\\\"\\n        );\\n        require(\\n            preSaleAllowlistClaimed[to] + count <= preSaleMaxMintPerWallet,\\n            \\\"PRE_SALE_LIMIT\\\"\\n        );\\n        require(preSalePrice * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n\\n        preSaleAllowlistClaimed[to] += count;\\n\\n        _mintTo(to, count);\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _generateMerkleLeaf(address account)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(account));\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721PublicSaleExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721PublicSaleExtension {\\n    function setPublicSalePrice(uint256 newValue) external;\\n\\n    function setPublicSaleMaxMintPerTx(uint256 newValue) external;\\n\\n    function togglePublicSaleStatus(bool isActive) external;\\n\\n    function mintPublicSale(address to, uint256 count) external payable;\\n}\\n\\n/**\\n * @dev Extension to provide pre-sale and public-sale capabilities for collectors to mint for a specific price.\\n */\\nabstract contract ERC721PublicSaleExtension is\\n    IERC721PublicSaleExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension,\\n    ReentrancyGuard\\n{\\n    uint256 public publicSalePrice;\\n    uint256 public publicSaleMaxMintPerTx;\\n    bool public publicSaleStatus;\\n\\n    function __ERC721PublicSaleExtension_init(\\n        uint256 _publicSalePrice,\\n        uint256 _publicSaleMaxMintPerTx\\n    ) internal onlyInitializing {\\n        __ERC721PublicSaleExtension_init_unchained(\\n            _publicSalePrice,\\n            _publicSaleMaxMintPerTx\\n        );\\n    }\\n\\n    function __ERC721PublicSaleExtension_init_unchained(\\n        uint256 _publicSalePrice,\\n        uint256 _publicSaleMaxMintPerTx\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721PublicSaleExtension).interfaceId);\\n\\n        publicSalePrice = _publicSalePrice;\\n        publicSaleMaxMintPerTx = _publicSaleMaxMintPerTx;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPublicSalePrice(uint256 newValue) external onlyOwner {\\n        publicSalePrice = newValue;\\n    }\\n\\n    function setPublicSaleMaxMintPerTx(uint256 newValue) external onlyOwner {\\n        publicSaleMaxMintPerTx = newValue;\\n    }\\n\\n    function togglePublicSaleStatus(bool isActive) external onlyOwner {\\n        publicSaleStatus = isActive;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function mintPublicSale(address to, uint256 count)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(publicSaleStatus, \\\"PUBLIC_SALE_NOT_ACTIVE\\\");\\n        require(count <= publicSaleMaxMintPerTx, \\\"PUBLIC_SALE_LIMIT\\\");\\n        require(publicSalePrice * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n\\n        _mintTo(to, count);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/presets/ERC721TieredSalesCollection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../../../common/meta-transactions/ERC2771ContextOwnable.sol\\\";\\nimport \\\"../extensions/ERC721CollectionMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721PrefixedMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721AutoIdMinterExtension.sol\\\";\\nimport \\\"../extensions/ERC721OwnerMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721TieringExtension.sol\\\";\\nimport \\\"../extensions/ERC721RoleBasedMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721RoyaltyExtension.sol\\\";\\nimport \\\"../extensions/ERC721RoleBasedLockableExtension.sol\\\";\\n\\ncontract ERC721TieredSalesCollection is\\n    Ownable,\\n    ERC165Storage,\\n    WithdrawExtension,\\n    ERC721PrefixedMetadataExtension,\\n    ERC721OwnerMintExtension,\\n    ERC721TieringExtension,\\n    ERC721RoleBasedMintExtension,\\n    ERC721RoleBasedLockableExtension,\\n    ERC721RoyaltyExtension,\\n    ERC2771ContextOwnable\\n{\\n    struct Config {\\n        string name;\\n        string symbol;\\n        string contractURI;\\n        string placeholderURI;\\n        string tokenURIPrefix;\\n        uint256 maxSupply;\\n        Tier[] tiers;\\n        address defaultRoyaltyAddress;\\n        uint16 defaultRoyaltyBps;\\n        address proceedsRecipient;\\n        address trustedForwarder;\\n    }\\n\\n    constructor(Config memory config) ERC721(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, deployer);\\n\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(config.proceedsRecipient, WithdrawMode.ANYONE);\\n        __ERC721CollectionMetadataExtension_init(\\n            config.name,\\n            config.symbol,\\n            config.contractURI\\n        );\\n        __ERC721PrefixedMetadataExtension_init(\\n            config.placeholderURI,\\n            config.tokenURIPrefix\\n        );\\n        __ERC721AutoIdMinterExtension_init(config.maxSupply);\\n        __ERC721OwnerMintExtension_init();\\n        __ERC721RoleBasedMintExtension_init(deployer);\\n        __ERC721RoleBasedLockableExtension_init();\\n        __ERC721TieringExtension_init(config.tiers);\\n        __ERC721RoyaltyExtension_init(\\n            config.defaultRoyaltyAddress,\\n            config.defaultRoyaltyBps\\n        );\\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextOwnable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextOwnable._msgData();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721LockableExtension) {\\n        return ERC721LockableExtension._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name()\\n        public\\n        view\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.symbol();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            ERC721CollectionMetadataExtension,\\n            ERC721PrefixedMetadataExtension,\\n            ERC721OwnerMintExtension,\\n            ERC721RoleBasedMintExtension,\\n            ERC721RoyaltyExtension,\\n            ERC721RoleBasedLockableExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721PrefixedMetadataExtension.tokenURI(_tokenId);\\n    }\\n\\n    function setMaxSupply(uint256 newValue) \\n        public \\n        virtual \\n        override(ERC721AutoIdMinterExtension, ERC721TieringExtension) \\n        onlyOwner  \\n    {\\n        ERC721TieringExtension.setMaxSupply(newValue);\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721RoleBasedLockableExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ERC721LockableExtension.sol\\\";\\n\\ninterface IERC721RoleBasedLockableExtension {\\n    function hasRoleBasedLockableExtension() external view returns (bool);\\n}\\n\\n/**\\n * @dev Extension to allow locking NFTs, for use-cases like staking, without leaving holders wallet, using roles.\\n */\\nabstract contract ERC721RoleBasedLockableExtension is\\n    IERC721RoleBasedLockableExtension,\\n    ERC721LockableExtension,\\n    AccessControl\\n{\\n    using BitMaps for BitMaps.BitMap;\\n\\n    bytes32 public constant LOCKER_ROLE = keccak256(\\\"LOCKER_ROLE\\\");\\n\\n    function __ERC721RoleBasedLockableExtension_init()\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721RoleBasedLockableExtension_init_unchained();\\n    }\\n\\n    function __ERC721RoleBasedLockableExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721RoleBasedLockableExtension).interfaceId);\\n    }\\n\\n    // ADMIN\\n\\n    /**\\n     * Locks token(s) to effectively lock them, while keeping in the same wallet.\\n     * This mechanism prevents them from being transferred, yet still will show correct owner.\\n     */\\n    function lock(uint256 tokenId) public virtual nonReentrant {\\n        require(hasRole(LOCKER_ROLE, msg.sender), \\\"NOT_LOCKER_ROLE\\\");\\n        _lock(tokenId);\\n    }\\n\\n    function lock(uint256[] calldata tokenIds) public virtual nonReentrant {\\n        require(hasRole(LOCKER_ROLE, msg.sender), \\\"NOT_LOCKER_ROLE\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _lock(tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * Unlocks locked token(s) to be able to transfer.\\n     */\\n    function unlock(uint256 tokenId) public virtual nonReentrant {\\n        require(hasRole(LOCKER_ROLE, msg.sender), \\\"NOT_LOCKER_ROLE\\\");\\n        _unlock(tokenId);\\n    }\\n\\n    function unlock(uint256[] calldata tokenIds) public virtual nonReentrant {\\n        require(hasRole(LOCKER_ROLE, msg.sender), \\\"NOT_LOCKER_ROLE\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _unlock(tokenIds[i]);\\n        }\\n    }\\n\\n    // PUBLIC\\n\\n    function hasRoleBasedLockableExtension()\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return true;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControl, ERC721LockableExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721LockableExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721LockableExtension {\\n    function locked(uint256 tokenId) external view returns (bool);\\n\\n    function lock(uint256 tokenId) external;\\n\\n    function lock(uint256[] calldata tokenIds) external;\\n\\n    function unlock(uint256 tokenId) external;\\n\\n    function unlock(uint256[] calldata tokenIds) external;\\n}\\n\\n/**\\n * @dev Extension to allow locking NFTs, for use-cases like staking, without leaving holders wallet.\\n */\\nabstract contract ERC721LockableExtension is\\n    IERC721LockableExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension,\\n    ReentrancyGuard\\n{\\n    using BitMaps for BitMaps.BitMap;\\n\\n    BitMaps.BitMap internal lockedTokens;\\n\\n    function __ERC721LockableExtension_init() internal onlyInitializing {\\n        __ERC721LockableExtension_init_unchained();\\n    }\\n\\n    function __ERC721LockableExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721LockableExtension).interfaceId);\\n    }\\n\\n    // PUBLIC\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Returns if a token is locked or not.\\n     */\\n    function locked(uint256 tokenId) public view virtual returns (bool) {\\n        return lockedTokens.get(tokenId);\\n    }\\n\\n    function filterUnlocked(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory unlocked = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            if (!locked(ticketTokenIds[i])) {\\n                unlocked[i] = ticketTokenIds[i];\\n            }\\n        }\\n\\n        return unlocked;\\n    }\\n\\n    /* INTERNAL */\\n\\n    /**\\n     * At this moment staking is only possible from a certain address (usually a smart contract).\\n     *\\n     * This is because in almost all cases you want another contract to perform custom logic on lock and unlock operations,\\n     * without allowing users to directly unlock their tokens and sell them, for example.\\n     */\\n    function _lock(uint256 tokenId) internal virtual {\\n        require(!lockedTokens.get(tokenId), \\\"LOCKED\\\");\\n        lockedTokens.set(tokenId);\\n    }\\n\\n    function _unlock(uint256 tokenId) internal virtual {\\n        require(lockedTokens.get(tokenId), \\\"NOT_LOCKED\\\");\\n        lockedTokens.unset(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721) {\\n        require(!lockedTokens.get(tokenId), \\\"LOCKED\\\");\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/presets/ERC721SimpleSalesCollection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../../../common/meta-transactions/ERC2771ContextOwnable.sol\\\";\\nimport \\\"../extensions/ERC721CollectionMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721PrefixedMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721AutoIdMinterExtension.sol\\\";\\nimport \\\"../extensions/ERC721OwnerMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721PreSaleExtension.sol\\\";\\nimport \\\"../extensions/ERC721PublicSaleExtension.sol\\\";\\nimport \\\"../extensions/ERC721RoleBasedMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721RoyaltyExtension.sol\\\";\\nimport \\\"../extensions/ERC721RoleBasedLockableExtension.sol\\\";\\nimport \\\"../extensions/ERC721BulkifyExtension.sol\\\";\\n\\ncontract ERC721SimpleSalesCollection is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    WithdrawExtension,\\n    ERC721PrefixedMetadataExtension,\\n    ERC721OwnerMintExtension,\\n    ERC721PreSaleExtension,\\n    ERC721PublicSaleExtension,\\n    ERC721RoleBasedMintExtension,\\n    ERC721RoleBasedLockableExtension,\\n    ERC721RoyaltyExtension,\\n    ERC2771ContextOwnable,\\n    ERC721BulkifyExtension\\n{\\n    struct Config {\\n        string name;\\n        string symbol;\\n        string contractURI;\\n        string placeholderURI;\\n        string tokenURIPrefix;\\n        uint256 maxSupply;\\n        uint256 preSalePrice;\\n        uint256 preSaleMaxMintPerWallet;\\n        uint256 publicSalePrice;\\n        uint256 publicSaleMaxMintPerTx;\\n        address defaultRoyaltyAddress;\\n        uint16 defaultRoyaltyBps;\\n        address proceedsRecipient;\\n        address trustedForwarder;\\n    }\\n\\n    constructor(Config memory config) ERC721(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, deployer);\\n\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(config.proceedsRecipient, WithdrawMode.ANYONE);\\n        __ERC721CollectionMetadataExtension_init(\\n            config.name,\\n            config.symbol,\\n            config.contractURI\\n        );\\n        __ERC721PrefixedMetadataExtension_init(\\n            config.placeholderURI,\\n            config.tokenURIPrefix\\n        );\\n        __ERC721AutoIdMinterExtension_init(config.maxSupply);\\n        __ERC721OwnerMintExtension_init();\\n        __ERC721RoleBasedMintExtension_init(deployer);\\n        __ERC721RoleBasedLockableExtension_init();\\n        __ERC721PreSaleExtension_init_unchained(\\n            config.preSalePrice,\\n            config.preSaleMaxMintPerWallet\\n        );\\n        __ERC721PublicSaleExtension_init(\\n            config.publicSalePrice,\\n            config.publicSaleMaxMintPerTx\\n        );\\n        __ERC721RoyaltyExtension_init(\\n            config.defaultRoyaltyAddress,\\n            config.defaultRoyaltyBps\\n        );\\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\\n        __ERC721BulkifyExtension_init();\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (address sender)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (bytes calldata)\\n    {\\n        return super._msgData();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721LockableExtension) {\\n        return ERC721LockableExtension._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name()\\n        public\\n        view\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.symbol();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            ERC721PrefixedMetadataExtension,\\n            ERC721PreSaleExtension,\\n            ERC721PublicSaleExtension,\\n            ERC721OwnerMintExtension,\\n            ERC721RoleBasedMintExtension,\\n            ERC721RoyaltyExtension,\\n            ERC721RoleBasedLockableExtension,\\n            ERC721BulkifyExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721PrefixedMetadataExtension.tokenURI(_tokenId);\\n    }\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            uint256 _maxSupply,\\n            uint256 _totalSupply,\\n            uint256 _senderBalance,\\n            uint256 _preSalePrice,\\n            uint256 _preSaleMaxMintPerWallet,\\n            uint256 _preSaleAlreadyClaimed,\\n            bool _preSaleActive,\\n            uint256 _publicSalePrice,\\n            uint256 _publicSaleMaxMintPerTx,\\n            bool _publicSaleActive\\n        )\\n    {\\n        uint256 balance = 0;\\n\\n        if (_msgSender() != address(0)) {\\n            balance = this.balanceOf(_msgSender());\\n        }\\n\\n        return (\\n            maxSupply,\\n            this.totalSupply(),\\n            balance,\\n            preSalePrice,\\n            preSaleMaxMintPerWallet,\\n            preSaleAllowlistClaimed[_msgSender()],\\n            preSaleStatus,\\n            publicSalePrice,\\n            publicSaleMaxMintPerTx,\\n            publicSaleStatus\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721BulkifyExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721BulkifyExtension {\\n    function transferFromBulk(\\n        address from,\\n        address to,\\n        uint256[] memory tokenIds\\n    ) external;\\n\\n    function transferFromBulk(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory tokenIds\\n    ) external;\\n}\\n\\n/**\\n * @dev Extension to add bulk operations to a standard ERC721 contract.\\n */\\nabstract contract ERC721BulkifyExtension is\\n    IERC721BulkifyExtension,\\n    Initializable,\\n    ERC165Storage\\n{\\n    function __ERC721BulkifyExtension_init() internal onlyInitializing {\\n        __ERC721BulkifyExtension_init_unchained();\\n    }\\n\\n    function __ERC721BulkifyExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721BulkifyExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Useful for when user wants to return tokens to get a refund,\\n     * or when they want to transfer lots of tokens by paying gas fee only once.\\n     */\\n    function transferFromBulk(\\n        address from,\\n        address to,\\n        uint256[] memory tokenIds\\n    ) public virtual {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            IERC721(address(this)).transferFrom(from, to, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * Useful for transferring multiple tokens from/to multiple addresses.\\n     */\\n    function transferFromBulk(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory tokenIds\\n    ) public virtual {\\n        require(from.length == to.length, \\\"FROM_TO_LENGTH_MISMATCH\\\");\\n        require(from.length == tokenIds.length, \\\"FROM_TOKEN_LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            IERC721(address(this)).transferFrom(from[i], to[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../../../common/meta-transactions/ERC2771ContextOwnable.sol\\\";\\nimport \\\"../extensions/ERC721CollectionMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721PrefixedMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721AutoIdMinterExtension.sol\\\";\\nimport \\\"../extensions/ERC721OwnerMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721OwnerManagedExtension.sol\\\";\\nimport \\\"../extensions/ERC721RoyaltyExtension.sol\\\";\\nimport \\\"../extensions/ERC721BulkifyExtension.sol\\\";\\n\\ncontract ERC721ManagedPrefixedCollection is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC2771ContextOwnable,\\n    ERC721CollectionMetadataExtension,\\n    ERC721PrefixedMetadataExtension,\\n    ERC721AutoIdMinterExtension,\\n    ERC721OwnerMintExtension,\\n    ERC721OwnerManagedExtension,\\n    ERC721RoyaltyExtension,\\n    ERC721BulkifyExtension\\n{\\n    struct Config {\\n        string name;\\n        string symbol;\\n        string contractURI;\\n        string placeholderURI;\\n        string tokenURIPrefix;\\n        address[] initialHolders;\\n        uint256[] initialAmounts;\\n        uint256 maxSupply;\\n        address defaultRoyaltyAddress;\\n        uint16 defaultRoyaltyBps;\\n        address trustedForwarder;\\n    }\\n\\n    constructor(Config memory config) ERC721(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        require(\\n            config.initialHolders.length == config.initialAmounts.length,\\n            \\\"ERC721/INVALID_INITIAL_ARGS\\\"\\n        );\\n\\n        _transferOwnership(deployer);\\n\\n        __ERC721CollectionMetadataExtension_init(\\n            config.name,\\n            config.symbol,\\n            config.contractURI\\n        );\\n        __ERC721PrefixedMetadataExtension_init(\\n            config.placeholderURI,\\n            config.tokenURIPrefix\\n        );\\n        __ERC721AutoIdMinterExtension_init(config.maxSupply);\\n        __ERC721OwnerMintExtension_init();\\n        __ERC721OwnerManagedExtension_init();\\n        __ERC721RoyaltyExtension_init(\\n            config.defaultRoyaltyAddress,\\n            config.defaultRoyaltyBps\\n        );\\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\\n        __ERC721BulkifyExtension_init();\\n\\n        maxSupply = config.maxSupply;\\n\\n        for (uint256 i = 0; i < config.initialHolders.length; i++) {\\n            _mintTo(config.initialHolders[i], config.initialAmounts[i]);\\n        }\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (address sender)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (bytes calldata)\\n    {\\n        return super._msgData();\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name()\\n        public\\n        view\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.symbol();\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721OwnerManagedExtension)\\n        returns (bool)\\n    {\\n        return ERC721OwnerManagedExtension.isApprovedForAll(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            ERC721CollectionMetadataExtension,\\n            ERC721OwnerMintExtension,\\n            ERC721OwnerManagedExtension,\\n            ERC721PrefixedMetadataExtension,\\n            ERC721RoyaltyExtension,\\n            ERC721BulkifyExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721PrefixedMetadataExtension.tokenURI(_tokenId);\\n    }\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            uint256 _maxSupply,\\n            uint256 _totalSupply,\\n            uint256 _senderBalance\\n        )\\n    {\\n        uint256 balance = 0;\\n\\n        if (_msgSender() != address(0)) {\\n            balance = this.balanceOf(_msgSender());\\n        }\\n\\n        return (maxSupply, this.totalSupply(), balance);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721OwnerManagedExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721OwnerManagedExtension {\\n    function revokeManagementPower() external;\\n}\\n\\n/**\\n * @dev Extension to allow owner to transfer tokens on behalf of owners. Only useful for certain use-cases.\\n */\\nabstract contract ERC721OwnerManagedExtension is\\n    IERC721OwnerManagedExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension\\n{\\n    bool public managementPowerRevoked;\\n\\n    function __ERC721OwnerManagedExtension_init() internal onlyInitializing {\\n        __ERC721OwnerManagedExtension_init_unchained();\\n    }\\n\\n    function __ERC721OwnerManagedExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OwnerManagedExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function revokeManagementPower() external onlyOwner {\\n        managementPowerRevoked = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    /**\\n     * Override isApprovedForAll to allow owner to transfer tokens.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override(ERC721)\\n        returns (bool)\\n    {\\n        if (!managementPowerRevoked) {\\n            if (operator == super.owner()) {\\n                return true;\\n            }\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/presets/ERC721AOneOfOneCollection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../../common/meta-transactions/ERC2771ContextOwnable.sol\\\";\\nimport \\\"../../ERC721/extensions/ERC721RoyaltyExtension.sol\\\";\\nimport \\\"../extensions/ERC721AMinterExtension.sol\\\";\\nimport \\\"../extensions/ERC721ACollectionMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721APerTokenMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721AOneOfOneMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721AOwnerMintExtension.sol\\\";\\n\\ncontract ERC721AOneOfOneCollection is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721ACollectionMetadataExtension,\\n    ERC721AOwnerMintExtension,\\n    ERC721AOneOfOneMintExtension,\\n    ERC721RoyaltyExtension,\\n    ERC2771ContextOwnable\\n{\\n    struct Config {\\n        string name;\\n        string symbol;\\n        string contractURI;\\n        uint256 maxSupply;\\n        address defaultRoyaltyAddress;\\n        uint16 defaultRoyaltyBps;\\n        address trustedForwarder;\\n    }\\n\\n    constructor(Config memory config) ERC721A(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, deployer);\\n        _setupRole(MINTER_ROLE, deployer);\\n\\n        _transferOwnership(deployer);\\n\\n        __ERC721ACollectionMetadataExtension_init(\\n            config.name,\\n            config.symbol,\\n            config.contractURI\\n        );\\n        __ERC721APerTokenMetadataExtension_init();\\n        __ERC721AOwnerMintExtension_init();\\n        __ERC721AOneOfOneMintExtension_init();\\n        __ERC721AMinterExtension_init(config.maxSupply);\\n        __ERC721RoyaltyExtension_init(\\n            config.defaultRoyaltyAddress,\\n            config.defaultRoyaltyBps\\n        );\\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\\n    }\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        virtual\\n        override(ERC721A, ERC721AOneOfOneMintExtension)\\n    {\\n        return ERC721AOneOfOneMintExtension._burn(tokenId);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (address sender)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (bytes calldata)\\n    {\\n        return super._msgData();\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            ERC721ACollectionMetadataExtension,\\n            ERC721AOwnerMintExtension,\\n            ERC721AOneOfOneMintExtension,\\n            ERC721RoyaltyExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name()\\n        public\\n        view\\n        override(\\n            ERC721ACollectionMetadataExtension,\\n            ERC721AOneOfOneMintExtension\\n        )\\n        returns (string memory)\\n    {\\n        return ERC721AOneOfOneMintExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(\\n            ERC721ACollectionMetadataExtension,\\n            ERC721AOneOfOneMintExtension\\n        )\\n        returns (string memory)\\n    {\\n        return ERC721AOneOfOneMintExtension.symbol();\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A, ERC721AOneOfOneMintExtension)\\n        returns (string memory)\\n    {\\n        return ERC721AOneOfOneMintExtension.tokenURI(_tokenId);\\n    }\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            uint256 _maxSupply,\\n            uint256 _totalSupply,\\n            uint256 _senderBalance\\n        )\\n    {\\n        uint256 balance = 0;\\n\\n        if (_msgSender() != address(0)) {\\n            balance = this.balanceOf(_msgSender());\\n        }\\n\\n        return (maxSupply, this.totalSupply(), balance);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721APerTokenMetadataExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport {IERC721PerTokenMetadataExtension} from \\\"../../ERC721/extensions/ERC721PerTokenMetadataExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow configuring collection and tokens metadata URI.\\n *      In this extension each token will have a different independent token URI set by contract owner.\\n *      To enable true self-custody for token owners, an admin can freeze URIs using a token ID pointer that can only be increased.\\n */\\nabstract contract ERC721APerTokenMetadataExtension is\\n    IERC721PerTokenMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721A\\n{\\n    uint256 public lastFrozenTokenId;\\n\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function __ERC721APerTokenMetadataExtension_init()\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721APerTokenMetadataExtension_init_unchained();\\n    }\\n\\n    function __ERC721APerTokenMetadataExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721PerTokenMetadataExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function freezeTokenURIs(uint256 _lastFrozenTokenId) external onlyOwner {\\n        require(_lastFrozenTokenId > lastFrozenTokenId, \\\"CANNOT_UNFREEZE\\\");\\n        lastFrozenTokenId = _lastFrozenTokenId;\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string memory tokenURI)\\n        external\\n        onlyOwner\\n    {\\n        require(tokenId > lastFrozenTokenId, \\\"FROZEN\\\");\\n        _setTokenURI(tokenId, tokenURI);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721A)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721URIStorage: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n        internal\\n        virtual\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721URIStorage: URI set of nonexistent token\\\"\\n        );\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721AOneOfOneMintExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\nimport \\\"./ERC721APerTokenMetadataExtension.sol\\\";\\n\\nimport {IERC721OneOfOneMintExtension} from \\\"../../ERC721/extensions/ERC721OneOfOneMintExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow owner to mint 1-of-1 NFTs by providing dedicated metadata URI for each token.\\n */\\nabstract contract ERC721AOneOfOneMintExtension is\\n    IERC721OneOfOneMintExtension,\\n    AccessControl,\\n    ERC721AMinterExtension,\\n    ERC721APerTokenMetadataExtension\\n{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    function __ERC721AOneOfOneMintExtension_init() internal onlyInitializing {\\n        __ERC721APerTokenMetadataExtension_init();\\n        __ERC721AOneOfOneMintExtension_init_unchained();\\n    }\\n\\n    function __ERC721AOneOfOneMintExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OneOfOneMintExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintWithTokenURIsByOwner(\\n        address to,\\n        uint256 count,\\n        string[] memory tokenURIs\\n    ) external onlyOwner {\\n        uint256 startingTokenId = _nextTokenId();\\n        _mintTo(to, count);\\n        for (uint256 i = 0; i < count; i++) {\\n            _setTokenURI(startingTokenId + i, tokenURIs[i]);\\n        }\\n    }\\n\\n    function mintWithTokenURIsByRole(\\n        address to,\\n        uint256 count,\\n        string[] memory tokenURIs\\n    ) external {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"NOT_MINTER_ROLE\\\");\\n\\n        uint256 startingTokenId = _nextTokenId();\\n        _mintTo(to, count);\\n        for (uint256 i = 0; i < count; i++) {\\n            _setTokenURI(startingTokenId + i, tokenURIs[i]);\\n        }\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            AccessControl,\\n            ERC721ACollectionMetadataExtension,\\n            ERC721APerTokenMetadataExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name()\\n        public\\n        view\\n        virtual\\n        override(ERC721A, ERC721ACollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721ACollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        virtual\\n        override(ERC721A, ERC721ACollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721ACollectionMetadataExtension.symbol();\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC721A,\\n            ERC721APerTokenMetadataExtension,\\n            IERC721OneOfOneMintExtension\\n        )\\n        returns (string memory)\\n    {\\n        return ERC721APerTokenMetadataExtension.tokenURI(tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        virtual\\n        override(ERC721A, ERC721APerTokenMetadataExtension)\\n    {\\n        return ERC721APerTokenMetadataExtension._burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721PerTokenMetadataExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\ninterface IERC721PerTokenMetadataExtension {\\n    function freezeTokenURIs(uint256 _lastFrozenTokenId) external;\\n\\n    function setTokenURI(uint256 tokenId, string memory tokenURI) external;\\n}\\n\\n/**\\n * @dev Extension to allow configuring collection and tokens metadata URI.\\n *      In this extension each token will have a different independent token URI set by contract owner.\\n *      To enable true self-custody for token owners, an admin can freeze URIs using a token ID pointer that can only be increased.\\n */\\nabstract contract ERC721PerTokenMetadataExtension is\\n    IERC721PerTokenMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721URIStorage\\n{\\n    uint256 public lastFrozenTokenId;\\n\\n    function __ERC721PerTokenMetadataExtension_init()\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721PerTokenMetadataExtension_init_unchained();\\n    }\\n\\n    function __ERC721PerTokenMetadataExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721PerTokenMetadataExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function freezeTokenURIs(uint256 _lastFrozenTokenId) external onlyOwner {\\n        require(_lastFrozenTokenId > lastFrozenTokenId, \\\"CANNOT_UNFREEZE\\\");\\n        lastFrozenTokenId = _lastFrozenTokenId;\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string memory tokenURI)\\n        external\\n        onlyOwner\\n    {\\n        require(tokenId > lastFrozenTokenId, \\\"FROZEN\\\");\\n        _setTokenURI(tokenId, tokenURI);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721OneOfOneMintExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\nimport \\\"./ERC721PerTokenMetadataExtension.sol\\\";\\n\\ninterface IERC721OneOfOneMintExtension {\\n    function mintWithTokenURIsByOwner(\\n        address to,\\n        uint256 count,\\n        string[] memory tokenURIs\\n    ) external;\\n\\n    function mintWithTokenURIsByRole(\\n        address to,\\n        uint256 count,\\n        string[] memory tokenURIs\\n    ) external;\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @dev Extension to allow owner to mint 1-of-1 NFTs by providing dedicated metadata URI for each token.\\n */\\nabstract contract ERC721OneOfOneMintExtension is\\n    IERC721OneOfOneMintExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    AccessControl,\\n    ERC721AutoIdMinterExtension,\\n    ERC721PerTokenMetadataExtension\\n{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    function __ERC721OneOfOneMintExtension_init() internal onlyInitializing {\\n        __ERC721OneOfOneMintExtension_init_unchained();\\n    }\\n\\n    function __ERC721OneOfOneMintExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OneOfOneMintExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintWithTokenURIsByOwner(\\n        address to,\\n        uint256 count,\\n        string[] memory tokenURIs\\n    ) external onlyOwner {\\n        uint256 startingTokenId = _currentTokenId;\\n        _mintTo(to, count);\\n        for (uint256 i = 0; i < count; i++) {\\n            _setTokenURI(startingTokenId + i, tokenURIs[i]);\\n        }\\n    }\\n\\n    function mintWithTokenURIsByRole(\\n        address to,\\n        uint256 count,\\n        string[] memory tokenURIs\\n    ) external {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"NOT_MINTER_ROLE\\\");\\n\\n        uint256 startingTokenId = _currentTokenId;\\n        _mintTo(to, count);\\n        for (uint256 i = 0; i < count; i++) {\\n            _setTokenURI(startingTokenId + i, tokenURIs[i]);\\n        }\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            AccessControl,\\n            ERC721CollectionMetadataExtension,\\n            ERC721PerTokenMetadataExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name()\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.symbol();\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721URIStorage, IERC721OneOfOneMintExtension)\\n        returns (string memory)\\n    {\\n        return ERC721URIStorage.tokenURI(tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        virtual\\n        override(ERC721, ERC721URIStorage)\\n    {\\n        return ERC721URIStorage._burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/presets/ERC721OneOfOneCollection.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"../../../common/meta-transactions/ERC2771ContextOwnable.sol\\\";\\nimport \\\"../extensions/ERC721CollectionMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721PerTokenMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721OneOfOneMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721AutoIdMinterExtension.sol\\\";\\nimport \\\"../extensions/ERC721OwnerMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721RoyaltyExtension.sol\\\";\\n\\ncontract ERC721OneOfOneCollection is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721PerTokenMetadataExtension,\\n    ERC721OwnerMintExtension,\\n    ERC721RoyaltyExtension,\\n    ERC721OneOfOneMintExtension,\\n    ERC2771ContextOwnable\\n{\\n    struct Config {\\n        string name;\\n        string symbol;\\n        string contractURI;\\n        uint256 maxSupply;\\n        address defaultRoyaltyAddress;\\n        uint16 defaultRoyaltyBps;\\n        address trustedForwarder;\\n    }\\n\\n    constructor(Config memory config) ERC721(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, deployer);\\n        _setupRole(MINTER_ROLE, deployer);\\n\\n        _transferOwnership(deployer);\\n\\n        __ERC721CollectionMetadataExtension_init(\\n            config.name,\\n            config.symbol,\\n            config.contractURI\\n        );\\n        __ERC721PerTokenMetadataExtension_init();\\n        __ERC721OwnerMintExtension_init();\\n        __ERC721OneOfOneMintExtension_init();\\n        __ERC721AutoIdMinterExtension_init(config.maxSupply);\\n        __ERC721RoyaltyExtension_init(\\n            config.defaultRoyaltyAddress,\\n            config.defaultRoyaltyBps\\n        );\\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\\n    }\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        virtual\\n        override(ERC721, ERC721OneOfOneMintExtension, ERC721URIStorage)\\n    {\\n        return ERC721OneOfOneMintExtension._burn(tokenId);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (address sender)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (bytes calldata)\\n    {\\n        return super._msgData();\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            ERC721OwnerMintExtension,\\n            ERC721OneOfOneMintExtension,\\n            ERC721PerTokenMetadataExtension,\\n            ERC721RoyaltyExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name()\\n        public\\n        view\\n        override(\\n            ERC721,\\n            ERC721OneOfOneMintExtension,\\n            ERC721CollectionMetadataExtension\\n        )\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(\\n            ERC721,\\n            ERC721OneOfOneMintExtension,\\n            ERC721CollectionMetadataExtension\\n        )\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.symbol();\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721OneOfOneMintExtension, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return ERC721OneOfOneMintExtension.tokenURI(_tokenId);\\n    }\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            uint256 _maxSupply,\\n            uint256 _totalSupply,\\n            uint256 _senderBalance\\n        )\\n    {\\n        uint256 balance = 0;\\n\\n        if (_msgSender() != address(0)) {\\n            balance = this.balanceOf(_msgSender());\\n        }\\n\\n        return (maxSupply, this.totalSupply(), balance);\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/presets/ERC20LockableToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\nimport \\\"../extensions/ERC20RoleBasedLockingExtension.sol\\\";\\n\\ncontract ERC20LockableToken is\\n    Initializable,\\n    ERC165Storage,\\n    AccessControl,\\n    ERC20,\\n    ERC20Burnable,\\n    Pausable,\\n    ERC20RoleBasedLockingExtension\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    struct Config {\\n        string name;\\n        string symbol;\\n    }\\n\\n    constructor(Config memory config) ERC20(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _name = config.name;\\n        _symbol = config.symbol;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, deployer);\\n        _grantRole(PAUSER_ROLE, deployer);\\n        _grantRole(MINTER_ROLE, deployer);\\n\\n        __ERC20RoleBasedLockingExtension_init(deployer);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /* ADMIN */\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, AccessControl, ERC20RoleBasedLockingExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n        virtual\\n        override(ERC20, ERC20RoleBasedLockingExtension)\\n        whenNotPaused\\n    {\\n        ERC20RoleBasedLockingExtension._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/extensions/ERC20RoleBasedLockingExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface ERC20RoleBasedLockingExtensionInterface {\\n    function lockForAll() external;\\n\\n    function unlockForAll() external;\\n\\n    function canTransfer(address) external view returns (bool);\\n}\\n\\n/**\\n * @dev Extension to allow locking transfers and only allow certain addresses do to transfers.\\n */\\nabstract contract ERC20RoleBasedLockingExtension is\\n    Initializable,\\n    ERC165Storage,\\n    AccessControl,\\n    ERC20,\\n    ERC20RoleBasedLockingExtensionInterface\\n{\\n    bytes32 public constant TRANSFER_ROLE = keccak256(\\\"TRANSFER_ROLE\\\");\\n\\n    constructor() {}\\n\\n    function __ERC20RoleBasedLockingExtension_init(address deployer)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC20RoleBasedLockingExtension_init_unchained(deployer);\\n    }\\n\\n    function __ERC20RoleBasedLockingExtension_init_unchained(address deployer)\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(\\n            type(ERC20RoleBasedLockingExtensionInterface).interfaceId\\n        );\\n\\n        _grantRole(TRANSFER_ROLE, deployer);\\n    }\\n\\n    /* ADMIN */\\n\\n    function lockForAll() external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"NOT_ADMIN\\\");\\n\\n        _revokeRole(TRANSFER_ROLE, address(0));\\n    }\\n\\n    function unlockForAll() external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"NOT_ADMIN\\\");\\n\\n        _grantRole(TRANSFER_ROLE, address(0));\\n    }\\n\\n    /* PUBLIC */\\n\\n    function canTransfer(address operator)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return hasRole(TRANSFER_ROLE, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, AccessControl)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        require(\\n            hasRole(TRANSFER_ROLE, address(0)) ||\\n                hasRole(TRANSFER_ROLE, _msgSender()),\\n            \\\"TRANSFER_LOCKED\\\"\\n        );\\n\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/tokens/presets/ERC20BasicToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract ERC20BasicToken is\\n    Initializable,\\n    ERC20,\\n    ERC20Burnable,\\n    Pausable,\\n    AccessControl\\n{\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    struct Config {\\n        string name;\\n        string symbol;\\n    }\\n\\n    constructor(Config memory config) ERC20(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _name = config.name;\\n        _symbol = config.symbol;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, deployer);\\n        _grantRole(PAUSER_ROLE, deployer);\\n        _grantRole(MINTER_ROLE, deployer);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\n    },\n    \"contracts/test/TestERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\ncontract TestERC721 is ERC721(\\\"FlairTest\\\", \\\"FTS\\\"), ERC721Enumerable {\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Enumerable) {\\n        return super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function mintExact(address to, uint256 tokenId) public returns (bool) {\\n        _mint(to, tokenId);\\n        return true;\\n    }\\n\\n    function mintBulk(address to, uint256 total) public returns (bool) {\\n        for (uint256 i = 0; i < total; i++) {\\n            _mint(to, totalSupply());\\n        }\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/presets/ERC721ShareVestingStream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721ShareSplitExtension.sol\\\";\\nimport \\\"../extensions/ERC721VestingReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\ncontract ERC721ShareVestingStream is\\n    Initializable,\\n    Ownable,\\n    ERC721VestingReleaseExtension,\\n    ERC721ShareSplitExtension,\\n    ERC721LockableClaimExtension,\\n    WithdrawExtension\\n{\\n    string public constant name = \\\"ERC721 Share Vesting Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Core\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Vesting release extension\\n        uint64 startTimestamp;\\n        uint64 durationSeconds;\\n        // Share split extension\\n        uint256[] tokenIds;\\n        uint256[] shares;\\n        // Lockable claim extension\\n        uint64 claimLockedUntil;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(deployer, WithdrawMode.OWNER);\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721VestingReleaseExtension_init(\\n            config.startTimestamp,\\n            config.durationSeconds\\n        );\\n        __ERC721ShareSplitExtension_init(config.tokenIds, config.shares);\\n        __ERC721LockableClaimExtension_init(config.claimLockedUntil);\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal override(ERC721MultiTokenStream, ERC721LockableClaimExtension) {\\n        ERC721MultiTokenStream._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/extensions/ERC721ShareSplitExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721ShareSplitExtension {\\n    function hasERC721ShareSplitExtension() external view returns (bool);\\n\\n    function setSharesForTokens(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _shares\\n    ) external;\\n\\n    function getSharesByTokens(uint256[] calldata _tokenIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\\nabstract contract ERC721ShareSplitExtension is\\n    IERC721ShareSplitExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    event SharesUpdated(uint256 tokenId, uint256 prevShares, uint256 newShares);\\n\\n    // Sum of all the share units ever configured\\n    uint256 public totalShares;\\n\\n    // Map of ticket token ID -> share of the stream\\n    mapping(uint256 => uint256) public shares;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721ShareSplitExtension_init(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _shares\\n    ) internal onlyInitializing {\\n        __ERC721ShareSplitExtension_init_unchained(_tokenIds, _shares);\\n    }\\n\\n    function __ERC721ShareSplitExtension_init_unchained(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _shares\\n    ) internal onlyInitializing {\\n        require(_shares.length == _tokenIds.length, \\\"ARGS_MISMATCH\\\");\\n        _updateShares(_tokenIds, _shares);\\n\\n        _registerInterface(type(IERC721ShareSplitExtension).interfaceId);\\n    }\\n\\n    function setSharesForTokens(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _shares\\n    ) public onlyOwner {\\n        require(_shares.length == _tokenIds.length, \\\"ARGS_MISMATCH\\\");\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n\\n        _updateShares(_tokenIds, _shares);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721ShareSplitExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function getSharesByTokens(uint256[] calldata _tokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _shares = new uint256[](_tokenIds.length);\\n\\n        for (uint256 i = 0; i < _shares.length; i++) {\\n            _shares[i] = shares[_tokenIds[i]];\\n        }\\n\\n        return _shares;\\n    }\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view override returns (uint256) {\\n        claimToken_;\\n\\n        return (totalReleasedAmount_ * shares[ticketTokenId_]) / totalShares;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _updateShares(uint256[] memory _tokenIds, uint256[] memory _shares)\\n        private\\n    {\\n        for (uint256 i = 0; i < _shares.length; i++) {\\n            _updateShares(_tokenIds[i], _shares[i]);\\n        }\\n    }\\n\\n    function _updateShares(uint256 tokenId, uint256 newShares) private {\\n        uint256 prevShares = shares[tokenId];\\n\\n        shares[tokenId] = newShares;\\n        totalShares = totalShares + newShares - prevShares;\\n\\n        require(totalShares >= 0, \\\"NEGATIVE_SHARES\\\");\\n\\n        emit SharesUpdated(tokenId, prevShares, newShares);\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/extensions/ERC721VestingReleaseExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721VestingReleaseExtension {\\n    function hasERC721VestingReleaseExtension() external view returns (bool);\\n\\n    function setVestingStartTimestamp(uint64 newValue) external;\\n\\n    function setVestingDurationSeconds(uint64 newValue) external;\\n}\\n\\nabstract contract ERC721VestingReleaseExtension is\\n    IERC721VestingReleaseExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    // Start of the vesting schedule\\n    uint64 public vestingStartTimestamp;\\n\\n    // Duration of the vesting schedule\\n    uint64 public vestingDurationSeconds;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721VestingReleaseExtension_init(\\n        uint64 _vestingStartTimestamp,\\n        uint64 _vestingDurationSeconds\\n    ) internal onlyInitializing {\\n        __ERC721VestingReleaseExtension_init_unchained(\\n            _vestingStartTimestamp,\\n            _vestingDurationSeconds\\n        );\\n    }\\n\\n    function __ERC721VestingReleaseExtension_init_unchained(\\n        uint64 _vestingStartTimestamp,\\n        uint64 _vestingDurationSeconds\\n    ) internal onlyInitializing {\\n        vestingStartTimestamp = _vestingStartTimestamp;\\n        vestingDurationSeconds = _vestingDurationSeconds;\\n\\n        _registerInterface(type(IERC721VestingReleaseExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setVestingStartTimestamp(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        vestingStartTimestamp = newValue;\\n    }\\n\\n    function setVestingDurationSeconds(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        vestingDurationSeconds = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721VestingReleaseExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 _streamTotalSupply,\\n        uint256 _ticketTokenId,\\n        address _claimToken\\n    ) internal view override returns (uint256) {\\n        _ticketTokenId;\\n        _claimToken;\\n\\n        if (block.timestamp < vestingStartTimestamp) {\\n            return 0;\\n        } else if (\\n            block.timestamp > vestingStartTimestamp + vestingDurationSeconds\\n        ) {\\n            return _streamTotalSupply;\\n        } else {\\n            return\\n                (_streamTotalSupply *\\n                    (block.timestamp - vestingStartTimestamp)) /\\n                vestingDurationSeconds;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/extensions/ERC721LockableClaimExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721LockableClaimExtension {\\n    function hasERC721LockableClaimExtension() external view returns (bool);\\n\\n    function setClaimLockedUntil(uint64 newValue) external;\\n}\\n\\nabstract contract ERC721LockableClaimExtension is\\n    IERC721LockableClaimExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    // Claiming is only possible after this time (unix timestamp)\\n    uint64 public claimLockedUntil;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721LockableClaimExtension_init(uint64 _claimLockedUntil)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721LockableClaimExtension_init_unchained(_claimLockedUntil);\\n    }\\n\\n    function __ERC721LockableClaimExtension_init_unchained(\\n        uint64 _claimLockedUntil\\n    ) internal onlyInitializing {\\n        claimLockedUntil = _claimLockedUntil;\\n\\n        _registerInterface(type(IERC721LockableClaimExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setClaimLockedUntil(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        claimLockedUntil = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721LockableClaimExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal virtual override {\\n        ticketTokenId_;\\n        claimToken_;\\n        beneficiary_;\\n\\n        require(claimLockedUntil < block.timestamp, \\\"CLAIM_LOCKED\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/base/ERC721MultiTokenStream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ninterface IERC721MultiTokenStream {\\n    // Claim native currency for a single ticket token\\n    function claim(uint256 ticketTokenId) external;\\n\\n    // Claim an erc20 claim token for a single ticket token\\n    function claim(uint256 ticketTokenId, address claimToken) external;\\n\\n    // Claim native currency for multiple ticket tokens (only if all owned by sender)\\n    function claim(uint256[] calldata ticketTokenIds) external;\\n\\n    // Claim native or erc20 tokens for multiple ticket tokens (only if all owned by `owner`)\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address owner\\n    ) external;\\n\\n    // Total native currency ever supplied to this stream\\n    function streamTotalSupply() external view returns (uint256);\\n\\n    // Total erc20 token ever supplied to this stream by claim token address\\n    function streamTotalSupply(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed from this stream\\n    function streamTotalClaimed() external view returns (uint256);\\n\\n    // Total erc20 token ever claimed from this stream by claim token address\\n    function streamTotalClaimed(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for a single ticket token\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for multiple token IDs\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total erc20 token ever claimed for multiple token IDs\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) external view returns (uint256);\\n\\n    // Calculate currently claimable amount for a specific ticket token ID and a specific claim token address\\n    // Pass 0x0000000000000000000000000000000000000000 as claim token to represent native currency\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        external\\n        view\\n        returns (uint256 claimableAmount);\\n}\\n\\nabstract contract ERC721MultiTokenStream is\\n    IERC721MultiTokenStream,\\n    IERC721Receiver,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    struct Entitlement {\\n        uint256 totalClaimed;\\n        uint256 lastClaimedAt;\\n    }\\n\\n    // Config\\n    address public ticketToken;\\n\\n    // Locks changing the config until this timestamp is reached\\n    uint64 public lockedUntilTimestamp;\\n\\n    // Map of ticket token ID -> claim token address -> entitlement\\n    mapping(uint256 => mapping(address => Entitlement)) public entitlements;\\n\\n    // Map of claim token address -> Total amount claimed by all holders\\n    mapping(address => uint256) internal _streamTotalClaimed;\\n\\n    /* EVENTS */\\n\\n    event Claim(\\n        address operator,\\n        address beneficiary,\\n        uint256 ticketTokenId,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    event ClaimMany(\\n        address operator,\\n        address beneficiary,\\n        uint256[] ticketTokenIds,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    function __ERC721MultiTokenStream_init(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        __ERC721MultiTokenStream_init_unchained(\\n            _ticketToken,\\n            _lockedUntilTimestamp\\n        );\\n    }\\n\\n    function __ERC721MultiTokenStream_init_unchained(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        ticketToken = _ticketToken;\\n        lockedUntilTimestamp = _lockedUntilTimestamp;\\n\\n        _registerInterface(type(IERC721MultiTokenStream).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function lockUntil(uint64 newValue) public onlyOwner {\\n        require(newValue > lockedUntilTimestamp, \\\"CANNOT_REWIND\\\");\\n        lockedUntilTimestamp = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    receive() external payable {\\n        require(msg.value > 0);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function claim(uint256 ticketTokenId) public {\\n        claim(ticketTokenId, address(0));\\n    }\\n\\n    function claim(uint256 ticketTokenId, address claimToken)\\n        public\\n        nonReentrant\\n    {\\n        /* CHECKS */\\n        address beneficiary = _msgSender();\\n        _beforeClaim(ticketTokenId, claimToken, beneficiary);\\n\\n        uint256 claimable = streamClaimableAmount(ticketTokenId, claimToken);\\n        require(claimable > 0, \\\"NOTHING_TO_CLAIM\\\");\\n\\n        /* EFFECTS */\\n\\n        entitlements[ticketTokenId][claimToken].totalClaimed += claimable;\\n        entitlements[ticketTokenId][claimToken].lastClaimedAt = block.timestamp;\\n\\n        _streamTotalClaimed[claimToken] += claimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(beneficiary)).sendValue(claimable);\\n        } else {\\n            IERC20(claimToken).transfer(beneficiary, claimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit Claim(\\n            _msgSender(),\\n            beneficiary,\\n            ticketTokenId,\\n            claimToken,\\n            claimable\\n        );\\n    }\\n\\n    function claim(uint256[] calldata ticketTokenIds) public {\\n        claim(ticketTokenIds, address(0), _msgSender());\\n    }\\n\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address beneficiary\\n    ) public nonReentrant {\\n        uint256 totalClaimable;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            _beforeClaim(ticketTokenIds[i], claimToken, beneficiary);\\n\\n            /* EFFECTS */\\n            uint256 claimable = streamClaimableAmount(\\n                ticketTokenIds[i],\\n                claimToken\\n            );\\n\\n            if (claimable > 0) {\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .totalClaimed += claimable;\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .lastClaimedAt = block.timestamp;\\n\\n                totalClaimable += claimable;\\n            }\\n        }\\n\\n        _streamTotalClaimed[claimToken] += totalClaimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(beneficiary)).sendValue(totalClaimable);\\n        } else {\\n            IERC20(claimToken).transfer(beneficiary, totalClaimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit ClaimMany(\\n            _msgSender(),\\n            beneficiary,\\n            ticketTokenIds,\\n            claimToken,\\n            totalClaimable\\n        );\\n    }\\n\\n    /* READ ONLY */\\n\\n    function streamTotalSupply() public view returns (uint256) {\\n        return streamTotalSupply(address(0));\\n    }\\n\\n    function streamTotalSupply(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (claimToken == address(0)) {\\n            return _streamTotalClaimed[claimToken] + address(this).balance;\\n        }\\n\\n        return\\n            _streamTotalClaimed[claimToken] +\\n            IERC20(claimToken).balanceOf(address(this));\\n    }\\n\\n    function streamTotalClaimed() public view returns (uint256) {\\n        return _streamTotalClaimed[address(0)];\\n    }\\n\\n    function streamTotalClaimed(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _streamTotalClaimed[claimToken];\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][address(0)].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamTotalClaimed(ticketTokenIds, address(0));\\n    }\\n\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimed = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimed += entitlements[ticketTokenIds[i]][claimToken].totalClaimed;\\n        }\\n\\n        return claimed;\\n    }\\n\\n    function streamClaimableAmount(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimable = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimable += streamClaimableAmount(ticketTokenIds[i], claimToken);\\n        }\\n\\n        return claimable;\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamClaimableAmount(ticketTokenId, address(0));\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 totalReleased = _totalTokenReleasedAmount(\\n            _totalStreamReleasedAmount(\\n                streamTotalSupply(claimToken),\\n                ticketTokenId,\\n                claimToken\\n            ),\\n            ticketTokenId,\\n            claimToken\\n        );\\n\\n        return\\n            totalReleased -\\n            entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    /* INTERNAL */\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal virtual {\\n        require(\\n            IERC721(ticketToken).ownerOf(ticketTokenId_) == beneficiary_,\\n            \\\"NOT_NFT_OWNER\\\"\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721InstantReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721ShareSplitExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\ncontract ERC721ShareInstantStream is\\n    Initializable,\\n    Ownable,\\n    ERC721InstantReleaseExtension,\\n    ERC721ShareSplitExtension,\\n    ERC721LockableClaimExtension,\\n    WithdrawExtension\\n{\\n    string public constant name = \\\"ERC721 Share Instant Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Share split extension\\n        uint256[] tokenIds;\\n        uint256[] shares;\\n        // Lockable claim extension\\n        uint64 claimLockedUntil;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(deployer, WithdrawMode.OWNER);\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721InstantReleaseExtension_init();\\n        __ERC721ShareSplitExtension_init(config.tokenIds, config.shares);\\n        __ERC721LockableClaimExtension_init(config.claimLockedUntil);\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal override(ERC721MultiTokenStream, ERC721LockableClaimExtension) {\\n        ERC721MultiTokenStream._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/extensions/ERC721InstantReleaseExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721InstantReleaseExtension {\\n    function hasERC721InstantReleaseExtension() external view returns (bool);\\n}\\n\\nabstract contract ERC721InstantReleaseExtension is\\n    IERC721InstantReleaseExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    /* INIT */\\n\\n    function __ERC721InstantReleaseExtension_init() internal onlyInitializing {\\n        __ERC721InstantReleaseExtension_init_unchained();\\n    }\\n\\n    function __ERC721InstantReleaseExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721InstantReleaseExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721InstantReleaseExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal pure override returns (uint256) {\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        return streamTotalSupply_;\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/presets/ERC721ShareEmissionStream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721EmissionReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721ShareSplitExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\ncontract ERC721ShareEmissionStream is\\n    Initializable,\\n    Ownable,\\n    ERC721EmissionReleaseExtension,\\n    ERC721ShareSplitExtension,\\n    ERC721LockableClaimExtension,\\n    WithdrawExtension\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Share Emission Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Emission release extension\\n        uint256 emissionRate;\\n        uint64 emissionTimeUnit;\\n        uint64 emissionStart;\\n        uint64 emissionEnd;\\n        // Share split extension\\n        uint256[] tokenIds;\\n        uint256[] shares;\\n        // Lockable claim extension\\n        uint64 claimLockedUntil;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(deployer, WithdrawMode.OWNER);\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721EmissionReleaseExtension_init(\\n            config.emissionRate,\\n            config.emissionTimeUnit,\\n            config.emissionStart,\\n            config.emissionEnd\\n        );\\n        __ERC721ShareSplitExtension_init(config.tokenIds, config.shares);\\n        __ERC721LockableClaimExtension_init(config.claimLockedUntil);\\n    }\\n\\n    function rateByToken(uint256[] calldata tokenIds)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 totalRate)\\n    {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            totalRate += emissionRate / shares[tokenIds[i]];\\n        }\\n\\n        return totalRate;\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    )\\n        internal\\n        override(\\n            ERC721MultiTokenStream,\\n            ERC721LockableClaimExtension,\\n            ERC721EmissionReleaseExtension\\n        )\\n    {\\n        ERC721MultiTokenStream._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721EmissionReleaseExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/extensions/ERC721EmissionReleaseExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721EmissionReleaseExtension {\\n    function hasERC721EmissionReleaseExtension() external view returns (bool);\\n\\n    function setEmissionRate(uint256 newValue) external;\\n\\n    function setEmissionTimeUnit(uint64 newValue) external;\\n\\n    function setEmissionStart(uint64 newValue) external;\\n\\n    function setEmissionEnd(uint64 newValue) external;\\n\\n    function releasedAmountUntil(uint64 calcUntil)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function emissionAmountUntil(uint64 calcUntil)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function rateByToken(uint256[] calldata tokenIds)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721EmissionReleaseExtension is\\n    IERC721EmissionReleaseExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    // Number of tokens released every `emissionTimeUnit`\\n    uint256 public emissionRate;\\n\\n    // Time unit to release tokens, users can only claim once every `emissionTimeUnit`\\n    uint64 public emissionTimeUnit;\\n\\n    // When emission and calculating tokens starts\\n    uint64 public emissionStart;\\n\\n    // When to stop calculating the tokens released\\n    uint64 public emissionEnd;\\n\\n    /* INIT */\\n\\n    function __ERC721EmissionReleaseExtension_init(\\n        uint256 _emissionRate,\\n        uint64 _emissionTimeUnit,\\n        uint64 _emissionStart,\\n        uint64 _emissionEnd\\n    ) internal onlyInitializing {\\n        __ERC721EmissionReleaseExtension_init_unchained(\\n            _emissionRate,\\n            _emissionTimeUnit,\\n            _emissionStart,\\n            _emissionEnd\\n        );\\n    }\\n\\n    function __ERC721EmissionReleaseExtension_init_unchained(\\n        uint256 _emissionRate,\\n        uint64 _emissionTimeUnit,\\n        uint64 _emissionStart,\\n        uint64 _emissionEnd\\n    ) internal onlyInitializing {\\n        emissionRate = _emissionRate;\\n        emissionTimeUnit = _emissionTimeUnit;\\n        emissionStart = _emissionStart;\\n        emissionEnd = _emissionEnd;\\n\\n        _registerInterface(type(IERC721EmissionReleaseExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setEmissionRate(uint256 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        emissionRate = newValue;\\n    }\\n\\n    function setEmissionTimeUnit(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        emissionTimeUnit = newValue;\\n    }\\n\\n    function setEmissionStart(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        emissionStart = newValue;\\n    }\\n\\n    function setEmissionEnd(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        emissionEnd = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721EmissionReleaseExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function releasedAmountUntil(uint64 calcUntil)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return\\n            emissionRate *\\n            // Intentionally rounded down:\\n            ((calcUntil - emissionStart) / emissionTimeUnit);\\n    }\\n\\n    function emissionAmountUntil(uint64 calcUntil)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return ((calcUntil - emissionStart) * emissionRate) / emissionTimeUnit;\\n    }\\n\\n    function rateByToken(uint256[] calldata tokenIds)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /* INTERNAL */\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual override returns (uint256) {\\n        streamTotalSupply_;\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        if (block.timestamp < emissionStart) {\\n            return 0;\\n        } else if (emissionEnd > 0 && block.timestamp > emissionEnd) {\\n            return releasedAmountUntil(emissionEnd);\\n        } else {\\n            return releasedAmountUntil(uint64(block.timestamp));\\n        }\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal virtual override {\\n        beneficiary_;\\n\\n        require(emissionStart < block.timestamp, \\\"NOT_STARTED\\\");\\n\\n        require(\\n            entitlements[ticketTokenId_][claimToken_].lastClaimedAt <\\n                block.timestamp - emissionTimeUnit,\\n            \\\"TOO_EARLY\\\"\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721EmissionReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721EqualSplitExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockedStakingExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ncontract ERC721LockedStakingEmissionStream is\\n    Initializable,\\n    Ownable,\\n    ERC721EmissionReleaseExtension,\\n    ERC721EqualSplitExtension,\\n    ERC721LockedStakingExtension,\\n    ERC721LockableClaimExtension,\\n    WithdrawExtension\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Locked Staking Emission Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Locked staking extension\\n        uint64 minStakingDuration; // in seconds. Minimum time the NFT must stay locked before unstaking.\\n        uint64 maxStakingTotalDurations; // in seconds. Maximum sum total of all durations staking that will be counted (across all stake/unstakes for each token).\\n        // Emission release extension\\n        uint256 emissionRate;\\n        uint64 emissionTimeUnit;\\n        uint64 emissionStart;\\n        uint64 emissionEnd;\\n        // Equal split extension\\n        uint256 totalTickets;\\n        // Lockable claim extension\\n        uint64 claimLockedUntil;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(deployer, WithdrawMode.OWNER);\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721LockedStakingExtension_init(\\n            config.minStakingDuration,\\n            config.maxStakingTotalDurations\\n        );\\n        __ERC721EmissionReleaseExtension_init(\\n            config.emissionRate,\\n            config.emissionTimeUnit,\\n            config.emissionStart,\\n            config.emissionEnd\\n        );\\n        __ERC721EqualSplitExtension_init(config.totalTickets);\\n        __ERC721LockableClaimExtension_init(config.claimLockedUntil);\\n    }\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    )\\n        internal\\n        view\\n        virtual\\n        override(ERC721MultiTokenStream, ERC721EmissionReleaseExtension)\\n        returns (uint256)\\n    {\\n        // Removing the logic from emission extension because it is irrevelant when staking.\\n        return 0;\\n    }\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    )\\n        internal\\n        view\\n        virtual\\n        override(ERC721MultiTokenStream, ERC721EqualSplitExtension)\\n        returns (uint256)\\n    {\\n        totalReleasedAmount_;\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        // Get the rate per token to calculate based on stake duration\\n        return\\n            (emissionRate / totalTickets) *\\n            // Intentionally rounded down\\n            (totalStakedDuration(ticketTokenId_) / emissionTimeUnit);\\n    }\\n\\n    function _stakingTimeLimit()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint64)\\n    {\\n        if (emissionEnd > 0) {\\n            return emissionEnd;\\n        }\\n\\n        return super._stakingTimeLimit();\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    )\\n        internal\\n        override(\\n            ERC721MultiTokenStream,\\n            ERC721EmissionReleaseExtension,\\n            ERC721LockableClaimExtension\\n        )\\n    {\\n        ERC721MultiTokenStream._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721EmissionReleaseExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n    }\\n\\n    /* PUBLIC */\\n\\n    function stake(uint256 tokenId) public override nonReentrant {\\n        require(uint64(block.timestamp) >= emissionStart, \\\"NOT_STARTED_YET\\\");\\n\\n        super.stake(tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public override nonReentrant {\\n        require(uint64(block.timestamp) >= emissionStart, \\\"NOT_STARTED_YET\\\");\\n\\n        super.stake(tokenIds);\\n    }\\n\\n    function unstake(uint256 tokenId) public override nonReentrant {\\n        super.unstake(tokenId);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) public override nonReentrant {\\n        super.unstake(tokenIds);\\n    }\\n\\n    function rateByToken(uint256[] calldata tokenIds)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        uint256 staked;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (lastStakingTime[tokenIds[i]] > 0) {\\n                staked++;\\n            }\\n        }\\n\\n        return (emissionRate * staked) / totalTickets;\\n    }\\n\\n    function rewardAmountByToken(uint256 ticketTokenId)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return\\n            ((emissionRate * totalStakedDuration(ticketTokenId)) /\\n                totalTickets) / emissionTimeUnit;\\n    }\\n\\n    function rewardAmountByToken(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        virtual\\n        returns (uint256 total)\\n    {\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            total += rewardAmountByToken(ticketTokenIds[i]);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/extensions/ERC721EqualSplitExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721EqualSplitExtension {\\n    function hasERC721EqualSplitExtension() external view returns (bool);\\n\\n    function setTotalTickets(uint256 newValue) external;\\n}\\n\\nabstract contract ERC721EqualSplitExtension is\\n    IERC721EqualSplitExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    // Total number of ERC721 tokens to calculate their equal split share\\n    uint256 public totalTickets;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721EqualSplitExtension_init(uint256 _totalTickets)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721EqualSplitExtension_init_unchained(_totalTickets);\\n    }\\n\\n    function __ERC721EqualSplitExtension_init_unchained(uint256 _totalTickets)\\n        internal\\n        onlyInitializing\\n    {\\n        totalTickets = _totalTickets;\\n\\n        _registerInterface(type(IERC721EqualSplitExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setTotalTickets(uint256 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        totalTickets = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721EqualSplitExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual override returns (uint256) {\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        return totalReleasedAmount_ / totalTickets;\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/extensions/ERC721LockedStakingExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {IERC721LockableExtension} from \\\"../../../collections/ERC721/extensions/ERC721LockableExtension.sol\\\";\\n\\nimport \\\"./ERC721StakingExtension.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ninterface IERC721LockedStakingExtension {\\n    function hasERC721LockedStakingExtension() external view returns (bool);\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721LockedStakingExtension is\\n    IERC721LockedStakingExtension,\\n    ERC721StakingExtension\\n{\\n    /* INIT */\\n\\n    function __ERC721LockedStakingExtension_init(\\n        uint64 _minStakingDuration,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        __ERC721LockedStakingExtension_init_unchained();\\n        __ERC721StakingExtension_init_unchained(\\n            _minStakingDuration,\\n            _maxStakingTotalDurations\\n        );\\n    }\\n\\n    function __ERC721LockedStakingExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721LockedStakingExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721LockedStakingExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function stake(uint256 tokenId) public virtual override {\\n        ERC721StakingExtension.stake(tokenId);\\n        IERC721LockableExtension(ticketToken).lock(tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public virtual override {\\n        ERC721StakingExtension.stake(tokenIds);\\n        IERC721LockableExtension(ticketToken).lock(tokenIds);\\n    }\\n\\n    function unstake(uint256 tokenId) public virtual override {\\n        ERC721StakingExtension.unstake(tokenId);\\n        IERC721LockableExtension(ticketToken).unlock(tokenId);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) public virtual override {\\n        ERC721StakingExtension.unstake(tokenIds);\\n        IERC721LockableExtension(ticketToken).unlock(tokenIds);\\n    }\\n\\n    function _stake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(\\n            operator == IERC721(ticketToken).ownerOf(tokenId),\\n            \\\"NOT_TOKEN_OWNER\\\"\\n        );\\n        ERC721StakingExtension._stake(operator, currentTime, tokenId);\\n    }\\n\\n    function _unstake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(\\n            operator == IERC721(ticketToken).ownerOf(tokenId),\\n            \\\"NOT_TOKEN_OWNER\\\"\\n        );\\n        ERC721StakingExtension._unstake(operator, currentTime, tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/extensions/ERC721StakingExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ninterface IERC721StakingExtension {\\n    function hasERC721StakingExtension() external view returns (bool);\\n\\n    function stake(uint256 tokenId) external;\\n\\n    function stake(uint256[] calldata tokenIds) external;\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721StakingExtension is\\n    IERC721StakingExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721MultiTokenStream\\n{\\n    // Minimum seconds that token must be staked before unstaking.\\n    uint64 public minStakingDuration;\\n\\n    // Maximum sum total of all durations staking that will be counted (across all stake/unstakes for each token). Staked durations beyond this number is ignored.\\n    uint64 public maxStakingTotalDurations;\\n\\n    // Map of token ID to the time of last staking\\n    mapping(uint256 => uint64) public lastStakingTime;\\n\\n    // Map of token ID to the sum total of all previous staked durations\\n    mapping(uint256 => uint64) public savedStakedDurations;\\n\\n    /* INIT */\\n\\n    function __ERC721StakingExtension_init(\\n        uint64 _minStakingDuration,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        __ERC721StakingExtension_init_unchained(\\n            _minStakingDuration,\\n            _maxStakingTotalDurations\\n        );\\n    }\\n\\n    function __ERC721StakingExtension_init_unchained(\\n        uint64 _minStakingDuration,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        minStakingDuration = _minStakingDuration;\\n        maxStakingTotalDurations = _maxStakingTotalDurations;\\n\\n        _registerInterface(type(IERC721StakingExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMinStakingDuration(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        minStakingDuration = newValue;\\n    }\\n\\n    function setMaxStakingTotalDurations(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"CONFIG_LOCKED\\\");\\n        maxStakingTotalDurations = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721StakingExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function stake(uint256 tokenId) public virtual {\\n        _stake(_msgSender(), uint64(block.timestamp), tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public virtual {\\n        address operator = _msgSender();\\n        uint64 currentTime = uint64(block.timestamp);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _stake(operator, currentTime, tokenIds[i]);\\n        }\\n    }\\n\\n    function unstake(uint256 tokenId) public virtual {\\n        _unstake(_msgSender(), uint64(block.timestamp), tokenId);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) public virtual {\\n        address operator = _msgSender();\\n        uint64 currentTime = uint64(block.timestamp);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _unstake(operator, currentTime, tokenIds[i]);\\n        }\\n    }\\n\\n    function totalStakedDuration(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        virtual\\n        returns (uint64)\\n    {\\n        uint64 totalDurations = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            totalDurations += totalStakedDuration(ticketTokenIds[i]);\\n        }\\n\\n        return totalDurations;\\n    }\\n\\n    function totalStakedDuration(uint256 ticketTokenId)\\n        public\\n        view\\n        virtual\\n        returns (uint64)\\n    {\\n        uint64 total = savedStakedDurations[ticketTokenId];\\n\\n        if (lastStakingTime[ticketTokenId] > 0) {\\n            uint64 targetTime = _stakingTimeLimit();\\n\\n            if (targetTime > block.timestamp) {\\n                targetTime = uint64(block.timestamp);\\n            }\\n\\n            if (lastStakingTime[ticketTokenId] > 0) {\\n                if (targetTime > lastStakingTime[ticketTokenId]) {\\n                    total += (targetTime - lastStakingTime[ticketTokenId]);\\n                }\\n            }\\n        }\\n\\n        if (total > maxStakingTotalDurations) {\\n            total = maxStakingTotalDurations;\\n        }\\n\\n        return total;\\n    }\\n\\n    function unlockingTime(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            lastStakingTime[ticketTokenId] > 0\\n                ? lastStakingTime[ticketTokenId] + minStakingDuration\\n                : 0;\\n    }\\n\\n    function unlockingTime(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory unlockedAt = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            unlockedAt[i] = unlockingTime(ticketTokenIds[i]);\\n        }\\n\\n        return unlockedAt;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _stakingTimeLimit() internal view virtual returns (uint64) {\\n        return 18_446_744_073_709_551_615; // max(uint64)\\n    }\\n\\n    function _stake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            totalStakedDuration(tokenId) < maxStakingTotalDurations,\\n            \\\"MAX_DURATION_EXCEEDED\\\"\\n        );\\n\\n        lastStakingTime[tokenId] = currentTime;\\n    }\\n\\n    function _unstake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal virtual {\\n        operator;\\n\\n        require(lastStakingTime[tokenId] > 0, \\\"NOT_STAKED\\\");\\n\\n        require(\\n            currentTime >= lastStakingTime[tokenId] + minStakingDuration,\\n            \\\"NOT_STAKED_LONG_ENOUGH\\\"\\n        );\\n\\n        savedStakedDurations[tokenId] = totalStakedDuration(tokenId);\\n\\n        lastStakingTime[tokenId] = 0;\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/presets/ERC721EqualVestingStream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721VestingReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721EqualSplitExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\ncontract ERC721EqualVestingStream is\\n    Initializable,\\n    Ownable,\\n    ERC721VestingReleaseExtension,\\n    ERC721EqualSplitExtension,\\n    ERC721LockableClaimExtension,\\n    WithdrawExtension\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Equal Vesting Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Vesting release extension\\n        uint64 startTimestamp;\\n        uint64 durationSeconds;\\n        // Equal split extension\\n        uint256 totalTickets;\\n        // Lockable claim extension\\n        uint64 claimLockedUntil;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(deployer, WithdrawMode.OWNER);\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721VestingReleaseExtension_init(\\n            config.startTimestamp,\\n            config.durationSeconds\\n        );\\n        __ERC721EqualSplitExtension_init(config.totalTickets);\\n        __ERC721LockableClaimExtension_init(config.claimLockedUntil);\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal override(ERC721MultiTokenStream, ERC721LockableClaimExtension) {\\n        ERC721MultiTokenStream._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/presets/ERC721EqualInstantStream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721InstantReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721EqualSplitExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\ncontract ERC721EqualInstantStream is\\n    Initializable,\\n    Ownable,\\n    ERC721InstantReleaseExtension,\\n    ERC721EqualSplitExtension,\\n    ERC721LockableClaimExtension,\\n    WithdrawExtension\\n{\\n    string public constant name = \\\"ERC721 Equal Instant Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Equal split extension\\n        uint256 totalTickets;\\n        // Lockable claim extension\\n        uint64 claimLockedUntil;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(deployer, WithdrawMode.OWNER);\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721EqualSplitExtension_init(config.totalTickets);\\n        __ERC721LockableClaimExtension_init(config.claimLockedUntil);\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal override(ERC721MultiTokenStream, ERC721LockableClaimExtension) {\\n        ERC721MultiTokenStream._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721EmissionReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721EqualSplitExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\ncontract ERC721EqualEmissionStream is\\n    Initializable,\\n    Ownable,\\n    ERC721EmissionReleaseExtension,\\n    ERC721EqualSplitExtension,\\n    ERC721LockableClaimExtension,\\n    WithdrawExtension\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Equal Emission Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Equal split extension\\n        uint256 totalTickets;\\n        // Emission release extension\\n        uint256 emissionRate;\\n        uint64 emissionTimeUnit;\\n        uint64 emissionStart;\\n        uint64 emissionEnd;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(deployer, WithdrawMode.OWNER);\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721EmissionReleaseExtension_init(\\n            config.emissionRate,\\n            config.emissionTimeUnit,\\n            config.emissionStart,\\n            config.emissionEnd\\n        );\\n        __ERC721EqualSplitExtension_init(config.totalTickets);\\n    }\\n\\n    function rateByToken(uint256[] calldata tokenIds)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ((emissionRate * tokenIds.length) / totalTickets);\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    )\\n        internal\\n        override(\\n            ERC721MultiTokenStream,\\n            ERC721EmissionReleaseExtension,\\n            ERC721LockableClaimExtension\\n        )\\n    {\\n        ERC721MultiTokenStream._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721EmissionReleaseExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/presets/ERC721CustodialStakingEmissionStream.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/WithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721EmissionReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721EqualSplitExtension.sol\\\";\\nimport \\\"../extensions/ERC721CustodialStakingExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ncontract ERC721CustodialStakingEmissionStream is\\n    Initializable,\\n    Ownable,\\n    ERC721EmissionReleaseExtension,\\n    ERC721EqualSplitExtension,\\n    ERC721CustodialStakingExtension,\\n    ERC721LockableClaimExtension,\\n    WithdrawExtension\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Custodial Staking Emission Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Locked staking extension\\n        uint64 minStakingDuration; // in seconds. Minimum time the NFT must stay locked before unstaking.\\n        uint64 maxStakingTotalDurations; // in seconds. Maximum sum total of all durations staking that will be counted (across all stake/unstakes for each token).\\n        // Emission release extension\\n        uint256 emissionRate;\\n        uint64 emissionTimeUnit;\\n        uint64 emissionStart;\\n        uint64 emissionEnd;\\n        // Equal split extension\\n        uint256 totalTickets;\\n        // Lockable claim extension\\n        uint64 claimLockedUntil;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __WithdrawExtension_init(deployer, WithdrawMode.OWNER);\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721CustodialStakingExtension_init(\\n            config.minStakingDuration,\\n            config.maxStakingTotalDurations\\n        );\\n        __ERC721EmissionReleaseExtension_init(\\n            config.emissionRate,\\n            config.emissionTimeUnit,\\n            config.emissionStart,\\n            config.emissionEnd\\n        );\\n        __ERC721EqualSplitExtension_init(config.totalTickets);\\n        __ERC721LockableClaimExtension_init(config.claimLockedUntil);\\n    }\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    )\\n        internal\\n        view\\n        virtual\\n        override(ERC721MultiTokenStream, ERC721EmissionReleaseExtension)\\n        returns (uint256)\\n    {\\n        // Removing the logic from emission extension because it is irrevelant when staking.\\n        return 0;\\n    }\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    )\\n        internal\\n        view\\n        virtual\\n        override(ERC721MultiTokenStream, ERC721EqualSplitExtension)\\n        returns (uint256)\\n    {\\n        totalReleasedAmount_;\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        // Get the rate per token to calculate based on stake duration\\n        return\\n            (emissionRate / totalTickets) *\\n            // Intentionally rounded down\\n            (totalStakedDuration(ticketTokenId_) / emissionTimeUnit);\\n    }\\n\\n    function _stakingTimeLimit()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint64)\\n    {\\n        if (emissionEnd > 0) {\\n            return emissionEnd;\\n        }\\n\\n        return super._stakingTimeLimit();\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    )\\n        internal\\n        override(\\n            ERC721MultiTokenStream,\\n            ERC721CustodialStakingExtension,\\n            ERC721EmissionReleaseExtension,\\n            ERC721LockableClaimExtension\\n        )\\n    {\\n        // Intentionally skipping ERC721MultiTokenStream because we need to check ownership based on current status of custody.\\n        ERC721CustodialStakingExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n        ERC721EmissionReleaseExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            beneficiary_\\n        );\\n    }\\n\\n    /* PUBLIC */\\n\\n    function stake(uint256 tokenId) public override nonReentrant {\\n        require(uint64(block.timestamp) >= emissionStart, \\\"NOT_STARTED_YET\\\");\\n\\n        super.stake(tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public override nonReentrant {\\n        require(uint64(block.timestamp) >= emissionStart, \\\"NOT_STARTED_YET\\\");\\n\\n        super.stake(tokenIds);\\n    }\\n\\n    function unstake(uint256 tokenId) public override nonReentrant {\\n        super.unstake(tokenId);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) public override nonReentrant {\\n        super.unstake(tokenIds);\\n    }\\n\\n    function rateByToken(uint256[] calldata tokenIds)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        uint256 staked;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (lastStakingTime[tokenIds[i]] > 0) {\\n                staked++;\\n            }\\n        }\\n\\n        return (emissionRate * staked) / totalTickets;\\n    }\\n\\n    function rewardAmountByToken(uint256 ticketTokenId)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return\\n            ((emissionRate * totalStakedDuration(ticketTokenId)) /\\n                totalTickets) / emissionTimeUnit;\\n    }\\n\\n    function rewardAmountByToken(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        virtual\\n        returns (uint256 total)\\n    {\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            total += rewardAmountByToken(ticketTokenIds[i]);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/streams/ERC721/extensions/ERC721CustodialStakingExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {IERC721LockableExtension} from \\\"../../../collections/ERC721/extensions/ERC721LockableExtension.sol\\\";\\n\\nimport \\\"./ERC721StakingExtension.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ninterface IERC721CustodialStakingExtension {\\n    function hasERC721CustodialStakingExtension() external view returns (bool);\\n\\n    function tokensInCustody(\\n        address staker,\\n        uint256 startTokenId,\\n        uint256 endTokenId\\n    ) external view returns (bool[] memory);\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721CustodialStakingExtension is\\n    IERC721CustodialStakingExtension,\\n    ERC721StakingExtension\\n{\\n    mapping(uint256 => address) public stakers;\\n\\n    /* INIT */\\n\\n    function __ERC721CustodialStakingExtension_init(\\n        uint64 _minStakingDuration,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        __ERC721CustodialStakingExtension_init_unchained();\\n        __ERC721StakingExtension_init_unchained(\\n            _minStakingDuration,\\n            _maxStakingTotalDurations\\n        );\\n    }\\n\\n    function __ERC721CustodialStakingExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721CustodialStakingExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721CustodialStakingExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function tokensInCustody(\\n        address staker,\\n        uint256 startTokenId,\\n        uint256 endTokenId\\n    ) external view returns (bool[] memory tokens) {\\n        tokens = new bool[](endTokenId - startTokenId + 1);\\n\\n        for (uint256 i = startTokenId; i <= endTokenId; i++) {\\n            if (stakers[i] == staker) {\\n                tokens[i - startTokenId] = true;\\n            }\\n        }\\n\\n        return tokens;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _stake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        stakers[tokenId] = operator;\\n        super._stake(operator, currentTime, tokenId);\\n        IERC721(ticketToken).transferFrom(operator, address(this), tokenId);\\n    }\\n\\n    function _unstake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(stakers[tokenId] == operator, \\\"NOT_STAKER\\\");\\n        delete stakers[tokenId];\\n\\n        super._unstake(operator, currentTime, tokenId);\\n        IERC721(ticketToken).transferFrom(address(this), operator, tokenId);\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address beneficiary_\\n    ) internal virtual override {\\n        claimToken_;\\n\\n        if (stakers[ticketTokenId_] == address(0)) {\\n            require(\\n                IERC721(ticketToken).ownerOf(ticketTokenId_) == beneficiary_,\\n                \\\"NOT_NFT_OWNER\\\"\\n            );\\n        } else {\\n            require(beneficiary_ == stakers[ticketTokenId_], \\\"NOT_STAKER\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/factory/FlairFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../common/WithdrawExtension.sol\\\";\\nimport \\\"./Clones.sol\\\";\\n\\ncontract FlairFactory is Initializable, Ownable, WithdrawExtension {\\n    event ProxyCreated(address indexed deployer, address indexed proxyAddress);\\n\\n    constructor() {\\n        initialize();\\n    }\\n\\n    function initialize() public initializer {\\n        __WithdrawExtension_init(_msgSender(), WithdrawMode.OWNER);\\n    }\\n\\n    function cloneDeterministicSimple(\\n        address implementation,\\n        bytes32 salt,\\n        bytes calldata data\\n    ) external payable returns (address deployedProxy) {\\n        bytes32 _salt = keccak256(abi.encodePacked(msg.sender, salt));\\n        deployedProxy = Clones.cloneDeterministic(implementation, _salt);\\n\\n        if (data.length > 0) {\\n            (bool success, bytes memory returndata) = deployedProxy.call(data);\\n\\n            if (!success) {\\n                // Look for revert reason and bubble it up if present\\n                if (returndata.length > 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n                    assembly {\\n                        let returndata_size := mload(returndata)\\n                        revert(add(32, returndata), returndata_size)\\n                    }\\n                } else {\\n                    revert(\\\"FAILED_TO_CLONE\\\");\\n                }\\n            }\\n        }\\n\\n        emit ProxyCreated(msg.sender, deployedProxy);\\n    }\\n\\n    function predictDeterministicSimple(address implementation, bytes32 salt)\\n        external\\n        view\\n        returns (address deployedProxy)\\n    {\\n        bytes32 _salt = keccak256(abi.encodePacked(msg.sender, salt));\\n        deployedProxy = Clones.predictDeterministicAddress(\\n            implementation,\\n            _salt\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/factory/Clones.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721AOwnerManagedExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721OwnerManagedExtension} from \\\"../../ERC721/extensions/ERC721OwnerManagedExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow owner to transfer tokens on behalf of owners. Only useful for certain use-cases.\\n */\\nabstract contract ERC721AOwnerManagedExtension is\\n    IERC721OwnerManagedExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AMinterExtension\\n{\\n    bool public managementPowerRevoked;\\n\\n    function __ERC721AOwnerManagedExtension_init() internal onlyInitializing {\\n        __ERC721AOwnerManagedExtension_init_unchained();\\n    }\\n\\n    function __ERC721AOwnerManagedExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OwnerManagedExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function revokeManagementPower() external onlyOwner {\\n        managementPowerRevoked = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    /**\\n     * Override isApprovedForAll to allow owner to transfer tokens.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override(ERC721A)\\n        returns (bool)\\n    {\\n        if (!managementPowerRevoked) {\\n            if (operator == super.owner()) {\\n                return true;\\n            }\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721ACollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721A/extensions/ERC721AFreeMintExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721FreeMintExtension} from \\\"../../ERC721/extensions/ERC721FreeMintExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow anyone to mint directly without paying.\\n */\\nabstract contract ERC721AFreeMintExtension is\\n    IERC721FreeMintExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AMinterExtension\\n{\\n    function __ERC721AFreeMintExtension_init() internal onlyInitializing {\\n        __ERC721AFreeMintExtension_init_unchained();\\n    }\\n\\n    function __ERC721AFreeMintExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721FreeMintExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721ACollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function mintFree(address to, uint256 count) external {\\n        _mintTo(to, count);\\n    }\\n}\\n\"\n    },\n    \"contracts/collections/ERC721/extensions/ERC721FreeMintExtension.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721FreeMintExtension {\\n    function mintFree(address to, uint256 count) external;\\n}\\n\\n/**\\n * @dev Extension to allow anyone to mint directly without paying.\\n */\\nabstract contract ERC721FreeMintExtension is\\n    IERC721FreeMintExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension\\n{\\n    function __ERC721FreeMintExtension_init() internal onlyInitializing {\\n        __ERC721FreeMintExtension_init_unchained();\\n    }\\n\\n    function __ERC721FreeMintExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721FreeMintExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function mintFree(address to, uint256 count) external {\\n        _mintTo(to, count);\\n    }\\n}\\n\"\n    },\n    \"contracts/common/meta-transactions/UnorderedForwarder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract UnorderedForwarder is EIP712, ReentrancyGuard {\\n    using ECDSA for bytes32;\\n\\n    struct MetaTransaction {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 minGasPrice;\\n        uint256 maxGasPrice;\\n        uint256 expiresAt;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    bytes32 private constant _TYPEHASH =\\n        keccak256(\\n            \\\"MetaTransaction(address from,address to,uint256 value,uint256 minGasPrice,uint256 maxGasPrice,uint256 expiresAt,uint256 nonce,bytes data)\\\"\\n        );\\n\\n    mapping(bytes32 => uint256) mtxHashToExecutedBlockNumber;\\n\\n    constructor() EIP712(\\\"UnorderedForwarder\\\", \\\"0.0.1\\\") {}\\n\\n    /// @dev Refunds up to `msg.value` leftover ETH at the end of the call.\\n    modifier refundsAttachedEth() {\\n        _;\\n        uint256 remainingBalance = msg.value > address(this).balance\\n            ? address(this).balance\\n            : msg.value;\\n        if (remainingBalance > 0) {\\n            payable(msg.sender).transfer(remainingBalance);\\n        }\\n    }\\n\\n    /// @dev Ensures that the ETH balance of `this` does not go below the\\n    ///      initial ETH balance before the call (excluding ETH attached to the call).\\n    modifier doesNotReduceEthBalance() {\\n        uint256 initialBalance = address(this).balance - msg.value;\\n        _;\\n        require(initialBalance <= address(this).balance, \\\"FWD_ETH_LEAK\\\");\\n    }\\n\\n    function verify(MetaTransaction calldata mtx, bytes calldata signature)\\n        public\\n        view\\n        returns (bytes32 mtxHash)\\n    {\\n        mtxHash = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    _TYPEHASH,\\n                    mtx.from,\\n                    mtx.to,\\n                    mtx.value,\\n                    mtx.minGasPrice,\\n                    mtx.maxGasPrice,\\n                    mtx.expiresAt,\\n                    mtx.nonce,\\n                    keccak256(mtx.data)\\n                )\\n            )\\n        );\\n\\n        // Must not be expired.\\n        require(mtx.expiresAt > block.timestamp, \\\"FWD_EXPIRED\\\");\\n\\n        // Must be signed by the signer.\\n        require(\\n            mtxHash.recover(signature) == mtx.from,\\n            \\\"FWD_INVALID_SIGNATURE\\\"\\n        );\\n\\n        // Transaction must not have been already executed.\\n        require(mtxHashToExecutedBlockNumber[mtxHash] == 0, \\\"FWD_REPLAYED\\\");\\n\\n        return mtxHash;\\n    }\\n\\n    function execute(MetaTransaction calldata mtx, bytes calldata signature)\\n        public\\n        payable\\n        nonReentrant\\n        doesNotReduceEthBalance\\n        refundsAttachedEth\\n        returns (bytes memory)\\n    {\\n        return _execute(mtx, signature);\\n    }\\n\\n    function batchExecute(\\n        MetaTransaction[] calldata mtxs,\\n        bytes[] calldata signatures\\n    )\\n        public\\n        payable\\n        nonReentrant\\n        doesNotReduceEthBalance\\n        refundsAttachedEth\\n        returns (bytes[] memory returnResults)\\n    {\\n        require(mtxs.length == signatures.length, \\\"FWD_MISMATCH_SIGNATURES\\\");\\n\\n        returnResults = new bytes[](mtxs.length);\\n\\n        for (uint256 i = 0; i < mtxs.length; ++i) {\\n            returnResults[i] = _execute(mtxs[i], signatures[i]);\\n        }\\n    }\\n\\n    function _execute(MetaTransaction calldata mtx, bytes calldata signature)\\n        internal\\n        returns (bytes memory)\\n    {\\n        // Must have a valid gas price.\\n        require(\\n            mtx.minGasPrice <= tx.gasprice && tx.gasprice <= mtx.maxGasPrice,\\n            \\\"FWD_INVALID_GAS\\\"\\n        );\\n\\n        // Must have enough ETH.\\n        require(mtx.value <= address(this).balance, \\\"FWD_INVALID_VALUE\\\");\\n\\n        bytes32 mtxHash = verify(mtx, signature);\\n\\n        mtxHashToExecutedBlockNumber[mtxHash] = block.number;\\n\\n        (bool success, bytes memory returndata) = mtx.to.call{value: mtx.value}(\\n            abi.encodePacked(mtx.data, mtx.from)\\n        );\\n\\n        if (!success) {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"FWD_CALL_FAILED\\\");\\n            }\\n        }\\n\\n        return returndata;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\n    },\n    \"contracts/misc/polygon/NativeMetaTransaction.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nabstract contract NativeMetaTransaction is Context, EIP712 {\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n            )\\n        );\\n\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function _msgSender() internal view override returns (address sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n\\n        return sender;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress].add(1);\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            payable(msg.sender),\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                _hashTypedDataV4(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\\n\"\n    },\n    \"contracts/test/TestERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract TestERC20 is ERC20(\\\"FlairTest\\\", \\\"FTS\\\") {\\n    function mint(address to, uint256 amount) public {\\n        _mint(to, amount);\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 20\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "db704ba0987a61a5a207234a2424761a",
      "transactionHash": "0x8d9a6b9bdb0b7d7cb2ae6f878dc509b7576d6ccc1459ce643bf07910764759bf",
      "args": [
        {
          "name": "Collection",
          "symbol": "COL",
          "contractURI": "ipfs://contractURI",
          "placeholderURI": "ipfs://placeholderURI",
          "tokenURIPrefix": "ipfs://tokenURIPrefix/",
          "maxSupply": 0,
          "defaultRoyaltyAddress": "0x0000000000000000000000000000000000000000",
          "defaultRoyaltyBps": 0,
          "trustedForwarder": "0x0000000000000000000000000000000000000000",
          "initialHolders": [],
          "initialAmounts": []
        }
      ]
    },
    "decoded": {
      "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
      "gasPrice": "48014200300",
      "gasLimit": "4753737",
      "to": null,
      "value": "0",
      "nonce": 77,
      "data": "0x608060405260006012553480156200001657600080fd5b5060405162004d0f38038062004d0f8339810160408190526200003991620010bf565b80516020820151620000546200004e6200009b565b620000b7565b81516200006990600390602085019062000dd6565b5080516200007f90600490602084019062000dd6565b5050506200009481336200011260201b60201c565b5062001482565b6000620000b2620002fe60201b620017011760201c565b905090565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600062000120600162000337565b9050801562000139576000805461ff0019166101001790555b8260c00151518360a001515114620001985760405162461bcd60e51b815260206004820152601b60248201527f4552433732312f494e56414c49445f494e495449414c5f41524753000000000060448201526064015b60405180910390fd5b620001a382620000b7565b825160208401516040850151620001bc929190620003e0565b620001d6836060015184608001516200041760201b60201c565b60e0830151620001e69062000451565b620001f062000489565b620001fa620004bf565b62000216836101000151846101200151620004f360201b60201c565b610140830151620002279062000529565b620002316200055e565b60e083015160105560005b8360a0015151811015620002b1576200029c8460a0015182815181106200026757620002676200126c565b60200260200101518560c0015183815181106200028857620002886200126c565b60200260200101516200059260201b60201c565b80620002a88162001298565b9150506200023c565b508015620002f9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6002546000906001600160a01b031633141562000322575060131936013560601c90565b620000b26200062860201b620017231760201c565b60008054610100900460ff161562000397578160ff1660011480156200037057506200036e306200062c60201b620017271760201c565b155b6200038f5760405162461bcd60e51b81526004016200018f90620012b6565b506000919050565b60005460ff808416911610620003c15760405162461bcd60e51b81526004016200018f90620012b6565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166200040a5760405162461bcd60e51b81526004016200018f9062001304565b620002f98383836200063b565b600054610100900460ff16620004415760405162461bcd60e51b81526004016200018f9062001304565b6200044d8282620006dd565b5050565b600054610100900460ff166200047b5760405162461bcd60e51b81526004016200018f9062001304565b620004868162000786565b50565b600054610100900460ff16620004b35760405162461bcd60e51b81526004016200018f9062001304565b620004bd620007d9565b565b600054610100900460ff16620004e95760405162461bcd60e51b81526004016200018f9062001304565b620004bd62000815565b600054610100900460ff166200051d5760405162461bcd60e51b81526004016200018f9062001304565b6200044d828262000851565b600054610100900460ff16620005535760405162461bcd60e51b81526004016200018f9062001304565b6200048681620008ee565b600054610100900460ff16620005885760405162461bcd60e51b81526004016200018f9062001304565b620004bd6200093a565b60105481620005a060125490565b620005ac91906200134f565b1115620005ed5760405162461bcd60e51b815260206004820152600e60248201526d455843454544535f535550504c5960901b60448201526064016200018f565b60005b81811015620002f95760125462000608848262000976565b6200061262000998565b50806200061f8162001298565b915050620005f0565b3390565b6001600160a01b03163b151590565b600054610100900460ff16620006655760405162461bcd60e51b81526004016200018f9062001304565b82516200067a90600990602086019062000dd6565b5081516200069090600a90602085019062000dd6565b508051620006a690600b90602084019062000dd6565b50620006b9633d96f4ff60e11b620009b1565b620006cb6380ac58cd60e01b620009b1565b620002f9635b5e139f60e01b620009b1565b600054610100900460ff16620007075760405162461bcd60e51b81526004016200018f9062001304565b81516200071c90600c90602085019062000dd6565b5080516200073290600d90602084019062000dd6565b5060408051808201909152600580825264173539b7b760d91b60209092019182526200076191600e9162000dd6565b5062000774631f2f406b60e01b620009b1565b6200044d635b5e139f60e01b620009b1565b600054610100900460ff16620007b05760405162461bcd60e51b81526004016200018f9062001304565b6010819055620007c76330f487b560e11b620009b1565b620004866380ac58cd60e01b620009b1565b600054610100900460ff16620008035760405162461bcd60e51b81526004016200018f9062001304565b620004bd631aa1577160e11b620009b1565b600054610100900460ff166200083f5760405162461bcd60e51b81526004016200018f9062001304565b620004bd63948e2d5360e01b620009b1565b600054610100900460ff166200087b5760405162461bcd60e51b81526004016200018f9062001304565b6200088d633a47bf5160e11b620009b1565b6200089f63152a902d60e11b620009b1565b620008b163c69dbd8f60e01b620009b1565b620008c363656cb66560e11b620009b1565b604080518082019091526001600160a01b038316815261ffff82166020820152620002f98162000a35565b600054610100900460ff16620009185760405162461bcd60e51b81526004016200018f9062001304565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16620009645760405162461bcd60e51b81526004016200018f9062001304565b620004bd632a7c3e4960e01b620009b1565b6200044d82826040518060200160405280600081525062000b1b60201b60201c565b60128054906000620009aa8362001298565b9190505550565b6001600160e01b0319808216141562000a0d5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e746572666163652069640000000060448201526064016200018f565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b612710816020015161ffff161062000a7e5760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016200018f565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260148054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419262000b1092916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b62000b27838362000b55565b62000b36600084848462000c9d565b620002f95760405162461bcd60e51b81526004016200018f906200136a565b6001600160a01b03821662000bad5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016200018f565b6000818152600560205260409020546001600160a01b03161562000c145760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016200018f565b6001600160a01b038216600090815260066020526040812080546001929062000c3f9084906200134f565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600062000cbe846001600160a01b03166200062c60201b620017271760201c565b1562000dca576001600160a01b03841663150b7a0262000cdd6200009b565b8786866040518563ffffffff1660e01b815260040162000d019493929190620013bc565b602060405180830381600087803b15801562000d1c57600080fd5b505af192505050801562000d4f575060408051601f3d908101601f1916820190925262000d4c9181019062001412565b60015b62000daf573d80801562000d80576040519150601f19603f3d011682016040523d82523d6000602084013e62000d85565b606091505b50805162000da75760405162461bcd60e51b81526004016200018f906200136a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062000dce565b5060015b949350505050565b82805462000de49062001445565b90600052602060002090601f01602090048101928262000e08576000855562000e53565b82601f1062000e2357805160ff191683800117855562000e53565b8280016001018555821562000e53579182015b8281111562000e5357825182559160200191906001019062000e36565b5062000e6192915062000e65565b5090565b5b8082111562000e61576000815560010162000e66565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171562000eb85762000eb862000e7c565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000ee95762000ee962000e7c565b604052919050565b60005b8381101562000f0e57818101518382015260200162000ef4565b8381111562000f1e576000848401525b50505050565b600082601f83011262000f3657600080fd5b81516001600160401b0381111562000f525762000f5262000e7c565b62000f67601f8201601f191660200162000ebe565b81815284602083860101111562000f7d57600080fd5b62000dce82602083016020870162000ef1565b60006001600160401b0382111562000fac5762000fac62000e7c565b5060051b60200190565b80516001600160a01b0381168114620003db57600080fd5b600082601f83011262000fe057600080fd5b8151602062000ff962000ff38362000f90565b62000ebe565b82815260059290921b840181019181810190868411156200101957600080fd5b8286015b848110156200103f57620010318162000fb6565b83529183019183016200101d565b509695505050505050565b600082601f8301126200105c57600080fd5b815160206200106f62000ff38362000f90565b82815260059290921b840181019181810190868411156200108f57600080fd5b8286015b848110156200103f578051835291830191830162001093565b805161ffff81168114620003db57600080fd5b600060208284031215620010d257600080fd5b81516001600160401b0380821115620010ea57600080fd5b9083019061016082860312156200110057600080fd5b6200110a62000e92565b8251828111156200111a57600080fd5b620011288782860162000f24565b8252506020830151828111156200113e57600080fd5b6200114c8782860162000f24565b6020830152506040830151828111156200116557600080fd5b620011738782860162000f24565b6040830152506060830151828111156200118c57600080fd5b6200119a8782860162000f24565b606083015250608083015182811115620011b357600080fd5b620011c18782860162000f24565b60808301525060a083015182811115620011da57600080fd5b620011e88782860162000fce565b60a08301525060c0830151828111156200120157600080fd5b6200120f878286016200104a565b60c08301525060e083015160e082015261010091506200123182840162000fb6565b82820152610120915062001247828401620010ac565b8282015261014091506200125d82840162000fb6565b91810191909152949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620012af57620012af62001282565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000821982111562001365576200136562001282565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060018060a01b038087168352808616602084015250836040830152608060608301528251806080840152620013fb8160a085016020870162000ef1565b601f01601f19169190910160a00195945050505050565b6000602082840312156200142557600080fd5b81516001600160e01b0319811681146200143e57600080fd5b9392505050565b600181811c908216806200145a57607f821691505b602082108114156200147c57634e487b7160e01b600052602260045260246000fd5b50919050565b61387d80620014926000396000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c80637885fdc7116101375780637885fdc71461046f5780637e9803421461049d5780638da5cb5b146104a5578063938e3d7b146104ad578063948e2d53146104c057806395d89b41146104c857806399e0dd7c146104d0578063a22cb465146104e3578063a821d908146104f6578063a9852bfb14610503578063b88d4fde14610516578063ba4695fd14610529578063c0ac998314610531578063c29de63014610539578063c87b56dd14610546578063cad96cca14610559578063d5abeb0114610579578063da74222814610582578063dbbc853b14610595578063e8a3d4851461059d578063e985e9c5146105a5578063ef60ceaf146105b8578063f2fde38b146105cb578063f384702f146105de57600080fd5b806301ffc9a714610245578063059fb6f71461026d5780630653aca51461028257806306fdde03146102c4578063081812fc146102d9578063095ea7b3146102f9578063167446071461030c57806318160ddd1461031457806323b872dd146103265780632a55205a146103395780632fe388be1461036b5780633542aee21461037e5780633574a2dd1461039157806340c1d8a1146103a457806342842e0e146103b75780635136dcc7146103ca57806356c022bb146103dd578063572b6c05146103f05780635a9b0b89146104035780636352211e146104265780636f8b44b01461043957806370a082311461044c578063715018a61461045f5780637313cba914610467575b600080fd5b610258610253366004612b63565b6105eb565b60405190151581526020015b60405180910390f35b61028061027b366004612c94565b6105fc565b005b610295610290366004612cf1565b61069c565b60408051825181526020808401516001600160a01b0316908201529181015161ffff1690820152606001610264565b6102cc610721565b6040516102649190612d62565b6102ec6102e7366004612cf1565b610730565b6040516102649190612d75565b610280610307366004612d89565b6107bd565b6102806108e0565b6012545b604051908152602001610264565b610280610334366004612db3565b61092e565b61034c610347366004612def565b610966565b604080516001600160a01b039093168352602083019190915201610264565b610280610379366004612e73565b610a2b565b61028061038c366004612d89565b610b90565b61028061039f366004612f67565b610bdd565b6102806103b2366004612fad565b610c2f565b6102806103c5366004612db3565b610ddc565b6102806103d836600461314b565b610df7565b6002546102ec906001600160a01b031681565b6102586103fe3660046131bf565b610e91565b61040b610ea5565b60408051938452602084019290925290820152606001610264565b6102ec610434366004612cf1565b610fbe565b610280610447366004612cf1565b611035565b61031861045a3660046131bf565b6110e2565b610280611169565b6102cc6111b4565b60145461048f906001600160a01b03811690600160a01b900461ffff1682565b6040516102649291906131da565b610318611246565b6102ec611252565b6102806104bb366004612f67565b611267565b6102806112b9565b6102cc611307565b6102806104de366004612f67565b611311565b6102806104f13660046131f7565b611386565b6013546102589060ff1681565b610280610511366004612f67565b611398565b610280610524366004613233565b61140d565b610280611446565b6102cc611494565b600f546102589060ff1681565b6102cc610554366004612cf1565b6114a3565b61056c610567366004612cf1565b6114ae565b60405161026491906132ae565b61031860105481565b6102806105903660046131bf565b611569565b6102cc6115ca565b6102cc6115d9565b6102586105b336600461330f565b6115e8565b6102806105c6366004613339565b6115fb565b6102806105d93660046131bf565b611654565b6011546102589060ff1681565b60006105f682611736565b92915050565b60005b815181101561069657306001600160a01b03166323b872dd858585858151811061062b5761062b613351565b60200260200101516040518463ffffffff1660e01b815260040161065193929190613367565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b50505050808061068e906133a1565b9150506105ff565b50505050565b60408051606081018252600080825260208201819052918101829052906106c4601684611772565b6000818152601560209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b606061072b61177e565b905090565b600061073b8261178d565b6107a15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600760205260409020546001600160a01b031690565b60006107c882610fbe565b9050806001600160a01b0316836001600160a01b031614156108365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610798565b806001600160a01b03166108486117aa565b6001600160a01b031614806108645750610864816105b36117aa565b6108d15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610798565b6108db83836117b4565b505050565b6108e86117aa565b6001600160a01b03166108f9611252565b6001600160a01b03161461091f5760405162461bcd60e51b8152600401610798906133bc565b6011805460ff19166001179055565b61093f6109396117aa565b82611822565b61095b5760405162461bcd60e51b8152600401610798906133f1565b6108db8383836118ec565b60008281526015602052604081205481906001600160a01b0316156109cb576000848152601560205260409020546001600160a01b03811690612710906109b890600160a01b900461ffff1686613442565b6109c29190613477565b91509150610a24565b6014546001600160a01b0316158015906109f15750601454600160a01b900461ffff1615155b15610a1d576014546001600160a01b03811690612710906109b890600160a01b900461ffff1686613442565b5060009050805b9250929050565b8151835114610a765760405162461bcd60e51b815260206004820152601760248201527608ca49e9abea89ebe988a9c8ea890be9a92a69a82a8869604b1b6044820152606401610798565b8051835114610ac45760405162461bcd60e51b815260206004820152601a60248201527908ca49e9abea89e968a9cbe988a9c8ea890be9a92a69a82a886960331b6044820152606401610798565b60005b815181101561069657306001600160a01b03166323b872dd858381518110610af157610af1613351565b6020026020010151858481518110610b0b57610b0b613351565b6020026020010151858581518110610b2557610b25613351565b60200260200101516040518463ffffffff1660e01b8152600401610b4b93929190613367565b600060405180830381600087803b158015610b6557600080fd5b505af1158015610b79573d6000803e3d6000fd5b505050508080610b88906133a1565b915050610ac7565b610b986117aa565b6001600160a01b0316610ba9611252565b6001600160a01b031614610bcf5760405162461bcd60e51b8152600401610798906133bc565b610bd98282611a88565b5050565b610be56117aa565b6001600160a01b0316610bf6611252565b6001600160a01b031614610c1c5760405162461bcd60e51b8152600401610798906133bc565b8051610bd990600c906020840190612ab4565b6000610c3b6001611b11565b90508015610c53576000805461ff0019166101001790555b8260c00151518360a001515114610caa5760405162461bcd60e51b815260206004820152601b60248201527a4552433732312f494e56414c49445f494e495449414c5f4152475360281b6044820152606401610798565b610cb382611ba5565b610cca836000015184602001518560400151611c00565b610cdc83606001518460800151611c32565b610ce98360e00151611c63565b610cf1611c93565b610cf9611cc2565b610d0d836101000151846101200151611cf1565b610d1b836101400151611d22565b610d23611d52565b60e083015160105560005b8360a0015151811015610d9157610d7f8460a001518281518110610d5457610d54613351565b60200260200101518560c001518381518110610d7257610d72613351565b6020026020010151611a88565b80610d89816133a1565b915050610d2e565b5080156108db576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6108db8383836040518060200160405280600081525061140d565b610dff6117aa565b6001600160a01b0316610e10611252565b6001600160a01b031614610e365760405162461bcd60e51b8152600401610798906133bc565b610bd98282808060200260200160405190810160405280939291908181526020016000905b82821015610e8757610e786060830286013681900381019061348b565b81526020019060010190610e5b565b5050505050611d81565b6002546001600160a01b0391821691161490565b600080808080610eb36117aa565b6001600160a01b031614610f3e57306370a08231610ecf6117aa565b6040518263ffffffff1660e01b8152600401610eeb9190612d75565b60206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b91906134ef565b90505b601054306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7a57600080fd5b505afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb291906134ef565b90959094509092509050565b6000818152600560205260408120546001600160a01b0316806105f65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610798565b61103d6117aa565b6001600160a01b031661104e611252565b6001600160a01b0316146110745760405162461bcd60e51b8152600401610798906133bc565b60115460ff16156110975760405162461bcd60e51b815260040161079890613508565b6012548110156110dd5760405162461bcd60e51b81526020600482015260116024820152704c4f5745525f5448414e5f535550504c5960781b6044820152606401610798565b601055565b60006001600160a01b03821661114d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610798565b506001600160a01b031660009081526006602052604090205490565b6111716117aa565b6001600160a01b0316611182611252565b6001600160a01b0316146111a85760405162461bcd60e51b8152600401610798906133bc565b6111b26000611ba5565b565b6060600c80546111c390613528565b80601f01602080910402602001604051908101604052809291908181526020018280546111ef90613528565b801561123c5780601f106112115761010080835404028352916020019161123c565b820191906000526020600020905b81548152906001019060200180831161121f57829003601f168201915b5050505050905090565b600061072b6016611f28565b6000546201000090046001600160a01b031690565b61126f6117aa565b6001600160a01b0316611280611252565b6001600160a01b0316146112a65760405162461bcd60e51b8152600401610798906133bc565b8051610bd990600b906020840190612ab4565b6112c16117aa565b6001600160a01b03166112d2611252565b6001600160a01b0316146112f85760405162461bcd60e51b8152600401610798906133bc565b6013805460ff19166001179055565b606061072b611f32565b6113196117aa565b6001600160a01b031661132a611252565b6001600160a01b0316146113505760405162461bcd60e51b8152600401610798906133bc565b600f5460ff16156113735760405162461bcd60e51b815260040161079890613508565b8051610bd990600d906020840190612ab4565b610bd96113916117aa565b8383611f41565b6113a06117aa565b6001600160a01b03166113b1611252565b6001600160a01b0316146113d75760405162461bcd60e51b8152600401610798906133bc565b600f5460ff16156113fa5760405162461bcd60e51b815260040161079890613508565b8051610bd990600e906020840190612ab4565b61141e6114186117aa565b83611822565b61143a5760405162461bcd60e51b8152600401610798906133f1565b6106968484848461200c565b61144e6117aa565b6001600160a01b031661145f611252565b6001600160a01b0316146114855760405162461bcd60e51b8152600401610798906133bc565b600f805460ff19166001179055565b6060600d80546111c390613528565b60606105f68261203f565b604080516001808252818301909252606091816020015b60408051808201909152600080825260208201528152602001906001900390816114c557505060145481519192506001600160a01b031690829060009061150e5761150e613351565b60209081029190910101516001600160a01b039190911690526014548151600160a01b90910461ffff1690829060009061154a5761154a613351565b6020908102919091018101516001600160601b03909216910152919050565b6115716117aa565b6001600160a01b0316611582611252565b6001600160a01b0316146115a85760405162461bcd60e51b8152600401610798906133bc565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600e80546111c390613528565b6060600b80546111c390613528565b60006115f4838361211b565b9392505050565b6116036117aa565b6001600160a01b0316611614611252565b6001600160a01b03161461163a5760405162461bcd60e51b8152600401610798906133bc565b61165161164c3683900383018361355d565b61217f565b50565b61165c6117aa565b6001600160a01b031661166d611252565b6001600160a01b0316146116935760405162461bcd60e51b8152600401610798906133bc565b6001600160a01b0381166116f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610798565b61165181611ba5565b600061170c33610e91565b1561171e575060131936013560601c90565b503390565b3390565b6001600160a01b03163b151590565b60006301ffc9a760e01b6001600160e01b0319831614806105f65750506001600160e01b03191660009081526001602052604090205460ff1690565b60006115f4838361222a565b6060600980546111c390613528565b6000908152600560205260409020546001600160a01b0316151590565b600061072b611701565b600081815260076020526040902080546001600160a01b0319166001600160a01b03841690811790915581906117e982610fbe565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061182d8261178d565b61188e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610798565b600061189983610fbe565b9050806001600160a01b0316846001600160a01b031614806118c057506118c081856115e8565b806118e45750836001600160a01b03166118d984610730565b6001600160a01b0316145b949350505050565b826001600160a01b03166118ff82610fbe565b6001600160a01b0316146119635760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610798565b6001600160a01b0382166119c55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610798565b6119d06000826117b4565b6001600160a01b03831660009081526006602052604081208054600192906119f99084906135b7565b90915550506001600160a01b0382166000908152600660205260408120805460019290611a279084906135ce565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60105481611a9560125490565b611a9f91906135ce565b1115611ade5760405162461bcd60e51b815260206004820152600e60248201526d455843454544535f535550504c5960901b6044820152606401610798565b60005b818110156108db57601254611af68482612254565b611afe61226e565b5080611b09816133a1565b915050611ae1565b60008054610100900460ff1615611b5f578160ff166001148015611b3b5750611b3930611727565b155b611b575760405162461bcd60e51b8152600401610798906135e6565b506000919050565b60005460ff808416911610611b865760405162461bcd60e51b8152600401610798906135e6565b506000805460ff191660ff92909216919091179055600190565b919050565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600054610100900460ff16611c275760405162461bcd60e51b815260040161079890613634565b6108db838383612285565b600054610100900460ff16611c595760405162461bcd60e51b815260040161079890613634565b610bd98282612318565b600054610100900460ff16611c8a5760405162461bcd60e51b815260040161079890613634565b611651816123b4565b600054610100900460ff16611cba5760405162461bcd60e51b815260040161079890613634565b6111b2612400565b600054610100900460ff16611ce95760405162461bcd60e51b815260040161079890613634565b6111b2612437565b600054610100900460ff16611d185760405162461bcd60e51b815260040161079890613634565b610bd9828261246e565b600054610100900460ff16611d495760405162461bcd60e51b815260040161079890613634565b611651816124fe565b600054610100900460ff16611d795760405162461bcd60e51b815260040161079890613634565b6111b2612525565b60005b8151811015610bd9576000828281518110611da157611da1613351565b60200260200101519050612710816040015161ffff1610611dd45760405162461bcd60e51b81526004016107989061367f565b60208101516001600160a01b0316611e4d578051600090815260156020526040902080546001600160b01b03191690558051611e129060169061255c565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611f15565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152601590945294909220925183549451909216600160a01b026001600160b01b03199094169116179190911790558051611ebb90601690612568565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080611f20816133a1565b915050611d84565b60006105f6825490565b6060600a80546111c390613528565b816001600160a01b0316836001600160a01b03161415611f9f5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610798565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6120178484846118ec565b61202384848484612574565b6106965760405162461bcd60e51b8152600401610798906136a4565b60606000600d805461205090613528565b9050116120e757600c805461206490613528565b80601f016020809104026020016040519081016040528092919081815260200182805461209090613528565b80156120dd5780601f106120b2576101008083540402835291602001916120dd565b820191906000526020600020905b8154815290600101906020018083116120c057829003601f168201915b50505050506105f6565b600d6120f28361268f565b600e60405160200161210693929190613790565b60405160208183030381529060405292915050565b60135460009060ff1661215157612130611252565b6001600160a01b0316826001600160a01b03161415612151575060016105f6565b6001600160a01b0380841660009081526008602090815260408083209386168352929052205460ff166115f4565b612710816020015161ffff16106121a85760405162461bcd60e51b81526004016107989061367f565b60408051808201825282516001600160a01b03168082526020808501805161ffff1691909301819052601480546001600160b01b031916909217600160a01b9091021790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419261221f92916131da565b60405180910390a150565b600082600001828154811061224157612241613351565b9060005260206000200154905092915050565b610bd982826040518060200160405280600081525061278c565b6012805490600061227e836133a1565b9190505550565b600054610100900460ff166122ac5760405162461bcd60e51b815260040161079890613634565b82516122bf906009906020860190612ab4565b5081516122d390600a906020850190612ab4565b5080516122e790600b906020840190612ab4565b506122f8633d96f4ff60e11b6127bf565b6123086380ac58cd60e01b6127bf565b6108db635b5e139f60e01b6127bf565b600054610100900460ff1661233f5760405162461bcd60e51b815260040161079890613634565b815161235290600c906020850190612ab4565b50805161236690600d906020840190612ab4565b5060408051808201909152600580825264173539b7b760d91b602090920191825261239391600e91612ab4565b506123a4631f2f406b60e01b6127bf565b610bd9635b5e139f60e01b6127bf565b600054610100900460ff166123db5760405162461bcd60e51b815260040161079890613634565b60108190556123f06330f487b560e11b6127bf565b6116516380ac58cd60e01b6127bf565b600054610100900460ff166124275760405162461bcd60e51b815260040161079890613634565b6111b2631aa1577160e11b6127bf565b600054610100900460ff1661245e5760405162461bcd60e51b815260040161079890613634565b6111b263948e2d5360e01b6127bf565b600054610100900460ff166124955760405162461bcd60e51b815260040161079890613634565b6124a5633a47bf5160e11b6127bf565b6124b563152a902d60e11b6127bf565b6124c563c69dbd8f60e01b6127bf565b6124d563656cb66560e11b6127bf565b604080518082019091526001600160a01b038316815261ffff821660208201526108db8161217f565b600054610100900460ff166115a85760405162461bcd60e51b815260040161079890613634565b600054610100900460ff1661254c5760405162461bcd60e51b815260040161079890613634565b6111b2632a7c3e4960e01b6127bf565b60006115f48383612840565b60006115f48383612933565b6000612588846001600160a01b0316611727565b1561268457836001600160a01b031663150b7a026125a46117aa565b8786866040518563ffffffff1660e01b81526004016125c694939291906137c3565b602060405180830381600087803b1580156125e057600080fd5b505af1925050508015612610575060408051601f3d908101601f1916820190925261260d91810190613800565b60015b61266a573d80801561263e576040519150601f19603f3d011682016040523d82523d6000602084013e612643565b606091505b5080516126625760405162461bcd60e51b8152600401610798906136a4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506118e4565b506001949350505050565b6060816126b35750506040805180820190915260018152600360fc1b602082015290565b8160005b81156126dd57806126c7816133a1565b91506126d69050600a83613477565b91506126b7565b6000816001600160401b038111156126f7576126f7612b97565b6040519080825280601f01601f191660200182016040528015612721576020820181803683370190505b5090505b84156118e4576127366001836135b7565b9150612743600a8661381d565b61274e9060306135ce565b60f81b81838151811061276357612763613351565b60200101906001600160f81b031916908160001a905350612785600a86613477565b9450612725565b6127968383612982565b6127a36000848484612574565b6108db5760405162461bcd60e51b8152600401610798906136a4565b6001600160e01b031980821614156128185760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610798565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600081815260018301602052604081205480156129295760006128646001836135b7565b8554909150600090612878906001906135b7565b90508181146128dd57600086600001828154811061289857612898613351565b90600052602060002001549050808760000184815481106128bb576128bb613351565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128ee576128ee613831565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f6565b60009150506105f6565b600081815260018301602052604081205461297a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f6565b5060006105f6565b6001600160a01b0382166129d85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610798565b6129e18161178d565b15612a2d5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606401610798565b6001600160a01b0382166000908152600660205260408120805460019290612a569084906135ce565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054612ac090613528565b90600052602060002090601f016020900481019282612ae25760008555612b28565b82601f10612afb57805160ff1916838001178555612b28565b82800160010185558215612b28579182015b82811115612b28578251825591602001919060010190612b0d565b50612b34929150612b38565b5090565b5b80821115612b345760008155600101612b39565b6001600160e01b03198116811461165157600080fd5b600060208284031215612b7557600080fd5b81356115f481612b4d565b80356001600160a01b0381168114611ba057600080fd5b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715612bd057612bd0612b97565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612bfe57612bfe612b97565b604052919050565b60006001600160401b03821115612c1f57612c1f612b97565b5060051b60200190565b600082601f830112612c3a57600080fd5b81356020612c4f612c4a83612c06565b612bd6565b82815260059290921b84018101918181019086841115612c6e57600080fd5b8286015b84811015612c895780358352918301918301612c72565b509695505050505050565b600080600060608486031215612ca957600080fd5b612cb284612b80565b9250612cc060208501612b80565b915060408401356001600160401b03811115612cdb57600080fd5b612ce786828701612c29565b9150509250925092565b600060208284031215612d0357600080fd5b5035919050565b60005b83811015612d25578181015183820152602001612d0d565b838111156106965750506000910152565b60008151808452612d4e816020860160208601612d0a565b601f01601f19169290920160200192915050565b6020815260006115f46020830184612d36565b6001600160a01b0391909116815260200190565b60008060408385031215612d9c57600080fd5b612da583612b80565b946020939093013593505050565b600080600060608486031215612dc857600080fd5b612dd184612b80565b9250612ddf60208501612b80565b9150604084013590509250925092565b60008060408385031215612e0257600080fd5b50508035926020909101359150565b600082601f830112612e2257600080fd5b81356020612e32612c4a83612c06565b82815260059290921b84018101918181019086841115612e5157600080fd5b8286015b84811015612c8957612e6681612b80565b8352918301918301612e55565b600080600060608486031215612e8857600080fd5b83356001600160401b0380821115612e9f57600080fd5b612eab87838801612e11565b94506020860135915080821115612ec157600080fd5b612ecd87838801612e11565b93506040860135915080821115612ee357600080fd5b50612ce786828701612c29565b60006001600160401b03831115612f0957612f09612b97565b612f1c601f8401601f1916602001612bd6565b9050828152838383011115612f3057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612f5857600080fd5b6115f483833560208501612ef0565b600060208284031215612f7957600080fd5b81356001600160401b03811115612f8f57600080fd5b6118e484828501612f47565b803561ffff81168114611ba057600080fd5b60008060408385031215612fc057600080fd5b82356001600160401b0380821115612fd757600080fd5b908401906101608287031215612fec57600080fd5b612ff4612bad565b82358281111561300357600080fd5b61300f88828601612f47565b82525060208301358281111561302457600080fd5b61303088828601612f47565b60208301525060408301358281111561304857600080fd5b61305488828601612f47565b60408301525060608301358281111561306c57600080fd5b61307888828601612f47565b60608301525060808301358281111561309057600080fd5b61309c88828601612f47565b60808301525060a0830135828111156130b457600080fd5b6130c088828601612e11565b60a08301525060c0830135828111156130d857600080fd5b6130e488828601612c29565b60c08301525060e083013560e08201526101009150613104828401612b80565b828201526101209150613118828401612f9b565b82820152610140915061312c828401612b80565b8282015280945050505061314260208401612b80565b90509250929050565b6000806020838503121561315e57600080fd5b82356001600160401b038082111561317557600080fd5b818501915085601f83011261318957600080fd5b81358181111561319857600080fd5b8660206060830285010111156131ad57600080fd5b60209290920196919550909350505050565b6000602082840312156131d157600080fd5b6115f482612b80565b6001600160a01b0392909216825261ffff16602082015260400190565b6000806040838503121561320a57600080fd5b61321383612b80565b91506020830135801515811461322857600080fd5b809150509250929050565b6000806000806080858703121561324957600080fd5b61325285612b80565b935061326060208601612b80565b92506040850135915060608501356001600160401b0381111561328257600080fd5b8501601f8101871361329357600080fd5b6132a287823560208401612ef0565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b8281101561330257815180516001600160a01b031685528601516001600160601b03168685015292840192908501906001016132cb565b5091979650505050505050565b6000806040838503121561332257600080fd5b61332b83612b80565b915061314260208401612b80565b60006040828403121561334b57600080fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156133b5576133b561338b565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600081600019048311821515161561345c5761345c61338b565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261348657613486613461565b500490565b60006060828403121561349d57600080fd5b604051606081018181106001600160401b03821117156134bf576134bf612b97565b604052823581526134d260208401612b80565b60208201526134e360408401612f9b565b60408201529392505050565b60006020828403121561350157600080fd5b5051919050565b602080825260069082015265232927ad22a760d11b604082015260600190565b600181811c9082168061353c57607f821691505b6020821081141561334b57634e487b7160e01b600052602260045260246000fd5b60006040828403121561356f57600080fd5b604051604081018181106001600160401b038211171561359157613591612b97565b60405261359d83612b80565b81526135ab60208401612f9b565b60208201529392505050565b6000828210156135c9576135c961338b565b500390565b600082198211156135e1576135e161338b565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600b908201526a496e76616c69642062707360a81b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8054600090600181811c908083168061371057607f831692505b602080841082141561373257634e487b7160e01b600052602260045260246000fd5b818015613746576001811461375757613784565b60ff19861689528489019650613784565b60008881526020902060005b8681101561377c5781548b820152908501908301613763565b505084890196505b50505050505092915050565b600061379c82866136f6565b84516137ac818360208901612d0a565b6137b8818301866136f6565b979650505050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906137f690830184612d36565b9695505050505050565b60006020828403121561381257600080fd5b81516115f481612b4d565b60008261382c5761382c613461565b500690565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220efb52db0061b2917949fb149880afb278cda4c643a9020cc9e72f677476df35c64736f6c634300080900330000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a436f6c6c656374696f6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003434f4c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012697066733a2f2f636f6e747261637455524900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015697066733a2f2f706c616365686f6c64657255524900000000000000000000000000000000000000000000000000000000000000000000000000000000000016697066733a2f2f746f6b656e5552495072656669782f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "r": "0x2d4087393b079fb7880e60f9d2f1a150f16ecc769588e6bd7d557bb543cb92aa",
      "s": "0x130af04bc3ff8f3cafe880dde264c053fdd3abeaca8a9e235ba82955329e08dd",
      "v": 536,
      "chainId": 250
    }
  }
}