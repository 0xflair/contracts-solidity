{
  "address": "0x00Dc371b553B7be2dF5D5E42e49b4F9236f588B7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRoyaltyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "TokenRoyaltySet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "defaultRoyalty",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IRoyaltyInternal.TokenRoyalty",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFeeBps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFeeRecipients",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRaribleV2Royalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct IRaribleV2.Part[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenRoyaltiesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTokenRoyaltyByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IRoyaltyInternal.TokenRoyaltyConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d20314f4929722ffeb07e69c675a13fdcffac8b779a463147b244b43f8de811",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x00Dc371b553B7be2dF5D5E42e49b4F9236f588B7",
    "transactionIndex": 1,
    "gasUsed": "567552",
    "logsBloom": "0x
    "blockHash": "0xd74792dee150734bc1ef15b075a678ed05936de206adcadc58a64c05eb11fe2e",
    "transactionHash": "0x2d20314f4929722ffeb07e69c675a13fdcffac8b779a463147b244b43f8de811",
    "logs": [],
    "blockNumber": 683062,
    "cumulativeGasUsed": "567552",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48f4524ebff8b0366d06eec787eed08d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRoyaltyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"defaultRoyalty\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyInternal.TokenRoyalty\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct IRaribleV2.Part[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRoyaltiesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyaltyByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyInternal.TokenRoyaltyConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Finance\",\"custom:provides-interfaces\":\"IEIP2981 IRoyalty IRaribleV1 IRaribleV2 IFoundation IEIP2981RoyaltyOverride\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"defaultRoyalty()\":{\"details\":\"Default royalty for all tokens without a specific royalty.\"},\"getFeeRecipients(uint256)\":{\"details\":\"IRaribleV1\"},\"getFees(uint256)\":{\"details\":\"IFoundation\"},\"getRaribleV2Royalties(uint256)\":{\"details\":\"IRaribleV2\"},\"getTokenRoyaltiesCount()\":{\"details\":\"IEIP2981RoyaltyOverride (Manifold)\"},\"getTokenRoyaltyByIndex(uint256)\":{\"details\":\"Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"EIP-2981\"}},\"title\":\"ERC2981 - Royalty\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provide standard on-chain EIP-2981 royalty support for ERC721 or ERC1155 tokens, and additional functions for Rarible and Foundation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/finance/royalty/Royalty.sol\":\"Royalty\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\ninterface IEIP2981RoyaltyOverride is IERC165 {\\n\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns(uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external view returns(TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n\\n}\\n\",\"keccak256\":\"0xb7f47d4711c6eb42dc5874ad916713ffb6e8754ad568cdb5e9b0c5fcb028c698\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * EIP-2981\\n */\\ninterface IEIP2981 {\\n    /**\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n}\",\"keccak256\":\"0xa150218faf74c7d01e3d9aa712845a2bb519e7fc2ec854e2241c53e4cce163ae\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IFoundation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFoundation {\\n    /*\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\\ninterface IFoundationTreasuryNode {\\n    function getFoundationTreasury() external view returns (address payable);\\n}\\n\\ninterface IFoundationTreasury {\\n    function isAdmin(address account) external view returns (bool);\\n}\",\"keccak256\":\"0x02e67fd662b5be5eb5564aa84a0d04ceada9467da5cf8f5a1f2d5c3d5781f96c\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IRarible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRaribleV1 {\\n    /*\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\n     */\\n    function getFeeBps(uint256 id) external view returns (uint[] memory);\\n    function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\\n}\\n\\n\\ninterface IRaribleV2 {\\n    /*\\n     *  bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n    function getRaribleV2Royalties(uint256 id) external view returns (Part[] memory);\\n}\",\"keccak256\":\"0xdbdc6547f8d5a444ff96d985d622ec4eaaf88571a22e64f1be63c596529f559d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"src/finance/royalty/IRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IRarible.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IFoundation.sol\\\";\\n\\nimport \\\"./IRoyaltyInternal.sol\\\";\\n\\ninterface IRoyalty is IEIP2981, IRaribleV1, IRaribleV2, IFoundation, IRoyaltyInternal {\\n    /**\\n     * @dev Default royalty for all tokens without a specific royalty.\\n     */\\n    function defaultRoyalty() external view returns (TokenRoyalty memory);\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external view returns (TokenRoyaltyConfig memory);\\n}\\n\",\"keccak256\":\"0xa123d39a92c08e624cdc227b03a98926bc0fce8dfcd7d0bf9b3f224501cf34be\",\"license\":\"AGPL-3.0\"},\"src/finance/royalty/IRoyaltyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IRoyaltyInternal {\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n}\\n\",\"keccak256\":\"0x7e8a0bcd22227c2a10394018099c0294c8d5f90bedb7c5ede9010e28f2c20d3d\",\"license\":\"MIT\"},\"src/finance/royalty/Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./RoyaltyInternal.sol\\\";\\nimport \\\"./RoyaltyStorage.sol\\\";\\nimport \\\"./IRoyalty.sol\\\";\\n\\n/**\\n * @title ERC2981 - Royalty\\n * @notice Provide standard on-chain EIP-2981 royalty support for ERC721 or ERC1155 tokens, and additional functions for Rarible and Foundation.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Finance\\n * @custom:provides-interfaces IEIP2981 IRoyalty IRaribleV1 IRaribleV2 IFoundation IEIP2981RoyaltyOverride\\n */\\ncontract Royalty is IRoyalty, RoyaltyInternal {\\n    using RoyaltyStorage for RoyaltyStorage.Layout;\\n\\n    function defaultRoyalty() external view virtual returns (TokenRoyalty memory) {\\n        return RoyaltyStorage.layout().defaultRoyalty;\\n    }\\n\\n    /**\\n     * @dev EIP-2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view virtual returns (address, uint256) {\\n        return _royaltyInfo(tokenId, value);\\n    }\\n\\n    /**\\n     * @dev IEIP2981RoyaltyOverride (Manifold)\\n     */\\n    function getTokenRoyaltiesCount() external view virtual override returns (uint256) {\\n        return _getTokenRoyaltiesCount();\\n    }\\n\\n    function getTokenRoyaltyByIndex(uint256 index) external view virtual override returns (TokenRoyaltyConfig memory) {\\n        return _getTokenRoyaltyByIndex(index);\\n    }\\n\\n    /**\\n     * @dev IFoundation\\n     */\\n    function getFees(uint256 tokenId) external view virtual returns (address payable[] memory, uint256[] memory) {\\n        address payable[] memory receivers = new address payable[](1);\\n        uint256[] memory bps = new uint256[](1);\\n\\n        (address receiver, uint256 value) = _royaltyInfo(tokenId, 10000);\\n\\n        receivers[0] = payable(receiver);\\n        bps[0] = value;\\n\\n        return (receivers, bps);\\n    }\\n\\n    /**\\n     * @dev IRaribleV1\\n     */\\n    function getFeeRecipients(uint256 tokenId) external view virtual returns (address payable[] memory) {\\n        address payable[] memory receivers = new address payable[](1);\\n\\n        (address receiver, ) = _royaltyInfo(tokenId, 10000);\\n        receivers[0] = payable(receiver);\\n\\n        return receivers;\\n    }\\n\\n    function getFeeBps(uint256 tokenId) external view virtual returns (uint256[] memory) {\\n        uint256[] memory bps = new uint256[](1);\\n\\n        (, uint256 value) = _royaltyInfo(tokenId, 10000);\\n\\n        bps[0] = value;\\n\\n        return bps;\\n    }\\n\\n    /**\\n     * @dev IRaribleV2\\n     */\\n    function getRaribleV2Royalties(uint256 tokenId) external view override returns (IRaribleV2.Part[] memory result) {\\n        result = new IRaribleV2.Part[](1);\\n\\n        // Passing 10,000 as value will give us the bps (basis points, out of 10,000) of the royalty.\\n        (address account, uint256 value) = _royaltyInfo(tokenId, 10000);\\n\\n        result[0].account = payable(account);\\n        result[0].value = uint96(value);\\n    }\\n}\\n\",\"keccak256\":\"0x0c6917191678041c4bee6e4f44e4f10aa712548c154520775c2b8c98700cf7d5\",\"license\":\"AGPL-3.0\"},\"src/finance/royalty/RoyaltyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IRoyaltyInternal.sol\\\";\\nimport \\\"./RoyaltyStorage.sol\\\";\\n\\n/**\\n * @title Royalty standard functionality base on EIP-2981 (derived from Manifold.xyz contracts to adopt Diamond architecture)\\n */\\nabstract contract RoyaltyInternal is IRoyaltyInternal {\\n    using RoyaltyStorage for RoyaltyStorage.Layout;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @dev Sets token royalties. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs) internal virtual {\\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\\n\\n        for (uint256 i = 0; i < royaltyConfigs.length; i++) {\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\n\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\n\\n            if (royaltyConfig.recipient == address(0)) {\\n                delete l.tokenRoyalties[royaltyConfig.tokenId];\\n                l.tokensWithRoyalties.remove(royaltyConfig.tokenId);\\n\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\n            } else {\\n                l.tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(royaltyConfig.recipient, royaltyConfig.bps);\\n                l.tokensWithRoyalties.add(royaltyConfig.tokenId);\\n\\n                emit TokenRoyaltySet(royaltyConfig.tokenId, royaltyConfig.recipient, royaltyConfig.bps);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets default royalty. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal virtual {\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\n\\n        RoyaltyStorage.layout().defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\n\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\n     */\\n    function _getTokenRoyaltiesCount() internal view virtual returns (uint256) {\\n        return RoyaltyStorage.layout().tokensWithRoyalties.length();\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\n     */\\n    function _getTokenRoyaltyByIndex(uint256 index) internal view virtual returns (TokenRoyaltyConfig memory) {\\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\\n\\n        uint256 tokenId = l.tokensWithRoyalties.at(index);\\n        TokenRoyalty memory royalty = l.tokenRoyalties[tokenId];\\n\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\n     */\\n    function _royaltyInfo(uint256 tokenId, uint256 value) internal view virtual returns (address, uint256) {\\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\\n\\n        if (l.tokenRoyalties[tokenId].recipient != address(0)) {\\n            return (l.tokenRoyalties[tokenId].recipient, (value * l.tokenRoyalties[tokenId].bps) / 10000);\\n        }\\n\\n        if (l.defaultRoyalty.recipient != address(0) && l.defaultRoyalty.bps != 0) {\\n            return (l.defaultRoyalty.recipient, (value * l.defaultRoyalty.bps) / 10000);\\n        }\\n\\n        return (address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0x1379af654490102dac5cd772f94912dd0cdf5f0a4931e8b0fb792bf66f8a86e2\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IRoyaltyInternal.sol\\\";\\nimport \\\"./IRoyalty.sol\\\";\\n\\nlibrary RoyaltyStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct Layout {\\n        IRoyaltyInternal.TokenRoyalty defaultRoyalty;\\n        mapping(uint256 => IRoyaltyInternal.TokenRoyalty) tokenRoyalties;\\n        EnumerableSet.UintSet tokensWithRoyalties;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Royalty\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa857b89551ad6826db88ac35395a0a52d6b249e145a41aa3bde720c361068530\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610901806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637e9803421161005b5780637e98034214610198578063b9c4d9fb146101ae578063cad96cca146101ce578063d5a06d4c146101ee57600080fd5b80630653aca51461008d5780630ebd4c7f146100d45780632a55205a146100f45780637885fdc714610126575b600080fd5b6100a061009b3660046106fd565b61020f565b60408051825181526020808401516001600160a01b0316908201529181015161ffff16908201526060015b60405180910390f35b6100e76100e23660046106fd565b61023b565b6040516100cb9190610751565b610107610102366004610764565b610298565b604080516001600160a01b0390931683526020830191909152016100cb565b6040805180820182526000808252602091820152815180830183527fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075546001600160a01b03811680835261ffff600160a01b9092048216928401928352845190815291511691810191909152016100cb565b6101a06102b1565b6040519081526020016100cb565b6101c16101bc3660046106fd565b6102c0565b6040516100cb91906107bf565b6101e16101dc3660046106fd565b61032a565b6040516100cb91906107d2565b6102016101fc3660046106fd565b6103fe565b6040516100cb929190610838565b6040805160608101825260008082526020820181905291810191909152610235826104ba565b92915050565b6040805160018082528183019092526060916000919060208083019080368337019050509050600061026f84612710610586565b915050808260008151811061028657610286610866565b60209081029190910101525092915050565b6000806102a58484610586565b915091505b9250929050565b60006102bb61068b565b905090565b604080516001808252818301909252606091600091906020808301908036833701905050905060006102f484612710610586565b509050808260008151811061030b5761030b610866565b6001600160a01b03909216602092830291909101909101525092915050565b604080516001808252818301909252606091816020015b604080518082019091526000808252602082015281526020019060019003908161034157905050905060008061037984612710610586565b91509150818360008151811061039157610391610866565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505080836000815181106103c9576103c9610866565b6020026020010151602001906bffffffffffffffffffffffff1690816bffffffffffffffffffffffff16815250505050919050565b604080516001808252818301909252606091829160009160208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905060008061045787612710610586565b91509150818460008151811061046f5761046f610866565b60200260200101906001600160a01b031690816001600160a01b03168152505080836000815181106104a3576104a3610866565b602090810291909101015250919590945092505050565b60408051606081018252600080825260208201819052918101829052907fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075906105237fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea077856106b6565b6000818152600190930160209081526040938490208451808601865290546001600160a01b03808216835261ffff600160a01b90920482168385019081528751606081018952958652925116928401929092525116928101929092525092915050565b60008281527fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea076602052604081205481907fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075906001600160a01b03161561062f5760008581526001820160205260409020546001600160a01b038116906127109061061b90600160a01b900461ffff168761087c565b61062591906108a9565b92509250506102aa565b80546001600160a01b03161580159061065357508054600160a01b900461ffff1615155b1561067e5780546001600160a01b038116906127109061061b90600160a01b900461ffff168761087c565b5060009485945092505050565b60006102bb7fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea0776106c9565b60006106c283836106d3565b9392505050565b6000610235825490565b60008260000182815481106106ea576106ea610866565b9060005260206000200154905092915050565b60006020828403121561070f57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156107465781518752958201959082019060010161072a565b509495945050505050565b6020815260006106c26020830184610716565b6000806040838503121561077757600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b838110156107465781516001600160a01b03168752958201959082019060010161079a565b6020815260006106c26020830184610786565b602080825282518282018190526000919060409081850190868401855b8281101561082b57815180516001600160a01b031685528601516bffffffffffffffffffffffff168685015292840192908501906001016107ef565b5091979650505050505050565b60408152600061084b6040830185610786565b828103602084015261085d8185610716565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156108a457634e487b7160e01b600052601160045260246000fd5b500290565b6000826108c657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220fbb46c9864babcd9ba229e0ef843f719c5e18818b60d5244ff5b90fbf10448d664736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80637e9803421161005b5780637e98034214610198578063b9c4d9fb146101ae578063cad96cca146101ce578063d5a06d4c146101ee57600080fd5b80630653aca51461008d5780630ebd4c7f146100d45780632a55205a146100f45780637885fdc714610126575b600080fd5b6100a061009b3660046106fd565b61020f565b60408051825181526020808401516001600160a01b0316908201529181015161ffff16908201526060015b60405180910390f35b6100e76100e23660046106fd565b61023b565b6040516100cb9190610751565b610107610102366004610764565b610298565b604080516001600160a01b0390931683526020830191909152016100cb565b6040805180820182526000808252602091820152815180830183527fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075546001600160a01b03811680835261ffff600160a01b9092048216928401928352845190815291511691810191909152016100cb565b6101a06102b1565b6040519081526020016100cb565b6101c16101bc3660046106fd565b6102c0565b6040516100cb91906107bf565b6101e16101dc3660046106fd565b61032a565b6040516100cb91906107d2565b6102016101fc3660046106fd565b6103fe565b6040516100cb929190610838565b6040805160608101825260008082526020820181905291810191909152610235826104ba565b92915050565b6040805160018082528183019092526060916000919060208083019080368337019050509050600061026f84612710610586565b915050808260008151811061028657610286610866565b60209081029190910101525092915050565b6000806102a58484610586565b915091505b9250929050565b60006102bb61068b565b905090565b604080516001808252818301909252606091600091906020808301908036833701905050905060006102f484612710610586565b509050808260008151811061030b5761030b610866565b6001600160a01b03909216602092830291909101909101525092915050565b604080516001808252818301909252606091816020015b604080518082019091526000808252602082015281526020019060019003908161034157905050905060008061037984612710610586565b91509150818360008151811061039157610391610866565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505080836000815181106103c9576103c9610866565b6020026020010151602001906bffffffffffffffffffffffff1690816bffffffffffffffffffffffff16815250505050919050565b604080516001808252818301909252606091829160009160208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905060008061045787612710610586565b91509150818460008151811061046f5761046f610866565b60200260200101906001600160a01b031690816001600160a01b03168152505080836000815181106104a3576104a3610866565b602090810291909101015250919590945092505050565b60408051606081018252600080825260208201819052918101829052907fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075906105237fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea077856106b6565b6000818152600190930160209081526040938490208451808601865290546001600160a01b03808216835261ffff600160a01b90920482168385019081528751606081018952958652925116928401929092525116928101929092525092915050565b60008281527fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea076602052604081205481907fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075906001600160a01b03161561062f5760008581526001820160205260409020546001600160a01b038116906127109061061b90600160a01b900461ffff168761087c565b61062591906108a9565b92509250506102aa565b80546001600160a01b03161580159061065357508054600160a01b900461ffff1615155b1561067e5780546001600160a01b038116906127109061061b90600160a01b900461ffff168761087c565b5060009485945092505050565b60006102bb7fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea0776106c9565b60006106c283836106d3565b9392505050565b6000610235825490565b60008260000182815481106106ea576106ea610866565b9060005260206000200154905092915050565b60006020828403121561070f57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156107465781518752958201959082019060010161072a565b509495945050505050565b6020815260006106c26020830184610716565b6000806040838503121561077757600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b838110156107465781516001600160a01b03168752958201959082019060010161079a565b6020815260006106c26020830184610786565b602080825282518282018190526000919060409081850190868401855b8281101561082b57815180516001600160a01b031685528601516bffffffffffffffffffffffff168685015292840192908501906001016107ef565b5091979650505050505050565b60408152600061084b6040830185610786565b828103602084015261085d8185610716565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156108a457634e487b7160e01b600052601160045260246000fd5b500290565b6000826108c657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220fbb46c9864babcd9ba229e0ef843f719c5e18818b60d5244ff5b90fbf10448d664736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Finance",
    "custom:provides-interfaces": "IEIP2981 IRoyalty IRaribleV1 IRaribleV2 IFoundation IEIP2981RoyaltyOverride",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "defaultRoyalty()": {
        "details": "Default royalty for all tokens without a specific royalty."
      },
      "getFeeRecipients(uint256)": {
        "details": "IRaribleV1"
      },
      "getFees(uint256)": {
        "details": "IFoundation"
      },
      "getRaribleV2Royalties(uint256)": {
        "details": "IRaribleV2"
      },
      "getTokenRoyaltiesCount()": {
        "details": "IEIP2981RoyaltyOverride (Manifold)"
      },
      "getTokenRoyaltyByIndex(uint256)": {
        "details": "Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations"
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "EIP-2981"
      }
    },
    "title": "ERC2981 - Royalty",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Provide standard on-chain EIP-2981 royalty support for ERC721 or ERC1155 tokens, and additional functions for Rarible and Foundation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}