{
  "address": "0x863c364beB0E60D003c000467Fc8C1744356FD71",
  "abi": [
    {
      "inputs": [],
      "name": "ErrSenderIsNotSelf",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OPERATOR_FILTER_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatchByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "lockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "mintByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesEnforced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "unlockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x669df3da8ebc978452a41ee2675792888970e9df494de0144e61ece13af46592",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x863c364beB0E60D003c000467Fc8C1744356FD71",
    "transactionIndex": 77,
    "gasUsed": "2833885",
    "logsBloom": "0x
    "blockHash": "0xe4e253bf0a088c6b17db68d382fc4bcddfbcd5c8e85cb5d7551e8f9c11859d14",
    "transactionHash": "0x669df3da8ebc978452a41ee2675792888970e9df494de0144e61ece13af46592",
    "logs": [
      {
        "transactionIndex": 77,
        "blockNumber": 8030038,
        "transactionHash": "0x669df3da8ebc978452a41ee2675792888970e9df494de0144e61ece13af46592",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x86d03f430c7616021073d7a71766f632f1ce19f289aa989534d9f4732253eb59",
          "0x000000000000000000000000863c364beb0e60d003c000467fc8c1744356fd71",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 157,
        "blockHash": "0xe4e253bf0a088c6b17db68d382fc4bcddfbcd5c8e85cb5d7551e8f9c11859d14"
      },
      {
        "transactionIndex": 77,
        "blockNumber": 8030038,
        "transactionHash": "0x669df3da8ebc978452a41ee2675792888970e9df494de0144e61ece13af46592",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x0038c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e8",
          "0x000000000000000000000000863c364beb0e60d003c000467fc8c1744356fd71",
          "0x0000000000000000000000003cc6cdda760b79bafa08df41ecfa224f810dceb6",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 158,
        "blockHash": "0xe4e253bf0a088c6b17db68d382fc4bcddfbcd5c8e85cb5d7551e8f9c11859d14"
      }
    ],
    "blockNumber": 8030038,
    "cumulativeGasUsed": "12270721",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "c66422a00980c178379ef3c81269d6c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrSenderIsNotSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatchByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"lockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"mintByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesEnforced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"unlockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:provides-interfaces\":\"IERC1155 IERC1155SupplyExtension IERC1155MintableExtension IERC1155BurnableExtension IERC1155LockableExtension IRoyaltyEnforcement\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"lockByFacet(address,uint256,uint256)\":{\"details\":\"Locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets).\"},\"maxSupply(uint256)\":{\"details\":\"Maximum amount of tokens possible to exist for a given id.\"},\"mintByFacet(address,uint256,uint256,bytes)\":{\"details\":\"Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must be diamond itself (other facets).\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"unlockByFacet(address,uint256,uint256)\":{\"details\":\"Un-locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets).\"}},\"title\":\"ERC1155 - with meta-transactions\",\"version\":1},\"userdoc\":{\"errors\":{\"ErrSenderIsNotSelf()\":[{\"notice\":\"The caller must be the current contract itself.\"}]},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"}},\"notice\":\"Standard EIP-1155 with ability to accept meta transactions (mainly transfer or burn methods).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/ERC1155WithERC2771.sol\":\"ERC1155WithERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"operator-filter-registry/src/DefaultOperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {OperatorFilterer} from \\\"./OperatorFilterer.sol\\\";\\n\\n/**\\n * @title  DefaultOperatorFilterer\\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\\n */\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\\n}\\n\",\"keccak256\":\"0x1d6616260cb0fa3a3c56c9db3c29b1db6037d0f30049dca5e94b4896999df991\",\"license\":\"MIT\"},\"operator-filter-registry/src/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba\",\"license\":\"MIT\"},\"operator-filter-registry/src/OperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\n\\n/**\\n * @title  OperatorFilterer\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\n *         registrant's entries in the OperatorFilterRegistry.\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\n */\\nabstract contract OperatorFilterer {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (subscribe) {\\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcdf355575d1bd6730eab09060a2fbb2d59f2c9b92de8383d35960ecc1bfc0db3\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xe2a19d82d7050c0cd1afb542253f65ce34a650d7d99c0ffcdec6b4274fc51e31\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0x1f1b08cba51a05c8cea04e13251f9f8b8fc895017071cb205b0b4170900d1e5b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xaf69959fcc5b87a74426939bc35b8517566494e3ba575b5cfdb1b5c788c0636a\",\"license\":\"MIT\"},\"src/common/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * The caller must be the current contract itself.\\n */\\nerror ErrSenderIsNotSelf();\\n\",\"keccak256\":\"0xd1592cdff5defdc5c2eabccce2fcd663d930338b99dad69567c7054c81711bc9\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./ERC2771ContextStorage.sol\\\";\\n\\nabstract contract ERC2771ContextInternal is Context {\\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78f51039de18500ce56634bfa72f8d8a0510c97dd94f175e1cbd2385d4ae37\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC2771ContextStorage {\\n    struct Layout {\\n        address trustedForwarder;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC2771Context\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb2e9e2c6145ecf4aae84a602ff668269869da26b25924e9b486b5e94936740e\",\"license\":\"MIT\"},\"src/token/ERC1155/ERC1155WithERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./base/ERC1155BaseERC2771.sol\\\";\\nimport \\\"./extensions/supply/ERC1155SupplyExtension.sol\\\";\\nimport \\\"./extensions/lockable/ERC1155LockableExtension.sol\\\";\\nimport \\\"./extensions/mintable/ERC1155MintableExtension.sol\\\";\\nimport \\\"./extensions/burnable/ERC1155BurnableExtension.sol\\\";\\nimport \\\"./extensions/royalty/ERC1155RoyaltyEnforcementExtension.sol\\\";\\n\\n/**\\n * @title ERC1155 - with meta-transactions\\n * @notice Standard EIP-1155 with ability to accept meta transactions (mainly transfer or burn methods).\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:provides-interfaces IERC1155 IERC1155SupplyExtension IERC1155MintableExtension IERC1155BurnableExtension IERC1155LockableExtension IRoyaltyEnforcement\\n */\\ncontract ERC1155WithERC2771 is\\n    ERC1155BaseERC2771,\\n    ERC1155SupplyExtension,\\n    ERC1155MintableExtension,\\n    ERC1155BurnableExtension,\\n    ERC1155LockableExtension,\\n    ERC1155RoyaltyEnforcementExtension\\n{\\n    function _msgSender() internal view virtual override(Context, ERC1155BaseERC2771) returns (address) {\\n        return ERC1155BaseERC2771._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC1155BaseERC2771) returns (bytes calldata) {\\n        return ERC1155BaseERC2771._msgData();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155SupplyInternal, ERC1155LockableInternal) {\\n        ERC1155BaseInternal._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function _setApprovalForAll(address operator, bool approved)\\n        internal\\n        virtual\\n        override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension)\\n    {\\n        ERC1155RoyaltyEnforcementExtension._setApprovalForAll(operator, approved);\\n    }\\n\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\\n        ERC1155RoyaltyEnforcementExtension._safeTransferBatch(operator, sender, recipient, ids, amounts, data);\\n    }\\n\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\\n        ERC1155RoyaltyEnforcementExtension._transferBatch(operator, sender, recipient, ids, amounts, data);\\n    }\\n\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\\n        ERC1155RoyaltyEnforcementExtension._safeTransfer(operator, sender, recipient, id, amount, data);\\n    }\\n\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\\n        ERC1155RoyaltyEnforcementExtension._transfer(operator, sender, recipient, id, amount, data);\\n    }\\n}\\n\",\"keccak256\":\"0xdd961d3b31f7ba2898e7c8ed41633cc9419aa66239803d0764dc0a518fcad652\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IERC1155Events.sol\\\";\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Events {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd7823c96d06961b243406851d6a264dbb96c34eef1f52d43607c03fa536716e1\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Events {\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0x53842532ee754121be3d0de5a774fa2c70cc3df5aecd9d7075e4069a81054e01\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf13e407bd8e987a634f9161afe4f6f8d6ae3741ce408b7166f0a8c10b30e0f49\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../IERC1155.sol\\\";\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"./ERC1155BaseInternal.sol\\\";\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\ncontract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                require(accounts[i] != address(0), \\\"ERC1155: batch balance query for the zero address\\\");\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status) public virtual {\\n        super._setApprovalForAll(operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        require(from == sender || isApprovedForAll(from, sender), \\\"ERC1155: caller is not owner nor approved\\\");\\n        _safeTransfer(sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        require(from == sender || isApprovedForAll(from, sender), \\\"ERC1155: caller is not owner nor approved\\\");\\n        _safeTransferBatch(sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x0cfcafa531f8615601f1d48c2856d986db41a5a9399b5c5690feaf2def2eab1a\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../metatx/ERC2771ContextInternal.sol\\\";\\n\\nimport \\\"./ERC1155Base.sol\\\";\\n\\n/**\\n * @title Base ERC1155 contract with meta-transactions support (via ERC2771).\\n */\\nabstract contract ERC1155BaseERC2771 is ERC1155Base, ERC2771ContextInternal {\\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\\n        return ERC2771ContextInternal._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\\n        return ERC2771ContextInternal._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x1497dd2af15760739ccc8dff84cab6a7c79311e3d5e0a29d9df464fe4ad67917\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"../IERC1155Events.sol\\\";\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"./ERC1155BaseStorage.sol\\\";\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is Context, IERC1155Events {\\n    using Address for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account, uint256 id) internal view virtual returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        address operator = _msgSender();\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        ERC1155BaseStorage.layout().balances[id][account] += amount;\\n\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(_msgSender(), address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, address(0), account, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            balances[ids[i]][account] += amounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), account, ids, amounts);\\n    }\\n\\n    function _mintBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(accounts.length == amounts.length, \\\"ERC1155: accounts and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            _beforeTokenTransfer(\\n                operator,\\n                address(0),\\n                accounts[i],\\n                _asSingletonArray(ids[i]),\\n                _asSingletonArray(amounts[i]),\\n                datas[i]\\n            );\\n\\n            balances[ids[i]][accounts[i]] += amounts[i];\\n\\n            emit TransferSingle(operator, address(0), accounts[i], ids[i], amounts[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(_msgSender(), address(0), account, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage.layout().balances[id];\\n\\n        unchecked {\\n            require(balances[account] >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, account, address(0), ids, amounts, \\\"\\\");\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                require(balances[id][account] >= amounts[i], \\\"ERC1155: burn amount exceeds balance\\\");\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(sender, account, address(0), ids, amounts);\\n    }\\n\\n    function _setApprovalForAll(address operator, bool status) internal virtual {\\n        address sender = _msgSender();\\n        require(sender != operator, \\\"ERC1155: setting approval status for self\\\");\\n        ERC1155BaseStorage.layout().operatorApprovals[sender][operator] = status;\\n        emit ApprovalForAll(sender, operator, status);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        require(recipient != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(operator, sender, recipient, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            require(senderBalance >= amount, \\\"ERC1155: insufficient balances for transfer\\\");\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, sender, recipient, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(recipient != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n\\n                require(senderBalance >= amount, \\\"ERC1155: insufficient balances for transfer\\\");\\n\\n                balances[token][sender] = senderBalance - amount;\\n\\n                i++;\\n            }\\n\\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, sender, recipient, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155Received.selector,\\n                    \\\"ERC1155: ERC1155Receiver rejected tokens\\\"\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155BatchReceived.selector,\\n                    \\\"ERC1155: ERC1155Receiver rejected tokens\\\"\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3807d893f1a4b9e2b6d0510c8c7be1b3bfa67677da760cb377cff34e61376cd8\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC1155Base\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1e39bdc616bb8aa1419ede864883573a18b8f691aab155f35f99fa6bf240564\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/burnable/ERC1155BurnableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../IERC1155.sol\\\";\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./IERC1155BurnableExtension.sol\\\";\\n\\n/**\\n * @title Extension of {ERC1155} that allows users or approved operators to burn tokens.\\n */\\nabstract contract ERC1155BurnableExtension is IERC1155BurnableExtension, ERC1155BaseInternal {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || IERC1155(address(this)).isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || IERC1155(address(this)).isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    function burnByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _burn(account, id, amount);\\n    }\\n\\n    function burnBatchByFacet(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x560df02df6e7d9399d5885d32e08792789d04f758a949e12057e4bda6124241c\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/burnable/IERC1155BurnableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows holders or approved operators to burn tokens.\\n */\\ninterface IERC1155BurnableExtension {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n\\n    function burnByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function burnBatchByFacet(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3960975e95c3b8bbe5c9bf453adec136826121b5f1f54a94beaa90a7e624f41c\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155LockableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"./ERC1155LockableInternal.sol\\\";\\nimport \\\"./IERC1155LockableExtension.sol\\\";\\n\\nabstract contract ERC1155LockableExtension is IERC1155LockableExtension, ERC1155LockableInternal {\\n    function locked(address account, uint256 tokenId) public view virtual returns (uint256) {\\n        return super._locked(account, tokenId);\\n    }\\n\\n    function locked(address account, uint256[] calldata ticketTokenIds) public view virtual returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            amounts[i] = _locked(account, ticketTokenIds[i]);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155LockableExtension\\n     */\\n    function lockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _lock(account, id, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155LockableExtension\\n     */\\n    function lockByFacet(\\n        address[] memory accounts,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        require(accounts.length == ids.length && accounts.length == amounts.length, \\\"INVALID_ARRAY_LENGTH\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _lock(accounts[i], ids[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155LockableExtension\\n     */\\n    function unlockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _unlock(account, id, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155LockableExtension\\n     */\\n    function unlockByFacet(\\n        address[] memory accounts,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        require(accounts.length == ids.length && accounts.length == amounts.length, \\\"INVALID_ARRAY_LENGTH\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _unlock(accounts[i], ids[i], amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd479ac782849e1dec4ba94170bb91d662faecbef6f21403db024666dc14b5935\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155LockableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./ERC1155LockableStorage.sol\\\";\\n\\nabstract contract ERC1155LockableInternal is ERC1155BaseInternal {\\n    using ERC1155LockableStorage for ERC1155LockableStorage.Layout;\\n\\n    function _locked(address account, uint256 tokenId) internal view virtual returns (uint256) {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        return locks[tokenId];\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _lock(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        require(_balanceOf(account, tokenId) - locks[tokenId] >= amount, \\\"NOT_ENOUGH_BALANCE\\\");\\n\\n        locks[tokenId] += amount;\\n    }\\n\\n    function _unlock(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        require(locks[tokenId] >= amount, \\\"NOT_ENOUGH_LOCKED\\\");\\n\\n        locks[tokenId] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        if (from != address(0)) {\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                require(\\n                    _balanceOf(from, ids[i]) - ERC1155LockableStorage.layout().lockedAmount[from][ids[i]] >= amounts[i],\\n                    \\\"LOCKED\\\"\\n                );\\n            }\\n        }\\n\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x4b821995d1661c7b4e13c493e24e837568e9939dfee7219c020aa96d843841f4\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155LockableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC1155LockableStorage {\\n    struct Layout {\\n        mapping(address => mapping(uint256 => uint256)) lockedAmount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Lockable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x762618f56c6891690c17f6c96fcd134630947e585ae23e188789aeb701429379\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/IERC1155LockableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to lock the tokens.\\n */\\ninterface IERC1155LockableExtension {\\n    /**\\n     * @dev Locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function lockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function lockByFacet(\\n        address[] memory accounts,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /**\\n     * @dev Un-locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function unlockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function unlockByFacet(\\n        address[] memory accounts,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x06d57ca47ff52ff7076372e5c193849f5bae368d0163a0063ed7d7663ae6e46b\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/mintable/ERC1155MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./IERC1155MintableExtension.sol\\\";\\n\\n/**\\n * @title Extension of {ERC1155} that allows other facets of the diamond to mint based on arbitrary logic.\\n */\\nabstract contract ERC1155MintableExtension is IERC1155MintableExtension, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155MintableExtension\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155MintableExtension\\n     */\\n    function mintByFacet(\\n        address[] calldata tos,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _mintBatch(tos, ids, amounts, datas);\\n    }\\n}\\n\",\"keccak256\":\"0x993140feea932d14a10e01d4137f2ec5ac971528de8be7276a50e71336bf5ab2\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/mintable/IERC1155MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC1155MintableExtension {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintByFacet(\\n        address[] calldata tos,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) external;\\n}\\n\",\"keccak256\":\"0x36a66ac7363491121de86a844df3da8d25195bab00cba74b6fa67ae020715d65\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/royalty/ERC1155RoyaltyEnforcementExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"operator-filter-registry/src/DefaultOperatorFilterer.sol\\\";\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../../common/royalty/RoyaltyEnforcement.sol\\\";\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\n\\nabstract contract ERC1155RoyaltyEnforcementExtension is\\n    DefaultOperatorFilterer,\\n    RoyaltyEnforcement,\\n    ERC1155BaseInternal\\n{\\n    function _setApprovalForAll(address operator, bool approved)\\n        internal\\n        virtual\\n        override\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        super._setApprovalForAll(operator, approved);\\n    }\\n\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override onlyAllowedOperator(operator) {\\n        super._safeTransferBatch(operator, sender, recipient, ids, amounts, data);\\n    }\\n\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override onlyAllowedOperator(operator) {\\n        super._transferBatch(operator, sender, recipient, ids, amounts, data);\\n    }\\n\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual override onlyAllowedOperator(operator) {\\n        super._safeTransfer(operator, sender, recipient, id, amount, data);\\n    }\\n\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual override onlyAllowedOperator(operator) {\\n        super._transfer(operator, sender, recipient, id, amount, data);\\n    }\\n}\\n\",\"keccak256\":\"0x97669b094caca95d8502a7173f50e49bb718d39a983de96f1588d0c6d798d911\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./ERC1155SupplyInternal.sol\\\";\\nimport \\\"./IERC1155SupplyExtension.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n */\\nabstract contract ERC1155SupplyExtension is IERC1155SupplyExtension, ERC1155SupplyInternal {\\n    /**\\n     * @inheritdoc IERC1155SupplyExtension\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155SupplyExtension\\n     */\\n    function maxSupply(uint256 id) public view virtual returns (uint256) {\\n        return _maxSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155SupplyExtension\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return _exists(id);\\n    }\\n}\\n\",\"keccak256\":\"0x27d5f0b0ccbeb407346e2a4fb587e7de6166171d3761f97abf76afc5e676b3dd\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./ERC1155SupplyStorage.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n */\\nabstract contract ERC1155SupplyInternal is ERC1155BaseInternal {\\n    using ERC1155SupplyStorage for ERC1155SupplyStorage.Layout;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function _totalSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155SupplyStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function _maxSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155SupplyStorage.layout().maxSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function _exists(uint256 id) internal view virtual returns (bool) {\\n        return ERC1155SupplyStorage.layout().totalSupply[id] > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            mapping(uint256 => uint256) storage totalSupply = ERC1155SupplyStorage.layout().totalSupply;\\n            mapping(uint256 => uint256) storage maxSupply = ERC1155SupplyStorage.layout().maxSupply;\\n\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                totalSupply[ids[i]] += amounts[i];\\n\\n                require(totalSupply[ids[i]] <= maxSupply[ids[i]], \\\"SUPPLY_EXCEED_MAX\\\");\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            mapping(uint256 => uint256) storage totalSupply = ERC1155SupplyStorage.layout().totalSupply;\\n\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b86ed3a5fe8decf85f7eea7ef5a9fd8dade572f2e3d00b43c749e388e8716b8\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC1155SupplyStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => uint256) maxSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Supply\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc914234f2b860ff31a51b08e0cbae0ea110b59425f892c98090f4bbd8ea0330a\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/IERC1155SupplyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that tracks supply and defines a max supply cap per token ID.\\n */\\ninterface IERC1155SupplyExtension {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Maximum amount of tokens possible to exist for a given id.\\n     */\\n    function maxSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe3770f06c4abd9378f182c4ca003c54dd3ab5932989707b210674ec8d5d169c7\",\"license\":\"MIT\"},\"src/token/common/royalty/IRoyaltyEnforcement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Shows if royalties are enforced by blocklisting marketplaces with optional royalty.\\n */\\ninterface IRoyaltyEnforcement {\\n    function royaltiesEnforced() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcc51c4c9390f40f0af991396275a11db33fb6665d0b2f7f72daa1425a1ab5c65\",\"license\":\"MIT\"},\"src/token/common/royalty/RoyaltyEnforcement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../../../access/ownable/OwnableInternal.sol\\\";\\n\\nimport \\\"./RoyaltyEnforcementStorage.sol\\\";\\nimport \\\"./IRoyaltyEnforcement.sol\\\";\\n\\nabstract contract RoyaltyEnforcement is IRoyaltyEnforcement, OwnableInternal {\\n    function royaltiesEnforced() external view virtual override returns (bool) {\\n        return RoyaltyEnforcementStorage.layout().enforceRoyalties;\\n    }\\n}\\n\",\"keccak256\":\"0x5b462afbfa477976448427e318427bfd4723e2def989b6af9490a7406539ccd5\",\"license\":\"MIT\"},\"src/token/common/royalty/RoyaltyEnforcementStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary RoyaltyEnforcementStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.RoyaltyEnforcement\\\");\\n\\n    struct Layout {\\n        bool enforceRoyalties;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae08fcf816a425c667b25c3a0f37b3a39c7584a857bdbce3912a12ae86e7bb99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50733cc6cdda760b79bafa08df41ecfa224f810dceb660016daaeb6d7670e522a718067333cd4e3b156200016e578015620000bc57604051633e9f1edf60e11b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e90637d3e3dbe906044015b600060405180830381600087803b1580156200009d57600080fd5b505af1158015620000b2573d6000803e3d6000fd5b505050506200016e565b6001600160a01b038216156200010d5760405163a0af290360e01b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e9063a0af29039060440162000082565b604051632210724360e11b81523060048201526daaeb6d7670e522a718067333cd4e90634420e48690602401600060405180830381600087803b1580156200015457600080fd5b505af115801562000169573d6000803e3d6000fd5b505050505b50506130c780620001806000396000f3fe608060405234801561001057600080fd5b506004361061018c5760003560e01c80637d151549116100e3578063bd85b0391161008c578063f242432a11610066578063f242432a146103b8578063f5298aca146103cb578063f7794bae146103de57600080fd5b8063bd85b03914610337578063bf7bab731461034a578063e985e9c51461035d57600080fd5b8063a22cb465116100bd578063a22cb465146102fe578063a91a988a14610311578063b164884b1461032457600080fd5b80637d151549146102ae578063869f7594146102d8578063983da156146102eb57600080fd5b806341f43434116101455780634f558e791161011f5780634f558e79146102655780636708a990146102885780636b20c4541461029b57600080fd5b806341f434341461020557806348f2f536146102325780634e1273f41461024557600080fd5b80630ad2bbac116101765780630ad2bbac146101cc5780632eb2c2d6146101df5780633f3b797e146101f257600080fd5b8062fdd58e146101915780630a13c503146101b7575b600080fd5b6101a461019f3660046125c4565b6103f1565b6040519081526020015b60405180910390f35b6101ca6101c536600461263a565b610404565b005b6101ca6101da3660046126fe565b61043e565b6101ca6101ed366004612857565b610472565b6101ca6102003660046129c8565b61055b565b61021a6daaeb6d7670e522a718067333cd4e81565b6040516001600160a01b0390911681526020016101ae565b6101ca610240366004612a50565b610653565b610258610253366004612a83565b610683565b6040516101ae9190612b22565b610278610273366004612b35565b6108aa565b60405190151581526020016101ae565b6101ca610296366004612a50565b6108e1565b6101ca6102a93660046126fe565b61090c565b7f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb2197905460ff16610278565b6101a46102e6366004612b35565b610a0a565b6101ca6102f9366004612a50565b610a3d565b6101ca61030c366004612b5c565b610a68565b61025861031f366004612b93565b610a76565b6101ca610332366004612c28565b610b5d565b6101a4610345366004612b35565b610b8a565b6101a46103583660046125c4565b610bbd565b61027861036b366004612c7f565b6001600160a01b0391821660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832093909416825291909152205460ff1690565b6101ca6103c6366004612cb2565b610c05565b6101ca6103d9366004612a50565b610ceb565b6101ca6103ec3660046129c8565b610de9565b60006103fd8383610edb565b9392505050565b3033146104245760405163fd570b5160e01b815260040160405180910390fd5b6104348888888888888888610fa0565b5050505050505050565b30331461045e5760405163fd570b5160e01b815260040160405180910390fd5b61046b85858585856112db565b5050505050565b600061047c6115cb565b9050806001600160a01b0316866001600160a01b031614806104e257506001600160a01b0380871660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b6105455760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084015b60405180910390fd5b6105538187878787876115da565b505050505050565b30331461057b5760405163fd570b5160e01b815260040160405180910390fd5b8151835114801561058d575080518351145b6105d95760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f41525241595f4c454e475448000000000000000000000000604482015260640161053c565b60005b835181101561064d5761063b8482815181106105fa576105fa612d2a565b602002602001015184838151811061061457610614612d2a565b602002602001015184848151811061062e5761062e612d2a565b60200260200101516115e8565b8061064581612d56565b9150506105dc565b50505050565b3033146106735760405163fd570b5160e01b815260040160405180910390fd5b61067e8383836116a5565b505050565b606081518351146106fc5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161053c565b82517ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a79060009067ffffffffffffffff81111561073b5761073b61277f565b604051908082528060200260200182016040528015610764578160200160208202803683370190505b50905060005b85518110156108a15760006001600160a01b031686828151811061079057610790612d2a565b60200260200101516001600160a01b0316036108145760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527f20746865207a65726f2061646472657373000000000000000000000000000000606482015260840161053c565b82600086838151811061082957610829612d2a565b60200260200101518152602001908152602001600020600087838151811061085357610853612d2a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061088e5761088e612d2a565b602090810291909101015260010161076a565b50949350505050565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604081205415155b92915050565b3033146109015760405163fd570b5160e01b815260040160405180910390fd5b61067e8383836115e8565b6109146115cb565b6001600160a01b0316856001600160a01b031614806109ac57503063e985e9c58661093d6115cb565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190612d6f565b61045e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161053c565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea660205260408120546108db565b303314610a5d5760405163fd570b5160e01b815260040160405180910390fd5b61067e838383611843565b610a72828261190a565b5050565b606060008267ffffffffffffffff811115610a9357610a9361277f565b604051908082528060200260200182016040528015610abc578160200160208202803683370190505b50905060005b838110156108a157610b2e86868684818110610ae057610ae0612d2a565b905060200201356001600160a01b039190911660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320938352929052205490565b828281518110610b4057610b40612d2a565b602090810291909101015280610b5581612d56565b915050610ac2565b303314610b7d5760405163fd570b5160e01b815260040160405180910390fd5b61046b8585858585611a2a565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea560205260408120546108db565b6001600160a01b03821660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b287527820602090815260408083208484529091528120546103fd565b6000610c0f6115cb565b9050806001600160a01b0316876001600160a01b03161480610c7557506001600160a01b0380881660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b610cd35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161053c565b610ce281888888888888611bb1565b50505050505050565b610cf36115cb565b6001600160a01b0316836001600160a01b03161480610d8b57503063e985e9c584610d1c6115cb565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b9190612d6f565b6106735760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161053c565b303314610e095760405163fd570b5160e01b815260040160405180910390fd5b81518351148015610e1b575080518351145b610e675760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f41525241595f4c454e475448000000000000000000000000604482015260640161053c565b60005b835181101561064d57610ec9848281518110610e8857610e88612d2a565b6020026020010151848381518110610ea257610ea2612d2a565b6020026020010151848481518110610ebc57610ebc612d2a565b6020026020010151611843565b80610ed381612d56565b915050610e6a565b60006001600160a01b038316610f595760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f2061646472657373000000000000000000000000000000000000000000606482015260840161053c565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a76000928352602090815260408084206001600160a01b0395909516845293905250205490565b8483146110005760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161053c565b8683146110755760405162461bcd60e51b815260206004820152602d60248201527f455243313135353a206163636f756e747320616e6420616d6f756e7473206c6560448201527f6e677468206d69736d6174636800000000000000000000000000000000000000606482015260840161053c565b600061107f6115cb565b90507ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b878110156112ce5761116e8360008d8d858181106110c5576110c5612d2a565b90506020020160208101906110da9190612d8c565b6110fb8d8d878181106110ef576110ef612d2a565b90506020020135611bc0565b6111108c8c888181106110ef576110ef612d2a565b8a8a8881811061112257611122612d2a565b90506020028101906111349190612da7565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c0b92505050565b86868281811061118057611180612d2a565b905060200201358260008b8b8581811061119c5761119c612d2a565b90506020020135815260200190815260200160002060008d8d858181106111c5576111c5612d2a565b90506020020160208101906111da9190612d8c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546112099190612dee565b909155508b90508a8281811061122157611221612d2a565b90506020020160208101906112369190612d8c565b6001600160a01b031660006001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628c8c8681811061128757611287612d2a565b905060200201358b8b878181106112a0576112a0612d2a565b905060200201356040516112be929190918252602082015260400190565b60405180910390a46001016110a5565b5050505050505050505050565b6001600160a01b03851661133d5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161053c565b82811461139d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161053c565b60006113a76115cb565b90506114288187600088888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092018290525060408051602081019091529081529250611c0b915050565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b8581101561156557600087878381811061146857611468612d2a565b90506020020135905085858381811061148357611483612d2a565b9050602002013583600083815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002054101561151a5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161053c565b85858381811061152c5761152c612d2a565b6000938452602086815260408086206001600160a01b038f1687528252909420805494909102929092013590920390555060010161144c565b5060006001600160a01b0316876001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040516115ba9493929190612e55565b60405180910390a450505050505050565b60006115d5611c10565b905090565b610553868686868686611c1a565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320858452918290529091205482111561167c5760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f4c4f434b4544000000000000000000000000000000604482015260640161053c565b6000838152602082905260408120805484929061169a908490612e87565b909155505050505050565b6001600160a01b0383166117075760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161053c565b60006117116115cb565b90506117418185600061172387611bc0565b61172c87611bc0565b60405180602001604052806000815250611c0b565b60008381527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038816845291829052909120548311156117e05760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161053c565b6001600160a01b0385811660008181526020848152604080832080548990039055805189815291820188905291938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320858452918290529091205482906118948686610edb565b61189e9190612e87565b10156118ec5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f454e4f5547485f42414c414e43450000000000000000000000000000604482015260640161053c565b6000838152602082905260408120805484929061169a908490612dee565b60006119146115cb565b9050826001600160a01b0316816001600160a01b03160361199d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161053c565b6001600160a01b0381811660008181527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832094881680845294825291829020805460ff1916871515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b6000611a346115cb565b90506001600160a01b038616611ab25760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161053c565b611b0781600088611ac289611bc0565b611acb89611bc0565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c0b92505050565b60008581527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038a16845290915281208054869290611b58908490612dee565b909155505060408051868152602081018690526001600160a01b0380891692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050505050565b610ce287878787878787611c42565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611bfa57611bfa612d2a565b602090810291909101015292915050565b610553565b60006115d5611c6b565b856001600160a01b0381163314611c3457611c3433611cb4565b610ce2878787878787611da2565b866001600160a01b0381163314611c5c57611c5c33611cb4565b61043488888888888888611dbe565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f420546000906001600160a01b03163303611cac575060131936013560601c90565b503390565b90565b6daaeb6d7670e522a718067333cd4e3b15611d9f576040517fc61711340000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa158015611d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5e9190612d6f565b611d9f576040517fede71dcc0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240161053c565b50565b611db0868686868686611e11565b610553868686868686611e1f565b611dcd87878787878787611fc4565b610ce2878787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fd392505050565b6105538686868686866120cf565b6001600160a01b0384163b156105535760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e639089908990889088908890600401612eeb565b6020604051808303816000875af1925050508015611e9e575060408051601f3d908101601f19168201909252611e9b91810190612f49565b60015b611f5357611eaa612f73565b806308c379a003611ee35750611ebe612f8e565b80611ec95750611ee5565b8060405162461bcd60e51b815260040161053c9190613018565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161053c565b6001600160e01b0319811663bc197c8160e01b14610ce25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161053c565b610ce2878787878787876120f7565b6001600160a01b0384163b156105535760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612017908990899088908890889060040161302b565b6020604051808303816000875af1925050508015612052575060408051601f3d908101601f1916820190925261204f91810190612f49565b60015b61205e57611eaa612f73565b6001600160e01b0319811663f23a6e6160e01b14610ce25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161053c565b856001600160a01b03811633146120e9576120e933611cb4565b610ce2878787878787612120565b866001600160a01b03811633146121115761211133611cb4565b6104348888888888888861239c565b6001600160a01b0384166121845760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161053c565b81518351146121e65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161053c565b6121f4868686868686611c0b565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b845181101561234c57600085828151811061223557612235612d2a565b60200260200101519050600085838151811061225357612253612d2a565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150818110156122f95760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e73666572000000000000000000000000000000000000000000606482015260840161053c565b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a16815290812080546001959095019483929061233f908490612dee565b9091555061221892505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115ba929190613063565b6001600160a01b0385166124005760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161053c565b61245487878761240f88611bc0565b61241888611bc0565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c0b92505050565b60008481527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602081815260408084206001600160a01b038b168552909152909120548481101561250d5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e73666572000000000000000000000000000000000000000000606482015260840161053c565b6000868152602083815260408083206001600160a01b038c8116855292528083209388900390935588168152908120805486929061254c908490612dee565b909155505060408051868152602081018690526001600160a01b03808916928a821692918c16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050565b80356001600160a01b03811681146125bf57600080fd5b919050565b600080604083850312156125d757600080fd5b6125e0836125a8565b946020939093013593505050565b60008083601f84011261260057600080fd5b50813567ffffffffffffffff81111561261857600080fd5b6020830191508360208260051b850101111561263357600080fd5b9250929050565b6000806000806000806000806080898b03121561265657600080fd5b883567ffffffffffffffff8082111561266e57600080fd5b61267a8c838d016125ee565b909a50985060208b013591508082111561269357600080fd5b61269f8c838d016125ee565b909850965060408b01359150808211156126b857600080fd5b6126c48c838d016125ee565b909650945060608b01359150808211156126dd57600080fd5b506126ea8b828c016125ee565b999c989b5096995094979396929594505050565b60008060008060006060868803121561271657600080fd5b61271f866125a8565b9450602086013567ffffffffffffffff8082111561273c57600080fd5b61274889838a016125ee565b9096509450604088013591508082111561276157600080fd5b5061276e888289016125ee565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156127bb576127bb61277f565b6040525050565b600067ffffffffffffffff8211156127dc576127dc61277f565b5060051b60200190565b600082601f8301126127f757600080fd5b81356020612804826127c2565b6040516128118282612795565b83815260059390931b850182019282810191508684111561283157600080fd5b8286015b8481101561284c5780358352918301918301612835565b509695505050505050565b600080600080600060a0868803121561286f57600080fd5b612878866125a8565b945060206128878188016125a8565b9450604087013567ffffffffffffffff808211156128a457600080fd5b6128b08a838b016127e6565b955060608901359150808211156128c657600080fd5b6128d28a838b016127e6565b945060808901359150808211156128e857600080fd5b818901915089601f8301126128fc57600080fd5b81358181111561290e5761290e61277f565b6040519150612926601f8201601f1916850183612795565b8082528a8482850101111561293a57600080fd5b80848401858401376000848284010152508093505050509295509295909350565b600082601f83011261296c57600080fd5b81356020612979826127c2565b6040516129868282612795565b83815260059390931b85018201928281019150868411156129a657600080fd5b8286015b8481101561284c576129bb816125a8565b83529183019183016129aa565b6000806000606084860312156129dd57600080fd5b833567ffffffffffffffff808211156129f557600080fd5b612a018783880161295b565b94506020860135915080821115612a1757600080fd5b612a23878388016127e6565b93506040860135915080821115612a3957600080fd5b50612a46868287016127e6565b9150509250925092565b600080600060608486031215612a6557600080fd5b612a6e846125a8565b95602085013595506040909401359392505050565b60008060408385031215612a9657600080fd5b823567ffffffffffffffff80821115612aae57600080fd5b612aba8683870161295b565b93506020850135915080821115612ad057600080fd5b50612add858286016127e6565b9150509250929050565b600081518084526020808501945080840160005b83811015612b1757815187529582019590820190600101612afb565b509495945050505050565b6020815260006103fd6020830184612ae7565b600060208284031215612b4757600080fd5b5035919050565b8015158114611d9f57600080fd5b60008060408385031215612b6f57600080fd5b612b78836125a8565b91506020830135612b8881612b4e565b809150509250929050565b600080600060408486031215612ba857600080fd5b612bb1846125a8565b9250602084013567ffffffffffffffff811115612bcd57600080fd5b612bd9868287016125ee565b9497909650939450505050565b60008083601f840112612bf857600080fd5b50813567ffffffffffffffff811115612c1057600080fd5b60208301915083602082850101111561263357600080fd5b600080600080600060808688031215612c4057600080fd5b612c49866125a8565b94506020860135935060408601359250606086013567ffffffffffffffff811115612c7357600080fd5b61276e88828901612be6565b60008060408385031215612c9257600080fd5b612c9b836125a8565b9150612ca9602084016125a8565b90509250929050565b60008060008060008060a08789031215612ccb57600080fd5b612cd4876125a8565b9550612ce2602088016125a8565b94506040870135935060608701359250608087013567ffffffffffffffff811115612d0c57600080fd5b612d1889828a01612be6565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d6857612d68612d40565b5060010190565b600060208284031215612d8157600080fd5b81516103fd81612b4e565b600060208284031215612d9e57600080fd5b6103fd826125a8565b6000808335601e19843603018112612dbe57600080fd5b83018035915067ffffffffffffffff821115612dd957600080fd5b60200191503681900382131561263357600080fd5b60008219821115612e0157612e01612d40565b500190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612e3857600080fd5b8260051b8083602087013760009401602001938452509192915050565b604081526000612e69604083018688612e06565b8281036020840152612e7c818587612e06565b979650505050505050565b600082821015612e9957612e99612d40565b500390565b6000815180845260005b81811015612ec457602081850181015186830182015201612ea8565b81811115612ed6576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152612f1760a0830186612ae7565b8281036060840152612f298186612ae7565b90508281036080840152612f3d8185612e9e565b98975050505050505050565b600060208284031215612f5b57600080fd5b81516001600160e01b0319811681146103fd57600080fd5b600060033d1115611cb15760046000803e5060005160e01c90565b600060443d1015612f9c5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612fcc57505050505090565b8285019150815181811115612fe45750505050505090565b843d8701016020828501011115612ffe5750505050505090565b61300d60208286010187612795565b509095945050505050565b6020815260006103fd6020830184612e9e565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612e7c60a0830184612e9e565b6040815260006130766040830185612ae7565b82810360208401526130888185612ae7565b9594505050505056fea26469706673582212202db765a9d6962823aaeae109afa1eaf74f044eac81b24fb7d1becae0fa58069264736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018c5760003560e01c80637d151549116100e3578063bd85b0391161008c578063f242432a11610066578063f242432a146103b8578063f5298aca146103cb578063f7794bae146103de57600080fd5b8063bd85b03914610337578063bf7bab731461034a578063e985e9c51461035d57600080fd5b8063a22cb465116100bd578063a22cb465146102fe578063a91a988a14610311578063b164884b1461032457600080fd5b80637d151549146102ae578063869f7594146102d8578063983da156146102eb57600080fd5b806341f43434116101455780634f558e791161011f5780634f558e79146102655780636708a990146102885780636b20c4541461029b57600080fd5b806341f434341461020557806348f2f536146102325780634e1273f41461024557600080fd5b80630ad2bbac116101765780630ad2bbac146101cc5780632eb2c2d6146101df5780633f3b797e146101f257600080fd5b8062fdd58e146101915780630a13c503146101b7575b600080fd5b6101a461019f3660046125c4565b6103f1565b6040519081526020015b60405180910390f35b6101ca6101c536600461263a565b610404565b005b6101ca6101da3660046126fe565b61043e565b6101ca6101ed366004612857565b610472565b6101ca6102003660046129c8565b61055b565b61021a6daaeb6d7670e522a718067333cd4e81565b6040516001600160a01b0390911681526020016101ae565b6101ca610240366004612a50565b610653565b610258610253366004612a83565b610683565b6040516101ae9190612b22565b610278610273366004612b35565b6108aa565b60405190151581526020016101ae565b6101ca610296366004612a50565b6108e1565b6101ca6102a93660046126fe565b61090c565b7f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb2197905460ff16610278565b6101a46102e6366004612b35565b610a0a565b6101ca6102f9366004612a50565b610a3d565b6101ca61030c366004612b5c565b610a68565b61025861031f366004612b93565b610a76565b6101ca610332366004612c28565b610b5d565b6101a4610345366004612b35565b610b8a565b6101a46103583660046125c4565b610bbd565b61027861036b366004612c7f565b6001600160a01b0391821660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832093909416825291909152205460ff1690565b6101ca6103c6366004612cb2565b610c05565b6101ca6103d9366004612a50565b610ceb565b6101ca6103ec3660046129c8565b610de9565b60006103fd8383610edb565b9392505050565b3033146104245760405163fd570b5160e01b815260040160405180910390fd5b6104348888888888888888610fa0565b5050505050505050565b30331461045e5760405163fd570b5160e01b815260040160405180910390fd5b61046b85858585856112db565b5050505050565b600061047c6115cb565b9050806001600160a01b0316866001600160a01b031614806104e257506001600160a01b0380871660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b6105455760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084015b60405180910390fd5b6105538187878787876115da565b505050505050565b30331461057b5760405163fd570b5160e01b815260040160405180910390fd5b8151835114801561058d575080518351145b6105d95760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f41525241595f4c454e475448000000000000000000000000604482015260640161053c565b60005b835181101561064d5761063b8482815181106105fa576105fa612d2a565b602002602001015184838151811061061457610614612d2a565b602002602001015184848151811061062e5761062e612d2a565b60200260200101516115e8565b8061064581612d56565b9150506105dc565b50505050565b3033146106735760405163fd570b5160e01b815260040160405180910390fd5b61067e8383836116a5565b505050565b606081518351146106fc5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161053c565b82517ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a79060009067ffffffffffffffff81111561073b5761073b61277f565b604051908082528060200260200182016040528015610764578160200160208202803683370190505b50905060005b85518110156108a15760006001600160a01b031686828151811061079057610790612d2a565b60200260200101516001600160a01b0316036108145760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527f20746865207a65726f2061646472657373000000000000000000000000000000606482015260840161053c565b82600086838151811061082957610829612d2a565b60200260200101518152602001908152602001600020600087838151811061085357610853612d2a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061088e5761088e612d2a565b602090810291909101015260010161076a565b50949350505050565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604081205415155b92915050565b3033146109015760405163fd570b5160e01b815260040160405180910390fd5b61067e8383836115e8565b6109146115cb565b6001600160a01b0316856001600160a01b031614806109ac57503063e985e9c58661093d6115cb565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190612d6f565b61045e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161053c565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea660205260408120546108db565b303314610a5d5760405163fd570b5160e01b815260040160405180910390fd5b61067e838383611843565b610a72828261190a565b5050565b606060008267ffffffffffffffff811115610a9357610a9361277f565b604051908082528060200260200182016040528015610abc578160200160208202803683370190505b50905060005b838110156108a157610b2e86868684818110610ae057610ae0612d2a565b905060200201356001600160a01b039190911660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320938352929052205490565b828281518110610b4057610b40612d2a565b602090810291909101015280610b5581612d56565b915050610ac2565b303314610b7d5760405163fd570b5160e01b815260040160405180910390fd5b61046b8585858585611a2a565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea560205260408120546108db565b6001600160a01b03821660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b287527820602090815260408083208484529091528120546103fd565b6000610c0f6115cb565b9050806001600160a01b0316876001600160a01b03161480610c7557506001600160a01b0380881660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b610cd35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161053c565b610ce281888888888888611bb1565b50505050505050565b610cf36115cb565b6001600160a01b0316836001600160a01b03161480610d8b57503063e985e9c584610d1c6115cb565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b9190612d6f565b6106735760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161053c565b303314610e095760405163fd570b5160e01b815260040160405180910390fd5b81518351148015610e1b575080518351145b610e675760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f41525241595f4c454e475448000000000000000000000000604482015260640161053c565b60005b835181101561064d57610ec9848281518110610e8857610e88612d2a565b6020026020010151848381518110610ea257610ea2612d2a565b6020026020010151848481518110610ebc57610ebc612d2a565b6020026020010151611843565b80610ed381612d56565b915050610e6a565b60006001600160a01b038316610f595760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f2061646472657373000000000000000000000000000000000000000000606482015260840161053c565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a76000928352602090815260408084206001600160a01b0395909516845293905250205490565b8483146110005760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161053c565b8683146110755760405162461bcd60e51b815260206004820152602d60248201527f455243313135353a206163636f756e747320616e6420616d6f756e7473206c6560448201527f6e677468206d69736d6174636800000000000000000000000000000000000000606482015260840161053c565b600061107f6115cb565b90507ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b878110156112ce5761116e8360008d8d858181106110c5576110c5612d2a565b90506020020160208101906110da9190612d8c565b6110fb8d8d878181106110ef576110ef612d2a565b90506020020135611bc0565b6111108c8c888181106110ef576110ef612d2a565b8a8a8881811061112257611122612d2a565b90506020028101906111349190612da7565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c0b92505050565b86868281811061118057611180612d2a565b905060200201358260008b8b8581811061119c5761119c612d2a565b90506020020135815260200190815260200160002060008d8d858181106111c5576111c5612d2a565b90506020020160208101906111da9190612d8c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546112099190612dee565b909155508b90508a8281811061122157611221612d2a565b90506020020160208101906112369190612d8c565b6001600160a01b031660006001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628c8c8681811061128757611287612d2a565b905060200201358b8b878181106112a0576112a0612d2a565b905060200201356040516112be929190918252602082015260400190565b60405180910390a46001016110a5565b5050505050505050505050565b6001600160a01b03851661133d5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161053c565b82811461139d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161053c565b60006113a76115cb565b90506114288187600088888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092018290525060408051602081019091529081529250611c0b915050565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b8581101561156557600087878381811061146857611468612d2a565b90506020020135905085858381811061148357611483612d2a565b9050602002013583600083815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002054101561151a5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161053c565b85858381811061152c5761152c612d2a565b6000938452602086815260408086206001600160a01b038f1687528252909420805494909102929092013590920390555060010161144c565b5060006001600160a01b0316876001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040516115ba9493929190612e55565b60405180910390a450505050505050565b60006115d5611c10565b905090565b610553868686868686611c1a565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320858452918290529091205482111561167c5760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f4c4f434b4544000000000000000000000000000000604482015260640161053c565b6000838152602082905260408120805484929061169a908490612e87565b909155505050505050565b6001600160a01b0383166117075760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161053c565b60006117116115cb565b90506117418185600061172387611bc0565b61172c87611bc0565b60405180602001604052806000815250611c0b565b60008381527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038816845291829052909120548311156117e05760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161053c565b6001600160a01b0385811660008181526020848152604080832080548990039055805189815291820188905291938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320858452918290529091205482906118948686610edb565b61189e9190612e87565b10156118ec5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f454e4f5547485f42414c414e43450000000000000000000000000000604482015260640161053c565b6000838152602082905260408120805484929061169a908490612dee565b60006119146115cb565b9050826001600160a01b0316816001600160a01b03160361199d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161053c565b6001600160a01b0381811660008181527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832094881680845294825291829020805460ff1916871515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b6000611a346115cb565b90506001600160a01b038616611ab25760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161053c565b611b0781600088611ac289611bc0565b611acb89611bc0565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c0b92505050565b60008581527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038a16845290915281208054869290611b58908490612dee565b909155505060408051868152602081018690526001600160a01b0380891692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050505050565b610ce287878787878787611c42565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611bfa57611bfa612d2a565b602090810291909101015292915050565b610553565b60006115d5611c6b565b856001600160a01b0381163314611c3457611c3433611cb4565b610ce2878787878787611da2565b866001600160a01b0381163314611c5c57611c5c33611cb4565b61043488888888888888611dbe565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f420546000906001600160a01b03163303611cac575060131936013560601c90565b503390565b90565b6daaeb6d7670e522a718067333cd4e3b15611d9f576040517fc61711340000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa158015611d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5e9190612d6f565b611d9f576040517fede71dcc0000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240161053c565b50565b611db0868686868686611e11565b610553868686868686611e1f565b611dcd87878787878787611fc4565b610ce2878787878787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fd392505050565b6105538686868686866120cf565b6001600160a01b0384163b156105535760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e639089908990889088908890600401612eeb565b6020604051808303816000875af1925050508015611e9e575060408051601f3d908101601f19168201909252611e9b91810190612f49565b60015b611f5357611eaa612f73565b806308c379a003611ee35750611ebe612f8e565b80611ec95750611ee5565b8060405162461bcd60e51b815260040161053c9190613018565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161053c565b6001600160e01b0319811663bc197c8160e01b14610ce25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161053c565b610ce2878787878787876120f7565b6001600160a01b0384163b156105535760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612017908990899088908890889060040161302b565b6020604051808303816000875af1925050508015612052575060408051601f3d908101601f1916820190925261204f91810190612f49565b60015b61205e57611eaa612f73565b6001600160e01b0319811663f23a6e6160e01b14610ce25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161053c565b856001600160a01b03811633146120e9576120e933611cb4565b610ce2878787878787612120565b866001600160a01b03811633146121115761211133611cb4565b6104348888888888888861239c565b6001600160a01b0384166121845760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161053c565b81518351146121e65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161053c565b6121f4868686868686611c0b565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b845181101561234c57600085828151811061223557612235612d2a565b60200260200101519050600085838151811061225357612253612d2a565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150818110156122f95760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e73666572000000000000000000000000000000000000000000606482015260840161053c565b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a16815290812080546001959095019483929061233f908490612dee565b9091555061221892505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115ba929190613063565b6001600160a01b0385166124005760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161053c565b61245487878761240f88611bc0565b61241888611bc0565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c0b92505050565b60008481527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602081815260408084206001600160a01b038b168552909152909120548481101561250d5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e73666572000000000000000000000000000000000000000000606482015260840161053c565b6000868152602083815260408083206001600160a01b038c8116855292528083209388900390935588168152908120805486929061254c908490612dee565b909155505060408051868152602081018690526001600160a01b03808916928a821692918c16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050565b80356001600160a01b03811681146125bf57600080fd5b919050565b600080604083850312156125d757600080fd5b6125e0836125a8565b946020939093013593505050565b60008083601f84011261260057600080fd5b50813567ffffffffffffffff81111561261857600080fd5b6020830191508360208260051b850101111561263357600080fd5b9250929050565b6000806000806000806000806080898b03121561265657600080fd5b883567ffffffffffffffff8082111561266e57600080fd5b61267a8c838d016125ee565b909a50985060208b013591508082111561269357600080fd5b61269f8c838d016125ee565b909850965060408b01359150808211156126b857600080fd5b6126c48c838d016125ee565b909650945060608b01359150808211156126dd57600080fd5b506126ea8b828c016125ee565b999c989b5096995094979396929594505050565b60008060008060006060868803121561271657600080fd5b61271f866125a8565b9450602086013567ffffffffffffffff8082111561273c57600080fd5b61274889838a016125ee565b9096509450604088013591508082111561276157600080fd5b5061276e888289016125ee565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156127bb576127bb61277f565b6040525050565b600067ffffffffffffffff8211156127dc576127dc61277f565b5060051b60200190565b600082601f8301126127f757600080fd5b81356020612804826127c2565b6040516128118282612795565b83815260059390931b850182019282810191508684111561283157600080fd5b8286015b8481101561284c5780358352918301918301612835565b509695505050505050565b600080600080600060a0868803121561286f57600080fd5b612878866125a8565b945060206128878188016125a8565b9450604087013567ffffffffffffffff808211156128a457600080fd5b6128b08a838b016127e6565b955060608901359150808211156128c657600080fd5b6128d28a838b016127e6565b945060808901359150808211156128e857600080fd5b818901915089601f8301126128fc57600080fd5b81358181111561290e5761290e61277f565b6040519150612926601f8201601f1916850183612795565b8082528a8482850101111561293a57600080fd5b80848401858401376000848284010152508093505050509295509295909350565b600082601f83011261296c57600080fd5b81356020612979826127c2565b6040516129868282612795565b83815260059390931b85018201928281019150868411156129a657600080fd5b8286015b8481101561284c576129bb816125a8565b83529183019183016129aa565b6000806000606084860312156129dd57600080fd5b833567ffffffffffffffff808211156129f557600080fd5b612a018783880161295b565b94506020860135915080821115612a1757600080fd5b612a23878388016127e6565b93506040860135915080821115612a3957600080fd5b50612a46868287016127e6565b9150509250925092565b600080600060608486031215612a6557600080fd5b612a6e846125a8565b95602085013595506040909401359392505050565b60008060408385031215612a9657600080fd5b823567ffffffffffffffff80821115612aae57600080fd5b612aba8683870161295b565b93506020850135915080821115612ad057600080fd5b50612add858286016127e6565b9150509250929050565b600081518084526020808501945080840160005b83811015612b1757815187529582019590820190600101612afb565b509495945050505050565b6020815260006103fd6020830184612ae7565b600060208284031215612b4757600080fd5b5035919050565b8015158114611d9f57600080fd5b60008060408385031215612b6f57600080fd5b612b78836125a8565b91506020830135612b8881612b4e565b809150509250929050565b600080600060408486031215612ba857600080fd5b612bb1846125a8565b9250602084013567ffffffffffffffff811115612bcd57600080fd5b612bd9868287016125ee565b9497909650939450505050565b60008083601f840112612bf857600080fd5b50813567ffffffffffffffff811115612c1057600080fd5b60208301915083602082850101111561263357600080fd5b600080600080600060808688031215612c4057600080fd5b612c49866125a8565b94506020860135935060408601359250606086013567ffffffffffffffff811115612c7357600080fd5b61276e88828901612be6565b60008060408385031215612c9257600080fd5b612c9b836125a8565b9150612ca9602084016125a8565b90509250929050565b60008060008060008060a08789031215612ccb57600080fd5b612cd4876125a8565b9550612ce2602088016125a8565b94506040870135935060608701359250608087013567ffffffffffffffff811115612d0c57600080fd5b612d1889828a01612be6565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612d6857612d68612d40565b5060010190565b600060208284031215612d8157600080fd5b81516103fd81612b4e565b600060208284031215612d9e57600080fd5b6103fd826125a8565b6000808335601e19843603018112612dbe57600080fd5b83018035915067ffffffffffffffff821115612dd957600080fd5b60200191503681900382131561263357600080fd5b60008219821115612e0157612e01612d40565b500190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612e3857600080fd5b8260051b8083602087013760009401602001938452509192915050565b604081526000612e69604083018688612e06565b8281036020840152612e7c818587612e06565b979650505050505050565b600082821015612e9957612e99612d40565b500390565b6000815180845260005b81811015612ec457602081850181015186830182015201612ea8565b81811115612ed6576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152612f1760a0830186612ae7565b8281036060840152612f298186612ae7565b90508281036080840152612f3d8185612e9e565b98975050505050505050565b600060208284031215612f5b57600080fd5b81516001600160e01b0319811681146103fd57600080fd5b600060033d1115611cb15760046000803e5060005160e01c90565b600060443d1015612f9c5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612fcc57505050505090565b8285019150815181811115612fe45750505050505090565b843d8701016020828501011115612ffe5750505050505090565b61300d60208286010187612795565b509095945050505050565b6020815260006103fd6020830184612e9e565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612e7c60a0830184612e9e565b6040815260006130766040830185612ae7565b82810360208401526130888185612ae7565b9594505050505056fea26469706673582212202db765a9d6962823aaeae109afa1eaf74f044eac81b24fb7d1becae0fa58069264736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:provides-interfaces": "IERC1155 IERC1155SupplyExtension IERC1155MintableExtension IERC1155BurnableExtension IERC1155LockableExtension IRoyaltyEnforcement",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "lockByFacet(address,uint256,uint256)": {
        "details": "Locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets)."
      },
      "maxSupply(uint256)": {
        "details": "Maximum amount of tokens possible to exist for a given id."
      },
      "mintByFacet(address,uint256,uint256,bytes)": {
        "details": "Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must be diamond itself (other facets)."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "unlockByFacet(address,uint256,uint256)": {
        "details": "Un-locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets)."
      }
    },
    "title": "ERC1155 - with meta-transactions",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ErrSenderIsNotSelf()": [
        {
          "notice": "The caller must be the current contract itself."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      }
    },
    "notice": "Standard EIP-1155 with ability to accept meta transactions (mainly transfer or burn methods).",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}