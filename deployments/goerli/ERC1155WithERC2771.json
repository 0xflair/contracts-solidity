{
  "address": "0x06CE0C5759fad39088a6B428C45755c0f256C9b0",
  "abi": [
    {
      "inputs": [],
      "name": "SenderIsNotSelf",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatchByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnablePausedUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "existsBatch",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "maxSupplyBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "totalSupplyBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc8cb21ba10a911cc5db16e87d4445c1a9dcf811541dcbb141936ea05e304ad3",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x06CE0C5759fad39088a6B428C45755c0f256C9b0",
    "transactionIndex": 42,
    "gasUsed": "2309849",
    "logsBloom": "0x
    "blockHash": "0x81e74ab2193320d655c3e11ad742f533e323bb2213c4271c398c5fa28c6625ce",
    "transactionHash": "0xfc8cb21ba10a911cc5db16e87d4445c1a9dcf811541dcbb141936ea05e304ad3",
    "logs": [],
    "blockNumber": 7645568,
    "cumulativeGasUsed": "20330733",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e48be00805145b428ceb138b70e05daa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SenderIsNotSelf\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatchByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnablePausedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"existsBatch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"maxSupplyBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"totalSupplyBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"existsBatch(uint256[])\":{\"details\":\"Indicates whether tokens exist given a list of IDs.\"},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"lockByFacet(address,uint256,uint256)\":{\"details\":\"Locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets).\"},\"maxSupply(uint256)\":{\"details\":\"Maximum amount of tokens possible to exist for a given id.\"},\"maxSupplyBatch(uint256[])\":{\"details\":\"Maximum amount of tokens possible to exist for a list of IDs.\"},\"mintByFacet(address,uint256,uint256,bytes)\":{\"details\":\"Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must be diamond itself (other facets).\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"totalSupplyBatch(uint256[])\":{\"details\":\"Total amount of tokens for a list of IDs.\"},\"unlockByFacet(address,uint256,uint256)\":{\"details\":\"Un-locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets).\"}},\"version\":1},\"userdoc\":{\"errors\":{\"SenderIsNotSelf()\":[{\"notice\":\"The caller must be the current contract itself.\"}]},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/ERC1155WithERC2771.sol\":\"ERC1155WithERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/common/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * The caller must be the current contract itself.\\n */\\nerror SenderIsNotSelf();\\n\",\"keccak256\":\"0xf12ff1b9b6e4ff8ef186da6e2ca0f600226f78d33fc522735f38b090282be00b\",\"license\":\"MIT\"},\"src/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2008fcbb4474e5eaea1b65a7ac7616edba96ea4021940f5f0ecc305dc95eb4b7\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./ERC2771ContextStorage.sol\\\";\\n\\nabstract contract ERC2771ContextInternal is Context {\\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x71d8e16ef98cee59e83c46fcf6f77ee851344f5fa2139722c3c0b482c9eaa2a1\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC2771ContextStorage {\\n    struct Layout {\\n        address trustedForwarder;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC2771Context\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29460eb99b9b76b701424d400001cbd6ecbf62874946ce91ce0b4af27f9f3fe6\",\"license\":\"MIT\"},\"src/token/ERC1155/ERC1155WithERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./base/ERC1155BaseERC2771.sol\\\";\\nimport \\\"./extensions/supply/ERC1155Supply.sol\\\";\\nimport \\\"./extensions/lockable/ERC1155Lockable.sol\\\";\\nimport \\\"./extensions/mintable/ERC1155Mintable.sol\\\";\\nimport \\\"./extensions/burnable/ERC1155Burnable.sol\\\";\\n\\ncontract ERC1155WithERC2771 is ERC1155BaseERC2771, ERC1155Supply, ERC1155Mintable, ERC1155Burnable, ERC1155Lockable {\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155SupplyInternal, ERC1155LockableInternal) {\\n        ERC1155BaseInternal._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function _msgSender() internal view virtual override(Context, ERC1155BaseERC2771) returns (address) {\\n        return ERC1155BaseERC2771._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC1155BaseERC2771) returns (bytes calldata) {\\n        return ERC1155BaseERC2771._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x23e2bb8de03083154330561e5fa5e6079ff887897bc3c4785d60eec7ccdff15c\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC1155Events.sol\\\";\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Events {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf6697ad977d6038c9c58a769d60f03b0623d293ea347a4c0fc9f7842564ddcdc\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Events {\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0x9d40b0d210f02cdf3f59d1fa1fd0143a7e183d39593d338307a1cb324b598838\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4db59f10b814dbf1d09008eda59e1bf169cfa31293eeabe685ceb0309ccb59b9\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../IERC1155.sol\\\";\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"./ERC1155BaseInternal.sol\\\";\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\ncontract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                require(accounts[i] != address(0), \\\"ERC1155: batch balance query for the zero address\\\");\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status) public virtual {\\n        address sender = _msgSender();\\n        require(sender != operator, \\\"ERC1155: setting approval status for self\\\");\\n        ERC1155BaseStorage.layout().operatorApprovals[sender][operator] = status;\\n        emit ApprovalForAll(sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        require(from == sender || isApprovedForAll(from, sender), \\\"ERC1155: caller is not owner nor approved\\\");\\n        _safeTransfer(sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        require(from == sender || isApprovedForAll(from, sender), \\\"ERC1155: caller is not owner nor approved\\\");\\n        _safeTransferBatch(sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x89fb00e16bf55f99164700454af5ed9ad0ecc2f1e4e69425b4da1472d517def3\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../metatx/ERC2771ContextInternal.sol\\\";\\n\\nimport \\\"./ERC1155Base.sol\\\";\\n\\n/**\\n * @title Base ERC1155 contract with meta-transactions support (via ERC2771).\\n */\\nabstract contract ERC1155BaseERC2771 is ERC1155Base, ERC2771ContextInternal {\\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\\n        return ERC2771ContextInternal._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\\n        return ERC2771ContextInternal._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x165f9cc51d72dc77e6501bd440dbef1885642b85905d99dc50ad03bf3319c6f2\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"../IERC1155Events.sol\\\";\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"./ERC1155BaseStorage.sol\\\";\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is Context, IERC1155Events {\\n    using Address for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account, uint256 id) internal view virtual returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        address operator = _msgSender();\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        ERC1155BaseStorage.layout().balances[id][account] += amount;\\n\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(_msgSender(), address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, address(0), account, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            balances[ids[i]][account] += amounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(_msgSender(), address(0), account, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage.layout().balances[id];\\n\\n        unchecked {\\n            require(balances[account] >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, account, address(0), ids, amounts, \\\"\\\");\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                require(balances[id][account] >= amounts[i], \\\"ERC1155: burn amount exceeds balance\\\");\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(recipient != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(operator, sender, recipient, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            require(senderBalance >= amount, \\\"ERC1155: insufficient balances for transfer\\\");\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, sender, recipient, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(recipient != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n\\n                require(senderBalance >= amount, \\\"ERC1155: insufficient balances for transfer\\\");\\n\\n                balances[token][sender] = senderBalance - amount;\\n\\n                i++;\\n            }\\n\\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, sender, recipient, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155Received.selector,\\n                    \\\"ERC1155: ERC1155Receiver rejected tokens\\\"\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155BatchReceived.selector,\\n                    \\\"ERC1155: ERC1155Receiver rejected tokens\\\"\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x46e3c309fae05b5c972267caf55d14c22483ede19337e68ac625b94098c6b98c\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC1155Base\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60a4436f4730864fd105ea85927ad069db44b305f071b4788fbb6659ee8cecd9\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/burnable/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../IERC1155.sol\\\";\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./IERC1155Burnable.sol\\\";\\nimport \\\"./ERC1155BurnableStorage.sol\\\";\\n\\n/**\\n * @title Extension of {ERC1155} that allows users or approved operators to burn tokens.\\n */\\nabstract contract ERC1155Burnable is IERC1155Burnable, ERC1155BaseInternal {\\n    function burnablePausedUntil() public view override returns (uint256) {\\n        return ERC1155BurnableStorage.layout().pausedUntil;\\n    }\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || IERC1155(address(this)).isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || IERC1155(address(this)).isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    function burnByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert SenderIsNotSelf();\\n        }\\n\\n        _burn(account, id, amount);\\n    }\\n\\n    function burnBatchByFacet(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert SenderIsNotSelf();\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ebbcf67dba02077d1938e8ce4b965b847774336ba72ce03faafb6ea21f478a\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/burnable/ERC1155BurnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155BurnableStorage {\\n    struct Layout {\\n        uint256 pausedUntil;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Burnable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb89ef67e0dea1c9e9156fbd1c8244bbfe3471e331531076f7fcefb23d5566af2\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/burnable/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows holders or approved operators to burn tokens.\\n */\\ninterface IERC1155Burnable {\\n    function burnablePausedUntil() external view returns (uint256);\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n\\n    function burnByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function burnBatchByFacet(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9a33ca40f57d23f91c3623d810b69f1386f583191755de2690bcb5e3cee911da\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"./ERC1155LockableInternal.sol\\\";\\nimport \\\"./IERC1155Lockable.sol\\\";\\n\\nabstract contract ERC1155Lockable is IERC1155Lockable, ERC1155LockableInternal {\\n    function locked(address account, uint256 tokenId) public view virtual returns (uint256) {\\n        return super._locked(account, tokenId);\\n    }\\n\\n    function locked(address account, uint256[] calldata ticketTokenIds) public view returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            amounts[i] = _locked(account, ticketTokenIds[i]);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Lockable\\n     */\\n    function lockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert SenderIsNotSelf();\\n        }\\n\\n        _lock(account, id, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Lockable\\n     */\\n    function unlockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert SenderIsNotSelf();\\n        }\\n\\n        _unlock(account, id, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x769bf26e017d678387a15898f4acb44e7979efcac447c82bf1d27c46080993b2\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155LockableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./ERC1155LockableStorage.sol\\\";\\n\\nabstract contract ERC1155LockableInternal is ERC1155BaseInternal {\\n    using ERC1155LockableStorage for ERC1155LockableStorage.Layout;\\n\\n    function _locked(address account, uint256 tokenId) internal view virtual returns (uint256) {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        return locks[tokenId];\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _lock(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        require(_balanceOf(account, tokenId) - locks[tokenId] >= amount, \\\"NOT_ENOUGH_BALANCE\\\");\\n\\n        locks[tokenId] += amount;\\n    }\\n\\n    function _unlock(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        require(locks[tokenId] >= amount, \\\"NOT_ENOUGH_LOCKED\\\");\\n\\n        locks[tokenId] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        if (from != address(0)) {\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                require(\\n                    _balanceOf(from, ids[i]) - ERC1155LockableStorage.layout().lockedAmount[from][ids[i]] >= amounts[i],\\n                    \\\"LOCKED\\\"\\n                );\\n            }\\n        }\\n\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x403f9579fc545df5be47b6a9c29f34ea5ea388f1f65f990af7e1b446c29c7205\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155LockableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155LockableStorage {\\n    struct Layout {\\n        mapping(address => mapping(uint256 => uint256)) lockedAmount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Lockable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4fbbfaeea2c50b8daf72bad0d2f89c2d6c7b38b4b6f670a78e7b097f0d339e5\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/IERC1155Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to lock the tokens.\\n */\\ninterface IERC1155Lockable {\\n    /**\\n     * @dev Locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function lockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Un-locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function unlockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb467863d85861203a4661fb57b3347a27be9f2d397a144189ead1915cc772e06\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/mintable/ERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./IERC1155Mintable.sol\\\";\\n\\n/**\\n * @title Extension of {ERC1155} that allows other facets of the diamond to mint based on arbitrary logic.\\n */\\nabstract contract ERC1155Mintable is IERC1155Mintable, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155Mintable\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert SenderIsNotSelf();\\n        }\\n\\n        _mint(to, id, amount, data);\\n    }\\n}\\n\",\"keccak256\":\"0xe874f74bbbf4c66dcef9799e17918e450b21e17665522adeee64fee8a0aa5250\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/mintable/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC1155Mintable {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9817b98a99142a19c846e759a8009b472c80785c2f917d267f672d225e4d07b3\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./ERC1155SupplyInternal.sol\\\";\\nimport \\\"./IERC1155Supply.sol\\\";\\nimport \\\"./IERC1155SupplyExtra.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is IERC1155Supply, IERC1155SupplyExtra, ERC1155SupplyInternal {\\n    /**\\n     * @inheritdoc IERC1155Supply\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Supply\\n     */\\n    function maxSupply(uint256 id) public view virtual returns (uint256) {\\n        return _maxSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Supply\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return _exists(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155SupplyExtra\\n     */\\n    function totalSupplyBatch(uint256[] calldata ids) public view virtual override returns (uint256[] memory) {\\n        uint256[] memory totalSupplies = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            totalSupplies[i] = _totalSupply(ids[i]);\\n        }\\n        return totalSupplies;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155SupplyExtra\\n     */\\n    function maxSupplyBatch(uint256[] calldata ids) public view virtual override returns (uint256[] memory) {\\n        uint256[] memory maxSupplies = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            maxSupplies[i] = _maxSupply(ids[i]);\\n        }\\n        return maxSupplies;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155SupplyExtra\\n     */\\n    function existsBatch(uint256[] calldata ids) public view virtual override returns (bool[] memory) {\\n        bool[] memory existences = new bool[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            existences[i] = _exists(ids[i]);\\n        }\\n        return existences;\\n    }\\n}\\n\",\"keccak256\":\"0x06f666e60dd454c0aeb77a157e8908b6aab37653d168418d39372357427cd2b1\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./ERC1155SupplyStorage.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyInternal is ERC1155BaseInternal {\\n    using ERC1155SupplyStorage for ERC1155SupplyStorage.Layout;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function _totalSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155SupplyStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function _maxSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155SupplyStorage.layout().maxSupply[id];\\n    }\\n\\n    /**\\n     * @dev Seta maximum amount of tokens possible to exist for a given token ID.\\n     */\\n    function _setMaxSupply(uint256 tokenId, uint256 newValue) internal {\\n        ERC1155SupplyStorage.layout().maxSupply[tokenId] = newValue;\\n    }\\n\\n    /**\\n     * @dev Sets maximum amount of tokens possible to exist for multiple token IDs.\\n     */\\n    function _setMaxSupplyBatch(uint256[] calldata tokenIds, uint256[] calldata newValues) internal {\\n        mapping(uint256 => uint256) storage l = ERC1155SupplyStorage.layout().maxSupply;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            l[tokenIds[i]] = newValues[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function _exists(uint256 id) internal view virtual returns (bool) {\\n        return ERC1155SupplyStorage.layout().totalSupply[id] > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            mapping(uint256 => uint256) storage totalSupply = ERC1155SupplyStorage.layout().totalSupply;\\n            mapping(uint256 => uint256) storage maxSupply = ERC1155SupplyStorage.layout().maxSupply;\\n\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                totalSupply[ids[i]] += amounts[i];\\n\\n                require(totalSupply[ids[i]] <= maxSupply[ids[i]], \\\"SUPPLY_EXCEED_MAX\\\");\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            mapping(uint256 => uint256) storage totalSupply = ERC1155SupplyStorage.layout().totalSupply;\\n\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6d0224b5d77ec8de51990070c65fbd4a5cfe845846d9765c1c8331b6a647dc5\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155SupplyStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => uint256) maxSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Supply\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8d194b171fccce7a314328a4682f65b45154c283d109b4bd7112d52a9f2cd16\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/IERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that tracks supply and defines a max supply cap per token ID.\\n */\\ninterface IERC1155Supply {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Maximum amount of tokens possible to exist for a given id.\\n     */\\n    function maxSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x59ca2ef958902c6a39a1e8aa99009af1943db7eda9d7d39e776af0cb960df699\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/IERC1155SupplyExtra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} to add batch view operations for supply.\\n */\\ninterface IERC1155SupplyExtra {\\n    /**\\n     * @dev Total amount of tokens for a list of IDs.\\n     */\\n    function totalSupplyBatch(uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Maximum amount of tokens possible to exist for a list of IDs.\\n     */\\n    function maxSupplyBatch(uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Indicates whether tokens exist given a list of IDs.\\n     */\\n    function existsBatch(uint256[] calldata ids) external view returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0x6865aa9d319fbdc388efc78d71b365f750f8fde93e6b61948dc1cb305f93b20d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506128d9806100206000396000f3fe608060405234801561001057600080fd5b50600436106101815760003560e01c8063869f7594116100d8578063b164884b1161008c578063e985e9c511610066578063e985e9c514610342578063f242432a1461039d578063f5298aca146103b057600080fd5b8063b164884b14610309578063bd85b0391461031c578063bf7bab731461032f57600080fd5b8063a22cb465116100bd578063a22cb465146102d0578063a47fe40f146102e3578063a91a988a146102f657600080fd5b8063869f7594146102aa578063983da156146102bd57600080fd5b80634e1273f41161013a5780636708a990116101145780636708a990146102715780636b20c4541461028457806377954ac21461029757600080fd5b80634e1273f41461020e5780634f558e791461022e57806352d0a6bb1461025157600080fd5b806314e35aa41161016b57806314e35aa4146101c15780632eb2c2d6146101e857806348f2f536146101fb57600080fd5b8062fdd58e146101865780630ad2bbac146101ac575b600080fd5b610199610194366004611fb3565b6103c3565b6040519081526020015b60405180910390f35b6101bf6101ba3660046120b5565b6103d6565b005b7f20cb9ad5a22f74f90c7fecbece6b6ab3beb2a63812efb8693c5ff39f2b73ee0f54610199565b6101bf6101f636600461219d565b610406565b6101bf610209366004612247565b6104ef565b61022161021c36600461227a565b61051a565b6040516101a39190612380565b61024161023c366004612393565b610741565b60405190151581526020016101a3565b61026461025f3660046123f8565b610778565b6040516101a3919061243a565b6101bf61027f366004612247565b610857565b6101bf6102923660046120b5565b610882565b6102216102a53660046123f8565b610980565b6101996102b8366004612393565b610a50565b6101bf6102cb366004612247565b610a83565b6101bf6102de366004612491565b610aae565b6102216102f13660046123f8565b610bce565b6102216103043660046124c8565b610c9e565b6101bf61031736600461251b565b610d85565b61019961032a366004612393565b610db7565b61019961033d366004611fb3565b610dea565b61024161035036600461257c565b6001600160a01b0391821660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832093909416825291909152205460ff1690565b6101bf6103ab3660046125af565b610e32565b6101bf6103be366004612247565b610f0e565b60006103cf838361100c565b9392505050565b3033146103f6576040516328be0e2160e21b815260040160405180910390fd5b6104018383836110d1565b505050565b600061041061134f565b9050806001600160a01b0316866001600160a01b0316148061047657506001600160a01b0380871660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b6104d95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084015b60405180910390fd5b6104e781878787878761135e565b505050505050565b30331461050f576040516328be0e2160e21b815260040160405180910390fd5b61040183838361137a565b606081518351146105935760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016104d0565b82517ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a79060009067ffffffffffffffff8111156105d2576105d2611fdd565b6040519080825280602002602001820160405280156105fb578160200160208202803683370190505b50905060005b85518110156107385760006001600160a01b031686828151811061062757610627612614565b60200260200101516001600160a01b0316036106ab5760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527f20746865207a65726f206164647265737300000000000000000000000000000060648201526084016104d0565b8260008683815181106106c0576106c0612614565b6020026020010151815260200190815260200160002060008783815181106106ea576106ea612614565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061072557610725612614565b6020908102919091010152600101610601565b50949350505050565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604081205415155b92915050565b606060008267ffffffffffffffff81111561079557610795611fdd565b6040519080825280602002602001820160405280156107be578160200160208202803683370190505b50905060005b8381101561084f5761081b8585838181106107e1576107e1612614565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea56020526040902054151590565b82828151811061082d5761082d612614565b911515602092830291909101909101528061084781612640565b9150506107c4565b509392505050565b303314610877576040516328be0e2160e21b815260040160405180910390fd5b61040183838361150e565b61088a61134f565b6001600160a01b0316836001600160a01b0316148061092257503063e985e9c5846108b361134f565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109229190612659565b6103f65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104d0565b606060008267ffffffffffffffff81111561099d5761099d611fdd565b6040519080825280602002602001820160405280156109c6578160200160208202803683370190505b50905060005b8381101561084f57610a218585838181106109e9576109e9612614565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604090205490565b828281518110610a3357610a33612614565b602090810291909101015280610a4881612640565b9150506109cc565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea66020526040812054610772565b303314610aa3576040516328be0e2160e21b815260040160405180910390fd5b6104018383836115cb565b6000610ab861134f565b9050826001600160a01b0316816001600160a01b031603610b415760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016104d0565b6001600160a01b0381811660008181527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832094881680845294825291829020805460ff1916871515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b606060008267ffffffffffffffff811115610beb57610beb611fdd565b604051908082528060200260200182016040528015610c14578160200160208202803683370190505b50905060005b8381101561084f57610c6f858583818110610c3757610c37612614565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea6602052604090205490565b828281518110610c8157610c81612614565b602090810291909101015280610c9681612640565b915050610c1a565b606060008267ffffffffffffffff811115610cbb57610cbb611fdd565b604051908082528060200260200182016040528015610ce4578160200160208202803683370190505b50905060005b8381101561073857610d5686868684818110610d0857610d08612614565b905060200201356001600160a01b039190911660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320938352929052205490565b828281518110610d6857610d68612614565b602090810291909101015280610d7d81612640565b915050610cea565b303314610da5576040516328be0e2160e21b815260040160405180910390fd5b610db184848484611692565b50505050565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea56020526040812054610772565b6001600160a01b03821660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b287527820602090815260408083208484529091528120546103cf565b6000610e3c61134f565b9050806001600160a01b0316866001600160a01b03161480610ea257506001600160a01b0380871660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b610f005760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104d0565b6104e78187878787876117d8565b610f1661134f565b6001600160a01b0316836001600160a01b03161480610fae57503063e985e9c584610f3f61134f565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190612659565b61050f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104d0565b60006001600160a01b03831661108a5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084016104d0565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a76000928352602090815260408084206001600160a01b0395909516845293905250205490565b6001600160a01b0383166111335760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104d0565b80518251146111955760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104d0565b600061119f61134f565b90506111bf818560008686604051806020016040528060008152506117f4565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b84518110156112ef57600085828151811061120057611200612614565b6020026020010151905084828151811061121c5761121c612614565b602090810291909101810151600083815285835260408082206001600160a01b038c168352909352919091205410156112a35760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104d0565b8482815181106112b5576112b5612614565b602090810291909101810151600092835284825260408084206001600160a01b038b168552909252912080549190910390556001016111e3565b5060006001600160a01b0316856001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611340929190612676565b60405180910390a45050505050565b60006113596117f9565b905090565b61136c868686868686611803565b6104e7868686868686611a90565b6001600160a01b0383166113dc5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104d0565b60006113e661134f565b9050611416818560006113f887611c3e565b61140187611c3e565b604051806020016040528060008152506117f4565b60008381527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038816845291829052909120548311156114b55760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104d0565b6001600160a01b0385811660008181526020848152604080832080548990039055805189815291820188905291938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611340565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b2875278206020908152604080832085845291829052909120548211156115a25760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f4c4f434b454400000000000000000000000000000060448201526064016104d0565b600083815260208290526040812080548492906115c09084906126a4565b909155505050505050565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b287527820602090815260408083208584529182905290912054829061161c868661100c565b61162691906126a4565b10156116745760405162461bcd60e51b815260206004820152601260248201527f4e4f545f454e4f5547485f42414c414e4345000000000000000000000000000060448201526064016104d0565b600083815260208290526040812080548492906115c09084906126bb565b600061169c61134f565b90506001600160a01b03851661171a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104d0565b6117398160008761172a88611c3e565b61173388611c3e565b876117f4565b60008481527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b03891684529091528120805485929061178a9084906126bb565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611340565b6117e6868686868686611c89565b6104e7868686868686611e52565b6104e7565b6000611359611f4e565b6001600160a01b0384166118675760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104d0565b81518351146118c95760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104d0565b6118d78686868686866117f4565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b8451811015611a2f57600085828151811061191857611918612614565b60200260200101519050600085838151811061193657611936612614565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150818110156119dc5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e7366657200000000000000000000000000000000000000000060648201526084016104d0565b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a168152908120805460019590950194839290611a229084906126bb565b909155506118fb92505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a7f929190612676565b60405180910390a450505050505050565b6001600160a01b0384163b156104e75760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611ad49089908990889088908890600401612720565b6020604051808303816000875af1925050508015611b0f575060408051601f3d908101601f19168201909252611b0c9181019061277e565b60015b611bc457611b1b6127a8565b806308c379a003611b545750611b2f6127c3565b80611b3a5750611b56565b8060405162461bcd60e51b81526004016104d0919061284d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016104d0565b6001600160e01b0319811663bc197c8160e01b14611c355760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104d0565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611c7857611c78612614565b602090810291909101015292915050565b6001600160a01b038416611ced5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104d0565b611d0b868686611cfc87611c3e565b611d0587611c3e565b866117f4565b60008381527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602081815260408084206001600160a01b038a1685529091529091205483811015611dc45760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e7366657200000000000000000000000000000000000000000060648201526084016104d0565b6000858152602083815260408083206001600160a01b038b81168552925280832093879003909355871681529081208054859290611e039084906126bb565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611a7f565b6001600160a01b0384163b156104e75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611e969089908990889088908890600401612860565b6020604051808303816000875af1925050508015611ed1575060408051601f3d908101601f19168201909252611ece9181019061277e565b60015b611edd57611b1b6127a8565b6001600160e01b0319811663f23a6e6160e01b14611c355760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104d0565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f420546000906001600160a01b03163303611f8f575060131936013560601c90565b503390565b90565b80356001600160a01b0381168114611fae57600080fd5b919050565b60008060408385031215611fc657600080fd5b611fcf83611f97565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561201957612019611fdd565b6040525050565b600067ffffffffffffffff82111561203a5761203a611fdd565b5060051b60200190565b600082601f83011261205557600080fd5b8135602061206282612020565b60405161206f8282611ff3565b83815260059390931b850182019282810191508684111561208f57600080fd5b8286015b848110156120aa5780358352918301918301612093565b509695505050505050565b6000806000606084860312156120ca57600080fd5b6120d384611f97565b9250602084013567ffffffffffffffff808211156120f057600080fd5b6120fc87838801612044565b9350604086013591508082111561211257600080fd5b5061211f86828701612044565b9150509250925092565b600082601f83011261213a57600080fd5b813567ffffffffffffffff81111561215457612154611fdd565b60405161216b601f8301601f191660200182611ff3565b81815284602083860101111561218057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156121b557600080fd5b6121be86611f97565b94506121cc60208701611f97565b9350604086013567ffffffffffffffff808211156121e957600080fd5b6121f589838a01612044565b9450606088013591508082111561220b57600080fd5b61221789838a01612044565b9350608088013591508082111561222d57600080fd5b5061223a88828901612129565b9150509295509295909350565b60008060006060848603121561225c57600080fd5b61226584611f97565b95602085013595506040909401359392505050565b6000806040838503121561228d57600080fd5b823567ffffffffffffffff808211156122a557600080fd5b818501915085601f8301126122b957600080fd5b813560206122c682612020565b6040516122d38282611ff3565b83815260059390931b85018201928281019150898411156122f357600080fd5b948201945b838610156123185761230986611f97565b825294820194908201906122f8565b9650508601359250508082111561232e57600080fd5b5061233b85828601612044565b9150509250929050565b600081518084526020808501945080840160005b8381101561237557815187529582019590820190600101612359565b509495945050505050565b6020815260006103cf6020830184612345565b6000602082840312156123a557600080fd5b5035919050565b60008083601f8401126123be57600080fd5b50813567ffffffffffffffff8111156123d657600080fd5b6020830191508360208260051b85010111156123f157600080fd5b9250929050565b6000806020838503121561240b57600080fd5b823567ffffffffffffffff81111561242257600080fd5b61242e858286016123ac565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015612474578351151583529284019291840191600101612456565b50909695505050505050565b801515811461248e57600080fd5b50565b600080604083850312156124a457600080fd5b6124ad83611f97565b915060208301356124bd81612480565b809150509250929050565b6000806000604084860312156124dd57600080fd5b6124e684611f97565b9250602084013567ffffffffffffffff81111561250257600080fd5b61250e868287016123ac565b9497909650939450505050565b6000806000806080858703121561253157600080fd5b61253a85611f97565b93506020850135925060408501359150606085013567ffffffffffffffff81111561256457600080fd5b61257087828801612129565b91505092959194509250565b6000806040838503121561258f57600080fd5b61259883611f97565b91506125a660208401611f97565b90509250929050565b600080600080600060a086880312156125c757600080fd5b6125d086611f97565b94506125de60208701611f97565b93506040860135925060608601359150608086013567ffffffffffffffff81111561260857600080fd5b61223a88828901612129565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016126525761265261262a565b5060010190565b60006020828403121561266b57600080fd5b81516103cf81612480565b6040815260006126896040830185612345565b828103602084015261269b8185612345565b95945050505050565b6000828210156126b6576126b661262a565b500390565b600082198211156126ce576126ce61262a565b500190565b6000815180845260005b818110156126f9576020818501810151868301820152016126dd565b8181111561270b576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a0604083015261274c60a0830186612345565b828103606084015261275e8186612345565b9050828103608084015261277281856126d3565b98975050505050505050565b60006020828403121561279057600080fd5b81516001600160e01b0319811681146103cf57600080fd5b600060033d1115611f945760046000803e5060005160e01c90565b600060443d10156127d15790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561280157505050505090565b82850191508151818111156128195750505050505090565b843d87010160208285010111156128335750505050505090565b61284260208286010187611ff3565b509095945050505050565b6020815260006103cf60208301846126d3565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261289860a08301846126d3565b97965050505050505056fea26469706673582212208feba9bc79691ca0ffeb04b04b2e2b6faa7d1f85192c1ba9433735f2189f082c64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101815760003560e01c8063869f7594116100d8578063b164884b1161008c578063e985e9c511610066578063e985e9c514610342578063f242432a1461039d578063f5298aca146103b057600080fd5b8063b164884b14610309578063bd85b0391461031c578063bf7bab731461032f57600080fd5b8063a22cb465116100bd578063a22cb465146102d0578063a47fe40f146102e3578063a91a988a146102f657600080fd5b8063869f7594146102aa578063983da156146102bd57600080fd5b80634e1273f41161013a5780636708a990116101145780636708a990146102715780636b20c4541461028457806377954ac21461029757600080fd5b80634e1273f41461020e5780634f558e791461022e57806352d0a6bb1461025157600080fd5b806314e35aa41161016b57806314e35aa4146101c15780632eb2c2d6146101e857806348f2f536146101fb57600080fd5b8062fdd58e146101865780630ad2bbac146101ac575b600080fd5b610199610194366004611fb3565b6103c3565b6040519081526020015b60405180910390f35b6101bf6101ba3660046120b5565b6103d6565b005b7f20cb9ad5a22f74f90c7fecbece6b6ab3beb2a63812efb8693c5ff39f2b73ee0f54610199565b6101bf6101f636600461219d565b610406565b6101bf610209366004612247565b6104ef565b61022161021c36600461227a565b61051a565b6040516101a39190612380565b61024161023c366004612393565b610741565b60405190151581526020016101a3565b61026461025f3660046123f8565b610778565b6040516101a3919061243a565b6101bf61027f366004612247565b610857565b6101bf6102923660046120b5565b610882565b6102216102a53660046123f8565b610980565b6101996102b8366004612393565b610a50565b6101bf6102cb366004612247565b610a83565b6101bf6102de366004612491565b610aae565b6102216102f13660046123f8565b610bce565b6102216103043660046124c8565b610c9e565b6101bf61031736600461251b565b610d85565b61019961032a366004612393565b610db7565b61019961033d366004611fb3565b610dea565b61024161035036600461257c565b6001600160a01b0391821660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832093909416825291909152205460ff1690565b6101bf6103ab3660046125af565b610e32565b6101bf6103be366004612247565b610f0e565b60006103cf838361100c565b9392505050565b3033146103f6576040516328be0e2160e21b815260040160405180910390fd5b6104018383836110d1565b505050565b600061041061134f565b9050806001600160a01b0316866001600160a01b0316148061047657506001600160a01b0380871660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b6104d95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084015b60405180910390fd5b6104e781878787878761135e565b505050505050565b30331461050f576040516328be0e2160e21b815260040160405180910390fd5b61040183838361137a565b606081518351146105935760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016104d0565b82517ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a79060009067ffffffffffffffff8111156105d2576105d2611fdd565b6040519080825280602002602001820160405280156105fb578160200160208202803683370190505b50905060005b85518110156107385760006001600160a01b031686828151811061062757610627612614565b60200260200101516001600160a01b0316036106ab5760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527f20746865207a65726f206164647265737300000000000000000000000000000060648201526084016104d0565b8260008683815181106106c0576106c0612614565b6020026020010151815260200190815260200160002060008783815181106106ea576106ea612614565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061072557610725612614565b6020908102919091010152600101610601565b50949350505050565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604081205415155b92915050565b606060008267ffffffffffffffff81111561079557610795611fdd565b6040519080825280602002602001820160405280156107be578160200160208202803683370190505b50905060005b8381101561084f5761081b8585838181106107e1576107e1612614565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea56020526040902054151590565b82828151811061082d5761082d612614565b911515602092830291909101909101528061084781612640565b9150506107c4565b509392505050565b303314610877576040516328be0e2160e21b815260040160405180910390fd5b61040183838361150e565b61088a61134f565b6001600160a01b0316836001600160a01b0316148061092257503063e985e9c5846108b361134f565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109229190612659565b6103f65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104d0565b606060008267ffffffffffffffff81111561099d5761099d611fdd565b6040519080825280602002602001820160405280156109c6578160200160208202803683370190505b50905060005b8381101561084f57610a218585838181106109e9576109e9612614565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604090205490565b828281518110610a3357610a33612614565b602090810291909101015280610a4881612640565b9150506109cc565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea66020526040812054610772565b303314610aa3576040516328be0e2160e21b815260040160405180910390fd5b6104018383836115cb565b6000610ab861134f565b9050826001600160a01b0316816001600160a01b031603610b415760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016104d0565b6001600160a01b0381811660008181527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832094881680845294825291829020805460ff1916871515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b606060008267ffffffffffffffff811115610beb57610beb611fdd565b604051908082528060200260200182016040528015610c14578160200160208202803683370190505b50905060005b8381101561084f57610c6f858583818110610c3757610c37612614565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea6602052604090205490565b828281518110610c8157610c81612614565b602090810291909101015280610c9681612640565b915050610c1a565b606060008267ffffffffffffffff811115610cbb57610cbb611fdd565b604051908082528060200260200182016040528015610ce4578160200160208202803683370190505b50905060005b8381101561073857610d5686868684818110610d0857610d08612614565b905060200201356001600160a01b039190911660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320938352929052205490565b828281518110610d6857610d68612614565b602090810291909101015280610d7d81612640565b915050610cea565b303314610da5576040516328be0e2160e21b815260040160405180910390fd5b610db184848484611692565b50505050565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea56020526040812054610772565b6001600160a01b03821660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b287527820602090815260408083208484529091528120546103cf565b6000610e3c61134f565b9050806001600160a01b0316866001600160a01b03161480610ea257506001600160a01b0380871660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b610f005760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104d0565b6104e78187878787876117d8565b610f1661134f565b6001600160a01b0316836001600160a01b03161480610fae57503063e985e9c584610f3f61134f565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190612659565b61050f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016104d0565b60006001600160a01b03831661108a5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084016104d0565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a76000928352602090815260408084206001600160a01b0395909516845293905250205490565b6001600160a01b0383166111335760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104d0565b80518251146111955760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104d0565b600061119f61134f565b90506111bf818560008686604051806020016040528060008152506117f4565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b84518110156112ef57600085828151811061120057611200612614565b6020026020010151905084828151811061121c5761121c612614565b602090810291909101810151600083815285835260408082206001600160a01b038c168352909352919091205410156112a35760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104d0565b8482815181106112b5576112b5612614565b602090810291909101810151600092835284825260408084206001600160a01b038b168552909252912080549190910390556001016111e3565b5060006001600160a01b0316856001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611340929190612676565b60405180910390a45050505050565b60006113596117f9565b905090565b61136c868686868686611803565b6104e7868686868686611a90565b6001600160a01b0383166113dc5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104d0565b60006113e661134f565b9050611416818560006113f887611c3e565b61140187611c3e565b604051806020016040528060008152506117f4565b60008381527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038816845291829052909120548311156114b55760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104d0565b6001600160a01b0385811660008181526020848152604080832080548990039055805189815291820188905291938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611340565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b2875278206020908152604080832085845291829052909120548211156115a25760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f4c4f434b454400000000000000000000000000000060448201526064016104d0565b600083815260208290526040812080548492906115c09084906126a4565b909155505050505050565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b287527820602090815260408083208584529182905290912054829061161c868661100c565b61162691906126a4565b10156116745760405162461bcd60e51b815260206004820152601260248201527f4e4f545f454e4f5547485f42414c414e4345000000000000000000000000000060448201526064016104d0565b600083815260208290526040812080548492906115c09084906126bb565b600061169c61134f565b90506001600160a01b03851661171a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104d0565b6117398160008761172a88611c3e565b61173388611c3e565b876117f4565b60008481527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b03891684529091528120805485929061178a9084906126bb565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611340565b6117e6868686868686611c89565b6104e7868686868686611e52565b6104e7565b6000611359611f4e565b6001600160a01b0384166118675760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104d0565b81518351146118c95760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104d0565b6118d78686868686866117f4565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b8451811015611a2f57600085828151811061191857611918612614565b60200260200101519050600085838151811061193657611936612614565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150818110156119dc5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e7366657200000000000000000000000000000000000000000060648201526084016104d0565b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a168152908120805460019590950194839290611a229084906126bb565b909155506118fb92505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a7f929190612676565b60405180910390a450505050505050565b6001600160a01b0384163b156104e75760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611ad49089908990889088908890600401612720565b6020604051808303816000875af1925050508015611b0f575060408051601f3d908101601f19168201909252611b0c9181019061277e565b60015b611bc457611b1b6127a8565b806308c379a003611b545750611b2f6127c3565b80611b3a5750611b56565b8060405162461bcd60e51b81526004016104d0919061284d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016104d0565b6001600160e01b0319811663bc197c8160e01b14611c355760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104d0565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611c7857611c78612614565b602090810291909101015292915050565b6001600160a01b038416611ced5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016104d0565b611d0b868686611cfc87611c3e565b611d0587611c3e565b866117f4565b60008381527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602081815260408084206001600160a01b038a1685529091529091205483811015611dc45760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e7366657200000000000000000000000000000000000000000060648201526084016104d0565b6000858152602083815260408083206001600160a01b038b81168552925280832093879003909355871681529081208054859290611e039084906126bb565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101611a7f565b6001600160a01b0384163b156104e75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611e969089908990889088908890600401612860565b6020604051808303816000875af1925050508015611ed1575060408051601f3d908101601f19168201909252611ece9181019061277e565b60015b611edd57611b1b6127a8565b6001600160e01b0319811663f23a6e6160e01b14611c355760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016104d0565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f420546000906001600160a01b03163303611f8f575060131936013560601c90565b503390565b90565b80356001600160a01b0381168114611fae57600080fd5b919050565b60008060408385031215611fc657600080fd5b611fcf83611f97565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561201957612019611fdd565b6040525050565b600067ffffffffffffffff82111561203a5761203a611fdd565b5060051b60200190565b600082601f83011261205557600080fd5b8135602061206282612020565b60405161206f8282611ff3565b83815260059390931b850182019282810191508684111561208f57600080fd5b8286015b848110156120aa5780358352918301918301612093565b509695505050505050565b6000806000606084860312156120ca57600080fd5b6120d384611f97565b9250602084013567ffffffffffffffff808211156120f057600080fd5b6120fc87838801612044565b9350604086013591508082111561211257600080fd5b5061211f86828701612044565b9150509250925092565b600082601f83011261213a57600080fd5b813567ffffffffffffffff81111561215457612154611fdd565b60405161216b601f8301601f191660200182611ff3565b81815284602083860101111561218057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156121b557600080fd5b6121be86611f97565b94506121cc60208701611f97565b9350604086013567ffffffffffffffff808211156121e957600080fd5b6121f589838a01612044565b9450606088013591508082111561220b57600080fd5b61221789838a01612044565b9350608088013591508082111561222d57600080fd5b5061223a88828901612129565b9150509295509295909350565b60008060006060848603121561225c57600080fd5b61226584611f97565b95602085013595506040909401359392505050565b6000806040838503121561228d57600080fd5b823567ffffffffffffffff808211156122a557600080fd5b818501915085601f8301126122b957600080fd5b813560206122c682612020565b6040516122d38282611ff3565b83815260059390931b85018201928281019150898411156122f357600080fd5b948201945b838610156123185761230986611f97565b825294820194908201906122f8565b9650508601359250508082111561232e57600080fd5b5061233b85828601612044565b9150509250929050565b600081518084526020808501945080840160005b8381101561237557815187529582019590820190600101612359565b509495945050505050565b6020815260006103cf6020830184612345565b6000602082840312156123a557600080fd5b5035919050565b60008083601f8401126123be57600080fd5b50813567ffffffffffffffff8111156123d657600080fd5b6020830191508360208260051b85010111156123f157600080fd5b9250929050565b6000806020838503121561240b57600080fd5b823567ffffffffffffffff81111561242257600080fd5b61242e858286016123ac565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015612474578351151583529284019291840191600101612456565b50909695505050505050565b801515811461248e57600080fd5b50565b600080604083850312156124a457600080fd5b6124ad83611f97565b915060208301356124bd81612480565b809150509250929050565b6000806000604084860312156124dd57600080fd5b6124e684611f97565b9250602084013567ffffffffffffffff81111561250257600080fd5b61250e868287016123ac565b9497909650939450505050565b6000806000806080858703121561253157600080fd5b61253a85611f97565b93506020850135925060408501359150606085013567ffffffffffffffff81111561256457600080fd5b61257087828801612129565b91505092959194509250565b6000806040838503121561258f57600080fd5b61259883611f97565b91506125a660208401611f97565b90509250929050565b600080600080600060a086880312156125c757600080fd5b6125d086611f97565b94506125de60208701611f97565b93506040860135925060608601359150608086013567ffffffffffffffff81111561260857600080fd5b61223a88828901612129565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016126525761265261262a565b5060010190565b60006020828403121561266b57600080fd5b81516103cf81612480565b6040815260006126896040830185612345565b828103602084015261269b8185612345565b95945050505050565b6000828210156126b6576126b661262a565b500390565b600082198211156126ce576126ce61262a565b500190565b6000815180845260005b818110156126f9576020818501810151868301820152016126dd565b8181111561270b576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a0604083015261274c60a0830186612345565b828103606084015261275e8186612345565b9050828103608084015261277281856126d3565b98975050505050505050565b60006020828403121561279057600080fd5b81516001600160e01b0319811681146103cf57600080fd5b600060033d1115611f945760046000803e5060005160e01c90565b600060443d10156127d15790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561280157505050505090565b82850191508151818111156128195750505050505090565b843d87010160208285010111156128335750505050505090565b61284260208286010187611ff3565b509095945050505050565b6020815260006103cf60208301846126d3565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261289860a08301846126d3565b97965050505050505056fea26469706673582212208feba9bc79691ca0ffeb04b04b2e2b6faa7d1f85192c1ba9433735f2189f082c64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "existsBatch(uint256[])": {
        "details": "Indicates whether tokens exist given a list of IDs."
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "lockByFacet(address,uint256,uint256)": {
        "details": "Locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets)."
      },
      "maxSupply(uint256)": {
        "details": "Maximum amount of tokens possible to exist for a given id."
      },
      "maxSupplyBatch(uint256[])": {
        "details": "Maximum amount of tokens possible to exist for a list of IDs."
      },
      "mintByFacet(address,uint256,uint256,bytes)": {
        "details": "Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must be diamond itself (other facets)."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "totalSupplyBatch(uint256[])": {
        "details": "Total amount of tokens for a list of IDs."
      },
      "unlockByFacet(address,uint256,uint256)": {
        "details": "Un-locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets)."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "SenderIsNotSelf()": [
        {
          "notice": "The caller must be the current contract itself."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}