{
  "address": "0x3dE9781e5E984F45819E0F4891d1EA1db2dF7917",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "facetFunctionSelectors_",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionIDiamondLoupe",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x02060a138ff7c943eacad10b2ea20597d6619074fec6dc1a42b0651c1b005fc9",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x3dE9781e5E984F45819E0F4891d1EA1db2dF7917",
    "transactionIndex": 69,
    "gasUsed": "524026",
    "logsBloom": "0x
    "blockHash": "0x92ffadec9141df108506a897624eb2e731b5fd47f177b000265f056ff79ea6d5",
    "transactionHash": "0x02060a138ff7c943eacad10b2ea20597d6619074fec6dc1a42b0651c1b005fc9",
    "logs": [],
    "blockNumber": 7769074,
    "cumulativeGasUsed": "25237987",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "c55c02555ed2787a9a3699470ac3d317",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionIDiamondLoupe\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Diamonds\",\"custom:provides-interfaces\":\"IDiamondLoupe\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"facetFunctionSelectors_\":\"facetFunctionSelectors_\"}},\"facets()\":{\"returns\":{\"facets_\":\"Facet\"}}},\"title\":\"Diamond - Loupe\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors provided by a facet.\"},\"facets()\":{\"notice\":\"Gets all facets and their selectors.\"}},\"notice\":\"Standard EIP-2535 loupe functions to allow inspecting a diamond for explorers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/diamond/DiamondLoupe.sol\":\"DiamondLoupe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/diamond/DiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"./DiamondStorage.sol\\\";\\nimport \\\"./IDiamondLoupe.sol\\\";\\n\\n// The functions in DiamondLoupe MUST be added to a diamond.\\n// The EIP-2535 Diamond standard requires these functions.\\n\\n/**\\n * @title Diamond - Loupe\\n * @notice Standard EIP-2535 loupe functions to allow inspecting a diamond for explorers.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Diamonds\\n * @custom:provides-interfaces IDiamondLoupe\\n */\\ncontract DiamondLoupe is IDiamondLoupe {\\n    function versionIDiamondLoupe() external pure virtual returns (string memory) {\\n        return \\\"2.x\\\";\\n    }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external view override returns (Facet[] memory facets_) {\\n        DiamondStorage.Layout storage l = DiamondStorage.layout();\\n        uint256 numFacets = l.facetAddresses.length;\\n        facets_ = new Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress_ = l.facetAddresses[i];\\n            facets_[i].facetAddress = facetAddress_;\\n            facets_[i].functionSelectors = l.facetFunctionSelectors[facetAddress_].functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        override\\n        returns (bytes4[] memory facetFunctionSelectors_)\\n    {\\n        DiamondStorage.Layout storage l = DiamondStorage.layout();\\n        facetFunctionSelectors_ = l.facetFunctionSelectors[_facet].functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view override returns (address[] memory facetAddresses_) {\\n        DiamondStorage.Layout storage l = DiamondStorage.layout();\\n        facetAddresses_ = l.facetAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view override returns (address facetAddress_) {\\n        DiamondStorage.Layout storage l = DiamondStorage.layout();\\n        facetAddress_ = l.selectorToFacetAndPosition[_functionSelector].facetAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xdbc37e0ea761b327b063e4415629f2958f550f4580b540cdab07977888f7fd91\",\"license\":\"MIT\"},\"src/diamond/DiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../diamond/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror ErrDiamondFacetAlreadyExists(address facet, bytes4 selector);\\nerror ErrDiamondFacetSameFunction(address facet, bytes4 selector);\\n\\nlibrary DiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct Layout {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            l.slot := position\\n        }\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        // require(\\n        //     _functionSelectors.length > 0,\\n        //     \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        // );\\n        Layout storage l = layout();\\n        // require(\\n        //     _facetAddress != address(0),\\n        //     \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        // );\\n        uint96 selectorPosition = uint96(l.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(l, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l.selectorToFacetAndPosition[selector].facetAddress;\\n\\n            if (oldFacetAddress != address(0)) {\\n                revert ErrDiamondFacetAlreadyExists(oldFacetAddress, selector);\\n            }\\n\\n            addFunction(l, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        // require(\\n        //     _functionSelectors.length > 0,\\n        //     \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        // );\\n        Layout storage l = layout();\\n        // require(\\n        //     _facetAddress != address(0),\\n        //     \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        // );\\n        uint96 selectorPosition = uint96(l.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(l, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l.selectorToFacetAndPosition[selector].facetAddress;\\n\\n            if (oldFacetAddress == _facetAddress) {\\n                revert ErrDiamondFacetSameFunction(oldFacetAddress, selector);\\n            }\\n\\n            removeFunction(l, oldFacetAddress, selector);\\n            addFunction(l, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address, bytes4[] memory _functionSelectors) internal {\\n        // require(\\n        //     _functionSelectors.length > 0,\\n        //     \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        // );\\n        Layout storage l = layout();\\n        // if function does not exist then do nothing and return\\n        // require(\\n        //     _facetAddress == address(0),\\n        //     \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        // );\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(l, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(Layout storage l, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        l.facetFunctionSelectors[_facetAddress].facetAddressPosition = l.facetAddresses.length;\\n        l.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        Layout storage l,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        l.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        l.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        l.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        Layout storage l,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        // require(\\n        //     _facetAddress != address(0),\\n        //     \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        // );\\n        // an immutable function is a function defined directly in a diamond\\n        // require(\\n        //     _facetAddress != address(this),\\n        //     \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        // );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = l.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = l.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = l.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            l.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            l.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        l.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete l.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = l.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = l.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = l.facetAddresses[lastFacetAddressPosition];\\n                l.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                l.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            l.facetAddresses.pop();\\n            delete l.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x586480b78c9ab02514c64246d78af29841d52b7a331d019f67d26b18dbb9a7ee\",\"license\":\"MIT\"},\"src/diamond/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x1eae4488d3ed3622f13ed88fd98aa9b9adfc0456cae242eeab77d6272302fca5\",\"license\":\"MIT\"},\"src/diamond/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x6101a4cecd460a2e5353c2155eebe415bcf7630fceb39c342de80c74c4156752\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061088f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063adfca15e11610050578063adfca15e1461009f578063cdffacc6146100bf578063ce124def1461015b57600080fd5b806352ef6b2c1461006c5780637a0ed6271461008a575b600080fd5b61007461019a565b6040516100819190610538565b60405180910390f35b61009261022c565b60405161008191906105ef565b6100b26100ad366004610697565b610438565b60405161008191906106d4565b6101366100cd3660046106e7565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610081565b604080518082018252600381527f322e780000000000000000000000000000000000000000000000000000000000602082015290516100819190610729565b606060007fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6002810180546040805160208084028201810190925282815293945083018282801561022157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101f6575b505050505091505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e546060907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c908067ffffffffffffffff81111561028c5761028c61079c565b6040519080825280602002602001820160405280156102d257816020015b6040805180820190915260008152606060208201528152602001906001900390816102aa5790505b50925060005b818110156104325760008360020182815481106102f7576102f76107cb565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080858381518110610337576103376107cb565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff92831690529082166000908152600186018252604090819020805482518185028101850190935280835291929091908301828280156103f857602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103a55790505b505050505085838151811061040f5761040f6107cb565b60200260200101516020018190525050808061042a906107fa565b9150506102d8565b50505090565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602090815260409182902080548351818402810184019094528084526060937fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c939092919083018282801561052b57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116104d85790505b5050505050915050919050565b6020808252825182820181905260009190848201906040850190845b8181101561058657835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610554565b50909695505050505050565b600081518084526020808501945080840160005b838110156105e45781517fffffffff0000000000000000000000000000000000000000000000000000000016875295820195908201906001016105a6565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610689578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff16845287015187840187905261067687850182610592565b9588019593505090860190600101610616565b509098975050505050505050565b6000602082840312156106a957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146106cd57600080fd5b9392505050565b6020815260006106cd6020830184610592565b6000602082840312156106f957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146106cd57600080fd5b600060208083528351808285015260005b818110156107565785810183015185820160400152820161073a565b81811115610768576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610852577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220fc377ce35e5167528777b0c04b472409c2b087a31b08bc523dd5ae7d823f222064736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063adfca15e11610050578063adfca15e1461009f578063cdffacc6146100bf578063ce124def1461015b57600080fd5b806352ef6b2c1461006c5780637a0ed6271461008a575b600080fd5b61007461019a565b6040516100819190610538565b60405180910390f35b61009261022c565b60405161008191906105ef565b6100b26100ad366004610697565b610438565b60405161008191906106d4565b6101366100cd3660046106e7565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610081565b604080518082018252600381527f322e780000000000000000000000000000000000000000000000000000000000602082015290516100819190610729565b606060007fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6002810180546040805160208084028201810190925282815293945083018282801561022157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101f6575b505050505091505090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e546060907fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c908067ffffffffffffffff81111561028c5761028c61079c565b6040519080825280602002602001820160405280156102d257816020015b6040805180820190915260008152606060208201528152602001906001900390816102aa5790505b50925060005b818110156104325760008360020182815481106102f7576102f76107cb565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080858381518110610337576103376107cb565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff92831690529082166000908152600186018252604090819020805482518185028101850190935280835291929091908301828280156103f857602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116103a55790505b505050505085838151811061040f5761040f6107cb565b60200260200101516020018190525050808061042a906107fa565b9150506102d8565b50505090565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602090815260409182902080548351818402810184019094528084526060937fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c939092919083018282801561052b57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116104d85790505b5050505050915050919050565b6020808252825182820181905260009190848201906040850190845b8181101561058657835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610554565b50909695505050505050565b600081518084526020808501945080840160005b838110156105e45781517fffffffff0000000000000000000000000000000000000000000000000000000016875295820195908201906001016105a6565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610689578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff16845287015187840187905261067687850182610592565b9588019593505090860190600101610616565b509098975050505050505050565b6000602082840312156106a957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146106cd57600080fd5b9392505050565b6020815260006106cd6020830184610592565b6000602082840312156106f957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146106cd57600080fd5b600060208083528351808285015260005b818110156107565785810183015185820160400152820161073a565b81811115610768576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610852577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220fc377ce35e5167528777b0c04b472409c2b087a31b08bc523dd5ae7d823f222064736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Diamonds",
    "custom:provides-interfaces": "IDiamondLoupe",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "facetAddress(bytes4)": {
        "details": "If facet is not found return address(0).",
        "params": {
          "_functionSelector": "The function selector."
        },
        "returns": {
          "facetAddress_": "The facet address."
        }
      },
      "facetAddresses()": {
        "returns": {
          "facetAddresses_": "facetAddresses_"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "_facet": "The facet address."
        },
        "returns": {
          "facetFunctionSelectors_": "facetFunctionSelectors_"
        }
      },
      "facets()": {
        "returns": {
          "facets_": "Facet"
        }
      }
    },
    "title": "Diamond - Loupe",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "facetAddress(bytes4)": {
        "notice": "Gets the facet that supports the given selector."
      },
      "facetAddresses()": {
        "notice": "Get all the facet addresses used by a diamond."
      },
      "facetFunctionSelectors(address)": {
        "notice": "Gets all the function selectors provided by a facet."
      },
      "facets()": {
        "notice": "Gets all facets and their selectors."
      }
    },
    "notice": "Standard EIP-2535 loupe functions to allow inspecting a diamond for explorers.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}