{
  "address": "0xb55f346bcB5835CA39606a296fe1eb0309777BD2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3cefaf412dcbb91709c5d7bd0724c7e88d65533d22ef8ec9e46eda9f6aa811e5",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xb55f346bcB5835CA39606a296fe1eb0309777BD2",
    "transactionIndex": 48,
    "gasUsed": "418026",
    "logsBloom": "0x
    "blockHash": "0xd114a3cef968b44bafe2bb2489deea9feb31b47ed6d2b02bc82d04e68627c850",
    "transactionHash": "0x3cefaf412dcbb91709c5d7bd0724c7e88d65533d22ef8ec9e46eda9f6aa811e5",
    "logs": [],
    "blockNumber": 7722272,
    "cumulativeGasUsed": "15532707",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "4e9900f3555052f5b462a7e4b5e060a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:peer-dependencies\":\"0xc16c2a44\",\"custom:provides-interfaces\":\"0x0e89341c\",\"custom:type\":\"eip-2535-facet\",\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC1155 - Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uri(uint256)\":{\"notice\":\"inheritdoc IERC1155Metadata\"}},\"notice\":\"Provides metadata for ERC1155 tokens according to standard.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":\"ERC1155Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../../../common/metadata/MetadataStorage.sol\\\";\\nimport \\\"./IERC1155Metadata.sol\\\";\\n\\n/**\\n * @title ERC1155 - Metadata\\n * @notice Provides metadata for ERC1155 tokens according to standard.\\n * @dev See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:peer-dependencies 0xc16c2a44\\n * @custom:provides-interfaces 0x0e89341c\\n */\\ncontract ERC1155Metadata is IERC1155Metadata {\\n    using MetadataStorage for MetadataStorage.Layout;\\n\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId) public view virtual returns (string memory) {\\n        MetadataStorage.Layout storage l = MetadataStorage.layout();\\n\\n        string memory _tokenIdURI = l.tokenURIs[tokenId];\\n        string memory _baseURI = l.baseURI;\\n\\n        if (bytes(_tokenIdURI).length > 0) {\\n            return _tokenIdURI;\\n        } else if (bytes(l.fallbackURI).length > 0) {\\n            return l.fallbackURI;\\n        } else if (bytes(_baseURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, Strings.toString(tokenId), l.uriSuffix));\\n        } else {\\n            return \\\"\\\";\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99723806ea243996c2032fa3217af0f52641df38a4e51141182492d5120bfe4e\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155Metadata {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x06e9faa914aad892109cae7c0ae1c7f5f185510536cb75e6afdf49051e100e38\",\"license\":\"MIT\"},\"src/token/common/metadata/MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Metadata\\\");\\n\\n    struct Layout {\\n        string baseURI;\\n        bool baseURILocked;\\n        string fallbackURI;\\n        bool fallbackURILocked;\\n        string uriSuffix;\\n        bool uriSuffixLocked;\\n        uint256 lastLockedTokenId;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c20765c8d94692d2fcda03b08820edfafe1f8b353cac774041b632953e1e7ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061069b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630e89341c14610030575b600080fd5b61004361003e366004610420565b610059565b6040516100509190610469565b60405180910390f35b60008181527f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2036020526040812080546060927f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc9290916100b89061049c565b80601f01602080910402602001604051908101604052809291908181526020018280546100e49061049c565b80156101315780601f1061010657610100808354040283529160200191610131565b820191906000526020600020905b81548152906001019060200180831161011457829003601f168201915b5050505050905060008260000180546101499061049c565b80601f01602080910402602001604051908101604052809291908181526020018280546101759061049c565b80156101c25780601f10610197576101008083540402835291602001916101c2565b820191906000526020600020905b8154815290600101906020018083116101a557829003601f168201915b505050505090506000825111156101db57509392505050565b60008360020180546101ec9061049c565b9050111561028b578260020180546102039061049c565b80601f016020809104026020016040519081016040528092919081815260200182805461022f9061049c565b801561027c5780601f106102515761010080835404028352916020019161027c565b820191906000526020600020905b81548152906001019060200180831161025f57829003601f168201915b50505050509350505050919050565b8051156102cb578061029c866102e3565b846004016040516020016102b2939291906104d6565b6040516020818303038152906040529350505050919050565b50506040805160208101909152600081529392505050565b60608160000361032657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610350578061033a816105b3565b91506103499050600a836105e2565b915061032a565b60008167ffffffffffffffff81111561036b5761036b6105f6565b6040519080825280601f01601f191660200182016040528015610395576020820181803683370190505b5090505b8415610418576103aa60018361060c565b91506103b7600a86610623565b6103c2906030610637565b60f81b8183815181106103d7576103d761064f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610411600a866105e2565b9450610399565b949350505050565b60006020828403121561043257600080fd5b5035919050565b60005b8381101561045457818101518382015260200161043c565b83811115610463576000848401525b50505050565b6020815260008251806020840152610488816040850160208701610439565b601f01601f19169190910160400192915050565b600181811c908216806104b057607f821691505b6020821081036104d057634e487b7160e01b600052602260045260246000fd5b50919050565b6000845160206104e98285838a01610439565b8551918401916104fc8184848a01610439565b8554920191600090600181811c908083168061051957607f831692505b858310810361053657634e487b7160e01b85526022600452602485fd5b80801561054a576001811461055f5761058c565b60ff198516885283151584028801955061058c565b60008b81526020902060005b858110156105845781548a82015290840190880161056b565b505083880195505b50939b9a5050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016105c5576105c561059d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826105f1576105f16105cc565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561061e5761061e61059d565b500390565b600082610632576106326105cc565b500690565b6000821982111561064a5761064a61059d565b500190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212201e2779f75e27e10b22c3f90c8016ba16431f1442b5cd35e55f053904c91797be64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630e89341c14610030575b600080fd5b61004361003e366004610420565b610059565b6040516100509190610469565b60405180910390f35b60008181527f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2036020526040812080546060927f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc9290916100b89061049c565b80601f01602080910402602001604051908101604052809291908181526020018280546100e49061049c565b80156101315780601f1061010657610100808354040283529160200191610131565b820191906000526020600020905b81548152906001019060200180831161011457829003601f168201915b5050505050905060008260000180546101499061049c565b80601f01602080910402602001604051908101604052809291908181526020018280546101759061049c565b80156101c25780601f10610197576101008083540402835291602001916101c2565b820191906000526020600020905b8154815290600101906020018083116101a557829003601f168201915b505050505090506000825111156101db57509392505050565b60008360020180546101ec9061049c565b9050111561028b578260020180546102039061049c565b80601f016020809104026020016040519081016040528092919081815260200182805461022f9061049c565b801561027c5780601f106102515761010080835404028352916020019161027c565b820191906000526020600020905b81548152906001019060200180831161025f57829003601f168201915b50505050509350505050919050565b8051156102cb578061029c866102e3565b846004016040516020016102b2939291906104d6565b6040516020818303038152906040529350505050919050565b50506040805160208101909152600081529392505050565b60608160000361032657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610350578061033a816105b3565b91506103499050600a836105e2565b915061032a565b60008167ffffffffffffffff81111561036b5761036b6105f6565b6040519080825280601f01601f191660200182016040528015610395576020820181803683370190505b5090505b8415610418576103aa60018361060c565b91506103b7600a86610623565b6103c2906030610637565b60f81b8183815181106103d7576103d761064f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610411600a866105e2565b9450610399565b949350505050565b60006020828403121561043257600080fd5b5035919050565b60005b8381101561045457818101518382015260200161043c565b83811115610463576000848401525b50505050565b6020815260008251806020840152610488816040850160208701610439565b601f01601f19169190910160400192915050565b600181811c908216806104b057607f821691505b6020821081036104d057634e487b7160e01b600052602260045260246000fd5b50919050565b6000845160206104e98285838a01610439565b8551918401916104fc8184848a01610439565b8554920191600090600181811c908083168061051957607f831692505b858310810361053657634e487b7160e01b85526022600452602485fd5b80801561054a576001811461055f5761058c565b60ff198516885283151584028801955061058c565b60008b81526020902060005b858110156105845781548a82015290840190880161056b565b505083880195505b50939b9a5050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016105c5576105c561059d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826105f1576105f16105cc565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561061e5761061e61059d565b500390565b600082610632576106326105cc565b500690565b6000821982111561064a5761064a61059d565b500190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212201e2779f75e27e10b22c3f90c8016ba16431f1442b5cd35e55f053904c91797be64736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:peer-dependencies": "0xc16c2a44",
    "custom:provides-interfaces": "0x0e89341c",
    "custom:type": "eip-2535-facet",
    "details": "See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions",
    "kind": "dev",
    "methods": {},
    "title": "ERC1155 - Metadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "uri(uint256)": {
        "notice": "inheritdoc IERC1155Metadata"
      }
    },
    "notice": "Provides metadata for ERC1155 tokens according to standard.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}