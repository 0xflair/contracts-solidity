{
  "address": "0x858Fb58E1183f8C0ef71583FD1F249062089c229",
  "abi": [
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa86894ea8df6be4bfeb7bc1c31a0e1d1c61a1e347439780e297435b5d225866c",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x858Fb58E1183f8C0ef71583FD1F249062089c229",
    "transactionIndex": 26,
    "gasUsed": "525082",
    "logsBloom": "0x
    "blockHash": "0x552d97c657da516a5d66fb50c2fdc0bbbf2688c76956619bbdcfca04a8347180",
    "transactionHash": "0xa86894ea8df6be4bfeb7bc1c31a0e1d1c61a1e347439780e297435b5d225866c",
    "logs": [],
    "blockNumber": 7769088,
    "cumulativeGasUsed": "7003941",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "c55c02555ed2787a9a3699470ac3d317",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:peer-dependencies\":\"IERC1155\",\"custom:provides-interfaces\":\"IMetadata IERC1155Metadata\",\"custom:type\":\"eip-2535-facet\",\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\",\"kind\":\"dev\",\"methods\":{\"name()\":{\"details\":\"IMetadata\"},\"symbol()\":{\"details\":\"IMetadata\"}},\"title\":\"ERC1155 - Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uri(uint256)\":{\"notice\":\"inheritdoc IERC1155Metadata\"}},\"notice\":\"Provides metadata for ERC1155 tokens according to standard.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":\"ERC1155Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../../../common/metadata/MetadataStorage.sol\\\";\\nimport \\\"./IERC1155Metadata.sol\\\";\\n\\n/**\\n * @title ERC1155 - Metadata\\n * @notice Provides metadata for ERC1155 tokens according to standard.\\n * @dev See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:peer-dependencies IERC1155\\n * @custom:provides-interfaces IMetadata IERC1155Metadata\\n */\\ncontract ERC1155Metadata is IERC1155Metadata {\\n    using MetadataStorage for MetadataStorage.Layout;\\n\\n    /**\\n     * @dev IMetadata\\n     */\\n    function name() external view returns (string memory) {\\n        return MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @dev IMetadata\\n     */\\n    function symbol() external view returns (string memory) {\\n        return MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId) public view virtual returns (string memory) {\\n        MetadataStorage.Layout storage l = MetadataStorage.layout();\\n\\n        string memory _tokenIdURI = l.tokenURIs[tokenId];\\n        string memory _baseURI = l.baseURI;\\n\\n        if (bytes(_tokenIdURI).length > 0) {\\n            return _tokenIdURI;\\n        } else if (bytes(l.fallbackURI).length > 0) {\\n            return l.fallbackURI;\\n        } else if (bytes(_baseURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, Strings.toString(tokenId), l.uriSuffix));\\n        } else {\\n            return \\\"\\\";\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5e956dc6fe87dd8af83ae61aaf9bd020751b28cac541c590d9165575507ac538\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC1155Metadata {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe83342eb5a1d1f71c6a881a6cfbe0933180db20696c1b7a691a77c222e286dcc\",\"license\":\"MIT\"},\"src/token/common/metadata/MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Metadata\\\");\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        bool nameAndSymbolLocked;\\n        string baseURI;\\n        bool baseURILocked;\\n        string fallbackURI;\\n        bool fallbackURILocked;\\n        string uriSuffix;\\n        bool uriSuffixLocked;\\n        uint256 lastLockedTokenId;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc5db4300cea5c783b3aec9ff69d4b7a0c624457a3f0571a5379248beb29f0637\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610894806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306fdde03146100465780630e89341c1461006457806395d89b4114610077575b600080fd5b61004e61007f565b60405161005b9190610558565b60405180910390f35b61004e6100723660046105a9565b610130565b61004e6103ba565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc80546100ad906105c2565b80601f01602080910402602001604051908101604052809291908181526020018280546100d9906105c2565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b5050505050905090565b60008181527f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2066020526040812080546060927f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc92909161018f906105c2565b80601f01602080910402602001604051908101604052809291908181526020018280546101bb906105c2565b80156102085780601f106101dd57610100808354040283529160200191610208565b820191906000526020600020905b8154815290600101906020018083116101eb57829003601f168201915b505050505090506000826003018054610220906105c2565b80601f016020809104026020016040519081016040528092919081815260200182805461024c906105c2565b80156102995780601f1061026e57610100808354040283529160200191610299565b820191906000526020600020905b81548152906001019060200180831161027c57829003601f168201915b505050505090506000825111156102b257509392505050565b60008360050180546102c3906105c2565b90501115610362578260050180546102da906105c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610306906105c2565b80156103535780601f1061032857610100808354040283529160200191610353565b820191906000526020600020905b81548152906001019060200180831161033657829003601f168201915b50505050509350505050919050565b8051156103a25780610373866103eb565b8460070160405160200161038993929190610615565b6040516020818303038152906040529350505050919050565b50506040805160208101909152600081529392505050565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc60010180546100ad906105c2565b60608160000361042e57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610458578061044281610742565b91506104519050600a836107a9565b9150610432565b60008167ffffffffffffffff811115610473576104736107bd565b6040519080825280601f01601f19166020018201604052801561049d576020820181803683370190505b5090505b8415610520576104b26001836107ec565b91506104bf600a86610803565b6104ca906030610817565b60f81b8183815181106104df576104df61082f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610519600a866107a9565b94506104a1565b949350505050565b60005b8381101561054357818101518382015260200161052b565b83811115610552576000848401525b50505050565b6020815260008251806020840152610577816040850160208701610528565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000602082840312156105bb57600080fd5b5035919050565b600181811c908216806105d657607f821691505b60208210810361060f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000845160206106288285838a01610528565b85519184019161063b8184848a01610528565b8554920191600090600181811c908083168061065857607f831692505b858310810361068e577f4e487b710000000000000000000000000000000000000000000000000000000085526022600452602485fd5b8080156106a257600181146106d557610702565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0085168852831515840288019550610702565b60008b81526020902060005b858110156106fa5781548a8201529084019088016106e1565b505083880195505b50939b9a5050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361077357610773610713565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826107b8576107b861077a565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000828210156107fe576107fe610713565b500390565b6000826108125761081261077a565b500690565b6000821982111561082a5761082a610713565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220531fed2e86ad8ab05b14b7ed3c8171cc5578b17cf6e0c23aa7abfbd2adf3b79464736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806306fdde03146100465780630e89341c1461006457806395d89b4114610077575b600080fd5b61004e61007f565b60405161005b9190610558565b60405180910390f35b61004e6100723660046105a9565b610130565b61004e6103ba565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc80546100ad906105c2565b80601f01602080910402602001604051908101604052809291908181526020018280546100d9906105c2565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b5050505050905090565b60008181527f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2066020526040812080546060927f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc92909161018f906105c2565b80601f01602080910402602001604051908101604052809291908181526020018280546101bb906105c2565b80156102085780601f106101dd57610100808354040283529160200191610208565b820191906000526020600020905b8154815290600101906020018083116101eb57829003601f168201915b505050505090506000826003018054610220906105c2565b80601f016020809104026020016040519081016040528092919081815260200182805461024c906105c2565b80156102995780601f1061026e57610100808354040283529160200191610299565b820191906000526020600020905b81548152906001019060200180831161027c57829003601f168201915b505050505090506000825111156102b257509392505050565b60008360050180546102c3906105c2565b90501115610362578260050180546102da906105c2565b80601f0160208091040260200160405190810160405280929190818152602001828054610306906105c2565b80156103535780601f1061032857610100808354040283529160200191610353565b820191906000526020600020905b81548152906001019060200180831161033657829003601f168201915b50505050509350505050919050565b8051156103a25780610373866103eb565b8460070160405160200161038993929190610615565b6040516020818303038152906040529350505050919050565b50506040805160208101909152600081529392505050565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc60010180546100ad906105c2565b60608160000361042e57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610458578061044281610742565b91506104519050600a836107a9565b9150610432565b60008167ffffffffffffffff811115610473576104736107bd565b6040519080825280601f01601f19166020018201604052801561049d576020820181803683370190505b5090505b8415610520576104b26001836107ec565b91506104bf600a86610803565b6104ca906030610817565b60f81b8183815181106104df576104df61082f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610519600a866107a9565b94506104a1565b949350505050565b60005b8381101561054357818101518382015260200161052b565b83811115610552576000848401525b50505050565b6020815260008251806020840152610577816040850160208701610528565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000602082840312156105bb57600080fd5b5035919050565b600181811c908216806105d657607f821691505b60208210810361060f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000845160206106288285838a01610528565b85519184019161063b8184848a01610528565b8554920191600090600181811c908083168061065857607f831692505b858310810361068e577f4e487b710000000000000000000000000000000000000000000000000000000085526022600452602485fd5b8080156106a257600181146106d557610702565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0085168852831515840288019550610702565b60008b81526020902060005b858110156106fa5781548a8201529084019088016106e1565b505083880195505b50939b9a5050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361077357610773610713565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826107b8576107b861077a565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000828210156107fe576107fe610713565b500390565b6000826108125761081261077a565b500690565b6000821982111561082a5761082a610713565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220531fed2e86ad8ab05b14b7ed3c8171cc5578b17cf6e0c23aa7abfbd2adf3b79464736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:peer-dependencies": "IERC1155",
    "custom:provides-interfaces": "IMetadata IERC1155Metadata",
    "custom:type": "eip-2535-facet",
    "details": "See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions",
    "kind": "dev",
    "methods": {
      "name()": {
        "details": "IMetadata"
      },
      "symbol()": {
        "details": "IMetadata"
      }
    },
    "title": "ERC1155 - Metadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "uri(uint256)": {
        "notice": "inheritdoc IERC1155Metadata"
      }
    },
    "notice": "Provides metadata for ERC1155 tokens according to standard.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}