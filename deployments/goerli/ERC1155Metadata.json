{
  "address": "0x109BAbB9B9E35354b7343E5dCac19E0A0aae9e49",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURILocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackURILocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastLockedTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "uriBatch",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSuffixLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x39f245714d9ae2dec767f322e2c4d9bf2eb6f348adbf5321f970d859a1fb3bef",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x109BAbB9B9E35354b7343E5dCac19E0A0aae9e49",
    "transactionIndex": 33,
    "gasUsed": "644757",
    "logsBloom": "0x
    "blockHash": "0xd7cb67e0d14186e5961571836ebdc9a700b2a5a91e79956c6797511ffeaa7708",
    "transactionHash": "0x39f245714d9ae2dec767f322e2c4d9bf2eb6f348adbf5321f970d859a1fb3bef",
    "logs": [],
    "blockNumber": 7721492,
    "cumulativeGasUsed": "17745416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "5b3030410ef10b748136e331e96ddd7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLockedTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"uriBatch\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffixLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:peer-dependencies\":\"0xd9b67a26\",\"custom:provides-interfaces\":\"0x0e89341c 0x57bbc86d\",\"custom:type\":\"eip-2535-facet\",\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC1155 - Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uri(uint256)\":{\"notice\":\"inheritdoc IERC1155Metadata\"}},\"notice\":\"Provides metadata for ERC1155 tokens according to standard. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":\"ERC1155Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IERC1155Metadata.sol\\\";\\nimport \\\"./IERC1155MetadataExtra.sol\\\";\\nimport \\\"./ERC1155MetadataInternal.sol\\\";\\nimport \\\"./ERC1155MetadataStorage.sol\\\";\\n\\n/**\\n * @title ERC1155 - Metadata\\n * @notice Provides metadata for ERC1155 tokens according to standard. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\\n * @dev See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:peer-dependencies 0xd9b67a26\\n * @custom:provides-interfaces 0x0e89341c 0x57bbc86d\\n */\\ncontract ERC1155Metadata is IERC1155Metadata, IERC1155MetadataExtra, ERC1155MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId) public view virtual returns (string memory) {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage.layout();\\n\\n        string memory _tokenIdURI = l.tokenURIs[tokenId];\\n        string memory _baseURI = l.baseURI;\\n\\n        if (bytes(_tokenIdURI).length > 0) {\\n            return _tokenIdURI;\\n        } else if (bytes(l.fallbackURI).length > 0) {\\n            return l.fallbackURI;\\n        } else if (bytes(_baseURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, Strings.toString(tokenId), l.uriSuffix));\\n        } else {\\n            return \\\"\\\";\\n        }\\n    }\\n\\n    function uriBatch(uint256[] calldata tokenIds) external view virtual returns (string[] memory) {\\n        string[] memory uris = new string[](tokenIds.length);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uris[i] = uri(tokenIds[i]);\\n        }\\n\\n        return uris;\\n    }\\n\\n    function baseURI() external view virtual returns (string memory) {\\n        return ERC1155MetadataStorage.layout().baseURI;\\n    }\\n\\n    function fallbackURI() external view virtual returns (string memory) {\\n        return ERC1155MetadataStorage.layout().fallbackURI;\\n    }\\n\\n    function uriSuffix() external view virtual returns (string memory) {\\n        return ERC1155MetadataStorage.layout().uriSuffix;\\n    }\\n\\n    function baseURILocked() external view virtual returns (bool) {\\n        return ERC1155MetadataStorage.layout().baseURILocked;\\n    }\\n\\n    function fallbackURILocked() external view virtual returns (bool) {\\n        return ERC1155MetadataStorage.layout().fallbackURILocked;\\n    }\\n\\n    function uriSuffixLocked() external view virtual returns (bool) {\\n        return ERC1155MetadataStorage.layout().uriSuffixLocked;\\n    }\\n\\n    function lastLockedTokenId() external view virtual returns (uint256) {\\n        return ERC1155MetadataStorage.layout().lastLockedTokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x0eda61435f3522a5305deb75c99946a7805d5b5cbb5588b61776deafd09aa9f0\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC1155MetadataEvents.sol\\\";\\nimport \\\"./ERC1155MetadataStorage.sol\\\";\\n\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataEvents {\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        require(!ERC1155MetadataStorage.layout().baseURILocked, \\\"ERC1155Metadata: baseURI locked\\\");\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setFallbackURI(string memory baseURI) internal virtual {\\n        require(!ERC1155MetadataStorage.layout().fallbackURILocked, \\\"ERC1155Metadata: fallbackURI locked\\\");\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        require(tokenId > ERC1155MetadataStorage.layout().lastLockedTokenId, \\\"ERC1155Metadata: tokenURI locked\\\");\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n\\n    function _setURISuffix(string memory uriSuffix) internal virtual {\\n        require(!ERC1155MetadataStorage.layout().uriSuffixLocked, \\\"ERC1155Metadata: uriSuffix locked\\\");\\n        ERC1155MetadataStorage.layout().uriSuffix = uriSuffix;\\n    }\\n\\n    function _lockBaseURI() internal virtual {\\n        ERC1155MetadataStorage.layout().baseURILocked = true;\\n    }\\n\\n    function _lockFallbackURI() internal virtual {\\n        ERC1155MetadataStorage.layout().fallbackURILocked = true;\\n    }\\n\\n    function _lockURIUntil(uint256 tokenId) internal virtual {\\n        ERC1155MetadataStorage.layout().lastLockedTokenId = tokenId;\\n    }\\n\\n    function _lockURISuffix() internal virtual {\\n        ERC1155MetadataStorage.layout().uriSuffixLocked = true;\\n    }\\n}\\n\",\"keccak256\":\"0xb387c91d33513cb676e0ff94e99a729531ed0c39a1f48aa7e8a6bb4c658487f1\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Metadata\\\");\\n\\n    struct Layout {\\n        string baseURI;\\n        bool baseURILocked;\\n        string fallbackURI;\\n        bool fallbackURILocked;\\n        string uriSuffix;\\n        bool uriSuffixLocked;\\n        uint256 lastLockedTokenId;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f02b5db8b301940348dd04e0625c6e27825aec9be0addd0385f1e9ec3b37260\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155Metadata {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x06e9faa914aad892109cae7c0ae1c7f5f185510536cb75e6afdf49051e100e38\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155MetadataEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155MetadataEvents {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0x6c2413e5d685f420399db32888a545321422521fb5e4ffb72de3c5e53cbd503c\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/metadata/IERC1155MetadataExtra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155MetadataExtra {\\n    function baseURI() external view returns (string memory);\\n\\n    function fallbackURI() external view returns (string memory);\\n\\n    function uriSuffix() external view returns (string memory);\\n\\n    function baseURILocked() external view returns (bool);\\n\\n    function fallbackURILocked() external view returns (bool);\\n\\n    function uriSuffixLocked() external view returns (bool);\\n\\n    function lastLockedTokenId() external view returns (uint256);\\n\\n    function uriBatch(uint256[] calldata tokenIds) external view returns (string[] memory);\\n}\\n\",\"keccak256\":\"0xd269e850865ea8344741224a73e1f105895ec6b19f8f7561b40958255aaf9664\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ab5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80635d148e5c116100765780636c0360eb1161005b5780636c0360eb1461016d57806396d7e22914610175578063c4ef3e051461019557600080fd5b80635d148e5c146101135780636b95c5041461013d57600080fd5b8063067f0848146100a85780630c7d9752146100e35780630e89341c146100f85780635503a0e81461010b575b600080fd5b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceee5460ff165b60405190151581526020015b60405180910390f35b6100eb6101bf565b6040516100da91906107ac565b6100eb6101063660046107c6565b610273565b6100eb6104fd565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceec5460ff166100ce565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bcef1546040519081526020016100da565b6100eb61052e565b6101886101833660046107df565b61055c565b6040516100da9190610854565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bcef05460ff166100ce565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb60020180546101f0906108b6565b80601f016020809104026020016040519081016040528092919081815260200182805461021c906108b6565b80156102695780601f1061023e57610100808354040283529160200191610269565b820191906000526020600020905b81548152906001019060200180831161024c57829003601f168201915b5050505050905090565b60008181527f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bcef26020526040812080546060927f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb9290916102d2906108b6565b80601f01602080910402602001604051908101604052809291908181526020018280546102fe906108b6565b801561034b5780601f106103205761010080835404028352916020019161034b565b820191906000526020600020905b81548152906001019060200180831161032e57829003601f168201915b505050505090506000826000018054610363906108b6565b80601f016020809104026020016040519081016040528092919081815260200182805461038f906108b6565b80156103dc5780601f106103b1576101008083540402835291602001916103dc565b820191906000526020600020905b8154815290600101906020018083116103bf57829003601f168201915b505050505090506000825111156103f557509392505050565b6000836002018054610406906108b6565b905011156104a55782600201805461041d906108b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610449906108b6565b80156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b50505050509350505050919050565b8051156104e557806104b686610613565b846004016040516020016104cc939291906108f0565b6040516020818303038152906040529350505050919050565b50506040805160208101909152600081529392505050565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb60040180546101f0906108b6565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb80546101f0906108b6565b606060008267ffffffffffffffff811115610579576105796109b7565b6040519080825280602002602001820160405280156105ac57816020015b60608152602001906001900390816105975790505b50905060005b8381101561060b576105db8585838181106105cf576105cf6109cd565b90506020020135610273565b8282815181106105ed576105ed6109cd565b60200260200101819052508080610603906109f9565b9150506105b2565b509392505050565b60608160000361065657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610680578061066a816109f9565b91506106799050600a83610a28565b915061065a565b60008167ffffffffffffffff81111561069b5761069b6109b7565b6040519080825280601f01601f1916602001820160405280156106c5576020820181803683370190505b5090505b8415610748576106da600183610a3c565b91506106e7600a86610a53565b6106f2906030610a67565b60f81b818381518110610707576107076109cd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610741600a86610a28565b94506106c9565b949350505050565b60005b8381101561076b578181015183820152602001610753565b8381111561077a576000848401525b50505050565b60008151808452610798816020860160208601610750565b601f01601f19169290920160200192915050565b6020815260006107bf6020830184610780565b9392505050565b6000602082840312156107d857600080fd5b5035919050565b600080602083850312156107f257600080fd5b823567ffffffffffffffff8082111561080a57600080fd5b818501915085601f83011261081e57600080fd5b81358181111561082d57600080fd5b8660208260051b850101111561084257600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156108a957603f19888603018452610897858351610780565b9450928501929085019060010161087b565b5092979650505050505050565b600181811c908216806108ca57607f821691505b6020821081036108ea57634e487b7160e01b600052602260045260246000fd5b50919050565b6000845160206109038285838a01610750565b8551918401916109168184848a01610750565b8554920191600090600181811c908083168061093357607f831692505b858310810361095057634e487b7160e01b85526022600452602485fd5b8080156109645760018114610979576109a6565b60ff19851688528315158402880195506109a6565b60008b81526020902060005b8581101561099e5781548a820152908401908801610985565b505083880195505b50939b9a5050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610a0b57610a0b6109e3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610a3757610a37610a12565b500490565b600082821015610a4e57610a4e6109e3565b500390565b600082610a6257610a62610a12565b500690565b60008219821115610a7a57610a7a6109e3565b50019056fea26469706673582212203f7fa90d3772daca2ab6cfb8c60197b5d05cfafc8c7defe3326d63d7e5ca69bc64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80635d148e5c116100765780636c0360eb1161005b5780636c0360eb1461016d57806396d7e22914610175578063c4ef3e051461019557600080fd5b80635d148e5c146101135780636b95c5041461013d57600080fd5b8063067f0848146100a85780630c7d9752146100e35780630e89341c146100f85780635503a0e81461010b575b600080fd5b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceee5460ff165b60405190151581526020015b60405180910390f35b6100eb6101bf565b6040516100da91906107ac565b6100eb6101063660046107c6565b610273565b6100eb6104fd565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceec5460ff166100ce565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bcef1546040519081526020016100da565b6100eb61052e565b6101886101833660046107df565b61055c565b6040516100da9190610854565b7f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bcef05460ff166100ce565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb60020180546101f0906108b6565b80601f016020809104026020016040519081016040528092919081815260200182805461021c906108b6565b80156102695780601f1061023e57610100808354040283529160200191610269565b820191906000526020600020905b81548152906001019060200180831161024c57829003601f168201915b5050505050905090565b60008181527f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bcef26020526040812080546060927f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb9290916102d2906108b6565b80601f01602080910402602001604051908101604052809291908181526020018280546102fe906108b6565b801561034b5780601f106103205761010080835404028352916020019161034b565b820191906000526020600020905b81548152906001019060200180831161032e57829003601f168201915b505050505090506000826000018054610363906108b6565b80601f016020809104026020016040519081016040528092919081815260200182805461038f906108b6565b80156103dc5780601f106103b1576101008083540402835291602001916103dc565b820191906000526020600020905b8154815290600101906020018083116103bf57829003601f168201915b505050505090506000825111156103f557509392505050565b6000836002018054610406906108b6565b905011156104a55782600201805461041d906108b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610449906108b6565b80156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b50505050509350505050919050565b8051156104e557806104b686610613565b846004016040516020016104cc939291906108f0565b6040516020818303038152906040529350505050919050565b50506040805160208101909152600081529392505050565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb60040180546101f0906108b6565b60607f7df186493127afbe76aac5b5b4ed702314d47975d114f419dbfeec69750bceeb80546101f0906108b6565b606060008267ffffffffffffffff811115610579576105796109b7565b6040519080825280602002602001820160405280156105ac57816020015b60608152602001906001900390816105975790505b50905060005b8381101561060b576105db8585838181106105cf576105cf6109cd565b90506020020135610273565b8282815181106105ed576105ed6109cd565b60200260200101819052508080610603906109f9565b9150506105b2565b509392505050565b60608160000361065657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610680578061066a816109f9565b91506106799050600a83610a28565b915061065a565b60008167ffffffffffffffff81111561069b5761069b6109b7565b6040519080825280601f01601f1916602001820160405280156106c5576020820181803683370190505b5090505b8415610748576106da600183610a3c565b91506106e7600a86610a53565b6106f2906030610a67565b60f81b818381518110610707576107076109cd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610741600a86610a28565b94506106c9565b949350505050565b60005b8381101561076b578181015183820152602001610753565b8381111561077a576000848401525b50505050565b60008151808452610798816020860160208601610750565b601f01601f19169290920160200192915050565b6020815260006107bf6020830184610780565b9392505050565b6000602082840312156107d857600080fd5b5035919050565b600080602083850312156107f257600080fd5b823567ffffffffffffffff8082111561080a57600080fd5b818501915085601f83011261081e57600080fd5b81358181111561082d57600080fd5b8660208260051b850101111561084257600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156108a957603f19888603018452610897858351610780565b9450928501929085019060010161087b565b5092979650505050505050565b600181811c908216806108ca57607f821691505b6020821081036108ea57634e487b7160e01b600052602260045260246000fd5b50919050565b6000845160206109038285838a01610750565b8551918401916109168184848a01610750565b8554920191600090600181811c908083168061093357607f831692505b858310810361095057634e487b7160e01b85526022600452602485fd5b8080156109645760018114610979576109a6565b60ff19851688528315158402880195506109a6565b60008b81526020902060005b8581101561099e5781548a820152908401908801610985565b505083880195505b50939b9a5050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610a0b57610a0b6109e3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610a3757610a37610a12565b500490565b600082821015610a4e57610a4e6109e3565b500390565b600082610a6257610a62610a12565b500690565b60008219821115610a7a57610a7a6109e3565b50019056fea26469706673582212203f7fa90d3772daca2ab6cfb8c60197b5d05cfafc8c7defe3326d63d7e5ca69bc64736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:peer-dependencies": "0xd9b67a26",
    "custom:provides-interfaces": "0x0e89341c 0x57bbc86d",
    "custom:type": "eip-2535-facet",
    "details": "See https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions",
    "kind": "dev",
    "methods": {},
    "title": "ERC1155 - Metadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "uri(uint256)": {
        "notice": "inheritdoc IERC1155Metadata"
      }
    },
    "notice": "Provides metadata for ERC1155 tokens according to standard. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}