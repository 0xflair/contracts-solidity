{
  "address": "0x734d6154c5340ad9629F3Ac330D65Dd0cd2Fab71",
  "abi": [
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURILocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackURILocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastLockedTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSuffixLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc76ce21e023fffe87ca5c9dbb1091800384be3bf37c5259c9b0e93772ca2f384",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x734d6154c5340ad9629F3Ac330D65Dd0cd2Fab71",
    "transactionIndex": 54,
    "gasUsed": "270477",
    "logsBloom": "0x
    "blockHash": "0x3a0c6cfe9712d7c80da1d27cb978f4c0b38c5f4e1951b1557c9fab4c09bc4dbc",
    "transactionHash": "0xc76ce21e023fffe87ca5c9dbb1091800384be3bf37c5259c9b0e93772ca2f384",
    "logs": [],
    "blockNumber": 7732897,
    "cumulativeGasUsed": "13014416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3658236a21462c4569b756c91b400284",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLockedTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffixLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:provides-interfaces\":\"IMetadata\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides common functions for various token metadata standards. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/common/metadata/Metadata.sol\":\"Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/token/common/metadata/IMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IMetadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function baseURILocked() external view returns (bool);\\n\\n    function uriSuffix() external view returns (string memory);\\n\\n    function uriSuffixLocked() external view returns (bool);\\n\\n    function fallbackURI() external view returns (string memory);\\n\\n    function fallbackURILocked() external view returns (bool);\\n\\n    function lastLockedTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb494eb3fb0b15100812046090e9ea9b8178733df13b638dcac938d24a519fcf0\",\"license\":\"MIT\"},\"src/token/common/metadata/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IMetadata.sol\\\";\\nimport \\\"./MetadataStorage.sol\\\";\\n\\n/**\\n * @title Metadata\\n * @notice Provides common functions for various token metadata standards. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:provides-interfaces IMetadata\\n */\\ncontract Metadata is IMetadata {\\n    function name() external view virtual override returns (string memory) {\\n        return MetadataStorage.layout().name;\\n    }\\n\\n    function symbol() external view virtual override returns (string memory) {\\n        return MetadataStorage.layout().symbol;\\n    }\\n\\n    function baseURI() external view virtual returns (string memory) {\\n        return MetadataStorage.layout().baseURI;\\n    }\\n\\n    function fallbackURI() external view virtual returns (string memory) {\\n        return MetadataStorage.layout().fallbackURI;\\n    }\\n\\n    function uriSuffix() external view virtual returns (string memory) {\\n        return MetadataStorage.layout().uriSuffix;\\n    }\\n\\n    function baseURILocked() external view virtual returns (bool) {\\n        return MetadataStorage.layout().baseURILocked;\\n    }\\n\\n    function fallbackURILocked() external view virtual returns (bool) {\\n        return MetadataStorage.layout().fallbackURILocked;\\n    }\\n\\n    function uriSuffixLocked() external view virtual returns (bool) {\\n        return MetadataStorage.layout().uriSuffixLocked;\\n    }\\n\\n    function lastLockedTokenId() external view virtual returns (uint256) {\\n        return MetadataStorage.layout().lastLockedTokenId;\\n    }\\n}\\n\",\"keccak256\":\"0xdc40b701816c77436aa5c186f87688de415866b6e9d070c6ae6c646b15890461\",\"license\":\"MIT\"},\"src/token/common/metadata/MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Metadata\\\");\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        bool nameAndSymbolLocked;\\n        string baseURI;\\n        bool baseURILocked;\\n        string fallbackURI;\\n        bool fallbackURILocked;\\n        string uriSuffix;\\n        bool uriSuffixLocked;\\n        uint256 lastLockedTokenId;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6ab202dd5e05108b8e7be258714c90dafd678cf3c8312817f396b3059fddf056\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103ef806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80635d148e5c116100765780636c0360eb1161005b5780636c0360eb1461016257806395d89b411461016a578063c4ef3e051461017257600080fd5b80635d148e5c146101085780636b95c5041461013257600080fd5b8063067f0848146100a857806306fdde03146100e35780630c7d9752146100f85780635503a0e814610100575b600080fd5b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2025460ff165b60405190151581526020015b60405180910390f35b6100eb61019c565b6040516100da9190610311565b6100eb61024d565b6100eb61027e565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2005460ff166100ce565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a205546040519081526020016100da565b6100eb6102af565b6100eb6102e0565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2045460ff166100ce565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc80546101ca90610366565b80601f01602080910402602001604051908101604052809291908181526020018280546101f690610366565b80156102435780601f1061021857610100808354040283529160200191610243565b820191906000526020600020905b81548152906001019060200180831161022657829003601f168201915b5050505050905090565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc60050180546101ca90610366565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc60070180546101ca90610366565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc60030180546101ca90610366565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc60010180546101ca90610366565b600060208083528351808285015260005b8181101561033e57858101830151858201604001528201610322565b81811115610350576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061037a57607f821691505b6020821081036103b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea26469706673582212202810904bdcdd215a054f07d260394d3c9585065ce1215809e77f876e05fcc4b464736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80635d148e5c116100765780636c0360eb1161005b5780636c0360eb1461016257806395d89b411461016a578063c4ef3e051461017257600080fd5b80635d148e5c146101085780636b95c5041461013257600080fd5b8063067f0848146100a857806306fdde03146100e35780630c7d9752146100f85780635503a0e814610100575b600080fd5b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2025460ff165b60405190151581526020015b60405180910390f35b6100eb61019c565b6040516100da9190610311565b6100eb61024d565b6100eb61027e565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2005460ff166100ce565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a205546040519081526020016100da565b6100eb6102af565b6100eb6102e0565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2045460ff166100ce565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc80546101ca90610366565b80601f01602080910402602001604051908101604052809291908181526020018280546101f690610366565b80156102435780601f1061021857610100808354040283529160200191610243565b820191906000526020600020905b81548152906001019060200180831161022657829003601f168201915b5050505050905090565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc60050180546101ca90610366565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc60070180546101ca90610366565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc60030180546101ca90610366565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc60010180546101ca90610366565b600060208083528351808285015260005b8181101561033e57858101830151858201604001528201610322565b81811115610350576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061037a57607f821691505b6020821081036103b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea26469706673582212202810904bdcdd215a054f07d260394d3c9585065ce1215809e77f876e05fcc4b464736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:provides-interfaces": "IMetadata",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "Metadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Provides common functions for various token metadata standards. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}