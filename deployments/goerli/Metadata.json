{
  "address": "0xc89E1364c377731893CE0250dfF6d2E94A3516E3",
  "abi": [
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURILocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackURILocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastLockedTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameAndSymbolLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSuffixLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x171c5cc12d486c62505a4fc2c05a7d808b609d3c4be618939d6fc26f5832d986",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xc89E1364c377731893CE0250dfF6d2E94A3516E3",
    "transactionIndex": 97,
    "gasUsed": "285441",
    "logsBloom": "0x
    "blockHash": "0x20fc6f2adafcbddfab9c186363c91a86cb72de29bd0a2e0d55bd11941afae93f",
    "transactionHash": "0x171c5cc12d486c62505a4fc2c05a7d808b609d3c4be618939d6fc26f5832d986",
    "logs": [],
    "blockNumber": 7798963,
    "cumulativeGasUsed": "15591636",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "0641915fa934d5b3ad6ce6da16c954c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLockedTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameAndSymbolLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffixLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:provides-interfaces\":\"IMetadata\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides common functions for various token metadata standards. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/common/metadata/Metadata.sol\":\"Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/token/common/metadata/IMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IMetadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function baseURILocked() external view returns (bool);\\n\\n    function uriSuffix() external view returns (string memory);\\n\\n    function uriSuffixLocked() external view returns (bool);\\n\\n    function fallbackURI() external view returns (string memory);\\n\\n    function fallbackURILocked() external view returns (bool);\\n\\n    function lastLockedTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x83d97a3cad9025ad66bd4a709737906ba129f1056f5eafc36dffc18933c04462\",\"license\":\"MIT\"},\"src/token/common/metadata/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IMetadata.sol\\\";\\nimport \\\"./MetadataStorage.sol\\\";\\n\\n/**\\n * @title Metadata\\n * @notice Provides common functions for various token metadata standards. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:provides-interfaces IMetadata\\n */\\ncontract Metadata is IMetadata {\\n    function name() external view virtual override returns (string memory) {\\n        return MetadataStorage.layout().name;\\n    }\\n\\n    function symbol() external view virtual override returns (string memory) {\\n        return MetadataStorage.layout().symbol;\\n    }\\n\\n    function baseURI() external view virtual returns (string memory) {\\n        return MetadataStorage.layout().baseURI;\\n    }\\n\\n    function fallbackURI() external view virtual returns (string memory) {\\n        return MetadataStorage.layout().fallbackURI;\\n    }\\n\\n    function uriSuffix() external view virtual returns (string memory) {\\n        return MetadataStorage.layout().uriSuffix;\\n    }\\n\\n    function nameAndSymbolLocked() external view virtual returns (bool) {\\n        return MetadataStorage.layout().nameAndSymbolLocked;\\n    }\\n\\n    function baseURILocked() external view virtual returns (bool) {\\n        return MetadataStorage.layout().baseURILocked;\\n    }\\n\\n    function fallbackURILocked() external view virtual returns (bool) {\\n        return MetadataStorage.layout().fallbackURILocked;\\n    }\\n\\n    function uriSuffixLocked() external view virtual returns (bool) {\\n        return MetadataStorage.layout().uriSuffixLocked;\\n    }\\n\\n    function lastLockedTokenId() external view virtual returns (uint256) {\\n        return MetadataStorage.layout().lastLockedTokenId;\\n    }\\n}\\n\",\"keccak256\":\"0xe05997f644328e023d3cba5500922c002c674650a6bbc71ecb50e71233565b1b\",\"license\":\"MIT\"},\"src/token/common/metadata/MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Metadata\\\");\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        bool nameAndSymbolLocked;\\n        string baseURI;\\n        bool baseURILocked;\\n        string fallbackURI;\\n        bool fallbackURILocked;\\n        string uriSuffix;\\n        bool uriSuffixLocked;\\n        uint256 lastLockedTokenId;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc5db4300cea5c783b3aec9ff69d4b7a0c624457a3f0571a5379248beb29f0637\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610434806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80635d148e5c116100765780636c0360eb1161005b5780636c0360eb146101a757806395d89b41146101af578063c4ef3e05146101b757600080fd5b80635d148e5c1461014d5780636b95c5041461017757600080fd5b80630c7d9752116100a75780630c7d975214610113578063180434a31461011b5780635503a0e81461014557600080fd5b8063067f0848146100c357806306fdde03146100fe575b600080fd5b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2025460ff165b60405190151581526020015b60405180910390f35b6101066101e1565b6040516100f59190610356565b610106610292565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fe5460ff166100e9565b6101066102c3565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2005460ff166100e9565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a205546040519081526020016100f5565b6101066102f4565b610106610325565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2045460ff166100e9565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc805461020f906103ab565b80601f016020809104026020016040519081016040528092919081815260200182805461023b906103ab565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600501805461020f906103ab565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600701805461020f906103ab565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600301805461020f906103ab565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600101805461020f906103ab565b600060208083528351808285015260005b8181101561038357858101830151858201604001528201610367565b81811115610395576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806103bf57607f821691505b6020821081036103f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea264697066735822122078bc14180e6e42c03fa5de9c036aa77081f4ea42e94a1245b04e9b391dfe266564736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80635d148e5c116100765780636c0360eb1161005b5780636c0360eb146101a757806395d89b41146101af578063c4ef3e05146101b757600080fd5b80635d148e5c1461014d5780636b95c5041461017757600080fd5b80630c7d9752116100a75780630c7d975214610113578063180434a31461011b5780635503a0e81461014557600080fd5b8063067f0848146100c357806306fdde03146100fe575b600080fd5b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2025460ff165b60405190151581526020015b60405180910390f35b6101066101e1565b6040516100f59190610356565b610106610292565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fe5460ff166100e9565b6101066102c3565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2005460ff166100e9565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a205546040519081526020016100f5565b6101066102f4565b610106610325565b7f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a2045460ff166100e9565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc805461020f906103ab565b80601f016020809104026020016040519081016040528092919081815260200182805461023b906103ab565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600501805461020f906103ab565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600701805461020f906103ab565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600301805461020f906103ab565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600101805461020f906103ab565b600060208083528351808285015260005b8181101561038357858101830151858201604001528201610367565b81811115610395576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806103bf57607f821691505b6020821081036103f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea264697066735822122078bc14180e6e42c03fa5de9c036aa77081f4ea42e94a1245b04e9b391dfe266564736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:provides-interfaces": "IMetadata",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "Metadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Provides common functions for various token metadata standards. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}