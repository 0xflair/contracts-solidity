{
  "address": "0xF6E26570371b01c29B307c675B17DA7Da74B5DE5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "lockByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "lockByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "unlockByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "unlockByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x673409be4d673df59cd6300a75deb1a445764b0de8efee3db826bfd34ceef3dc",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xF6E26570371b01c29B307c675B17DA7Da74B5DE5",
    "transactionIndex": 82,
    "gasUsed": "348508",
    "logsBloom": "0x
    "blockHash": "0x303e3faf7dd61ab171f2a7b925ada3d2aa47abdb9b5c82d3df7d52e3ff7e17f9",
    "transactionHash": "0x673409be4d673df59cd6300a75deb1a445764b0de8efee3db826bfd34ceef3dc",
    "logs": [],
    "blockNumber": 7733018,
    "cumulativeGasUsed": "17096900",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a7e4e7518f7d9e0ad0d003b1c1146623",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"lockByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"lockByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"unlockByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unlockByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:provides-interfaces\":\"IERC721LockableOwnable\",\"custom:required-dependencies\":\"IERC721LockableExtension\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC721 - Lock as Owner\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Allow locking tokens as the contract owner.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC721/facets/locking/ERC721LockableOwnable.sol\":\"ERC721LockableOwnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0xaa69cf8eab7188097d9aa84c92692ec30614ee2f6bf8d2255482162611255db4\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0xa0149e5c5964ce521c9589ff1a559844eb24fd8481634dda76a3f24d6991039b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x26eea1f665c393b0046c3dcb9421f3caa1322ca996689fa0aa941eff5a1dcda2\",\"license\":\"MIT\"},\"src/common/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * The caller must be the current contract itself.\\n */\\nerror ErrSenderIsNotSelf();\\n\",\"keccak256\":\"0x64efb13fd5aa2acfa65e986bc45fe64c1871eafe304064f3db9301ff544759cc\",\"license\":\"MIT\"},\"src/token/ERC721/extensions/lockable/IERC5192.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC5192 {\\n    /// @notice Returns the locking status of an Soulbound Token\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    /// about them do throw.\\n    /// @param tokenId The identifier for an SBT.\\n    function locked(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8944478d6145b0cad05ed8e9267beef19d840cf6306d75dc432ac4a66ebb7166\",\"license\":\"MIT\"},\"src/token/ERC721/extensions/lockable/IERC721LockableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC5192.sol\\\";\\nimport \\\"./IERC721LockableInternal.sol\\\";\\n\\n/**\\n * @dev Based on EIP-5192, extension of {ERC721} that allows other facets from the diamond to lock the tokens.\\n */\\ninterface IERC721LockableExtension is IERC5192, IERC721LockableInternal {\\n    /**\\n     * @dev Locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function lockByFacet(uint256 id) external;\\n\\n    function lockByFacet(uint256[] memory ids) external;\\n\\n    /**\\n     * @dev Un-locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function unlockByFacet(uint256 id) external;\\n\\n    function unlockByFacet(uint256[] memory ids) external;\\n}\\n\",\"keccak256\":\"0x070c4cb3a4e0f0412dfae0fae5a49174eff23f328f8bf5d1083731ecdfce7cb0\",\"license\":\"MIT\"},\"src/token/ERC721/extensions/lockable/IERC721LockableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC721LockableInternal {\\n    error ErrTokenLocked(uint256 tokenId);\\n\\n    /// @notice Emitted when the locking status is changed to locked.\\n    /// @dev If a token is minted and the status is locked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Locked(uint256 tokenId);\\n\\n    /// @notice Emitted when the locking status is changed to unlocked.\\n    /// @dev If a token is minted and the status is unlocked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Unlocked(uint256 tokenId);\\n}\\n\",\"keccak256\":\"0xf89e818c5996c54c2d4eba82d33cf151c21f9b3aaccba2116b3532c840c86f13\",\"license\":\"MIT\"},\"src/token/ERC721/facets/locking/ERC721LockableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../../../access/ownable/OwnableInternal.sol\\\";\\nimport \\\"../../extensions/lockable/IERC721LockableExtension.sol\\\";\\nimport \\\"./IERC721LockableOwnable.sol\\\";\\n\\n/**\\n * @title ERC721 - Lock as Owner\\n * @notice Allow locking tokens as the contract owner.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:required-dependencies IERC721LockableExtension\\n * @custom:provides-interfaces IERC721LockableOwnable\\n */\\ncontract ERC721LockableOwnable is IERC721LockableOwnable, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC721LockableOwnable\\n     */\\n    function lockByOwner(uint256 id) public virtual onlyOwner {\\n        IERC721LockableExtension(address(this)).lockByFacet(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721LockableOwnable\\n     */\\n    function lockByOwner(uint256[] memory ids) public virtual onlyOwner {\\n        IERC721LockableExtension(address(this)).lockByFacet(ids);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721LockableOwnable\\n     */\\n    function unlockByOwner(uint256 id) public virtual onlyOwner {\\n        IERC721LockableExtension(address(this)).unlockByFacet(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721LockableOwnable\\n     */\\n    function unlockByOwner(uint256[] memory ids) public virtual onlyOwner {\\n        IERC721LockableExtension(address(this)).unlockByFacet(ids);\\n    }\\n}\\n\",\"keccak256\":\"0xd456bb64708108f311bc8038293e2da46a4ca5a7297f1fbb1f2013de6dfe980c\",\"license\":\"MIT\"},\"src/token/ERC721/facets/locking/IERC721LockableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC721} that allows diamond owner to lock tokens.\\n */\\ninterface IERC721LockableOwnable {\\n    function lockByOwner(uint256 id) external;\\n\\n    function lockByOwner(uint256[] memory ids) external;\\n\\n    function unlockByOwner(uint256 id) external;\\n\\n    function unlockByOwner(uint256[] memory ids) external;\\n}\\n\",\"keccak256\":\"0xe0648bf7160e29804d2c5bf7702ee92da266660e2fc3a1caa5c9bf30f91291e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061055f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637181011614610051578063a3dddafa14610066578063b95440dc14610079578063e923a2a21461008c575b600080fd5b61006461005f3660046103df565b61009f565b005b610064610074366004610427565b610198565b6100646100873660046103df565b61025a565b61006461009a366004610427565b61031d565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff16331461012a5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b6040517f856e31c100000000000000000000000000000000000000000000000000000000815260048101829052309063856e31c1906024015b600060405180830381600087803b15801561017d57600080fd5b505af1158015610191573d6000803e3d6000fd5b5050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff16331461021e5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6040517f4a371f640000000000000000000000000000000000000000000000000000000081523090634a371f64906101639084906004016104e5565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146102e05760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6040517fc7d1bc8300000000000000000000000000000000000000000000000000000000815260048101829052309063c7d1bc8390602401610163565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146103a35760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6040517ff9497f34000000000000000000000000000000000000000000000000000000008152309063f9497f34906101639084906004016104e5565b6000602082840312156103f157600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561043a57600080fd5b823567ffffffffffffffff8082111561045257600080fd5b818501915085601f83011261046657600080fd5b813581811115610478576104786103f8565b8060051b604051601f19603f8301168101818110858211171561049d5761049d6103f8565b6040529182528482019250838101850191888311156104bb57600080fd5b938501935b828510156104d9578435845293850193928501926104c0565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561051d57835183529284019291840191600101610501565b5090969550505050505056fea264697066735822122091125e8a157924f5a6ce48cca19ffbe93e8a06d5d8acf92d338304ff802ae33264736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80637181011614610051578063a3dddafa14610066578063b95440dc14610079578063e923a2a21461008c575b600080fd5b61006461005f3660046103df565b61009f565b005b610064610074366004610427565b610198565b6100646100873660046103df565b61025a565b61006461009a366004610427565b61031d565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff16331461012a5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b6040517f856e31c100000000000000000000000000000000000000000000000000000000815260048101829052309063856e31c1906024015b600060405180830381600087803b15801561017d57600080fd5b505af1158015610191573d6000803e3d6000fd5b5050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff16331461021e5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6040517f4a371f640000000000000000000000000000000000000000000000000000000081523090634a371f64906101639084906004016104e5565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146102e05760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6040517fc7d1bc8300000000000000000000000000000000000000000000000000000000815260048101829052309063c7d1bc8390602401610163565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45473ffffffffffffffffffffffffffffffffffffffff1633146103a35760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610121565b6040517ff9497f34000000000000000000000000000000000000000000000000000000008152309063f9497f34906101639084906004016104e5565b6000602082840312156103f157600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561043a57600080fd5b823567ffffffffffffffff8082111561045257600080fd5b818501915085601f83011261046657600080fd5b813581811115610478576104786103f8565b8060051b604051601f19603f8301168101818110858211171561049d5761049d6103f8565b6040529182528482019250838101850191888311156104bb57600080fd5b938501935b828510156104d9578435845293850193928501926104c0565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561051d57835183529284019291840191600101610501565b5090969550505050505056fea264697066735822122091125e8a157924f5a6ce48cca19ffbe93e8a06d5d8acf92d338304ff802ae33264736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:provides-interfaces": "IERC721LockableOwnable",
    "custom:required-dependencies": "IERC721LockableExtension",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "ERC721 - Lock as Owner",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Allow locking tokens as the contract owner.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}