{
  "address": "0x5c9b67c22bF21F3247854e563dfe46A5E941CDB7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "lockByRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "lockByRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f7eabc6e8ea397df4fe6ba2f91f60047eccbd3b7758873a63f6d58ffc0ae937",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x5c9b67c22bF21F3247854e563dfe46A5E941CDB7",
    "transactionIndex": 96,
    "gasUsed": "469916",
    "logsBloom": "0x
    "blockHash": "0x6866a8fd666d24de8e3290c56c940686a758f2a0aa4933ddc19df5507ee5622a",
    "transactionHash": "0x9f7eabc6e8ea397df4fe6ba2f91f60047eccbd3b7758873a63f6d58ffc0ae937",
    "logs": [],
    "blockNumber": 7729865,
    "cumulativeGasUsed": "18659319",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4fa7436fc771ef2df8c49bb501b88d58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"lockByRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"lockByRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:provides-interfaces\":\"IERC721LockByRole\",\"custom:required-dependencies\":\"IERC721Lockable\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC721 - Lock as Role\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Allow locking tokens by any sender who has the LOCKER_ROLE.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC721/facets/locking/ERC721LockByRole.sol\":\"ERC721LockByRole\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/access/roles/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./AccessControlStorage.sol\\\";\\nimport \\\"./IAccessControlEvents.sol\\\";\\n\\nabstract contract AccessControlInternal is Context, IAccessControlEvents {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function _hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return AccessControlStorage.layout().roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function _getRoleAdmin(bytes32 role)\\n        internal\\n        view\\n        virtual\\n        returns (bytes32)\\n    {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _renounceRole(bytes32 role, address account) internal virtual {\\n        require(\\n            account == _msgSender(),\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!_hasRole(role, account)) {\\n            AccessControlStorage.layout().roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (_hasRole(role, account)) {\\n            AccessControlStorage.layout().roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8fb3d20477820c0255f0e43a1862b9f6ef44beeb3556229be3b55cb4c7736c54\",\"license\":\"MIT\"},\"src/access/roles/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.AccessControl\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd14c36a7e19c2a8007bce91ca4ddb4cc17f2b29a8ac86831cc5673f52f1315\",\"license\":\"MIT\"},\"src/access/roles/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlEvents {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\",\"keccak256\":\"0x28ce41786b331d9d2bdfb8c55da546e4bd07af0c74d46aecb1c92df9ce5d347f\",\"license\":\"MIT\"},\"src/common/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * The caller must be the current contract itself.\\n */\\nerror ErrSenderIsNotSelf();\\n\",\"keccak256\":\"0x64efb13fd5aa2acfa65e986bc45fe64c1871eafe304064f3db9301ff544759cc\",\"license\":\"MIT\"},\"src/token/ERC721/extensions/lockable/IERC5192.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC5192 {\\n    /// @notice Returns the locking status of an Soulbound Token\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    /// about them do throw.\\n    /// @param tokenId The identifier for an SBT.\\n    function locked(uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8944478d6145b0cad05ed8e9267beef19d840cf6306d75dc432ac4a66ebb7166\",\"license\":\"MIT\"},\"src/token/ERC721/extensions/lockable/IERC721Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC5192.sol\\\";\\nimport \\\"./IERC721LockableInternal.sol\\\";\\n\\n/**\\n * @dev Based on EIP-5192, extension of {ERC721} that allows other facets from the diamond to lock the tokens.\\n */\\ninterface IERC721Lockable is IERC5192, IERC721LockableInternal {\\n    /**\\n     * @dev Locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function lockByFacet(uint256 id) external;\\n\\n    function lockByFacet(uint256[] memory ids) external;\\n\\n    /**\\n     * @dev Un-locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function unlockByFacet(uint256 id) external;\\n\\n    function unlockByFacet(uint256[] memory ids) external;\\n}\\n\",\"keccak256\":\"0x2e7e19b3a6b8b5c72464bfe2186ac508e0573778ca20800b77418ecb48ab9c65\",\"license\":\"MIT\"},\"src/token/ERC721/extensions/lockable/IERC721LockableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC721LockableInternal {\\n    error ErrTokenLocked(uint256 tokenId);\\n\\n    /// @notice Emitted when the locking status is changed to locked.\\n    /// @dev If a token is minted and the status is locked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Locked(uint256 tokenId);\\n\\n    /// @notice Emitted when the locking status is changed to unlocked.\\n    /// @dev If a token is minted and the status is unlocked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Unlocked(uint256 tokenId);\\n}\\n\",\"keccak256\":\"0xf89e818c5996c54c2d4eba82d33cf151c21f9b3aaccba2116b3532c840c86f13\",\"license\":\"MIT\"},\"src/token/ERC721/facets/locking/ERC721LockByRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../../../access/roles/AccessControlInternal.sol\\\";\\nimport \\\"../../extensions/lockable/IERC721Lockable.sol\\\";\\nimport \\\"./IERC721LockByRole.sol\\\";\\n\\n/**\\n * @title ERC721 - Lock as Role\\n * @notice Allow locking tokens by any sender who has the LOCKER_ROLE.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:required-dependencies IERC721Lockable\\n * @custom:provides-interfaces IERC721LockByRole\\n */\\ncontract ERC721LockByRole is IERC721LockByRole, AccessControlInternal {\\n    bytes32 public constant LOCKER_ROLE = keccak256(\\\"LOCKER_ROLE\\\");\\n\\n    /**\\n     * @inheritdoc IERC721LockByRole\\n     */\\n    function lockByRole(uint256 id) external virtual onlyRole(LOCKER_ROLE) {\\n        IERC721Lockable(address(this)).lockByFacet(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721LockByRole\\n     */\\n    function lockByRole(uint256[] memory ids) external virtual onlyRole(LOCKER_ROLE) {\\n        IERC721Lockable(address(this)).lockByFacet(ids);\\n    }\\n}\\n\",\"keccak256\":\"0xdf48ee517e23fc4c8adc581330d339a2f199f536d9818f0b3faac8fcec2f3fae\",\"license\":\"MIT\"},\"src/token/ERC721/facets/locking/IERC721LockByRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC721} that allows grantee of LOCKER_ROLE to lock tokens.\\n */\\ninterface IERC721LockByRole {\\n    function lockByRole(uint256 id) external;\\n\\n    function lockByRole(uint256[] calldata ids) external;\\n}\\n\",\"keccak256\":\"0x59e621e68f6f0d768febbd5a300bb1cbab50dd1725b8d4bab8778bce65b81ad6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610792806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631893a98f146100515780635b5cc73514610066578063a217fddf14610079578063f362136714610093575b600080fd5b61006461005f3660046104cd565b6100ba565b005b6100646100743660046104fc565b610153565b610081600081565b60405190815260200160405180910390f35b6100817faf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a9027981565b7faf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a902796100e4816101b9565b6040517f856e31c100000000000000000000000000000000000000000000000000000000815260048101839052309063856e31c1906024015b600060405180830381600087803b15801561013757600080fd5b505af115801561014b573d6000803e3d6000fd5b505050505050565b7faf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a9027961017d816101b9565b6040517ff9497f34000000000000000000000000000000000000000000000000000000008152309063f9497f349061011d9085906004016105ba565b6101c381336101c6565b50565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da626020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166102705761022581610274565b61023083602061029d565b60405160200161024192919061062e565b60408051601f198184030181529082905262461bcd60e51b8252610267916004016106af565b60405180910390fd5b5050565b606061029773ffffffffffffffffffffffffffffffffffffffff8316601461029d565b92915050565b606060006102ac8360026106f8565b6102b7906002610717565b67ffffffffffffffff8111156102cf576102cf6104e6565b6040519080825280601f01601f1916602001820160405280156102f9576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106103305761033061072f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106103935761039361072f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006103cf8460026106f8565b6103da906001610717565b90505b6001811115610477577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061041b5761041b61072f565b1a60f81b8282815181106104315761043161072f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361047081610745565b90506103dd565b5083156104c65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610267565b9392505050565b6000602082840312156104df57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561050f57600080fd5b823567ffffffffffffffff8082111561052757600080fd5b818501915085601f83011261053b57600080fd5b81358181111561054d5761054d6104e6565b8060051b604051601f19603f83011681018181108582111715610572576105726104e6565b60405291825284820192508381018501918883111561059057600080fd5b938501935b828510156105ae57843584529385019392850192610595565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156105f2578351835292840192918401916001016105d6565b50909695505050505050565b60005b83811015610619578181015183820152602001610601565b83811115610628576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516106668160178501602088016105fe565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516106a38160288401602088016105fe565b01602801949350505050565b60208152600082518060208401526106ce8160408501602087016105fe565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610712576107126106e2565b500290565b6000821982111561072a5761072a6106e2565b500190565b634e487b7160e01b600052603260045260246000fd5b600081610754576107546106e2565b50600019019056fea26469706673582212203363d52cdf70f631b4bfb99ebf0e25a88f5ccd11d419173ab22ae027d064aabf64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631893a98f146100515780635b5cc73514610066578063a217fddf14610079578063f362136714610093575b600080fd5b61006461005f3660046104cd565b6100ba565b005b6100646100743660046104fc565b610153565b610081600081565b60405190815260200160405180910390f35b6100817faf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a9027981565b7faf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a902796100e4816101b9565b6040517f856e31c100000000000000000000000000000000000000000000000000000000815260048101839052309063856e31c1906024015b600060405180830381600087803b15801561013757600080fd5b505af115801561014b573d6000803e3d6000fd5b505050505050565b7faf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a9027961017d816101b9565b6040517ff9497f34000000000000000000000000000000000000000000000000000000008152309063f9497f349061011d9085906004016105ba565b6101c381336101c6565b50565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da626020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166102705761022581610274565b61023083602061029d565b60405160200161024192919061062e565b60408051601f198184030181529082905262461bcd60e51b8252610267916004016106af565b60405180910390fd5b5050565b606061029773ffffffffffffffffffffffffffffffffffffffff8316601461029d565b92915050565b606060006102ac8360026106f8565b6102b7906002610717565b67ffffffffffffffff8111156102cf576102cf6104e6565b6040519080825280601f01601f1916602001820160405280156102f9576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106103305761033061072f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106103935761039361072f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006103cf8460026106f8565b6103da906001610717565b90505b6001811115610477577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061041b5761041b61072f565b1a60f81b8282815181106104315761043161072f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361047081610745565b90506103dd565b5083156104c65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610267565b9392505050565b6000602082840312156104df57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561050f57600080fd5b823567ffffffffffffffff8082111561052757600080fd5b818501915085601f83011261053b57600080fd5b81358181111561054d5761054d6104e6565b8060051b604051601f19603f83011681018181108582111715610572576105726104e6565b60405291825284820192508381018501918883111561059057600080fd5b938501935b828510156105ae57843584529385019392850192610595565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156105f2578351835292840192918401916001016105d6565b50909695505050505050565b60005b83811015610619578181015183820152602001610601565b83811115610628576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516106668160178501602088016105fe565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516106a38160288401602088016105fe565b01602801949350505050565b60208152600082518060208401526106ce8160408501602087016105fe565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610712576107126106e2565b500290565b6000821982111561072a5761072a6106e2565b500190565b634e487b7160e01b600052603260045260246000fd5b600081610754576107546106e2565b50600019019056fea26469706673582212203363d52cdf70f631b4bfb99ebf0e25a88f5ccd11d419173ab22ae027d064aabf64736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:provides-interfaces": "IERC721LockByRole",
    "custom:required-dependencies": "IERC721Lockable",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "ERC721 - Lock as Role",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Allow locking tokens by any sender who has the LOCKER_ROLE.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}