{
  "language": "Solidity",
  "sources": {
    "src/diamond/Diamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"../access/ownable/OwnableStorage.sol\";\nimport \"../access/ownable/IERC173.sol\";\nimport \"../introspection/ERC165.sol\";\nimport \"../metatx/ERC2771Context.sol\";\nimport \"../diamond/IDiamondCut.sol\";\nimport \"../diamond/IDiamondLoupe.sol\";\n\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\n\nimport \"./DiamondStorage.sol\";\n\ncontract Diamond is Multicall {\n    using ERC165Storage for ERC165Storage.Layout;\n    using OwnableStorage for OwnableStorage.Layout;\n\n    struct Initialization {\n        address initContract;\n        bytes initData;\n    }\n\n    struct CoreFacets {\n        address diamondCutFacet;\n        address diamondLoupeFacet;\n        address erc165Facet;\n        address erc173Facet;\n    }\n\n    constructor(\n        address owner,\n        CoreFacets memory _coreFacets,\n        IDiamondCut.FacetCut[] memory _facets,\n        Initialization[] memory _initializations\n    ) {\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\n\n        // register DiamondCut\n\n        bytes4[] memory selectorsDiamondCut = new bytes4[](1);\n        selectorsDiamondCut[0] = IDiamondCut.diamondCut.selector;\n\n        erc165.setSupportedInterface(type(IDiamondCut).interfaceId, true);\n\n        // register DiamondLoupe\n\n        bytes4[] memory selectorsDiamondLoupe = new bytes4[](4);\n        selectorsDiamondLoupe[0] = IDiamondLoupe.facets.selector;\n        selectorsDiamondLoupe[1] = IDiamondLoupe.facetFunctionSelectors.selector;\n        selectorsDiamondLoupe[2] = IDiamondLoupe.facetAddresses.selector;\n        selectorsDiamondLoupe[3] = IDiamondLoupe.facetAddress.selector;\n\n        erc165.setSupportedInterface(type(IDiamondLoupe).interfaceId, true);\n\n        // register ERC165 (supportsInterface)\n\n        bytes4[] memory selectorsERC165 = new bytes4[](1);\n        selectorsERC165[0] = IERC165.supportsInterface.selector;\n\n        erc165.setSupportedInterface(type(IERC165).interfaceId, true);\n\n        // register ERC173 (Ownable)\n\n        bytes4[] memory selectorsERC173 = new bytes4[](2);\n        selectorsERC173[0] = IERC173.owner.selector;\n        selectorsERC173[1] = IERC173.transferOwnership.selector;\n\n        erc165.setSupportedInterface(type(IERC173).interfaceId, true);\n\n        // execute the first ever diamond cut,\n        // we are calling the addFunctions directly to save ~ %50 gas\n\n        DiamondStorage.addFunctions(_coreFacets.diamondCutFacet, selectorsDiamondCut);\n        DiamondStorage.addFunctions(_coreFacets.diamondLoupeFacet, selectorsDiamondLoupe);\n        DiamondStorage.addFunctions(_coreFacets.erc165Facet, selectorsERC165);\n        DiamondStorage.addFunctions(_coreFacets.erc173Facet, selectorsERC173);\n\n        // set owner\n\n        OwnableStorage.layout().setOwner(owner);\n\n        // initialization\n\n        for (uint256 i = 0; i < _facets.length; i++) {\n            DiamondStorage.addFunctions(_facets[i].facetAddress, _facets[i].functionSelectors);\n        }\n\n        for (uint256 i = 0; i < _initializations.length; i++) {\n            DiamondStorage.initializeDiamondCut(_initializations[i].initContract, _initializations[i].initData);\n        }\n    }\n\n    // Find facet for function that is called and execute the\n    // function if a facet is found and return any value.\n    fallback() external payable {\n        DiamondStorage.Layout storage l;\n        bytes32 position = DiamondStorage.DIAMOND_STORAGE_POSITION;\n        // get diamond storage\n        assembly {\n            l.slot := position\n        }\n\n        // get facet from function selector\n        address facet = l.selectorToFacetAndPosition[msg.sig].facetAddress;\n        require(facet != address(0), \"BAD_FUNC\");\n\n        // Execute external function from facet using delegatecall and return any value.\n        assembly {\n            // copy function selector and any arguments\n            calldatacopy(0, 0, calldatasize())\n            // execute function call using the facet\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n            // get any return value\n            returndatacopy(0, 0, returndatasize())\n            // return any return value or error back to the caller\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "src/access/ownable/OwnableStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nlibrary OwnableStorage {\n    struct Layout {\n        address owner;\n    }\n\n    bytes32 internal constant STORAGE_SLOT =\n        keccak256(\"openzeppelin.contracts.storage.Ownable\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function setOwner(Layout storage l, address owner) internal {\n        l.owner = owner;\n    }\n}\n"
    },
    "src/access/ownable/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./IERC173Events.sol\";\n\n/**\n * @title Contract ownership standard interface\n * @dev see https://eips.ethereum.org/EIPS/eip-173\n */\ninterface IERC173 is IERC173Events {\n    /**\n     * @notice get the ERC173 contract owner\n     * @return conrtact owner\n     */\n    function owner() external view returns (address);\n\n    /**\n     * @notice transfer contract ownership to new account\n     * @param account address of new owner\n     */\n    function transferOwnership(address account) external;\n}\n"
    },
    "src/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./IERC165.sol\";\nimport \"./ERC165Storage.sol\";\n\n/**\n * @title ERC165\n * @notice Standard EIP-165 facet which would be already included as a core facet in Flair's Diamond contract.\n *\n * @custom:type eip-2535-facet\n * @custom:category Introspection\n * @custom:provides-interfaces IERC165\n */\ncontract ERC165 is IERC165 {\n    using ERC165Storage for ERC165Storage.Layout;\n\n    /**\n     * @inheritdoc IERC165\n     */\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\n    }\n}\n"
    },
    "src/metatx/ERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./ERC2771ContextStorage.sol\";\nimport \"./ERC2771ContextInternal.sol\";\nimport \"./IERC2771Context.sol\";\n\ncontract ERC2771Context is IERC2771Context, ERC2771ContextInternal {\n    using ERC2771ContextStorage for ERC2771ContextStorage.Layout;\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return _isTrustedForwarder(forwarder);\n    }\n}\n"
    },
    "src/diamond/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {\n        Add,\n        Replace,\n        Remove\n    }\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "src/diamond/IDiamondLoupe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\n// A loupe is a small magnifying glass used to look at diamonds.\n// These functions look at diamonds\ninterface IDiamondLoupe {\n    /// These functions are expected to be called frequently\n    /// by tools.\n\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Gets all facet addresses and their four byte function selectors.\n    /// @return facets_ Facet\n    function facets() external view returns (Facet[] memory facets_);\n\n    /// @notice Gets all the function selectors supported by a specific facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet)\n        external\n        view\n        returns (bytes4[] memory facetFunctionSelectors_);\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses()\n        external\n        view\n        returns (address[] memory facetAddresses_);\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector)\n        external\n        view\n        returns (address facetAddress_);\n}\n"
    },
    "src/diamond/DiamondStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport \"../diamond/IDiamondCut.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\nerror ErrDiamondFacetAlreadyExists(address facet, bytes4 selector);\nerror ErrDiamondFacetSameFunction(address facet, bytes4 selector);\n\nlibrary DiamondStorage {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct Layout {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n    }\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            l.slot := position\n        }\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        // require(\n        //     _functionSelectors.length > 0,\n        //     \"LibDiamondCut: No selectors in facet to cut\"\n        // );\n        Layout storage l = layout();\n        // require(\n        //     _facetAddress != address(0),\n        //     \"LibDiamondCut: Add facet can't be address(0)\"\n        // );\n        uint96 selectorPosition = uint96(l.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(l, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = l.selectorToFacetAndPosition[selector].facetAddress;\n\n            if (oldFacetAddress != address(0)) {\n                revert ErrDiamondFacetAlreadyExists(oldFacetAddress, selector);\n            }\n\n            addFunction(l, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        // require(\n        //     _functionSelectors.length > 0,\n        //     \"LibDiamondCut: No selectors in facet to cut\"\n        // );\n        Layout storage l = layout();\n        // require(\n        //     _facetAddress != address(0),\n        //     \"LibDiamondCut: Add facet can't be address(0)\"\n        // );\n        uint96 selectorPosition = uint96(l.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(l, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = l.selectorToFacetAndPosition[selector].facetAddress;\n\n            if (oldFacetAddress == _facetAddress) {\n                revert ErrDiamondFacetSameFunction(oldFacetAddress, selector);\n            }\n\n            removeFunction(l, oldFacetAddress, selector);\n            addFunction(l, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address, bytes4[] memory _functionSelectors) internal {\n        // require(\n        //     _functionSelectors.length > 0,\n        //     \"LibDiamondCut: No selectors in facet to cut\"\n        // );\n        Layout storage l = layout();\n        // if function does not exist then do nothing and return\n        // require(\n        //     _facetAddress == address(0),\n        //     \"LibDiamondCut: Remove facet address must be address(0)\"\n        // );\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = l.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(l, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(Layout storage l, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        l.facetFunctionSelectors[_facetAddress].facetAddressPosition = l.facetAddresses.length;\n        l.facetAddresses.push(_facetAddress);\n    }\n\n    function addFunction(\n        Layout storage l,\n        bytes4 _selector,\n        uint96 _selectorPosition,\n        address _facetAddress\n    ) internal {\n        l.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        l.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        l.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(\n        Layout storage l,\n        address _facetAddress,\n        bytes4 _selector\n    ) internal {\n        // require(\n        //     _facetAddress != address(0),\n        //     \"LibDiamondCut: Can't remove function that doesn't exist\"\n        // );\n        // an immutable function is a function defined directly in a diamond\n        // require(\n        //     _facetAddress != address(this),\n        //     \"LibDiamondCut: Can't remove immutable function\"\n        // );\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = l.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = l.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = l.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            l.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            l.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        l.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete l.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = l.facetAddresses.length - 1;\n            uint256 facetAddressPosition = l.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = l.facetAddresses[lastFacetAddressPosition];\n                l.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                l.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            l.facetAddresses.pop();\n            delete l.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "src/access/ownable/IERC173Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\n/**\n * @title Contract ownership standard interface (event only)\n * @dev see https://eips.ethereum.org/EIPS/eip-173\n */\ninterface IERC173Events {\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n}\n"
    },
    "src/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\n/**\n * @title ERC165 interface registration interface\n * @dev see https://eips.ethereum.org/EIPS/eip-165\n */\ninterface IERC165 {\n    /**\n     * @notice query whether contract has registered support for given interface\n     * @param interfaceId interface id\n     * @return bool whether interface is supported\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nlibrary ERC165Storage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.ERC165\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId) internal view returns (bool) {\n        return l.supportedInterfaces[interfaceId];\n    }\n\n    function setSupportedInterface(\n        Layout storage l,\n        bytes4 interfaceId,\n        bool status\n    ) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        l.supportedInterfaces[interfaceId] = status;\n    }\n}\n"
    },
    "src/metatx/ERC2771ContextStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nlibrary ERC2771ContextStorage {\n    struct Layout {\n        address trustedForwarder;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.ERC2771Context\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/metatx/ERC2771ContextInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"./ERC2771ContextStorage.sol\";\n\nabstract contract ERC2771ContextInternal is Context {\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (_isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (_isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "src/metatx/IERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IERC2771Context {\n    function isTrustedForwarder(address forwarder) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/legal/license/License.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"./LicenseStorage.sol\";\nimport \"./LicenseInternal.sol\";\nimport \"./ILicense.sol\";\n\n/**\n * @title License\n * @notice Add license name and content URI for interacting or holding assets of this contract. Based on a16z's \"Can't Be Evil\".\n *\n * @custom:type eip-2535-facet\n * @custom:category Legal\n * @custom:provides-interfaces ILicense ICantBeEvil\n */\ncontract License is ILicense, LicenseInternal {\n    function getLicenseURI() external view returns (string memory) {\n        return _getLicenseURI();\n    }\n\n    function getLicenseName() external view returns (string memory) {\n        return _getLicenseName();\n    }\n\n    function licenseVersion() external view returns (LicenseVersion) {\n        return _licenseVersion();\n    }\n\n    function customLicenseURI() external view returns (string memory) {\n        return LicenseStorage.layout().customLicenseURI;\n    }\n\n    function customLicenseName() external view returns (string memory) {\n        return LicenseStorage.layout().customLicenseName;\n    }\n}\n"
    },
    "src/legal/license/LicenseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./ILicenseInternal.sol\";\n\nlibrary LicenseStorage {\n    struct Layout {\n        ILicenseInternal.LicenseVersion licenseVersion;\n        string customLicenseURI;\n        string customLicenseName;\n        bool licenseVersionLocked;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.License\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/legal/license/LicenseInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./LicenseStorage.sol\";\nimport \"./ILicenseInternal.sol\";\n\n/**\n * @title Functionality to expose license name and URI for the assets of the contract.\n */\nabstract contract LicenseInternal is ILicenseInternal {\n    using Strings for uint256;\n    using LicenseStorage for LicenseStorage.Layout;\n\n    string internal constant A16Z_BASE_LICENSE_URI = \"ar://_D9kN1WrNWbCq55BSAGRbTB4bS3v8QAPTYmBThSbX3A/\";\n\n    function _licenseVersion() internal view virtual returns (ILicenseInternal.LicenseVersion) {\n        return LicenseStorage.layout().licenseVersion;\n    }\n\n    function _getLicenseURI() internal view virtual returns (string memory) {\n        LicenseStorage.Layout storage l = LicenseStorage.layout();\n\n        if (l.licenseVersion == LicenseVersion.CUSTOM) {\n            return l.customLicenseURI;\n        }\n        if (l.licenseVersion == LicenseVersion.UNLICENSED) {\n            return \"\";\n        }\n\n        return string.concat(A16Z_BASE_LICENSE_URI, uint256(l.licenseVersion).toString());\n    }\n\n    function _getLicenseName() internal view virtual returns (string memory) {\n        LicenseStorage.Layout storage l = LicenseStorage.layout();\n\n        if (l.licenseVersion == LicenseVersion.CUSTOM) {\n            return l.customLicenseName;\n        }\n\n        if (l.licenseVersion == LicenseVersion.UNLICENSED) {\n            return \"\";\n        }\n\n        if (LicenseVersion.CBE_CC0 == l.licenseVersion) return \"CBE_CC0\";\n        if (LicenseVersion.CBE_ECR == l.licenseVersion) return \"CBE_ECR\";\n        if (LicenseVersion.CBE_NECR == l.licenseVersion) return \"CBE_NECR\";\n        if (LicenseVersion.CBE_NECR_HS == l.licenseVersion) return \"CBE_NECR_HS\";\n        if (LicenseVersion.CBE_PR == l.licenseVersion) return \"CBE_PR\";\n        else return \"CBE_PR_HS\";\n    }\n\n    function _setCustomLicense(string calldata _customLicenseName, string calldata _customLicenseURI) internal virtual {\n        LicenseStorage.Layout storage l = LicenseStorage.layout();\n\n        if (l.licenseVersionLocked) {\n            revert ErrLicenseLocked();\n        }\n\n        l.licenseVersion = LicenseVersion.CUSTOM;\n        l.customLicenseName = _customLicenseName;\n        l.customLicenseURI = _customLicenseURI;\n\n        emit CustomLicenseSet(_customLicenseName, _customLicenseURI);\n    }\n\n    function _setLicenseVersion(LicenseVersion _newVersion) internal virtual {\n        LicenseStorage.Layout storage l = LicenseStorage.layout();\n\n        if (l.licenseVersionLocked) {\n            revert ErrLicenseLocked();\n        }\n\n        l.licenseVersion = _newVersion;\n\n        emit LicenseVersionSet(_newVersion);\n    }\n\n    function _lockLicenseVersion() internal virtual {\n        LicenseStorage.layout().licenseVersionLocked = true;\n\n        emit LicenseLocked();\n    }\n}\n"
    },
    "src/legal/license/ILicense.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./a16z/ICantBeEvil.sol\";\nimport \"./ILicenseInternal.sol\";\n\ninterface ILicense is ILicenseInternal, ICantBeEvil {\n    function licenseVersion() external view returns (ILicenseInternal.LicenseVersion);\n\n    function customLicenseURI() external view returns (string memory);\n\n    function customLicenseName() external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "src/legal/license/ILicenseInternal.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.8.15;\n\ninterface ILicenseInternal {\n    enum LicenseVersion {\n        CBE_CC0,\n        CBE_ECR,\n        CBE_NECR,\n        CBE_NECR_HS,\n        CBE_PR,\n        CBE_PR_HS,\n        CUSTOM,\n        UNLICENSED\n    }\n\n    error ErrLicenseLocked();\n\n    event CustomLicenseSet(string customLicenseURI, string customLicenseName);\n    event LicenseVersionSet(LicenseVersion licenseVersion);\n    event LicenseLocked();\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "src/legal/license/a16z/ICantBeEvil.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.8.15;\n\n// Adopted from \"@a16z/contracts/licenses/CantBeEvil.sol\"\ninterface ICantBeEvil {\n    function getLicenseURI() external view returns (string memory);\n\n    function getLicenseName() external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/token/ERC1155/facets/sales/ERC1155TieredSalesOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"../../../../access/ownable/OwnableInternal.sol\";\nimport \"./ERC1155TieredSalesStorage.sol\";\nimport \"./IERC1155TieredSalesAdmin.sol\";\n\n/**\n * @title ERC1155 - Tiered Sales - Admin - Ownable\n * @notice Used to manage which ERC1155 token is related to which the sales tier.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:peer-dependencies IERC1155TieredSales\n * @custom:provides-interfaces IERC1155TieredSalesAdmin\n */\ncontract ERC1155TieredSalesOwnable is IERC1155TieredSalesAdmin, OwnableInternal {\n    using ERC1155TieredSalesStorage for ERC1155TieredSalesStorage.Layout;\n\n    function configureTierTokenId(uint256 tierId, uint256 tokenId) external virtual onlyOwner {\n        ERC1155TieredSalesStorage.layout().tierToTokenId[tierId] = tokenId;\n    }\n\n    function configureTierTokenId(uint256[] calldata tierIds, uint256[] calldata tokenIds) external virtual onlyOwner {\n        require(\n            tierIds.length == tokenIds.length,\n            \"ERC1155TieredSalesOwnable: tierIds and tokenIds must be same length\"\n        );\n\n        for (uint256 i = 0; i < tierIds.length; i++) {\n            ERC1155TieredSalesStorage.layout().tierToTokenId[tierIds[i]] = tokenIds[i];\n        }\n    }\n}\n"
    },
    "src/access/ownable/OwnableInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"./OwnableStorage.sol\";\nimport \"./IERC173Events.sol\";\n\nabstract contract OwnableInternal is IERC173Events, Context {\n    using OwnableStorage for OwnableStorage.Layout;\n\n    modifier onlyOwner() {\n        require(_msgSender() == _owner(), \"Ownable: sender must be owner\");\n        _;\n    }\n\n    function _owner() internal view virtual returns (address) {\n        return OwnableStorage.layout().owner;\n    }\n\n    function _transferOwnership(address account) internal virtual {\n        OwnableStorage.layout().setOwner(account);\n        emit OwnershipTransferred(_msgSender(), account);\n    }\n}\n"
    },
    "src/token/ERC1155/facets/sales/ERC1155TieredSalesStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nlibrary ERC1155TieredSalesStorage {\n    struct Layout {\n        mapping(uint256 => uint256) tierToTokenId;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.ERC1155TieredSales\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/token/ERC1155/facets/sales/IERC1155TieredSalesAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IERC1155TieredSalesAdmin {\n    function configureTierTokenId(uint256 tierId, uint256 tokenId) external;\n\n    function configureTierTokenId(uint256[] calldata tierIds, uint256[] calldata tokenIds) external;\n}\n"
    },
    "src/introspection/ERC165Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"../access/ownable/OwnableInternal.sol\";\nimport \"./IERC165.sol\";\nimport \"./ERC165Storage.sol\";\nimport \"./IERC165Admin.sol\";\n\n/**\n * @title ERC165 - Admin - Ownable\n * @notice Standard EIP-165 management facet using Ownable extension for access control.\n *\n * @custom:type eip-2535-facet\n * @custom:category Diamonds\n * @custom:peer-dependencies IERC165\n * @custom:provides-interfaces IERC165Admin\n */\ncontract ERC165Ownable is IERC165Admin, OwnableInternal {\n    using ERC165Storage for ERC165Storage.Layout;\n\n    /**\n     * @param interfaceIds list of interface id to set as supported\n     * @param interfaceIdsToRemove list of interface id to unset as supported\n     */\n    function setERC165(bytes4[] calldata interfaceIds, bytes4[] calldata interfaceIdsToRemove) public onlyOwner {\n        ERC165Storage.Layout storage l = ERC165Storage.layout();\n\n        l.supportedInterfaces[type(IERC165).interfaceId] = true;\n\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            l.supportedInterfaces[interfaceIds[i]] = true;\n        }\n\n        for (uint256 i = 0; i < interfaceIdsToRemove.length; i++) {\n            l.supportedInterfaces[interfaceIdsToRemove[i]] = false;\n        }\n    }\n}\n"
    },
    "src/introspection/IERC165Admin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IERC165Admin {\n    function setERC165(bytes4[] calldata interfaceIds, bytes4[] calldata interfaceIdsToRemove) external;\n}\n"
    },
    "src/finance/withdraw/Withdrawable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"./WithdrawableStorage.sol\";\nimport \"./WithdrawableInternal.sol\";\nimport \"./IWithdrawable.sol\";\n\n/**\n * @title Withdrawable\n * @notice Allow withdrwaing any ERC20 or native tokens from the contract.\n *\n * @custom:type eip-2535-facet\n * @custom:category Finance\n * @custom:provides-interfaces IWithdrawable\n */\ncontract Withdrawable is IWithdrawable, WithdrawableInternal {\n    function withdraw(address[] calldata claimTokens, uint256[] calldata amounts) external {\n        _withdraw(claimTokens, amounts);\n    }\n\n    function withdrawRecipient() external view override returns (address) {\n        return _withdrawRecipient();\n    }\n\n    function withdrawRecipientLocked() external view override returns (bool) {\n        return _withdrawRecipientLocked();\n    }\n\n    function withdrawPowerRevoked() external view override returns (bool) {\n        return _withdrawPowerRevoked();\n    }\n\n    function withdrawMode() external view override returns (Mode) {\n        return _withdrawMode();\n    }\n\n    function withdrawModeLocked() external view override returns (bool) {\n        return _withdrawModeLocked();\n    }\n}\n"
    },
    "src/finance/withdraw/WithdrawableStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./IWithdrawableInternal.sol\";\n\nlibrary WithdrawableStorage {\n    struct Layout {\n        address recipient;\n        IWithdrawableInternal.Mode mode;\n        bool powerRevoked;\n        bool recipientLocked;\n        bool modeLocked;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.Withdrawable\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/finance/withdraw/WithdrawableInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../access/ownable/OwnableInternal.sol\";\n\nimport \"./WithdrawableStorage.sol\";\nimport \"./IWithdrawableInternal.sol\";\n\n/**\n * @title Functionality to withdraw ERC20 or natives tokens from the contract via various modes\n */\nabstract contract WithdrawableInternal is IWithdrawableInternal, OwnableInternal {\n    using WithdrawableStorage for WithdrawableStorage.Layout;\n\n    using Address for address payable;\n\n    function _withdrawRecipient() internal view virtual returns (address) {\n        return WithdrawableStorage.layout().recipient;\n    }\n\n    function _withdrawRecipientLocked() internal view virtual returns (bool) {\n        return WithdrawableStorage.layout().recipientLocked;\n    }\n\n    function _withdrawPowerRevoked() internal view virtual returns (bool) {\n        return WithdrawableStorage.layout().powerRevoked;\n    }\n\n    function _withdrawMode() internal view virtual returns (Mode) {\n        return WithdrawableStorage.layout().mode;\n    }\n\n    function _withdrawModeLocked() internal view virtual returns (bool) {\n        return WithdrawableStorage.layout().modeLocked;\n    }\n\n    function _setWithdrawRecipient(address recipient) internal virtual {\n        WithdrawableStorage.Layout storage l = WithdrawableStorage.layout();\n\n        if (l.recipientLocked) {\n            revert ErrWithdrawRecipientLocked();\n        }\n\n        l.recipient = recipient;\n\n        emit WithdrawRecipientChanged(recipient);\n    }\n\n    function _lockWithdrawRecipient() internal virtual {\n        WithdrawableStorage.layout().recipientLocked = true;\n\n        emit WithdrawRecipientLocked();\n    }\n\n    function _revokeWithdrawPower() internal virtual {\n        WithdrawableStorage.layout().powerRevoked = true;\n\n        emit WithdrawPowerRevoked();\n    }\n\n    function _setWithdrawMode(Mode _mode) internal virtual {\n        WithdrawableStorage.Layout storage l = WithdrawableStorage.layout();\n\n        if (l.modeLocked) {\n            revert ErrWithdrawModeLocked();\n        }\n\n        l.mode = _mode;\n\n        emit WithdrawModeChanged(_mode);\n    }\n\n    function _lockWithdrawMode() internal virtual {\n        WithdrawableStorage.layout().modeLocked = true;\n\n        emit WithdrawModeLocked();\n    }\n\n    function _withdraw(address[] calldata claimTokens, uint256[] calldata amounts) internal virtual {\n        WithdrawableStorage.Layout storage l = WithdrawableStorage.layout();\n\n        /**\n         * We are using msg.sender for smaller attack surface when evaluating\n         * the sender of the function call. If in future we want to handle \"withdraw\"\n         * functionality via meta transactions, we should consider using `_msgSender`\n         */\n\n        if (l.mode == Mode.NOBODY) {\n            revert ErrWithdrawImpossible();\n        } else if (l.mode == Mode.RECIPIENT) {\n            if (l.recipient != msg.sender) {\n                revert ErrWithdrawOnlyRecipient();\n            }\n        } else if (l.mode == Mode.OWNER) {\n            if (_owner() != msg.sender) {\n                revert ErrWithdrawOnlyOwner();\n            }\n        }\n\n        if (l.powerRevoked) {\n            revert ErrWithdrawImpossible();\n        }\n\n        for (uint256 i = 0; i < claimTokens.length; i++) {\n            if (claimTokens[i] == address(0)) {\n                payable(l.recipient).sendValue(amounts[i]);\n            } else {\n                IERC20(claimTokens[i]).transfer(address(l.recipient), amounts[i]);\n            }\n        }\n\n        emit Withdrawn(claimTokens, amounts);\n    }\n}\n"
    },
    "src/finance/withdraw/IWithdrawable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./IWithdrawableInternal.sol\";\n\ninterface IWithdrawable is IWithdrawableInternal {\n    function withdraw(address[] calldata claimTokens, uint256[] calldata amounts) external;\n\n    function withdrawRecipient() external view returns (address);\n\n    function withdrawRecipientLocked() external view returns (bool);\n\n    function withdrawPowerRevoked() external view returns (bool);\n\n    function withdrawMode() external view returns (Mode);\n\n    function withdrawModeLocked() external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "src/finance/withdraw/IWithdrawableInternal.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.8.15;\n\ninterface IWithdrawableInternal {\n    enum Mode {\n        OWNER,\n        RECIPIENT,\n        ANYONE,\n        NOBODY\n    }\n\n    error ErrWithdrawOnlyRecipient();\n    error ErrWithdrawOnlyOwner();\n    error ErrWithdrawImpossible();\n    error ErrWithdrawRecipientLocked();\n    error ErrWithdrawModeLocked();\n\n    event WithdrawRecipientChanged(address indexed recipient);\n    event WithdrawRecipientLocked();\n    event WithdrawModeChanged(Mode _mode);\n    event WithdrawModeLocked();\n    event Withdrawn(address[] claimTokens, uint256[] amounts);\n    event WithdrawPowerRevoked();\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "src/finance/withdraw/WithdrawableOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"../../access/ownable/OwnableInternal.sol\";\n\nimport \"./WithdrawableInternal.sol\";\nimport \"./IWithdrawableAdmin.sol\";\n\n/**\n * @title Withdrawable - Admin - Ownable\n * @notice Allow contract owner to manage who can withdraw funds and how.\n *\n * @custom:type eip-2535-facet\n * @custom:category Finance\n * @custom:peer-dependencies IWithdrawable\n * @custom:provides-interfaces IWithdrawableAdmin\n */\ncontract WithdrawableOwnable is IWithdrawableAdmin, OwnableInternal, WithdrawableInternal {\n    function setWithdrawRecipient(address recipient) external onlyOwner {\n        _setWithdrawRecipient(recipient);\n    }\n\n    function lockWithdrawRecipient() external onlyOwner {\n        _lockWithdrawRecipient();\n    }\n\n    function revokeWithdrawPower() external onlyOwner {\n        _revokeWithdrawPower();\n    }\n\n    function setWithdrawMode(Mode mode) external onlyOwner {\n        _setWithdrawMode(mode);\n    }\n\n    function lockWithdrawMode() external onlyOwner {\n        _lockWithdrawMode();\n    }\n}\n"
    },
    "src/finance/withdraw/IWithdrawableAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./IWithdrawable.sol\";\n\ninterface IWithdrawableAdmin {\n    function setWithdrawRecipient(address _recipient) external;\n\n    function lockWithdrawRecipient() external;\n\n    function revokeWithdrawPower() external;\n\n    function setWithdrawMode(IWithdrawable.Mode _mode) external;\n\n    function lockWithdrawMode() external;\n}\n"
    },
    "src/finance/sales/TieredSalesOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./ITieredSalesAdmin.sol\";\nimport \"./TieredSalesInternal.sol\";\n\nimport \"../../access/ownable/OwnableInternal.sol\";\n\n/**\n * @title Tiered Sales - Admin - Ownable\n * @notice Allow contract owner to manage sale tiers.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:peer-dependencies ITieredSales\n * @custom:provides-interfaces ITieredSalesAdmin\n */\ncontract TieredSalesOwnable is ITieredSalesAdmin, OwnableInternal, TieredSalesInternal {\n    function configureTiering(uint256 tierId, ITieredSalesInternal.Tier calldata tier) external override onlyOwner {\n        super._configureTiering(tierId, tier);\n    }\n\n    function configureTiering(uint256[] calldata tierIds, ITieredSalesInternal.Tier[] calldata tiers)\n        external\n        override\n        onlyOwner\n    {\n        super._configureTiering(tierIds, tiers);\n    }\n}\n"
    },
    "src/finance/sales/ITieredSalesAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./ITieredSalesInternal.sol\";\n\ninterface ITieredSalesAdmin {\n    function configureTiering(uint256, ITieredSalesInternal.Tier calldata)\n        external;\n\n    function configureTiering(\n        uint256[] calldata,\n        ITieredSalesInternal.Tier[] calldata\n    ) external;\n}\n"
    },
    "src/finance/sales/TieredSalesInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./ITieredSalesInternal.sol\";\nimport \"./TieredSalesStorage.sol\";\n\nimport \"../../access/ownable/OwnableInternal.sol\";\n\n/**\n * @title Sales mechanism for NFTs with multiple tiered pricing, allowlist and allocation plans\n */\nabstract contract TieredSalesInternal is ITieredSalesInternal, Context, OwnableInternal {\n    using TieredSalesStorage for TieredSalesStorage.Layout;\n\n    function _configureTiering(uint256 tierId, Tier calldata tier) internal virtual {\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\n\n        require(tier.maxAllocation >= l.tierMints[tierId], \"LOWER_THAN_MINTED\");\n\n        if (l.tiers[tierId].reserved > 0) {\n            require(tier.reserved >= l.tierMints[tierId], \"LOW_RESERVE_AMOUNT\");\n        }\n\n        if (l.tierMints[tierId] > 0) {\n            require(tier.maxPerWallet >= l.tiers[tierId].maxPerWallet, \"LOW_MAX_PER_WALLET\");\n        }\n\n        l.totalReserved -= l.tiers[tierId].reserved;\n        l.tiers[tierId] = tier;\n        l.totalReserved += tier.reserved;\n    }\n\n    function _configureTiering(uint256[] calldata _tierIds, Tier[] calldata _tiers) internal virtual {\n        for (uint256 i = 0; i < _tierIds.length; i++) {\n            _configureTiering(_tierIds[i], _tiers[i]);\n        }\n    }\n\n    function _onTierAllowlist(\n        uint256 tierId,\n        address minter,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) internal view virtual returns (bool) {\n        return\n            MerkleProof.verify(\n                proof,\n                TieredSalesStorage.layout().tiers[tierId].merkleRoot,\n                _generateMerkleLeaf(minter, maxAllowance)\n            );\n    }\n\n    function _eligibleForTier(\n        uint256 tierId,\n        address minter,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) internal view virtual returns (uint256 maxMintable) {\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\n\n        require(l.tiers[tierId].maxPerWallet > 0, \"NOT_EXISTS\");\n        require(block.timestamp >= l.tiers[tierId].start, \"NOT_STARTED\");\n        require(block.timestamp <= l.tiers[tierId].end, \"ALREADY_ENDED\");\n\n        maxMintable = l.tiers[tierId].maxPerWallet - l.walletMinted[tierId][minter];\n\n        if (l.tiers[tierId].merkleRoot != bytes32(0)) {\n            require(l.walletMinted[tierId][minter] < maxAllowance, \"MAXED_ALLOWANCE\");\n            require(_onTierAllowlist(tierId, minter, maxAllowance, proof), \"NOT_ALLOWLISTED\");\n\n            uint256 remainingAllowance = maxAllowance - l.walletMinted[tierId][minter];\n\n            if (maxMintable > remainingAllowance) {\n                maxMintable = remainingAllowance;\n            }\n        }\n    }\n\n    function _availableSupplyForTier(uint256 tierId) internal view virtual returns (uint256 remaining) {\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\n\n        // Substract all the remaining reserved spots from the total remaining supply...\n        remaining = _remainingSupply(tierId) - (l.totalReserved - l.reservedMints);\n\n        // If this tier has reserved spots, add remaining spots back to result...\n        if (l.tiers[tierId].reserved > 0) {\n            remaining += (l.tiers[tierId].reserved - l.tierMints[tierId]);\n        }\n    }\n\n    function _executeSale(\n        uint256 tierId,\n        uint256 count,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) internal virtual {\n        address minter = _msgSender();\n\n        uint256 maxMintable = _eligibleForTier(tierId, minter, maxAllowance, proof);\n\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\n\n        require(count <= maxMintable, \"EXCEEDS_MAX\");\n        require(count <= _availableSupplyForTier(tierId), \"EXCEEDS_SUPPLY\");\n        require(count + l.tierMints[tierId] <= l.tiers[tierId].maxAllocation, \"EXCEEDS_ALLOCATION\");\n\n        if (l.tiers[tierId].currency == address(0)) {\n            require(l.tiers[tierId].price * count <= msg.value, \"INSUFFICIENT_AMOUNT\");\n        } else {\n            IERC20(l.tiers[tierId].currency).transferFrom(minter, address(this), l.tiers[tierId].price * count);\n        }\n\n        l.walletMinted[tierId][minter] += count;\n        l.tierMints[tierId] += count;\n\n        if (l.tiers[tierId].reserved > 0) {\n            l.reservedMints += count;\n        }\n    }\n\n    function _remainingSupply(\n        uint256 /*tierId*/\n    ) internal view virtual returns (uint256) {\n        // By default assume supply is unlimited (that means reserving allocation for tiers is irrelevant)\n        return type(uint256).max;\n    }\n\n    /* PRIVATE */\n\n    function _generateMerkleLeaf(address account, uint256 maxAllowance) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(account, maxAllowance));\n    }\n}\n"
    },
    "src/finance/sales/ITieredSalesInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface ITieredSalesInternal {\n    struct Tier {\n        uint256 start;\n        uint256 end;\n        address currency;\n        uint256 price;\n        uint256 maxPerWallet;\n        bytes32 merkleRoot;\n        uint256 reserved;\n        uint256 maxAllocation;\n    }\n}\n"
    },
    "src/finance/sales/TieredSalesStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./ITieredSales.sol\";\n\nlibrary TieredSalesStorage {\n    struct Layout {\n        uint256 totalReserved;\n        uint256 reservedMints;\n        mapping(uint256 => ITieredSales.Tier) tiers;\n        mapping(uint256 => uint256) tierMints;\n        mapping(uint256 => mapping(address => uint256)) walletMinted;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.TieredSales\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "src/finance/sales/ITieredSales.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./ITieredSalesInternal.sol\";\n\ninterface ITieredSales is ITieredSalesInternal {\n    function onTierAllowlist(\n        uint256 tierId,\n        address minter,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) external view returns (bool);\n\n    function eligibleForTier(\n        uint256 tierId,\n        address minter,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) external view returns (uint256);\n\n    function mintByTier(\n        uint256 tierId,\n        uint256 count,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) external payable;\n\n    function remainingForTier(uint256 tierId) external view returns (uint256);\n\n    function walletMintedByTier(uint256 tierId, address wallet) external view returns (uint256);\n\n    function tierMints(uint256 tierId) external view returns (uint256);\n\n    function totalReserved() external view returns (uint256);\n\n    function reservedMints() external view returns (uint256);\n\n    function tiers(uint256 tierId) external view returns (Tier memory);\n}\n"
    },
    "src/finance/royalty/RoyaltyOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"../../access/ownable/OwnableInternal.sol\";\n\nimport \"./RoyaltyStorage.sol\";\nimport \"./RoyaltyInternal.sol\";\nimport \"./IRoyaltyAdmin.sol\";\n\n/**\n * @title ERC2981 - Royalty - Admin - Ownable\n * @notice Allow contract owner to manage token royalties based on EIP-2981 standard.\n *\n * @custom:type eip-2535-facet\n * @custom:category Finance\n * @custom:peer-dependencies IRoyalty IEIP2981\n * @custom:provides-interfaces IRoyaltyAdmin\n */\ncontract RoyaltyOwnable is IRoyaltyAdmin, RoyaltyInternal, OwnableInternal {\n    using RoyaltyStorage for RoyaltyStorage.Layout;\n\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external override onlyOwner {\n        _setTokenRoyalties(royalties);\n    }\n\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external override onlyOwner {\n        _setDefaultRoyalty(royalty);\n    }\n}\n"
    },
    "src/finance/royalty/RoyaltyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"./IRoyaltyInternal.sol\";\nimport \"./IRoyalty.sol\";\n\nlibrary RoyaltyStorage {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    struct Layout {\n        IRoyaltyInternal.TokenRoyalty defaultRoyalty;\n        mapping(uint256 => IRoyaltyInternal.TokenRoyalty) tokenRoyalties;\n        EnumerableSet.UintSet tokensWithRoyalties;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.Royalty\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/finance/royalty/RoyaltyInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"./IRoyaltyInternal.sol\";\nimport \"./RoyaltyStorage.sol\";\n\n/**\n * @title Royalty standard functionality base on EIP-2981 (derived from Manifold.xyz contracts to adopt Diamond architecture)\n */\nabstract contract RoyaltyInternal is IRoyaltyInternal {\n    using RoyaltyStorage for RoyaltyStorage.Layout;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /**\n     * @dev Sets token royalties. When you override this in the implementation contract\n     * ensure that you access restrict it to the contract owner or admin\n     */\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs) internal virtual {\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\n\n        for (uint256 i = 0; i < royaltyConfigs.length; i++) {\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\n\n            require(royaltyConfig.bps < 10000, \"Invalid bps\");\n\n            if (royaltyConfig.recipient == address(0)) {\n                delete l.tokenRoyalties[royaltyConfig.tokenId];\n                l.tokensWithRoyalties.remove(royaltyConfig.tokenId);\n\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\n            } else {\n                l.tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(royaltyConfig.recipient, royaltyConfig.bps);\n                l.tokensWithRoyalties.add(royaltyConfig.tokenId);\n\n                emit TokenRoyaltySet(royaltyConfig.tokenId, royaltyConfig.recipient, royaltyConfig.bps);\n            }\n        }\n    }\n\n    /**\n     * @dev Sets default royalty. When you override this in the implementation contract\n     * ensure that you access restrict it to the contract owner or admin\n     */\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal virtual {\n        require(royalty.bps < 10000, \"Invalid bps\");\n\n        RoyaltyStorage.layout().defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\n\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\n    }\n\n    /**\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\n     */\n    function _getTokenRoyaltiesCount() internal view virtual returns (uint256) {\n        return RoyaltyStorage.layout().tokensWithRoyalties.length();\n    }\n\n    /**\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\n     */\n    function _getTokenRoyaltyByIndex(uint256 index) internal view virtual returns (TokenRoyaltyConfig memory) {\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\n\n        uint256 tokenId = l.tokensWithRoyalties.at(index);\n        TokenRoyalty memory royalty = l.tokenRoyalties[tokenId];\n\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\n    }\n\n    /**\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\n     */\n    function _royaltyInfo(uint256 tokenId, uint256 value) internal view virtual returns (address, uint256) {\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\n\n        if (l.tokenRoyalties[tokenId].recipient != address(0)) {\n            return (l.tokenRoyalties[tokenId].recipient, (value * l.tokenRoyalties[tokenId].bps) / 10000);\n        }\n\n        if (l.defaultRoyalty.recipient != address(0) && l.defaultRoyalty.bps != 0) {\n            return (l.defaultRoyalty.recipient, (value * l.defaultRoyalty.bps) / 10000);\n        }\n\n        return (address(0), 0);\n    }\n}\n"
    },
    "src/finance/royalty/IRoyaltyAdmin.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./IRoyaltyInternal.sol\";\n\ninterface IRoyaltyAdmin {\n    /**\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\n     */\n    function setTokenRoyalties(IRoyaltyInternal.TokenRoyaltyConfig[] calldata royalties) external;\n\n    /**\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\n     */\n    function setDefaultRoyalty(IRoyaltyInternal.TokenRoyalty calldata royalty) external;\n}\n"
    },
    "src/finance/royalty/IRoyaltyInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IRoyaltyInternal {\n    event TokenRoyaltyRemoved(uint256 tokenId);\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\n    event DefaultRoyaltySet(address recipient, uint16 bps);\n\n    struct TokenRoyalty {\n        address recipient;\n        uint16 bps;\n    }\n\n    struct TokenRoyaltyConfig {\n        uint256 tokenId;\n        address recipient;\n        uint16 bps;\n    }\n}\n"
    },
    "src/finance/royalty/IRoyalty.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\";\nimport \"@manifoldxyz/royalty-registry-solidity/contracts/specs/IRarible.sol\";\nimport \"@manifoldxyz/royalty-registry-solidity/contracts/specs/IFoundation.sol\";\n\nimport \"./IRoyaltyInternal.sol\";\n\ninterface IRoyalty is IEIP2981, IRaribleV1, IRaribleV2, IFoundation, IRoyaltyInternal {\n    /**\n     * @dev Default royalty for all tokens without a specific royalty.\n     */\n    function defaultRoyalty() external view returns (TokenRoyalty memory);\n\n    /**\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\n     */\n    function getTokenRoyaltiesCount() external view returns (uint256);\n\n    /**\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\n     */\n    function getTokenRoyaltyByIndex(uint256 index) external view returns (TokenRoyaltyConfig memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * EIP-2981\n */\ninterface IEIP2981 {\n    /**\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     *\n     * => 0x2a55205a = 0x2a55205a\n     */\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\n}"
    },
    "@manifoldxyz/royalty-registry-solidity/contracts/specs/IRarible.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRaribleV1 {\n    /*\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\n     *\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\n     */\n    function getFeeBps(uint256 id) external view returns (uint[] memory);\n    function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\n}\n\n\ninterface IRaribleV2 {\n    /*\n     *  bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\n     */\n    struct Part {\n        address payable account;\n        uint96 value;\n    }\n    function getRaribleV2Royalties(uint256 id) external view returns (Part[] memory);\n}"
    },
    "@manifoldxyz/royalty-registry-solidity/contracts/specs/IFoundation.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IFoundation {\n    /*\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\n     *\n     *  => 0xd5a06d4c = 0xd5a06d4c\n     */\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n}\n\ninterface IFoundationTreasuryNode {\n    function getFoundationTreasury() external view returns (address payable);\n}\n\ninterface IFoundationTreasury {\n    function isAdmin(address account) external view returns (bool);\n}"
    },
    "@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * Simple EIP2981 reference override implementation\n */\ninterface IEIP2981RoyaltyOverride is IERC165 {\n\n    event TokenRoyaltyRemoved(uint256 tokenId);\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\n    event DefaultRoyaltySet(address recipient, uint16 bps);\n\n    struct TokenRoyalty {\n        address recipient;\n        uint16 bps;\n    }\n\n    struct TokenRoyaltyConfig {\n        uint256 tokenId;\n        address recipient;\n        uint16 bps;\n    }\n\n    /**\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\n     */\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external;\n\n    /**\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\n     */\n    function getTokenRoyaltiesCount() external view returns(uint256);\n\n    /**\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\n     */\n    function getTokenRoyaltyByIndex(uint256 index) external view returns(TokenRoyaltyConfig memory);\n\n    /**\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\n     */\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\n\n}\n"
    },
    "src/legal/license/LicenseOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"../../access/ownable/OwnableInternal.sol\";\n\nimport \"./LicenseStorage.sol\";\nimport \"./LicenseInternal.sol\";\nimport \"./ILicenseAdmin.sol\";\n\n/**\n * @title License - Admin - Ownable\n * @notice Allow contract owner to manage license version, name and URI.\n *\n * @custom:type eip-2535-facet\n * @custom:category Legal\n * @custom:peer-dependencies ILicense ICantBeEvil\n * @custom:provides-interfaces ILicenseAdmin\n */\ncontract LicenseOwnable is ILicenseAdmin, OwnableInternal, LicenseInternal {\n    using LicenseStorage for LicenseStorage.Layout;\n\n    function setLicenseVersion(LicenseVersion licenseVersion) external override onlyOwner {\n        _setLicenseVersion(licenseVersion);\n    }\n\n    function lockLicenseVersion() external override onlyOwner {\n        _lockLicenseVersion();\n    }\n\n    function licenseVersionLocked() external view override returns (bool) {\n        return LicenseStorage.layout().licenseVersionLocked;\n    }\n}\n"
    },
    "src/legal/license/ILicenseAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./ILicenseInternal.sol\";\n\ninterface ILicenseAdmin {\n    function setLicenseVersion(ILicenseInternal.LicenseVersion licenseVersion) external;\n\n    function lockLicenseVersion() external;\n\n    function licenseVersionLocked() external view returns (bool);\n}\n"
    },
    "src/token/common/burnable/BurnableOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"../../../access/ownable/OwnableInternal.sol\";\nimport \"./BurnableStorage.sol\";\nimport \"./IBurnableAdmin.sol\";\n\n/**\n * @title Burnable - Admin - Ownable\n * @notice Allow contract owner to manage burning mechanism.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:peer-dependencies IBurnableExtension\n * @custom:provides-interfaces IBurnableAdmin\n */\ncontract BurnableOwnable is IBurnableAdmin, OwnableInternal {\n    using BurnableStorage for BurnableStorage.Layout;\n\n    function setBurnablePausedUntil(uint256 newTimestamp) public virtual onlyOwner {\n        BurnableStorage.layout().pausedUntil = newTimestamp;\n    }\n}\n"
    },
    "src/token/common/burnable/BurnableStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nlibrary BurnableStorage {\n    struct Layout {\n        uint256 pausedUntil;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.Burnable\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/token/common/burnable/IBurnableAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IBurnableAdmin {\n    function setBurnablePausedUntil(uint256 newTimestamp) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1337
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}