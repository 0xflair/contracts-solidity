{
  "language": "Solidity",
  "sources": {
    "src/token/ERC1155/extensions/royalty/ERC1155RoyaltyEnforcementExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"operator-filter-registry/src/DefaultOperatorFilterer.sol\";\n\nimport \"../../../../common/Errors.sol\";\nimport \"../../../common/royalty/RoyaltyEnforcement.sol\";\nimport \"../../base/ERC1155BaseInternal.sol\";\n\nabstract contract ERC1155RoyaltyEnforcementExtension is\n    DefaultOperatorFilterer,\n    RoyaltyEnforcement,\n    ERC1155BaseInternal\n{\n    function _setApprovalForAll(address operator, bool approved)\n        internal\n        virtual\n        override\n        onlyAllowedOperatorApproval(operator)\n    {\n        super._setApprovalForAll(operator, approved);\n    }\n\n    function _safeTransferBatch(\n        address operator,\n        address sender,\n        address recipient,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override onlyAllowedOperator(operator) {\n        super._safeTransferBatch(operator, sender, recipient, ids, amounts, data);\n    }\n\n    function _transferBatch(\n        address operator,\n        address sender,\n        address recipient,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override onlyAllowedOperator(operator) {\n        super._transferBatch(operator, sender, recipient, ids, amounts, data);\n    }\n\n    function _safeTransfer(\n        address operator,\n        address sender,\n        address recipient,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal virtual override onlyAllowedOperator(operator) {\n        super._safeTransfer(operator, sender, recipient, id, amount, data);\n    }\n\n    function _transfer(\n        address operator,\n        address sender,\n        address recipient,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal virtual override onlyAllowedOperator(operator) {\n        super._transfer(operator, sender, recipient, id, amount, data);\n    }\n}\n"
    },
    "src/common/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * The caller must be the current contract itself.\n */\nerror ErrSenderIsNotSelf();\n"
    },
    "src/token/common/royalty/RoyaltyEnforcement.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"../../../access/ownable/OwnableInternal.sol\";\n\nimport \"./RoyaltyEnforcementStorage.sol\";\nimport \"./IRoyaltyEnforcement.sol\";\n\nabstract contract RoyaltyEnforcement is IRoyaltyEnforcement, OwnableInternal {\n    function royaltiesEnforced() external view virtual override returns (bool) {\n        return RoyaltyEnforcementStorage.layout().enforceRoyalties;\n    }\n}\n"
    },
    "src/token/ERC1155/base/ERC1155BaseInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"../IERC1155Events.sol\";\nimport \"../IERC1155Receiver.sol\";\nimport \"./ERC1155BaseStorage.sol\";\n\n/**\n * @title Base ERC1155 internal functions\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\n */\nabstract contract ERC1155BaseInternal is Context, IERC1155Events {\n    using Address for address;\n\n    /**\n     * @notice query the balance of given token held by given address\n     * @param account address to query\n     * @param id token to query\n     * @return token balance\n     */\n    function _balanceOf(address account, uint256 id) internal view virtual returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return ERC1155BaseStorage.layout().balances[id][account];\n    }\n\n    /**\n     * @notice mint given quantity of tokens for given address\n     * @dev ERC1155Receiver implementation is not checked\n     * @param account beneficiary of minting\n     * @param id token ID\n     * @param amount quantity of tokens to mint\n     * @param data data payload\n     */\n    function _mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal virtual {\n        address operator = _msgSender();\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        ERC1155BaseStorage.layout().balances[id][account] += amount;\n\n        emit TransferSingle(operator, address(0), account, id, amount);\n    }\n\n    /**\n     * @notice mint given quantity of tokens for given address\n     * @param account beneficiary of minting\n     * @param id token ID\n     * @param amount quantity of tokens to mint\n     * @param data data payload\n     */\n    function _safeMint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal virtual {\n        _mint(account, id, amount, data);\n\n        _doSafeTransferAcceptanceCheck(_msgSender(), address(0), account, id, amount, data);\n    }\n\n    /**\n     * @notice mint batch of tokens for given address\n     * @dev ERC1155Receiver implementation is not checked\n     * @param account beneficiary of minting\n     * @param ids list of token IDs\n     * @param amounts list of quantities of tokens to mint\n     * @param data data payload\n     */\n    function _mintBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address sender = _msgSender();\n\n        _beforeTokenTransfer(sender, address(0), account, ids, amounts, data);\n\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\n\n        for (uint256 i; i < ids.length; ) {\n            balances[ids[i]][account] += amounts[i];\n            unchecked {\n                i++;\n            }\n        }\n\n        emit TransferBatch(sender, address(0), account, ids, amounts);\n    }\n\n    function _mintBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes[] calldata datas\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(accounts.length == amounts.length, \"ERC1155: accounts and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\n\n        for (uint256 i; i < ids.length; ) {\n            _beforeTokenTransfer(\n                operator,\n                address(0),\n                accounts[i],\n                _asSingletonArray(ids[i]),\n                _asSingletonArray(amounts[i]),\n                datas[i]\n            );\n\n            balances[ids[i]][accounts[i]] += amounts[i];\n\n            emit TransferSingle(operator, address(0), accounts[i], ids[i], amounts[i]);\n\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * @notice mint batch of tokens for given address\n     * @param account beneficiary of minting\n     * @param ids list of token IDs\n     * @param amounts list of quantities of tokens to mint\n     * @param data data payload\n     */\n    function _safeMintBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) internal virtual {\n        _mintBatch(account, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(_msgSender(), address(0), account, ids, amounts, data);\n    }\n\n    /**\n     * @notice burn given quantity of tokens held by given address\n     * @param account holder of tokens to burn\n     * @param id token ID\n     * @param amount quantity of tokens to burn\n     */\n    function _burn(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address sender = _msgSender();\n\n        _beforeTokenTransfer(sender, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        mapping(address => uint256) storage balances = ERC1155BaseStorage.layout().balances[id];\n\n        unchecked {\n            require(balances[account] >= amount, \"ERC1155: burn amount exceeds balance\");\n            balances[account] -= amount;\n        }\n\n        emit TransferSingle(sender, account, address(0), id, amount);\n    }\n\n    /**\n     * @notice burn given batch of tokens held by given address\n     * @param account holder of tokens to burn\n     * @param ids token IDs\n     * @param amounts quantities of tokens to burn\n     */\n    function _burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata amounts\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address sender = _msgSender();\n\n        _beforeTokenTransfer(sender, account, address(0), ids, amounts, \"\");\n\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\n\n        unchecked {\n            for (uint256 i; i < ids.length; i++) {\n                uint256 id = ids[i];\n                require(balances[id][account] >= amounts[i], \"ERC1155: burn amount exceeds balance\");\n                balances[id][account] -= amounts[i];\n            }\n        }\n\n        emit TransferBatch(sender, account, address(0), ids, amounts);\n    }\n\n    function _setApprovalForAll(address operator, bool status) internal virtual {\n        address sender = _msgSender();\n        require(sender != operator, \"ERC1155: setting approval status for self\");\n        ERC1155BaseStorage.layout().operatorApprovals[sender][operator] = status;\n        emit ApprovalForAll(sender, operator, status);\n    }\n\n    /**\n     * @notice transfer tokens between given addresses\n     * @dev ERC1155Receiver implementation is not checked\n     * @param operator executor of transfer\n     * @param sender sender of tokens\n     * @param recipient receiver of tokens\n     * @param id token ID\n     * @param amount quantity of tokens to transfer\n     * @param data data payload\n     */\n    function _transfer(\n        address operator,\n        address sender,\n        address recipient,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal virtual {\n        require(recipient != address(0), \"ERC1155: transfer to the zero address\");\n\n        _beforeTokenTransfer(operator, sender, recipient, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\n\n        unchecked {\n            uint256 senderBalance = balances[id][sender];\n            require(senderBalance >= amount, \"ERC1155: insufficient balances for transfer\");\n            balances[id][sender] = senderBalance - amount;\n        }\n\n        balances[id][recipient] += amount;\n\n        emit TransferSingle(operator, sender, recipient, id, amount);\n    }\n\n    /**\n     * @notice transfer tokens between given addresses\n     * @param operator executor of transfer\n     * @param sender sender of tokens\n     * @param recipient receiver of tokens\n     * @param id token ID\n     * @param amount quantity of tokens to transfer\n     * @param data data payload\n     */\n    function _safeTransfer(\n        address operator,\n        address sender,\n        address recipient,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal virtual {\n        _transfer(operator, sender, recipient, id, amount, data);\n\n        _doSafeTransferAcceptanceCheck(operator, sender, recipient, id, amount, data);\n    }\n\n    /**\n     * @notice transfer batch of tokens between given addresses\n     * @dev ERC1155Receiver implementation is not checked\n     * @param operator executor of transfer\n     * @param sender sender of tokens\n     * @param recipient receiver of tokens\n     * @param ids token IDs\n     * @param amounts quantities of tokens to transfer\n     * @param data data payload\n     */\n    function _transferBatch(\n        address operator,\n        address sender,\n        address recipient,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(recipient != address(0), \"ERC1155: transfer to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\n\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\n\n        for (uint256 i; i < ids.length; ) {\n            uint256 token = ids[i];\n            uint256 amount = amounts[i];\n\n            unchecked {\n                uint256 senderBalance = balances[token][sender];\n\n                require(senderBalance >= amount, \"ERC1155: insufficient balances for transfer\");\n\n                balances[token][sender] = senderBalance - amount;\n\n                i++;\n            }\n\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\n            balances[token][recipient] += amount;\n        }\n\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\n    }\n\n    /**\n     * @notice transfer batch of tokens between given addresses\n     * @param operator executor of transfer\n     * @param sender sender of tokens\n     * @param recipient receiver of tokens\n     * @param ids token IDs\n     * @param amounts quantities of tokens to transfer\n     * @param data data payload\n     */\n    function _safeTransferBatch(\n        address operator,\n        address sender,\n        address recipient,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, sender, recipient, ids, amounts, data);\n    }\n\n    /**\n     * @notice wrap given element in array of length 1\n     * @param element element to wrap\n     * @return singleton array\n     */\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n        return array;\n    }\n\n    /**\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\n     * @param operator executor of transfer\n     * @param from sender of tokens\n     * @param to receiver of tokens\n     * @param id token ID\n     * @param amount quantity of tokens to transfer\n     * @param data data payload\n     */\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                require(\n                    response == IERC1155Receiver.onERC1155Received.selector,\n                    \"ERC1155: ERC1155Receiver rejected tokens\"\n                );\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    /**\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\n     * @param operator executor of transfer\n     * @param from sender of tokens\n     * @param to receiver of tokens\n     * @param ids token IDs\n     * @param amounts quantities of tokens to transfer\n     * @param data data payload\n     */\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                require(\n                    response == IERC1155Receiver.onERC1155BatchReceived.selector,\n                    \"ERC1155: ERC1155Receiver rejected tokens\"\n                );\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    /**\n     * @notice ERC1155 hook, called before all transfers including mint and burn\n     * @dev function should be overridden and new implementation must call super\n     * @dev called for both single and batch transfers\n     * @param operator executor of transfer\n     * @param from sender of tokens\n     * @param to receiver of tokens\n     * @param ids token IDs\n     * @param amounts quantities of tokens to transfer\n     * @param data data payload\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n}\n"
    },
    "operator-filter-registry/src/DefaultOperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\n\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n */\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\n\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\n}\n"
    },
    "src/access/ownable/OwnableInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"./OwnableStorage.sol\";\nimport \"./IERC173Events.sol\";\n\nabstract contract OwnableInternal is IERC173Events, Context {\n    using OwnableStorage for OwnableStorage.Layout;\n\n    modifier onlyOwner() {\n        require(_msgSender() == _owner(), \"Ownable: sender must be owner\");\n        _;\n    }\n\n    function _owner() internal view virtual returns (address) {\n        return OwnableStorage.layout().owner;\n    }\n\n    function _transferOwnership(address account) internal virtual {\n        OwnableStorage.layout().setOwner(account);\n        emit OwnershipTransferred(_msgSender(), account);\n    }\n}\n"
    },
    "src/token/common/royalty/RoyaltyEnforcementStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary RoyaltyEnforcementStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.RoyaltyEnforcement\");\n\n    struct Layout {\n        bool enforceRoyalties;\n    }\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/token/common/royalty/IRoyaltyEnforcement.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Shows if royalties are enforced by blocklisting marketplaces with optional royalty.\n */\ninterface IRoyaltyEnforcement {\n    function royaltiesEnforced() external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "src/access/ownable/OwnableStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary OwnableStorage {\n    struct Layout {\n        address owner;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.Ownable\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function setOwner(Layout storage l, address owner) internal {\n        l.owner = owner;\n    }\n}\n"
    },
    "src/access/ownable/IERC173Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @title Contract ownership standard interface (event only)\n * @dev see https://eips.ethereum.org/EIPS/eip-173\n */\ninterface IERC173Events {\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/token/ERC1155/IERC1155Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @title Partial ERC1155 interface needed by internal functions\n */\ninterface IERC1155Events {\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n}\n"
    },
    "src/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title ERC1155 transfer receiver interface\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "src/token/ERC1155/base/ERC1155BaseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary ERC1155BaseStorage {\n    struct Layout {\n        mapping(uint256 => mapping(address => uint256)) balances;\n        mapping(address => mapping(address => bool)) operatorApprovals;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.ERC1155Base\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "operator-filter-registry/src/OperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\n\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n */\nabstract contract OperatorFilterer {\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\n\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
    },
    "operator-filter-registry/src/IOperatorFilterRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function unregister(address addr) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
    },
    "src/token/ERC1155/facets/minting/ERC1155MintableRoleBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../common/Errors.sol\";\nimport \"../../../../access/roles/AccessControlInternal.sol\";\nimport \"../../extensions/mintable/IERC1155MintableExtension.sol\";\nimport \"../../base/ERC1155BaseInternal.sol\";\nimport \"./IERC1155MintableRoleBased.sol\";\n\n/**\n * @title ERC1155 - Mint as role\n * @notice Allow minting for grantees of MINTER_ROLE.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:required-dependencies IERC1155MintableExtension\n * @custom:provides-interfaces IERC1155MintableRoleBased\n */\ncontract ERC1155MintableRoleBased is IERC1155MintableRoleBased, AccessControlInternal {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    /**\n     * @inheritdoc IERC1155MintableRoleBased\n     */\n    function mintByRole(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual onlyRole(MINTER_ROLE) {\n        IERC1155MintableExtension(address(this)).mintByFacet(to, id, amount, data);\n    }\n\n    /**\n     * @inheritdoc IERC1155MintableRoleBased\n     */\n    function mintByRole(\n        address[] calldata tos,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes[] calldata datas\n    ) public virtual onlyRole(MINTER_ROLE) {\n        IERC1155MintableExtension(address(this)).mintByFacet(tos, ids, amounts, datas);\n    }\n}\n"
    },
    "src/access/roles/AccessControlInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./AccessControlStorage.sol\";\nimport \"./IAccessControlEvents.sol\";\n\nabstract contract AccessControlInternal is Context, IAccessControlEvents {\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function _hasRole(bytes32 role, address account) internal view virtual returns (bool) {\n        return AccessControlStorage.layout().roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!_hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function _getRoleAdmin(bytes32 role) internal view virtual returns (bytes32) {\n        return AccessControlStorage.layout().roles[role].adminRole;\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _renounceRole(bytes32 role, address account) internal virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = _getRoleAdmin(role);\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!_hasRole(role, account)) {\n            AccessControlStorage.layout().roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (_hasRole(role, account)) {\n            AccessControlStorage.layout().roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "src/token/ERC1155/extensions/mintable/IERC1155MintableExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC1155} that allows other facets from the diamond to mint tokens.\n */\ninterface IERC1155MintableExtension {\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must be diamond itself (other facets).\n     */\n    function mintByFacet(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function mintByFacet(\n        address[] calldata tos,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes[] calldata datas\n    ) external;\n}\n"
    },
    "src/token/ERC1155/facets/minting/IERC1155MintableRoleBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC1155} that allows a specific role to mint tokens.\n */\ninterface IERC1155MintableRoleBased {\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have MINTER_ROLE.\n     */\n    function mintByRole(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function mintByRole(\n        address[] calldata tos,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes[] calldata data\n    ) external;\n}\n"
    },
    "src/access/roles/AccessControlStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary AccessControlStorage {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    struct Layout {\n        mapping(bytes32 => RoleData) roles;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.AccessControl\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/access/roles/IAccessControlEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlEvents {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n}\n"
    },
    "src/token/ERC1155/facets/minting/ERC1155MintableRoleBasedERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../metatx/ERC2771ContextInternal.sol\";\nimport \"./ERC1155MintableRoleBased.sol\";\n\n/**\n * @title ERC1155 - Mint as role - with meta transactions\n * @notice Allow minting for grantees of MINTER_ROLE with meta-transactions supported via ERC2771.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:required-dependencies IERC1155MintableExtension\n * @custom:provides-interfaces IERC1155MintableRoleBased\n */\ncontract ERC1155MintableRoleBasedERC2771 is ERC1155MintableRoleBased, ERC2771ContextInternal {\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\n        return ERC2771ContextInternal._msgSender();\n    }\n\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\n        return ERC2771ContextInternal._msgData();\n    }\n}\n"
    },
    "src/metatx/ERC2771ContextInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"./ERC2771ContextStorage.sol\";\n\nabstract contract ERC2771ContextInternal is Context {\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (_isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (_isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "src/metatx/ERC2771ContextStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary ERC2771ContextStorage {\n    struct Layout {\n        address trustedForwarder;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.ERC2771Context\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/token/ERC1155/extensions/supply/ERC1155SupplyExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"./ERC1155SupplyInternal.sol\";\nimport \"./IERC1155SupplyExtension.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n */\nabstract contract ERC1155SupplyExtension is IERC1155SupplyExtension, ERC1155SupplyInternal {\n    /**\n     * @inheritdoc IERC1155SupplyExtension\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply(id);\n    }\n\n    /**\n     * @inheritdoc IERC1155SupplyExtension\n     */\n    function maxSupply(uint256 id) public view virtual returns (uint256) {\n        return _maxSupply(id);\n    }\n\n    /**\n     * @inheritdoc IERC1155SupplyExtension\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return _exists(id);\n    }\n}\n"
    },
    "src/token/ERC1155/extensions/supply/ERC1155SupplyInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../base/ERC1155BaseInternal.sol\";\nimport \"./ERC1155SupplyStorage.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n */\nabstract contract ERC1155SupplyInternal is ERC1155BaseInternal {\n    using ERC1155SupplyStorage for ERC1155SupplyStorage.Layout;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function _totalSupply(uint256 id) internal view virtual returns (uint256) {\n        return ERC1155SupplyStorage.layout().totalSupply[id];\n    }\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function _maxSupply(uint256 id) internal view virtual returns (uint256) {\n        return ERC1155SupplyStorage.layout().maxSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function _exists(uint256 id) internal view virtual returns (bool) {\n        return ERC1155SupplyStorage.layout().totalSupply[id] > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            mapping(uint256 => uint256) storage totalSupply = ERC1155SupplyStorage.layout().totalSupply;\n            mapping(uint256 => uint256) storage maxSupply = ERC1155SupplyStorage.layout().maxSupply;\n\n            for (uint256 i = 0; i < ids.length; ++i) {\n                totalSupply[ids[i]] += amounts[i];\n\n                require(totalSupply[ids[i]] <= maxSupply[ids[i]], \"SUPPLY_EXCEED_MAX\");\n            }\n        }\n\n        if (to == address(0)) {\n            mapping(uint256 => uint256) storage totalSupply = ERC1155SupplyStorage.layout().totalSupply;\n\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n}\n"
    },
    "src/token/ERC1155/extensions/supply/IERC1155SupplyExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC1155} that tracks supply and defines a max supply cap per token ID.\n */\ninterface IERC1155SupplyExtension {\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    /**\n     * @dev Maximum amount of tokens possible to exist for a given id.\n     */\n    function maxSupply(uint256 id) external view returns (uint256);\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) external view returns (bool);\n}\n"
    },
    "src/token/ERC1155/extensions/supply/ERC1155SupplyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary ERC1155SupplyStorage {\n    struct Layout {\n        mapping(uint256 => uint256) totalSupply;\n        mapping(uint256 => uint256) maxSupply;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.ERC1155Supply\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/token/ERC1155/facets/supply/ERC1155SupplyOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../extensions/supply/ERC1155SupplyInternal.sol\";\nimport \"../../extensions/supply/ERC1155SupplyStorage.sol\";\nimport \"../../../../access/ownable/OwnableInternal.sol\";\nimport \"./ERC1155SupplyAdminStorage.sol\";\nimport \"./IERC1155SupplyAdmin.sol\";\n\n/**\n * @title ERC1155 - Supply - Admin - Ownable\n * @notice Allows owner of a EIP-1155 contract to change max supply of token IDs.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:peer-dependencies IERC1155SupplyExtension\n * @custom:provides-interfaces IERC1155SupplyAdmin\n */\ncontract ERC1155SupplyOwnable is IERC1155SupplyAdmin, ERC1155SupplyInternal, OwnableInternal {\n    using ERC1155SupplyStorage for ERC1155SupplyStorage.Layout;\n    using ERC1155SupplyAdminStorage for ERC1155SupplyAdminStorage.Layout;\n\n    function setMaxSupply(uint256 tokenId, uint256 newValue) public virtual onlyOwner {\n        if (ERC1155SupplyAdminStorage.layout().maxSupplyFrozen[tokenId]) {\n            revert ErrMaxSupplyFrozen();\n        }\n\n        _setMaxSupply(tokenId, newValue);\n    }\n\n    function setMaxSupplyBatch(uint256[] calldata tokenIds, uint256[] calldata newValues) public virtual onlyOwner {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            if (ERC1155SupplyAdminStorage.layout().maxSupplyFrozen[tokenIds[i]]) {\n                revert ErrMaxSupplyFrozen();\n            }\n        }\n\n        _setMaxSupplyBatch(tokenIds, newValues);\n    }\n\n    function freezeMaxSupply(uint256 tokenId) public virtual onlyOwner {\n        ERC1155SupplyAdminStorage.layout().maxSupplyFrozen[tokenId] = true;\n    }\n\n    function freezeMaxSupplyBatch(uint256[] calldata tokenIds) public virtual onlyOwner {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            ERC1155SupplyAdminStorage.layout().maxSupplyFrozen[tokenIds[i]] = true;\n        }\n    }\n\n    /**\n     * @dev Seta maximum amount of tokens possible to exist for a given token ID.\n     */\n    function _setMaxSupply(uint256 tokenId, uint256 newValue) internal {\n        ERC1155SupplyStorage.layout().maxSupply[tokenId] = newValue;\n    }\n\n    /**\n     * @dev Sets maximum amount of tokens possible to exist for multiple token IDs.\n     */\n    function _setMaxSupplyBatch(uint256[] calldata tokenIds, uint256[] calldata newValues) internal {\n        mapping(uint256 => uint256) storage l = ERC1155SupplyStorage.layout().maxSupply;\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            l[tokenIds[i]] = newValues[i];\n        }\n    }\n}\n"
    },
    "src/token/ERC1155/facets/supply/ERC1155SupplyAdminStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary ERC1155SupplyAdminStorage {\n    struct Layout {\n        mapping(uint256 => bool) maxSupplyFrozen;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.ERC1155SupplyAdmin\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/token/ERC1155/facets/supply/IERC1155SupplyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface IERC1155SupplyAdmin {\n    error ErrMaxSupplyFrozen();\n\n    function setMaxSupply(uint256 tokenId, uint256 newValue) external;\n\n    function setMaxSupplyBatch(uint256[] calldata tokenIds, uint256[] calldata newValues) external;\n\n    function freezeMaxSupply(uint256 tokenId) external;\n\n    function freezeMaxSupplyBatch(uint256[] calldata tokenIds) external;\n}\n"
    },
    "src/token/ERC1155/ERC1155WithERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"./base/ERC1155BaseERC2771.sol\";\nimport \"./extensions/supply/ERC1155SupplyExtension.sol\";\nimport \"./extensions/lockable/ERC1155LockableExtension.sol\";\nimport \"./extensions/mintable/ERC1155MintableExtension.sol\";\nimport \"./extensions/burnable/ERC1155BurnableExtension.sol\";\nimport \"./extensions/royalty/ERC1155RoyaltyEnforcementExtension.sol\";\n\n/**\n * @title ERC1155 - with meta-transactions\n * @notice Standard EIP-1155 with ability to accept meta transactions (mainly transfer or burn methods).\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:provides-interfaces IERC1155 IERC1155SupplyExtension IERC1155MintableExtension IERC1155BurnableExtension IERC1155LockableExtension IRoyaltyEnforcement\n */\ncontract ERC1155WithERC2771 is\n    ERC1155BaseERC2771,\n    ERC1155SupplyExtension,\n    ERC1155MintableExtension,\n    ERC1155BurnableExtension,\n    ERC1155LockableExtension,\n    ERC1155RoyaltyEnforcementExtension\n{\n    function _msgSender() internal view virtual override(Context, ERC1155BaseERC2771) returns (address) {\n        return ERC1155BaseERC2771._msgSender();\n    }\n\n    function _msgData() internal view virtual override(Context, ERC1155BaseERC2771) returns (bytes calldata) {\n        return ERC1155BaseERC2771._msgData();\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155BaseInternal, ERC1155SupplyInternal, ERC1155LockableInternal) {\n        ERC1155BaseInternal._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n\n    function _setApprovalForAll(address operator, bool approved)\n        internal\n        virtual\n        override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension)\n    {\n        ERC1155RoyaltyEnforcementExtension._setApprovalForAll(operator, approved);\n    }\n\n    function _safeTransferBatch(\n        address operator,\n        address sender,\n        address recipient,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\n        ERC1155RoyaltyEnforcementExtension._safeTransferBatch(operator, sender, recipient, ids, amounts, data);\n    }\n\n    function _transferBatch(\n        address operator,\n        address sender,\n        address recipient,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\n        ERC1155RoyaltyEnforcementExtension._transferBatch(operator, sender, recipient, ids, amounts, data);\n    }\n\n    function _safeTransfer(\n        address operator,\n        address sender,\n        address recipient,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\n        ERC1155RoyaltyEnforcementExtension._safeTransfer(operator, sender, recipient, id, amount, data);\n    }\n\n    function _transfer(\n        address operator,\n        address sender,\n        address recipient,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\n        ERC1155RoyaltyEnforcementExtension._transfer(operator, sender, recipient, id, amount, data);\n    }\n}\n"
    },
    "src/token/ERC1155/base/ERC1155BaseERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../metatx/ERC2771ContextInternal.sol\";\n\nimport \"./ERC1155Base.sol\";\n\n/**\n * @title Base ERC1155 contract with meta-transactions support (via ERC2771).\n */\nabstract contract ERC1155BaseERC2771 is ERC1155Base, ERC2771ContextInternal {\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\n        return ERC2771ContextInternal._msgSender();\n    }\n\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\n        return ERC2771ContextInternal._msgData();\n    }\n}\n"
    },
    "src/token/ERC1155/extensions/lockable/ERC1155LockableExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../common/Errors.sol\";\nimport \"./ERC1155LockableInternal.sol\";\nimport \"./IERC1155LockableExtension.sol\";\n\nabstract contract ERC1155LockableExtension is IERC1155LockableExtension, ERC1155LockableInternal {\n    function locked(address account, uint256 tokenId) public view virtual returns (uint256) {\n        return super._locked(account, tokenId);\n    }\n\n    function locked(address account, uint256[] calldata ticketTokenIds) public view virtual returns (uint256[] memory) {\n        uint256[] memory amounts = new uint256[](ticketTokenIds.length);\n\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\n            amounts[i] = _locked(account, ticketTokenIds[i]);\n        }\n\n        return amounts;\n    }\n\n    /**\n     * @inheritdoc IERC1155LockableExtension\n     */\n    function lockByFacet(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) public virtual override {\n        if (address(this) != msg.sender) {\n            revert ErrSenderIsNotSelf();\n        }\n\n        _lock(account, id, amount);\n    }\n\n    /**\n     * @inheritdoc IERC1155LockableExtension\n     */\n    function lockByFacet(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) public virtual override {\n        if (address(this) != msg.sender) {\n            revert ErrSenderIsNotSelf();\n        }\n\n        require(accounts.length == ids.length && accounts.length == amounts.length, \"INVALID_ARRAY_LENGTH\");\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _lock(accounts[i], ids[i], amounts[i]);\n        }\n    }\n\n    /**\n     * @inheritdoc IERC1155LockableExtension\n     */\n    function unlockByFacet(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) public virtual override {\n        if (address(this) != msg.sender) {\n            revert ErrSenderIsNotSelf();\n        }\n\n        _unlock(account, id, amount);\n    }\n\n    /**\n     * @inheritdoc IERC1155LockableExtension\n     */\n    function unlockByFacet(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) public virtual override {\n        if (address(this) != msg.sender) {\n            revert ErrSenderIsNotSelf();\n        }\n\n        require(accounts.length == ids.length && accounts.length == amounts.length, \"INVALID_ARRAY_LENGTH\");\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _unlock(accounts[i], ids[i], amounts[i]);\n        }\n    }\n}\n"
    },
    "src/token/ERC1155/extensions/mintable/ERC1155MintableExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../common/Errors.sol\";\nimport \"../../base/ERC1155BaseInternal.sol\";\nimport \"./IERC1155MintableExtension.sol\";\n\n/**\n * @title Extension of {ERC1155} that allows other facets of the diamond to mint based on arbitrary logic.\n */\nabstract contract ERC1155MintableExtension is IERC1155MintableExtension, ERC1155BaseInternal {\n    /**\n     * @inheritdoc IERC1155MintableExtension\n     */\n    function mintByFacet(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual {\n        if (address(this) != msg.sender) {\n            revert ErrSenderIsNotSelf();\n        }\n\n        _mint(to, id, amount, data);\n    }\n\n    /**\n     * @inheritdoc IERC1155MintableExtension\n     */\n    function mintByFacet(\n        address[] calldata tos,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes[] calldata datas\n    ) public virtual {\n        if (address(this) != msg.sender) {\n            revert ErrSenderIsNotSelf();\n        }\n\n        _mintBatch(tos, ids, amounts, datas);\n    }\n}\n"
    },
    "src/token/ERC1155/extensions/burnable/ERC1155BurnableExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../common/Errors.sol\";\nimport \"../../IERC1155.sol\";\nimport \"../../base/ERC1155BaseInternal.sol\";\nimport \"./IERC1155BurnableExtension.sol\";\n\n/**\n * @title Extension of {ERC1155} that allows users or approved operators to burn tokens.\n */\nabstract contract ERC1155BurnableExtension is IERC1155BurnableExtension, ERC1155BaseInternal {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || IERC1155(address(this)).isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        require(\n            account == _msgSender() || IERC1155(address(this)).isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n\n    function burnByFacet(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) public virtual {\n        if (address(this) != msg.sender) {\n            revert ErrSenderIsNotSelf();\n        }\n\n        _burn(account, id, amount);\n    }\n\n    function burnBatchByFacet(\n        address account,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) public virtual {\n        if (address(this) != msg.sender) {\n            revert ErrSenderIsNotSelf();\n        }\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "src/token/ERC1155/base/ERC1155Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../IERC1155.sol\";\nimport \"../IERC1155Receiver.sol\";\nimport \"./ERC1155BaseInternal.sol\";\n\n/**\n * @title Base ERC1155 contract\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\n */\ncontract ERC1155Base is IERC1155, ERC1155BaseInternal {\n    /**\n     * @inheritdoc IERC1155\n     */\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        return _balanceOf(account, id);\n    }\n\n    /**\n     * @inheritdoc IERC1155\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        unchecked {\n            for (uint256 i; i < accounts.length; i++) {\n                require(accounts[i] != address(0), \"ERC1155: batch balance query for the zero address\");\n                batchBalances[i] = balances[ids[i]][accounts[i]];\n            }\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @inheritdoc IERC1155\n     */\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\n    }\n\n    /**\n     * @inheritdoc IERC1155\n     */\n    function setApprovalForAll(address operator, bool status) public virtual {\n        super._setApprovalForAll(operator, status);\n    }\n\n    /**\n     * @inheritdoc IERC1155\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual {\n        address sender = _msgSender();\n        require(from == sender || isApprovedForAll(from, sender), \"ERC1155: caller is not owner nor approved\");\n        _safeTransfer(sender, from, to, id, amount, data);\n    }\n\n    /**\n     * @inheritdoc IERC1155\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual {\n        address sender = _msgSender();\n        require(from == sender || isApprovedForAll(from, sender), \"ERC1155: caller is not owner nor approved\");\n        _safeTransferBatch(sender, from, to, ids, amounts, data);\n    }\n}\n"
    },
    "src/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"./IERC1155Events.sol\";\n\n/**\n * @title ERC1155 interface\n * @dev see https://github.com/ethereum/EIPs/issues/1155\n */\ninterface IERC1155 is IERC1155Events {\n    /**\n     * @notice query the balance of given token held by given address\n     * @param account address to query\n     * @param id token to query\n     * @return token balance\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @notice query the balances of given tokens held by given addresses\n     * @param accounts addresss to query\n     * @param ids tokens to query\n     * @return token balances\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @notice query approval status of given operator with respect to given address\n     * @param account address to query for approval granted\n     * @param operator address to query for approval received\n     * @return whether operator is approved to spend tokens held by account\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\n     * @param operator address whose approval status to update\n     * @param status whether operator should be considered approved\n     */\n    function setApprovalForAll(address operator, bool status) external;\n\n    /**\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\n     * @param from sender of tokens\n     * @param to receiver of tokens\n     * @param id token ID\n     * @param amount quantity of tokens to transfer\n     * @param data data payload\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\n     * @param from sender of tokens\n     * @param to receiver of tokens\n     * @param ids list of token IDs\n     * @param amounts list of quantities of tokens to transfer\n     * @param data data payload\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/token/ERC1155/extensions/lockable/ERC1155LockableInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../base/ERC1155BaseInternal.sol\";\nimport \"./ERC1155LockableStorage.sol\";\n\nabstract contract ERC1155LockableInternal is ERC1155BaseInternal {\n    using ERC1155LockableStorage for ERC1155LockableStorage.Layout;\n\n    function _locked(address account, uint256 tokenId) internal view virtual returns (uint256) {\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\n\n        return locks[tokenId];\n    }\n\n    /* INTERNAL */\n\n    function _lock(\n        address account,\n        uint256 tokenId,\n        uint256 amount\n    ) internal virtual {\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\n\n        require(_balanceOf(account, tokenId) - locks[tokenId] >= amount, \"NOT_ENOUGH_BALANCE\");\n\n        locks[tokenId] += amount;\n    }\n\n    function _unlock(\n        address account,\n        uint256 tokenId,\n        uint256 amount\n    ) internal virtual {\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\n\n        require(locks[tokenId] >= amount, \"NOT_ENOUGH_LOCKED\");\n\n        locks[tokenId] -= amount;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        if (from != address(0)) {\n            for (uint256 i = 0; i < ids.length; i++) {\n                require(\n                    _balanceOf(from, ids[i]) - ERC1155LockableStorage.layout().lockedAmount[from][ids[i]] >= amounts[i],\n                    \"LOCKED\"\n                );\n            }\n        }\n\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"
    },
    "src/token/ERC1155/extensions/lockable/IERC1155LockableExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC1155} that allows other facets from the diamond to lock the tokens.\n */\ninterface IERC1155LockableExtension {\n    /**\n     * @dev Locks `amount` of tokens of `account`, of token type `id`.\n     *\n     * Requirements:\n     *\n     * - the caller must be diamond itself (other facets).\n     */\n    function lockByFacet(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    function lockByFacet(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external;\n\n    /**\n     * @dev Un-locks `amount` of tokens of `account`, of token type `id`.\n     *\n     * Requirements:\n     *\n     * - the caller must be diamond itself (other facets).\n     */\n    function unlockByFacet(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    function unlockByFacet(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external;\n}\n"
    },
    "src/token/ERC1155/extensions/lockable/ERC1155LockableStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary ERC1155LockableStorage {\n    struct Layout {\n        mapping(address => mapping(uint256 => uint256)) lockedAmount;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.ERC1155Lockable\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/token/ERC1155/extensions/burnable/IERC1155BurnableExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC1155} that allows holders or approved operators to burn tokens.\n */\ninterface IERC1155BurnableExtension {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) external;\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) external;\n\n    function burnByFacet(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    function burnBatchByFacet(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) external;\n}\n"
    },
    "src/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"./base/ERC1155Base.sol\";\nimport \"./extensions/supply/ERC1155SupplyExtension.sol\";\nimport \"./extensions/lockable/ERC1155LockableExtension.sol\";\nimport \"./extensions/mintable/ERC1155MintableExtension.sol\";\nimport \"./extensions/burnable/ERC1155BurnableExtension.sol\";\nimport \"./extensions/royalty/ERC1155RoyaltyEnforcementExtension.sol\";\n\n/**\n * @title ERC1155 - Standard\n * @notice Standard EIP-1155 NFTs with core capabilities of Mintable, Burnable and Lockable.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:provides-interfaces IERC1155 IERC1155SupplyExtension IERC1155MintableExtension IERC1155BurnableExtension IERC1155LockableExtension IRoyaltyEnforcement\n */\ncontract ERC1155 is\n    ERC1155Base,\n    ERC1155SupplyExtension,\n    ERC1155MintableExtension,\n    ERC1155BurnableExtension,\n    ERC1155LockableExtension,\n    ERC1155RoyaltyEnforcementExtension\n{\n    /**\n     * @notice inheritdoc IERC1155Metadata\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155BaseInternal, ERC1155SupplyInternal, ERC1155LockableInternal) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n\n    function _setApprovalForAll(address operator, bool approved)\n        internal\n        virtual\n        override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension)\n    {\n        ERC1155RoyaltyEnforcementExtension._setApprovalForAll(operator, approved);\n    }\n\n    function _safeTransferBatch(\n        address operator,\n        address sender,\n        address recipient,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\n        ERC1155RoyaltyEnforcementExtension._safeTransferBatch(operator, sender, recipient, ids, amounts, data);\n    }\n\n    function _transferBatch(\n        address operator,\n        address sender,\n        address recipient,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\n        ERC1155RoyaltyEnforcementExtension._transferBatch(operator, sender, recipient, ids, amounts, data);\n    }\n\n    function _safeTransfer(\n        address operator,\n        address sender,\n        address recipient,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\n        ERC1155RoyaltyEnforcementExtension._safeTransfer(operator, sender, recipient, id, amount, data);\n    }\n\n    function _transfer(\n        address operator,\n        address sender,\n        address recipient,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal virtual override(ERC1155BaseInternal, ERC1155RoyaltyEnforcementExtension) {\n        ERC1155RoyaltyEnforcementExtension._transfer(operator, sender, recipient, id, amount, data);\n    }\n}\n"
    },
    "src/token/ERC1155/facets/locking/ERC1155LockableRoleBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../common/Errors.sol\";\nimport \"../../../../access/roles/AccessControlInternal.sol\";\nimport \"../../extensions/lockable/IERC1155LockableExtension.sol\";\nimport \"../../base/ERC1155BaseInternal.sol\";\nimport \"./IERC1155LockableRoleBased.sol\";\n\n/**\n * @title ERC1155 - Lock as role\n * @notice Allow locking tokens by any sender who has the LOCKER_ROLE.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:required-dependencies IERC1155LockableExtension\n * @custom:provides-interfaces IERC1155LockableRoleBased\n */\ncontract ERC1155LockableRoleBased is IERC1155LockableRoleBased, AccessControlInternal {\n    bytes32 public constant LOCKER_ROLE = keccak256(\"LOCKER_ROLE\");\n\n    /**\n     * @inheritdoc IERC1155LockableRoleBased\n     */\n    function lockByRole(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external virtual onlyRole(LOCKER_ROLE) {\n        IERC1155LockableExtension(address(this)).lockByFacet(account, id, amount);\n    }\n\n    /**\n     * @inheritdoc IERC1155LockableRoleBased\n     */\n    function lockByRole(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external virtual onlyRole(LOCKER_ROLE) {\n        IERC1155LockableExtension(address(this)).lockByFacet(accounts, ids, amounts);\n    }\n\n    /**\n     * @inheritdoc IERC1155LockableRoleBased\n     */\n    function unlockByRole(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external virtual onlyRole(LOCKER_ROLE) {\n        IERC1155LockableExtension(address(this)).unlockByFacet(account, id, amount);\n    }\n\n    /**\n     * @inheritdoc IERC1155LockableRoleBased\n     */\n    function unlockByRole(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external virtual onlyRole(LOCKER_ROLE) {\n        IERC1155LockableExtension(address(this)).unlockByFacet(accounts, ids, amounts);\n    }\n}\n"
    },
    "src/token/ERC1155/facets/locking/IERC1155LockableRoleBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC1155} that allows grantee of LOCKER_ROLE to lock tokens.\n */\ninterface IERC1155LockableRoleBased {\n    function lockByRole(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    function lockByRole(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external;\n\n    function unlockByRole(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    function unlockByRole(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external;\n}\n"
    },
    "src/token/ERC1155/facets/locking/ERC1155LockableOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../common/Errors.sol\";\nimport \"../../../../access/ownable/OwnableInternal.sol\";\nimport \"../../extensions/lockable/IERC1155LockableExtension.sol\";\nimport \"../../base/ERC1155BaseInternal.sol\";\nimport \"./IERC1155LockableOwnable.sol\";\n\n/**\n * @title ERC1155 - Lock as owner\n * @notice Allow locking tokens as the contract owner.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:required-dependencies IERC1155LockableExtension\n * @custom:provides-interfaces IERC1155LockableOwnable\n */\ncontract ERC1155LockableOwnable is IERC1155LockableOwnable, OwnableInternal {\n    /**\n     * @inheritdoc IERC1155LockableOwnable\n     */\n    function lockByOwner(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) public virtual onlyOwner {\n        IERC1155LockableExtension(address(this)).lockByFacet(account, id, amount);\n    }\n\n    /**\n     * @inheritdoc IERC1155LockableOwnable\n     */\n    function lockByOwner(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) public virtual onlyOwner {\n        IERC1155LockableExtension(address(this)).lockByFacet(accounts, ids, amounts);\n    }\n\n    /**\n     * @inheritdoc IERC1155LockableOwnable\n     */\n    function unlockByOwner(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) public virtual onlyOwner {\n        IERC1155LockableExtension(address(this)).unlockByFacet(account, id, amount);\n    }\n\n    /**\n     * @inheritdoc IERC1155LockableOwnable\n     */\n    function unlockByOwner(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) public virtual onlyOwner {\n        IERC1155LockableExtension(address(this)).unlockByFacet(accounts, ids, amounts);\n    }\n}\n"
    },
    "src/token/ERC1155/facets/locking/IERC1155LockableOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC1155} that allows diamond owner to lock tokens.\n */\ninterface IERC1155LockableOwnable {\n    function lockByOwner(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    function lockByOwner(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external;\n\n    function unlockByOwner(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external;\n\n    function unlockByOwner(\n        address[] memory accounts,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) external;\n}\n"
    },
    "src/token/ERC1155/facets/minting/ERC1155MintableOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../common/Errors.sol\";\nimport \"../../../../access/ownable/OwnableInternal.sol\";\nimport \"../../extensions/mintable/IERC1155MintableExtension.sol\";\nimport \"../../base/ERC1155BaseInternal.sol\";\nimport \"./IERC1155MintableOwnable.sol\";\n\n/**\n * @title ERC1155 - Mint as owner\n * @notice Allow minting as contract owner with no restrictions.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:required-dependencies IERC1155MintableExtension\n * @custom:provides-interfaces IERC1155MintableOwnable\n */\ncontract ERC1155MintableOwnable is IERC1155MintableOwnable, OwnableInternal {\n    /**\n     * @inheritdoc IERC1155MintableOwnable\n     */\n    function mintByOwner(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual onlyOwner {\n        IERC1155MintableExtension(address(this)).mintByFacet(to, id, amount, data);\n    }\n\n    /**\n     * @inheritdoc IERC1155MintableOwnable\n     */\n    function mintByOwner(\n        address[] calldata tos,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes[] calldata datas\n    ) public virtual onlyOwner {\n        IERC1155MintableExtension(address(this)).mintByFacet(tos, ids, amounts, datas);\n    }\n}\n"
    },
    "src/token/ERC1155/facets/minting/IERC1155MintableOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC1155} that allows diamond owner to mint tokens.\n */\ninterface IERC1155MintableOwnable {\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must be diamond owner.\n     */\n    function mintByOwner(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function mintByOwner(\n        address[] calldata tos,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes[] calldata datas\n    ) external;\n}\n"
    },
    "src/token/ERC1155/facets/minting/ERC1155MintableOwnableERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../metatx/ERC2771ContextInternal.sol\";\nimport \"./ERC1155MintableOwnable.sol\";\n\n/**\n * @title ERC1155 - Mint as owner - with meta transactions\n * @notice Allow minting as owner via ERC2771 Context meta transactions (signed by the owner private key)\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:required-dependencies IERC1155MintableExtension\n * @custom:provides-interfaces IERC1155MintableOwnable\n */\ncontract ERC1155MintableOwnableERC2771 is ERC1155MintableOwnable, ERC2771ContextInternal {\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\n        return ERC2771ContextInternal._msgSender();\n    }\n\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\n        return ERC2771ContextInternal._msgData();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1337
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}