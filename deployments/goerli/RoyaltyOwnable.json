{
  "address": "0xC9DFaCC52F42d6a5A2C8221434DB48273A78960b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRoyaltyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "TokenRoyaltySet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IRoyaltyInternal.TokenRoyalty",
          "name": "royalty",
          "type": "tuple"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IRoyaltyInternal.TokenRoyaltyConfig[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "setTokenRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3fd21f46fc1245970429bf01b3ccb2ccf285bf10254ae8f8ab0bfb6717cb7518",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xC9DFaCC52F42d6a5A2C8221434DB48273A78960b",
    "transactionIndex": 36,
    "gasUsed": "539098",
    "logsBloom": "0x
    "blockHash": "0x1652bc59d3ffb006ea4379264524ac7f7ed706f13b4db8be87001608f1dd2cee",
    "transactionHash": "0x3fd21f46fc1245970429bf01b3ccb2ccf285bf10254ae8f8ab0bfb6717cb7518",
    "logs": [],
    "blockNumber": 7751239,
    "cumulativeGasUsed": "10089254",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "c858a448819080c90ca5e76e616d60ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRoyaltyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyInternal.TokenRoyalty\",\"name\":\"royalty\",\"type\":\"tuple\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyInternal.TokenRoyaltyConfig[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"setTokenRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Finance\",\"custom:peer-dependencies\":\"IRoyalty IEIP2981\",\"custom:provides-interfaces\":\"IRoyaltyAdmin\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"setDefaultRoyalty((address,uint16))\":{\"details\":\"Set a default royalty configuration.  Will be used if no token specific configuration is set\"},\"setTokenRoyalties((uint256,address,uint16)[])\":{\"details\":\"Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\"}},\"title\":\"ERC2981 - Royalty - Admin - Ownable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Allow contract owner to manage token royalties based on EIP-2981 standard.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/finance/royalty/RoyaltyOwnable.sol\":\"RoyaltyOwnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\ninterface IEIP2981RoyaltyOverride is IERC165 {\\n\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns(uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external view returns(TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n\\n}\\n\",\"keccak256\":\"0xb7f47d4711c6eb42dc5874ad916713ffb6e8754ad568cdb5e9b0c5fcb028c698\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * EIP-2981\\n */\\ninterface IEIP2981 {\\n    /**\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n}\",\"keccak256\":\"0xa150218faf74c7d01e3d9aa712845a2bb519e7fc2ec854e2241c53e4cce163ae\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IFoundation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFoundation {\\n    /*\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\\ninterface IFoundationTreasuryNode {\\n    function getFoundationTreasury() external view returns (address payable);\\n}\\n\\ninterface IFoundationTreasury {\\n    function isAdmin(address account) external view returns (bool);\\n}\",\"keccak256\":\"0x02e67fd662b5be5eb5564aa84a0d04ceada9467da5cf8f5a1f2d5c3d5781f96c\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IRarible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRaribleV1 {\\n    /*\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\n     */\\n    function getFeeBps(uint256 id) external view returns (uint[] memory);\\n    function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\\n}\\n\\n\\ninterface IRaribleV2 {\\n    /*\\n     *  bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n    function getRaribleV2Royalties(uint256 id) external view returns (Part[] memory);\\n}\",\"keccak256\":\"0xdbdc6547f8d5a444ff96d985d622ec4eaaf88571a22e64f1be63c596529f559d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xe2a19d82d7050c0cd1afb542253f65ce34a650d7d99c0ffcdec6b4274fc51e31\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0x1f1b08cba51a05c8cea04e13251f9f8b8fc895017071cb205b0b4170900d1e5b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xaf69959fcc5b87a74426939bc35b8517566494e3ba575b5cfdb1b5c788c0636a\",\"license\":\"MIT\"},\"src/finance/royalty/IRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IRarible.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IFoundation.sol\\\";\\n\\nimport \\\"./IRoyaltyInternal.sol\\\";\\n\\ninterface IRoyalty is IEIP2981, IRaribleV1, IRaribleV2, IFoundation, IRoyaltyInternal {\\n    /**\\n     * @dev Default royalty for all tokens without a specific royalty.\\n     */\\n    function defaultRoyalty() external view returns (TokenRoyalty memory);\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external view returns (TokenRoyaltyConfig memory);\\n}\\n\",\"keccak256\":\"0xa123d39a92c08e624cdc227b03a98926bc0fce8dfcd7d0bf9b3f224501cf34be\",\"license\":\"AGPL-3.0\"},\"src/finance/royalty/IRoyaltyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IRoyaltyInternal.sol\\\";\\n\\ninterface IRoyaltyAdmin {\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(IRoyaltyInternal.TokenRoyaltyConfig[] calldata royalties) external;\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(IRoyaltyInternal.TokenRoyalty calldata royalty) external;\\n}\\n\",\"keccak256\":\"0x2cb52a74b9f840354741a1df60c993cc3c87fa50d8a1ca4b6423af1aec06972c\",\"license\":\"AGPL-3.0\"},\"src/finance/royalty/IRoyaltyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IRoyaltyInternal {\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n}\\n\",\"keccak256\":\"0x7e8a0bcd22227c2a10394018099c0294c8d5f90bedb7c5ede9010e28f2c20d3d\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IRoyaltyInternal.sol\\\";\\nimport \\\"./RoyaltyStorage.sol\\\";\\n\\n/**\\n * @title Royalty standard functionality base on EIP-2981 (derived from Manifold.xyz contracts to adopt Diamond architecture)\\n */\\nabstract contract RoyaltyInternal is IRoyaltyInternal {\\n    using RoyaltyStorage for RoyaltyStorage.Layout;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @dev Sets token royalties. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs) internal virtual {\\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\\n\\n        for (uint256 i = 0; i < royaltyConfigs.length; i++) {\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\n\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\n\\n            if (royaltyConfig.recipient == address(0)) {\\n                delete l.tokenRoyalties[royaltyConfig.tokenId];\\n                l.tokensWithRoyalties.remove(royaltyConfig.tokenId);\\n\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\n            } else {\\n                l.tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(royaltyConfig.recipient, royaltyConfig.bps);\\n                l.tokensWithRoyalties.add(royaltyConfig.tokenId);\\n\\n                emit TokenRoyaltySet(royaltyConfig.tokenId, royaltyConfig.recipient, royaltyConfig.bps);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets default royalty. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal virtual {\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\n\\n        RoyaltyStorage.layout().defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\n\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\n     */\\n    function _getTokenRoyaltiesCount() internal view virtual returns (uint256) {\\n        return RoyaltyStorage.layout().tokensWithRoyalties.length();\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\n     */\\n    function _getTokenRoyaltyByIndex(uint256 index) internal view virtual returns (TokenRoyaltyConfig memory) {\\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\\n\\n        uint256 tokenId = l.tokensWithRoyalties.at(index);\\n        TokenRoyalty memory royalty = l.tokenRoyalties[tokenId];\\n\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\n     */\\n    function _royaltyInfo(uint256 tokenId, uint256 value) internal view virtual returns (address, uint256) {\\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\\n\\n        if (l.tokenRoyalties[tokenId].recipient != address(0)) {\\n            return (l.tokenRoyalties[tokenId].recipient, (value * l.tokenRoyalties[tokenId].bps) / 10000);\\n        }\\n\\n        if (l.defaultRoyalty.recipient != address(0) && l.defaultRoyalty.bps != 0) {\\n            return (l.defaultRoyalty.recipient, (value * l.defaultRoyalty.bps) / 10000);\\n        }\\n\\n        return (address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0x1379af654490102dac5cd772f94912dd0cdf5f0a4931e8b0fb792bf66f8a86e2\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../access/ownable/OwnableInternal.sol\\\";\\n\\nimport \\\"./RoyaltyStorage.sol\\\";\\nimport \\\"./RoyaltyInternal.sol\\\";\\nimport \\\"./IRoyaltyAdmin.sol\\\";\\n\\n/**\\n * @title ERC2981 - Royalty - Admin - Ownable\\n * @notice Allow contract owner to manage token royalties based on EIP-2981 standard.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Finance\\n * @custom:peer-dependencies IRoyalty IEIP2981\\n * @custom:provides-interfaces IRoyaltyAdmin\\n */\\ncontract RoyaltyOwnable is IRoyaltyAdmin, RoyaltyInternal, OwnableInternal {\\n    using RoyaltyStorage for RoyaltyStorage.Layout;\\n\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external override onlyOwner {\\n        _setTokenRoyalties(royalties);\\n    }\\n\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external override onlyOwner {\\n        _setDefaultRoyalty(royalty);\\n    }\\n}\\n\",\"keccak256\":\"0x152121cdc23c72d64199b643ffed11fcc6185f2cd8b19c002bf105f781f9c458\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IRoyaltyInternal.sol\\\";\\nimport \\\"./IRoyalty.sol\\\";\\n\\nlibrary RoyaltyStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct Layout {\\n        IRoyaltyInternal.TokenRoyalty defaultRoyalty;\\n        mapping(uint256 => IRoyaltyInternal.TokenRoyalty) tokenRoyalties;\\n        EnumerableSet.UintSet tokensWithRoyalties;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Royalty\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa857b89551ad6826db88ac35395a0a52d6b249e145a41aa3bde720c361068530\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506108cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635136dcc71461003b578063ef60ceaf14610050575b600080fd5b61004e610049366004610690565b610063565b005b61004e61005e366004610705565b610140565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146100e15760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b61013c8282808060200260200160405190810160405280939291908181526020016000905b82821015610132576101236060830286013681900381019061074b565b81526020019060010190610106565b50505050506101d3565b5050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146101b95760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100d8565b6101d06101cb368390038301836107be565b610407565b50565b7fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea07560005b825181101561040257600083828151811061021457610214610827565b60200260200101519050612710816040015161ffff16106102775760405162461bcd60e51b815260206004820152600b60248201527f496e76616c69642062707300000000000000000000000000000000000000000060448201526064016100d8565b60208101516001600160a01b031661030357805160009081526001840160205260409020805475ffffffffffffffffffffffffffffffffffffffffffff1916905580516102c890600285019061052d565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a16103ef565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff9081168385019081528651600090815260018a0190945294909220925183549451909216740100000000000000000000000000000000000000000275ffffffffffffffffffffffffffffffffffffffffffff199094169116179190911790558051610395906002850190610542565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b50806103fa81610853565b9150506101f7565b505050565b612710816020015161ffff16106104605760405162461bcd60e51b815260206004820152600b60248201527f496e76616c69642062707300000000000000000000000000000000000000000060448201526064016100d8565b60408051808201825282516001600160a01b039081168083526020808601805161ffff9081169583018690527fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075805475ffffffffffffffffffffffffffffffffffffffffffff1916909417740100000000000000000000000000000000000000009096029590951790925585519151855192909316825291909216908201527f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe41910160405180910390a150565b6000610539838361054e565b90505b92915050565b60006105398383610641565b6000818152600183016020526040812054801561063757600061057260018361086c565b85549091506000906105869060019061086c565b90508181146105eb5760008660000182815481106105a6576105a6610827565b90600052602060002001549050808760000184815481106105c9576105c9610827565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806105fc576105fc610883565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061053c565b600091505061053c565b60008181526001830160205260408120546106885750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561053c565b50600061053c565b600080602083850312156106a357600080fd5b823567ffffffffffffffff808211156106bb57600080fd5b818501915085601f8301126106cf57600080fd5b8135818111156106de57600080fd5b8660206060830285010111156106f357600080fd5b60209290920196919550909350505050565b60006040828403121561071757600080fd5b50919050565b80356001600160a01b038116811461073457600080fd5b919050565b803561ffff8116811461073457600080fd5b60006060828403121561075d57600080fd5b6040516060810181811067ffffffffffffffff8211171561078e57634e487b7160e01b600052604160045260246000fd5b604052823581526107a16020840161071d565b60208201526107b260408401610739565b60408201529392505050565b6000604082840312156107d057600080fd5b6040516040810181811067ffffffffffffffff8211171561080157634e487b7160e01b600052604160045260246000fd5b60405261080d8361071d565b815261081b60208401610739565b60208201529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016108655761086561083d565b5060010190565b60008282101561087e5761087e61083d565b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122075b8833a1265dc406be4be3a2805309d3a1df256786a7816b1bc94b47161b86c64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635136dcc71461003b578063ef60ceaf14610050575b600080fd5b61004e610049366004610690565b610063565b005b61004e61005e366004610705565b610140565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146100e15760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b61013c8282808060200260200160405190810160405280939291908181526020016000905b82821015610132576101236060830286013681900381019061074b565b81526020019060010190610106565b50505050506101d3565b5050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146101b95760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100d8565b6101d06101cb368390038301836107be565b610407565b50565b7fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea07560005b825181101561040257600083828151811061021457610214610827565b60200260200101519050612710816040015161ffff16106102775760405162461bcd60e51b815260206004820152600b60248201527f496e76616c69642062707300000000000000000000000000000000000000000060448201526064016100d8565b60208101516001600160a01b031661030357805160009081526001840160205260409020805475ffffffffffffffffffffffffffffffffffffffffffff1916905580516102c890600285019061052d565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a16103ef565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff9081168385019081528651600090815260018a0190945294909220925183549451909216740100000000000000000000000000000000000000000275ffffffffffffffffffffffffffffffffffffffffffff199094169116179190911790558051610395906002850190610542565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b50806103fa81610853565b9150506101f7565b505050565b612710816020015161ffff16106104605760405162461bcd60e51b815260206004820152600b60248201527f496e76616c69642062707300000000000000000000000000000000000000000060448201526064016100d8565b60408051808201825282516001600160a01b039081168083526020808601805161ffff9081169583018690527fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075805475ffffffffffffffffffffffffffffffffffffffffffff1916909417740100000000000000000000000000000000000000009096029590951790925585519151855192909316825291909216908201527f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe41910160405180910390a150565b6000610539838361054e565b90505b92915050565b60006105398383610641565b6000818152600183016020526040812054801561063757600061057260018361086c565b85549091506000906105869060019061086c565b90508181146105eb5760008660000182815481106105a6576105a6610827565b90600052602060002001549050808760000184815481106105c9576105c9610827565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806105fc576105fc610883565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061053c565b600091505061053c565b60008181526001830160205260408120546106885750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561053c565b50600061053c565b600080602083850312156106a357600080fd5b823567ffffffffffffffff808211156106bb57600080fd5b818501915085601f8301126106cf57600080fd5b8135818111156106de57600080fd5b8660206060830285010111156106f357600080fd5b60209290920196919550909350505050565b60006040828403121561071757600080fd5b50919050565b80356001600160a01b038116811461073457600080fd5b919050565b803561ffff8116811461073457600080fd5b60006060828403121561075d57600080fd5b6040516060810181811067ffffffffffffffff8211171561078e57634e487b7160e01b600052604160045260246000fd5b604052823581526107a16020840161071d565b60208201526107b260408401610739565b60408201529392505050565b6000604082840312156107d057600080fd5b6040516040810181811067ffffffffffffffff8211171561080157634e487b7160e01b600052604160045260246000fd5b60405261080d8361071d565b815261081b60208401610739565b60208201529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016108655761086561083d565b5060010190565b60008282101561087e5761087e61083d565b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122075b8833a1265dc406be4be3a2805309d3a1df256786a7816b1bc94b47161b86c64736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Finance",
    "custom:peer-dependencies": "IRoyalty IEIP2981",
    "custom:provides-interfaces": "IRoyaltyAdmin",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "setDefaultRoyalty((address,uint16))": {
        "details": "Set a default royalty configuration.  Will be used if no token specific configuration is set"
      },
      "setTokenRoyalties((uint256,address,uint16)[])": {
        "details": "Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration"
      }
    },
    "title": "ERC2981 - Royalty - Admin - Ownable",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Allow contract owner to manage token royalties based on EIP-2981 standard.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}