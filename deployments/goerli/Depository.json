{
  "address": "0x659E1Ad8368CCFD53702cCc1F8cb059F164B2861",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawImpossible",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawModeLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawOnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawOnlyRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrWithdrawRecipientLocked",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IWithdrawableInternal.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "WithdrawModeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WithdrawModeLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WithdrawPowerRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "WithdrawRecipientChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WithdrawRecipientLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "claimTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositERC20",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "wallets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "depositERC20",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "wallets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "depositNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "claimTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMode",
      "outputs": [
        {
          "internalType": "enum IWithdrawableInternal.Mode",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawModeLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPowerRevoked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRecipientLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd97babf8a3814709d5118b069e82d30c89a6cdf571a9b42a996fd282c59bff46",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x659E1Ad8368CCFD53702cCc1F8cb059F164B2861",
    "transactionIndex": 64,
    "gasUsed": "1667211",
    "logsBloom": "0x
    "blockHash": "0xdd165676b253cd8356e2b9627dd0d7c332713329ec345ded0b3b51b937f9ea87",
    "transactionHash": "0xd97babf8a3814709d5118b069e82d30c89a6cdf571a9b42a996fd282c59bff46",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 7778510,
        "transactionHash": "0xd97babf8a3814709d5118b069e82d30c89a6cdf571a9b42a996fd282c59bff46",
        "address": "0x659E1Ad8368CCFD53702cCc1F8cb059F164B2861",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 68,
        "blockHash": "0xdd165676b253cd8356e2b9627dd0d7c332713329ec345ded0b3b51b937f9ea87"
      },
      {
        "transactionIndex": 64,
        "blockNumber": 7778510,
        "transactionHash": "0xd97babf8a3814709d5118b069e82d30c89a6cdf571a9b42a996fd282c59bff46",
        "address": "0x659E1Ad8368CCFD53702cCc1F8cb059F164B2861",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0xdd165676b253cd8356e2b9627dd0d7c332713329ec345ded0b3b51b937f9ea87"
      },
      {
        "transactionIndex": 64,
        "blockNumber": 7778510,
        "transactionHash": "0xd97babf8a3814709d5118b069e82d30c89a6cdf571a9b42a996fd282c59bff46",
        "address": "0x659E1Ad8368CCFD53702cCc1F8cb059F164B2861",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0xdd165676b253cd8356e2b9627dd0d7c332713329ec345ded0b3b51b937f9ea87"
      }
    ],
    "blockNumber": 7778510,
    "cumulativeGasUsed": "19752309",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "551ff8bfb2a9b9b6a319e806f10305cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrWithdrawImpossible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawModeLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawOnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawOnlyRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrWithdrawRecipientLocked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IWithdrawableInternal.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"WithdrawModeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawModeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawPowerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"WithdrawRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawRecipientLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"claimTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"claimTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMode\",\"outputs\":[{\"internalType\":\"enum IWithdrawableInternal.Mode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawModeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPowerRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRecipientLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"returns\":{\"_0\":\"conrtact owner\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"transferOwnership(address)\":{\"params\":{\"account\":\"address of new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/common/Depository.sol\":\"Depository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/access/ownable/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IERC173Events.sol\\\";\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Events {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0x2933cea0eee1ee24172160ed8ddbf59ffe2c69431d88ae9637179ffcbcbb0cb6\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xe2a19d82d7050c0cd1afb542253f65ce34a650d7d99c0ffcdec6b4274fc51e31\",\"license\":\"MIT\"},\"src/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IERC173.sol\\\";\\nimport \\\"./OwnableInternal.sol\\\";\\n\\n/**\\n * @title ERC173 - Ownable\\n * @notice Ownership access control facet based on EIP-173 which would be already included as a core facet in Flair's Diamond contract.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Access\\n * @custom:provides-interfaces IERC173\\n */\\ncontract Ownable is IERC173, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0x88f8dd34625f658e6ce9e18a35ad4dc8004d4060178aac989b5cc60f41395a4a\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0x1f1b08cba51a05c8cea04e13251f9f8b8fc895017071cb205b0b4170900d1e5b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xaf69959fcc5b87a74426939bc35b8517566494e3ba575b5cfdb1b5c788c0636a\",\"license\":\"MIT\"},\"src/access/roles/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./AccessControlInternal.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\nabstract contract AccessControl is AccessControlInternal, IAccessControl {\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(_getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(_getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        _renounceRole(role, account);\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _getRoleAdmin(role);\\n    }\\n}\\n\",\"keccak256\":\"0xb0041979dd845accc3ca37d96aaf6409aabdea5e60dfe9a63b13fc8b1342a7c6\",\"license\":\"MIT\"},\"src/access/roles/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./AccessControlStorage.sol\\\";\\nimport \\\"./IAccessControlEvents.sol\\\";\\n\\nabstract contract AccessControlInternal is Context, IAccessControlEvents {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function _hasRole(bytes32 role, address account) internal view virtual returns (bool) {\\n        return AccessControlStorage.layout().roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function _getRoleAdmin(bytes32 role) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _renounceRole(bytes32 role, address account) internal virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!_hasRole(role, account)) {\\n            AccessControlStorage.layout().roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (_hasRole(role, account)) {\\n            AccessControlStorage.layout().roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6bdd401d768e7df6002d060fc2e5287512a803ce2abc42ad99367b131e41f9bc\",\"license\":\"MIT\"},\"src/access/roles/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.AccessControl\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81acdea32dd524f817e7c8f4999f1c24e803dad4680a647d1be35675637a10b3\",\"license\":\"MIT\"},\"src/access/roles/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IAccessControlEvents.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl is IAccessControlEvents {\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xd3e460cb1307079994e6474427e14416f82243afe84f9d75e9841870f8692fd3\",\"license\":\"MIT\"},\"src/access/roles/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlEvents {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\",\"keccak256\":\"0x7574c6d5a71b386e40e071bd7ba50eb0e43bb265385637af3620704b84d7666d\",\"license\":\"MIT\"},\"src/common/Depository.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../access/ownable/Ownable.sol\\\";\\nimport \\\"../access/roles/AccessControl.sol\\\";\\nimport \\\"../finance/withdraw/Withdrawable.sol\\\";\\n\\ncontract Depository is ReentrancyGuard, Ownable, AccessControl, Withdrawable {\\n    using Address for address payable;\\n\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DEPOSITOR_ROLE, msg.sender);\\n    }\\n\\n    function depositNative(address wallet, uint256 amount) public payable onlyRole(DEPOSITOR_ROLE) nonReentrant {\\n        payable(wallet).sendValue(amount);\\n    }\\n\\n    function depositNative(address[] calldata wallets, uint256[] calldata amounts)\\n        public\\n        payable\\n        onlyRole(DEPOSITOR_ROLE)\\n        nonReentrant\\n    {\\n        require(wallets.length == amounts.length, \\\"Depository: invalid length\\\");\\n\\n        for (uint256 i = 0; i < wallets.length; i++) {\\n            payable(wallets[i]).sendValue(amounts[i]);\\n        }\\n    }\\n\\n    function depositERC20(\\n        address token,\\n        address wallet,\\n        uint256 amount\\n    ) public payable onlyRole(DEPOSITOR_ROLE) nonReentrant {\\n        IERC20(token).transfer(address(wallet), amount);\\n    }\\n\\n    function depositERC20(\\n        address[] calldata tokens,\\n        address[] calldata wallets,\\n        uint256[] calldata amounts\\n    ) public payable onlyRole(DEPOSITOR_ROLE) nonReentrant {\\n        require(wallets.length == amounts.length, \\\"Depository: invalid length\\\");\\n        require(wallets.length == tokens.length, \\\"Depository: invalid length\\\");\\n\\n        for (uint256 i = 0; i < wallets.length; i++) {\\n            IERC20(tokens[i]).transfer(address(wallets[i]), amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0d495d175f9f6f72ae1a963736b478d2c46d9dfca17b18a12b0dba9098ff259\",\"license\":\"AGPL-3.0\"},\"src/finance/withdraw/IWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IWithdrawableInternal.sol\\\";\\n\\ninterface IWithdrawable is IWithdrawableInternal {\\n    function withdraw(address[] calldata claimTokens, uint256[] calldata amounts) external;\\n\\n    function withdrawRecipient() external view returns (address);\\n\\n    function withdrawRecipientLocked() external view returns (bool);\\n\\n    function withdrawPowerRevoked() external view returns (bool);\\n\\n    function withdrawMode() external view returns (Mode);\\n\\n    function withdrawModeLocked() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb998165d9a9f6d2de306c14e4fe31287580b88087d59b4e7059bfe1cfb3e05fe\",\"license\":\"AGPL-3.0\"},\"src/finance/withdraw/IWithdrawableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\ninterface IWithdrawableInternal {\\n    enum Mode {\\n        OWNER,\\n        RECIPIENT,\\n        ANYONE,\\n        NOBODY\\n    }\\n\\n    error ErrWithdrawOnlyRecipient();\\n    error ErrWithdrawOnlyOwner();\\n    error ErrWithdrawImpossible();\\n    error ErrWithdrawRecipientLocked();\\n    error ErrWithdrawModeLocked();\\n\\n    event WithdrawRecipientChanged(address indexed recipient);\\n    event WithdrawRecipientLocked();\\n    event WithdrawModeChanged(Mode _mode);\\n    event WithdrawModeLocked();\\n    event Withdrawn(address[] claimTokens, uint256[] amounts);\\n    event WithdrawPowerRevoked();\\n}\\n\",\"keccak256\":\"0x79632e8369ea245bd5311b34808c4b6e01a3c70cf7bd8cd848706492594cfc36\",\"license\":\"AGPL-3.0\"},\"src/finance/withdraw/Withdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./WithdrawableStorage.sol\\\";\\nimport \\\"./WithdrawableInternal.sol\\\";\\nimport \\\"./IWithdrawable.sol\\\";\\n\\n/**\\n * @title Withdrawable\\n * @notice Allow withdrwaing any ERC20 or native tokens from the contract.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Finance\\n * @custom:provides-interfaces IWithdrawable\\n */\\ncontract Withdrawable is IWithdrawable, WithdrawableInternal {\\n    function withdraw(address[] calldata claimTokens, uint256[] calldata amounts) external {\\n        _withdraw(claimTokens, amounts);\\n    }\\n\\n    function withdrawRecipient() external view override returns (address) {\\n        return _withdrawRecipient();\\n    }\\n\\n    function withdrawRecipientLocked() external view override returns (bool) {\\n        return _withdrawRecipientLocked();\\n    }\\n\\n    function withdrawPowerRevoked() external view override returns (bool) {\\n        return _withdrawPowerRevoked();\\n    }\\n\\n    function withdrawMode() external view override returns (Mode) {\\n        return _withdrawMode();\\n    }\\n\\n    function withdrawModeLocked() external view override returns (bool) {\\n        return _withdrawModeLocked();\\n    }\\n}\\n\",\"keccak256\":\"0x54a8511b827c3230dcfb79075bb1a87e4a1301f59affb30ced18ffe18e79a8d7\",\"license\":\"AGPL-3.0\"},\"src/finance/withdraw/WithdrawableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../access/ownable/OwnableInternal.sol\\\";\\n\\nimport \\\"./WithdrawableStorage.sol\\\";\\nimport \\\"./IWithdrawableInternal.sol\\\";\\n\\n/**\\n * @title Functionality to withdraw ERC20 or natives tokens from the contract via various modes\\n */\\nabstract contract WithdrawableInternal is IWithdrawableInternal, OwnableInternal {\\n    using Address for address payable;\\n    using WithdrawableStorage for WithdrawableStorage.Layout;\\n\\n    function _withdrawRecipient() internal view virtual returns (address) {\\n        return WithdrawableStorage.layout().recipient;\\n    }\\n\\n    function _withdrawRecipientLocked() internal view virtual returns (bool) {\\n        return WithdrawableStorage.layout().recipientLocked;\\n    }\\n\\n    function _withdrawPowerRevoked() internal view virtual returns (bool) {\\n        return WithdrawableStorage.layout().powerRevoked;\\n    }\\n\\n    function _withdrawMode() internal view virtual returns (Mode) {\\n        return WithdrawableStorage.layout().mode;\\n    }\\n\\n    function _withdrawModeLocked() internal view virtual returns (bool) {\\n        return WithdrawableStorage.layout().modeLocked;\\n    }\\n\\n    function _setWithdrawRecipient(address recipient) internal virtual {\\n        WithdrawableStorage.Layout storage l = WithdrawableStorage.layout();\\n\\n        if (l.recipientLocked) {\\n            revert ErrWithdrawRecipientLocked();\\n        }\\n\\n        l.recipient = recipient;\\n\\n        emit WithdrawRecipientChanged(recipient);\\n    }\\n\\n    function _lockWithdrawRecipient() internal virtual {\\n        WithdrawableStorage.layout().recipientLocked = true;\\n\\n        emit WithdrawRecipientLocked();\\n    }\\n\\n    function _revokeWithdrawPower() internal virtual {\\n        WithdrawableStorage.layout().powerRevoked = true;\\n\\n        emit WithdrawPowerRevoked();\\n    }\\n\\n    function _setWithdrawMode(Mode _mode) internal virtual {\\n        WithdrawableStorage.Layout storage l = WithdrawableStorage.layout();\\n\\n        if (l.modeLocked) {\\n            revert ErrWithdrawModeLocked();\\n        }\\n\\n        l.mode = _mode;\\n\\n        emit WithdrawModeChanged(_mode);\\n    }\\n\\n    function _lockWithdrawMode() internal virtual {\\n        WithdrawableStorage.layout().modeLocked = true;\\n\\n        emit WithdrawModeLocked();\\n    }\\n\\n    function _withdraw(address[] calldata claimTokens, uint256[] calldata amounts) internal virtual {\\n        WithdrawableStorage.Layout storage l = WithdrawableStorage.layout();\\n\\n        /**\\n         * We are using msg.sender for smaller attack surface when evaluating\\n         * the sender of the function call. If in future we want to handle \\\"withdraw\\\"\\n         * functionality via meta transactions, we should consider using `_msgSender`\\n         */\\n\\n        if (l.mode == Mode.NOBODY) {\\n            revert ErrWithdrawImpossible();\\n        } else if (l.mode == Mode.RECIPIENT) {\\n            if (l.recipient != msg.sender) {\\n                revert ErrWithdrawOnlyRecipient();\\n            }\\n        } else if (l.mode == Mode.OWNER) {\\n            if (_owner() != msg.sender) {\\n                revert ErrWithdrawOnlyOwner();\\n            }\\n        }\\n\\n        if (l.powerRevoked) {\\n            revert ErrWithdrawImpossible();\\n        }\\n\\n        for (uint256 i = 0; i < claimTokens.length; i++) {\\n            if (claimTokens[i] == address(0)) {\\n                payable(l.recipient).sendValue(amounts[i]);\\n            } else {\\n                IERC20(claimTokens[i]).transfer(address(l.recipient), amounts[i]);\\n            }\\n        }\\n\\n        emit Withdrawn(claimTokens, amounts);\\n    }\\n}\\n\",\"keccak256\":\"0x5f91c8efc65a6a2a007c9b595cb4fbdb3d9fcded62dd7674e572cc83e547ed06\",\"license\":\"MIT\"},\"src/finance/withdraw/WithdrawableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IWithdrawableInternal.sol\\\";\\n\\nlibrary WithdrawableStorage {\\n    struct Layout {\\n        address recipient;\\n        IWithdrawableInternal.Mode mode;\\n        bool powerRevoked;\\n        bool recipientLocked;\\n        bool modeLocked;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Withdrawable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x401923d11466e113b452a963a5e992217d2728d5e0ba8be079d5c0a9fdebc2fc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506001600055620000223362000061565b6200002f600033620000c8565b6200005b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a933620000c8565b62000220565b6200008f816200007b620000d860201b62000c0f1760201c565b620000fc60201b62000c331790919060201c565b6040516001600160a01b0382169033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b620000d4828262000119565b5050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed490565b81546001600160a01b0319166001600160a01b0391909116179055565b620001258282620001bb565b620000d457600162000141620001fc60201b62000c5d1760201c565b6000848152602091825260408082206001600160a01b038616835290925220805460ff1916911515919091179055620001773390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001d2620001fc60201b62000c5d1760201c565b6000938452602090815260408085206001600160a01b039490941685529290525090205460ff1690565b7f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da6290565b611b6780620002306000396000f3fe60806040526004361061015f5760003560e01c80638da5cb5b116100c0578063d547741f11610074578063dcbe353f11610059578063dcbe353f14610435578063de6d6d961461044a578063f2fde38b1461046a57600080fd5b8063d547741f14610402578063da163d651461042257600080fd5b8063a217fddf116100a5578063a217fddf14610369578063a3b0b5a31461037e578063af121f54146103b257600080fd5b80638da5cb5b1461031c57806391d148541461034957600080fd5b806336568abe1161011757806349561cb9116100fc57806349561cb9146102585780636057e0ec146102b6578063715018a61461030757600080fd5b806336568abe1461022557806343d7560c1461024557600080fd5b8063248a9ca311610148578063248a9ca31461018c5780632d00b587146101bf5780632f2ff15d1461020557600080fd5b806302279b4a146101645780631cad5a4014610179575b600080fd5b610177610172366004611695565b61048a565b005b6101776101873660046116bf565b61052d565b34801561019857600080fd5b506101ac6101a73660046116fb565b610646565b6040519081526020015b60405180910390f35b3480156101cb57600080fd5b507f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe354600160a01b900460ff166040516101b6919061172a565b34801561021157600080fd5b50610177610220366004611752565b610683565b34801561023157600080fd5b50610177610240366004611752565b6106cc565b6101776102533660046117ca565b6106da565b34801561026457600080fd5b507f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe35477010000000000000000000000000000000000000000000000900460ff165b60405190151581526020016101b6565b3480156102c257600080fd5b507f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe354760100000000000000000000000000000000000000000000900460ff166102a6565b34801561031357600080fd5b50610177610924565b34801561032857600080fd5b50610331610998565b6040516001600160a01b0390911681526020016101b6565b34801561035557600080fd5b506102a6610364366004611752565b6109a2565b34801561037557600080fd5b506101ac600081565b34801561038a57600080fd5b506101ac7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b3480156103be57600080fd5b507f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe3547501000000000000000000000000000000000000000000900460ff166102a6565b34801561040e57600080fd5b5061017761041d366004611752565b6109ef565b610177610430366004611864565b610a33565b34801561044157600080fd5b50610331610b7f565b34801561045657600080fd5b50610177610465366004611864565b610b89565b34801561047657600080fd5b506101776104853660046118d0565b610b9b565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a96104b481610c81565b60026000540361050b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000556105236001600160a01b03841683610c8b565b5050600160005550565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a961055781610c81565b6002600054036105a95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610502565b60026000556040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905285169063a9059cbb906044016020604051808303816000875af1158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a91906118eb565b50506001600055505050565b60008181527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da6260205260408120600101545b92915050565b905090565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da6260205260409020600101546106bd81610c81565b6106c78383610da4565b505050565b6106d68282610e67565b5050565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a961070481610c81565b6002600054036107565760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610502565b60026000558382146107aa5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a20696e76616c6964206c656e6774680000000000006044820152606401610502565b8386146107f95760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a20696e76616c6964206c656e6774680000000000006044820152606401610502565b60005b84811015610915578787828181106108165761081661190d565b905060200201602081019061082b91906118d0565b6001600160a01b031663a9059cbb87878481811061084b5761084b61190d565b905060200201602081019061086091906118d0565b8686858181106108725761087261190d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03909416600485015260200291909101356024830152506044016020604051808303816000875af11580156108de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090291906118eb565b508061090d81611939565b9150506107fc565b50506001600055505050505050565b61092c610eef565b6001600160a01b0316336001600160a01b03161461098c5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610502565b6109966000610f22565b565b600061067e610eef565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b038516845290915281205460ff165b9392505050565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da626020526040902060010154610a2981610c81565b6106c78383610fa2565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9610a5d81610c81565b600260005403610aaf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610502565b6002600055838214610b035760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a20696e76616c6964206c656e6774680000000000006044820152606401610502565b60005b84811015610b7257610b60848483818110610b2357610b2361190d565b90506020020135878784818110610b3c57610b3c61190d565b9050602002016020810190610b5191906118d0565b6001600160a01b031690610c8b565b80610b6a81611939565b915050610b06565b5050600160005550505050565b600061067e611063565b610b958484848461108b565b50505050565b610ba3610eef565b6001600160a01b0316336001600160a01b031614610c035760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610502565b610c0c81610f22565b50565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed490565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0391909116179055565b7f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da6290565b610c0c81336113aa565b80471015610cdb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610502565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d28576040519150601f19603f3d011682016040523d82523d6000602084013e610d2d565b606091505b50509050806106c75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610502565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b038516845290915290205460ff166106d65760008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6001600160a01b0381163314610ee55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610502565b6106d68282610fa2565b60007fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45b546001600160a01b0316919050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040516001600160a01b0382169033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b038516845290915290205460ff16156106d65760008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60007f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe3610f13565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe38054600390600160a01b900460ff16818111156110cb576110cb611714565b036110e95760405163d4f0dd9760e01b815260040160405180910390fd5b60018154600160a01b900460ff16600381111561110857611108611714565b036111545780546001600160a01b0316331461114f576040517e2311a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111c1565b60008154600160a01b900460ff16600381111561117357611173611714565b036111c15733611181610eef565b6001600160a01b0316146111c1576040517fe3c30fea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80547501000000000000000000000000000000000000000000900460ff16156111fd5760405163d4f0dd9760e01b815260040160405180910390fd5b60005b8481101561136557600086868381811061121c5761121c61190d565b905060200201602081019061123191906118d0565b6001600160a01b0316036112735761126e8484838181106112545761125461190d565b85546001600160a01b031692602090910201359050610c8b565b611353565b8585828181106112855761128561190d565b905060200201602081019061129a91906118d0565b82546001600160a01b039182169163a9059cbb91168686858181106112c1576112c161190d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03909416600485015260200291909101356024830152506044016020604051808303816000875af115801561132d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135191906118eb565b505b8061135d81611939565b915050611200565b507fd40c399a83caf67d15628b821aa7c7bd940e563c57a047e2bd3b8c602bcaf5a58585858560405161139b9493929190611952565b60405180910390a15050505050565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b038516845290915290205460ff166106d6576113fc8161143e565b611407836020611450565b604051602001611418929190611a19565b60408051601f198184030181529082905262461bcd60e51b825261050291600401611a9a565b60606106786001600160a01b03831660145b6060600061145f836002611acd565b61146a906002611aec565b67ffffffffffffffff81111561148257611482611b04565b6040519080825280601f01601f1916602001820160405280156114ac576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106114e3576114e361190d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106115465761154661190d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611582846002611acd565b61158d906001611aec565b90505b600181111561162a577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106115ce576115ce61190d565b1a60f81b8282815181106115e4576115e461190d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361162381611b1a565b9050611590565b5083156109e85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610502565b80356001600160a01b038116811461169057600080fd5b919050565b600080604083850312156116a857600080fd5b6116b183611679565b946020939093013593505050565b6000806000606084860312156116d457600080fd5b6116dd84611679565b92506116eb60208501611679565b9150604084013590509250925092565b60006020828403121561170d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061174c57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561176557600080fd5b8235915061177560208401611679565b90509250929050565b60008083601f84011261179057600080fd5b50813567ffffffffffffffff8111156117a857600080fd5b6020830191508360208260051b85010111156117c357600080fd5b9250929050565b600080600080600080606087890312156117e357600080fd5b863567ffffffffffffffff808211156117fb57600080fd5b6118078a838b0161177e565b9098509650602089013591508082111561182057600080fd5b61182c8a838b0161177e565b9096509450604089013591508082111561184557600080fd5b5061185289828a0161177e565b979a9699509497509295939492505050565b6000806000806040858703121561187a57600080fd5b843567ffffffffffffffff8082111561189257600080fd5b61189e8883890161177e565b909650945060208701359150808211156118b757600080fd5b506118c48782880161177e565b95989497509550505050565b6000602082840312156118e257600080fd5b6109e882611679565b6000602082840312156118fd57600080fd5b815180151581146109e857600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161194b5761194b611923565b5060010190565b6040808252810184905260008560608301825b87811015611993576001600160a01b0361197e84611679565b16825260209283019290910190600101611965565b5083810360208501528481527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8511156119cc57600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b60005b83811015611a085781810151838201526020016119f0565b83811115610b955750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611a518160178501602088016119ed565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611a8e8160288401602088016119ed565b01602801949350505050565b6020815260008251806020840152611ab98160408501602087016119ed565b601f01601f19169190910160400192915050565b6000816000190483118215151615611ae757611ae7611923565b500290565b60008219821115611aff57611aff611923565b500190565b634e487b7160e01b600052604160045260246000fd5b600081611b2957611b29611923565b50600019019056fea2646970667358221220793b714e430b029fad255983eecc3bb3decc43ae1c91ec11d1e8cc80e5e3f1cd64736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061015f5760003560e01c80638da5cb5b116100c0578063d547741f11610074578063dcbe353f11610059578063dcbe353f14610435578063de6d6d961461044a578063f2fde38b1461046a57600080fd5b8063d547741f14610402578063da163d651461042257600080fd5b8063a217fddf116100a5578063a217fddf14610369578063a3b0b5a31461037e578063af121f54146103b257600080fd5b80638da5cb5b1461031c57806391d148541461034957600080fd5b806336568abe1161011757806349561cb9116100fc57806349561cb9146102585780636057e0ec146102b6578063715018a61461030757600080fd5b806336568abe1461022557806343d7560c1461024557600080fd5b8063248a9ca311610148578063248a9ca31461018c5780632d00b587146101bf5780632f2ff15d1461020557600080fd5b806302279b4a146101645780631cad5a4014610179575b600080fd5b610177610172366004611695565b61048a565b005b6101776101873660046116bf565b61052d565b34801561019857600080fd5b506101ac6101a73660046116fb565b610646565b6040519081526020015b60405180910390f35b3480156101cb57600080fd5b507f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe354600160a01b900460ff166040516101b6919061172a565b34801561021157600080fd5b50610177610220366004611752565b610683565b34801561023157600080fd5b50610177610240366004611752565b6106cc565b6101776102533660046117ca565b6106da565b34801561026457600080fd5b507f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe35477010000000000000000000000000000000000000000000000900460ff165b60405190151581526020016101b6565b3480156102c257600080fd5b507f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe354760100000000000000000000000000000000000000000000900460ff166102a6565b34801561031357600080fd5b50610177610924565b34801561032857600080fd5b50610331610998565b6040516001600160a01b0390911681526020016101b6565b34801561035557600080fd5b506102a6610364366004611752565b6109a2565b34801561037557600080fd5b506101ac600081565b34801561038a57600080fd5b506101ac7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b3480156103be57600080fd5b507f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe3547501000000000000000000000000000000000000000000900460ff166102a6565b34801561040e57600080fd5b5061017761041d366004611752565b6109ef565b610177610430366004611864565b610a33565b34801561044157600080fd5b50610331610b7f565b34801561045657600080fd5b50610177610465366004611864565b610b89565b34801561047657600080fd5b506101776104853660046118d0565b610b9b565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a96104b481610c81565b60026000540361050b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000556105236001600160a01b03841683610c8b565b5050600160005550565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a961055781610c81565b6002600054036105a95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610502565b60026000556040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905285169063a9059cbb906044016020604051808303816000875af1158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a91906118eb565b50506001600055505050565b60008181527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da6260205260408120600101545b92915050565b905090565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da6260205260409020600101546106bd81610c81565b6106c78383610da4565b505050565b6106d68282610e67565b5050565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a961070481610c81565b6002600054036107565760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610502565b60026000558382146107aa5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a20696e76616c6964206c656e6774680000000000006044820152606401610502565b8386146107f95760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a20696e76616c6964206c656e6774680000000000006044820152606401610502565b60005b84811015610915578787828181106108165761081661190d565b905060200201602081019061082b91906118d0565b6001600160a01b031663a9059cbb87878481811061084b5761084b61190d565b905060200201602081019061086091906118d0565b8686858181106108725761087261190d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03909416600485015260200291909101356024830152506044016020604051808303816000875af11580156108de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090291906118eb565b508061090d81611939565b9150506107fc565b50506001600055505050505050565b61092c610eef565b6001600160a01b0316336001600160a01b03161461098c5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610502565b6109966000610f22565b565b600061067e610eef565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b038516845290915281205460ff165b9392505050565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da626020526040902060010154610a2981610c81565b6106c78383610fa2565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9610a5d81610c81565b600260005403610aaf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610502565b6002600055838214610b035760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a20696e76616c6964206c656e6774680000000000006044820152606401610502565b60005b84811015610b7257610b60848483818110610b2357610b2361190d565b90506020020135878784818110610b3c57610b3c61190d565b9050602002016020810190610b5191906118d0565b6001600160a01b031690610c8b565b80610b6a81611939565b915050610b06565b5050600160005550505050565b600061067e611063565b610b958484848461108b565b50505050565b610ba3610eef565b6001600160a01b0316336001600160a01b031614610c035760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e65720000006044820152606401610502565b610c0c81610f22565b50565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed490565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0391909116179055565b7f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da6290565b610c0c81336113aa565b80471015610cdb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610502565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d28576040519150601f19603f3d011682016040523d82523d6000602084013e610d2d565b606091505b50509050806106c75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610502565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b038516845290915290205460ff166106d65760008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6001600160a01b0381163314610ee55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610502565b6106d68282610fa2565b60007fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed45b546001600160a01b0316919050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040516001600160a01b0382169033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b038516845290915290205460ff16156106d65760008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60007f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe3610f13565b7f90911dd6b04582315fdcc835c92eb07b11f82eb9def7c511af0f2f9de3ddcfe38054600390600160a01b900460ff16818111156110cb576110cb611714565b036110e95760405163d4f0dd9760e01b815260040160405180910390fd5b60018154600160a01b900460ff16600381111561110857611108611714565b036111545780546001600160a01b0316331461114f576040517e2311a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111c1565b60008154600160a01b900460ff16600381111561117357611173611714565b036111c15733611181610eef565b6001600160a01b0316146111c1576040517fe3c30fea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80547501000000000000000000000000000000000000000000900460ff16156111fd5760405163d4f0dd9760e01b815260040160405180910390fd5b60005b8481101561136557600086868381811061121c5761121c61190d565b905060200201602081019061123191906118d0565b6001600160a01b0316036112735761126e8484838181106112545761125461190d565b85546001600160a01b031692602090910201359050610c8b565b611353565b8585828181106112855761128561190d565b905060200201602081019061129a91906118d0565b82546001600160a01b039182169163a9059cbb91168686858181106112c1576112c161190d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03909416600485015260200291909101356024830152506044016020604051808303816000875af115801561132d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135191906118eb565b505b8061135d81611939565b915050611200565b507fd40c399a83caf67d15628b821aa7c7bd940e563c57a047e2bd3b8c602bcaf5a58585858560405161139b9493929190611952565b60405180910390a15050505050565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b038516845290915290205460ff166106d6576113fc8161143e565b611407836020611450565b604051602001611418929190611a19565b60408051601f198184030181529082905262461bcd60e51b825261050291600401611a9a565b60606106786001600160a01b03831660145b6060600061145f836002611acd565b61146a906002611aec565b67ffffffffffffffff81111561148257611482611b04565b6040519080825280601f01601f1916602001820160405280156114ac576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106114e3576114e361190d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106115465761154661190d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611582846002611acd565b61158d906001611aec565b90505b600181111561162a577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106115ce576115ce61190d565b1a60f81b8282815181106115e4576115e461190d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361162381611b1a565b9050611590565b5083156109e85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610502565b80356001600160a01b038116811461169057600080fd5b919050565b600080604083850312156116a857600080fd5b6116b183611679565b946020939093013593505050565b6000806000606084860312156116d457600080fd5b6116dd84611679565b92506116eb60208501611679565b9150604084013590509250925092565b60006020828403121561170d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061174c57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561176557600080fd5b8235915061177560208401611679565b90509250929050565b60008083601f84011261179057600080fd5b50813567ffffffffffffffff8111156117a857600080fd5b6020830191508360208260051b85010111156117c357600080fd5b9250929050565b600080600080600080606087890312156117e357600080fd5b863567ffffffffffffffff808211156117fb57600080fd5b6118078a838b0161177e565b9098509650602089013591508082111561182057600080fd5b61182c8a838b0161177e565b9096509450604089013591508082111561184557600080fd5b5061185289828a0161177e565b979a9699509497509295939492505050565b6000806000806040858703121561187a57600080fd5b843567ffffffffffffffff8082111561189257600080fd5b61189e8883890161177e565b909650945060208701359150808211156118b757600080fd5b506118c48782880161177e565b95989497509550505050565b6000602082840312156118e257600080fd5b6109e882611679565b6000602082840312156118fd57600080fd5b815180151581146109e857600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161194b5761194b611923565b5060010190565b6040808252810184905260008560608301825b87811015611993576001600160a01b0361197e84611679565b16825260209283019290910190600101611965565b5083810360208501528481527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8511156119cc57600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b60005b83811015611a085781810151838201526020016119f0565b83811115610b955750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611a518160178501602088016119ed565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611a8e8160288401602088016119ed565b01602801949350505050565b6020815260008251806020840152611ab98160408501602087016119ed565b601f01601f19169190910160400192915050565b6000816000190483118215151615611ae757611ae7611923565b500290565b60008219821115611aff57611aff611923565b500190565b634e487b7160e01b600052604160045260246000fd5b600081611b2957611b29611923565b50600019019056fea2646970667358221220793b714e430b029fad255983eecc3bb3decc43ae1c91ec11d1e8cc80e5e3f1cd64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "returns": {
          "_0": "conrtact owner"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "transferOwnership(address)": {
        "params": {
          "account": "address of new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 471,
        "contract": "src/common/Depository.sol:Depository",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}