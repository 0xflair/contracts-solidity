{
  "address": "0x5E2286c71E20f1936600A454037c0ce323f088b6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "eligibleForTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxMintable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintByTier",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "onTierAllowlist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "remainingForTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "tierMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "tierToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tierIds",
          "type": "uint256[]"
        }
      ],
      "name": "tierToTokenId",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "reserved",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAllocation",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITieredSalesInternal.Tier",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "walletMintedByTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x010e5a4139698e43bd82ead1d9621f9a909e0379b68eca05a11256311fdc0e22",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x5E2286c71E20f1936600A454037c0ce323f088b6",
    "transactionIndex": 34,
    "gasUsed": "1160441",
    "logsBloom": "0x
    "blockHash": "0x7cd83548d5e49ba96a9d06bf60e566de8d40151ce6f45c067da257388727e2bb",
    "transactionHash": "0x010e5a4139698e43bd82ead1d9621f9a909e0379b68eca05a11256311fdc0e22",
    "logs": [],
    "blockNumber": 7705120,
    "cumulativeGasUsed": "9836189",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a3995c8cebbf9dcff4ab3489ff8f57ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"eligibleForTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintByTier\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"onTierAllowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"remainingForTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"tierMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"tierToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tierIds\",\"type\":\"uint256[]\"}],\"name\":\"tierToTokenId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"reserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllocation\",\"type\":\"uint256\"}],\"internalType\":\"struct ITieredSalesInternal.Tier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"walletMintedByTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Tiered Sales facet for ERC1155 with meta-transactions support via ERC2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/facets/sales/ERC1155TieredSalesERC2771.sol\":\"ERC1155TieredSalesERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0xaa69cf8eab7188097d9aa84c92692ec30614ee2f6bf8d2255482162611255db4\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0xa0149e5c5964ce521c9589ff1a559844eb24fd8481634dda76a3f24d6991039b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x26eea1f665c393b0046c3dcb9421f3caa1322ca996689fa0aa941eff5a1dcda2\",\"license\":\"MIT\"},\"src/finance/sales/ITieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./ITieredSalesInternal.sol\\\";\\n\\ninterface ITieredSales is ITieredSalesInternal {\\n    function onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external view returns (bool);\\n\\n    function eligibleForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external view returns (uint256);\\n\\n    function mintByTier(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external payable;\\n\\n    function remainingForTier(uint256 tierId) external view returns (uint256);\\n\\n    function walletMintedByTier(uint256 tierId, address wallet) external view returns (uint256);\\n\\n    function tierMints(uint256 tierId) external view returns (uint256);\\n\\n    function totalReserved() external view returns (uint256);\\n\\n    function reservedMints() external view returns (uint256);\\n\\n    function tiers(uint256 tierId) external view returns (Tier memory);\\n}\\n\",\"keccak256\":\"0x449398eab8e8af9b259885fe9f4b8deac24073c3d4493d0ecf5e0d66a25cbef9\",\"license\":\"MIT\"},\"src/finance/sales/ITieredSalesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface ITieredSalesInternal {\\n    struct Tier {\\n        uint256 start;\\n        uint256 end;\\n        address currency;\\n        uint256 price;\\n        uint256 maxPerWallet;\\n        bytes32 merkleRoot;\\n        uint256 reserved;\\n        uint256 maxAllocation;\\n    }\\n}\\n\",\"keccak256\":\"0xa87792c1daf6d11b1bd8f273abc127bc19f2197caca0074db77e56098531834b\",\"license\":\"MIT\"},\"src/finance/sales/TieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./ITieredSales.sol\\\";\\nimport \\\"./TieredSalesInternal.sol\\\";\\n\\n/**\\n * @title Abstract sales mechanism for any asset (e.g NFTs) with multiple tiered pricing, allowlist and allocation plans.\\n */\\nabstract contract TieredSales is ITieredSales, TieredSalesInternal {\\n    function onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) public view virtual returns (bool) {\\n        return super._onTierAllowlist(tierId, minter, maxAllowance, proof);\\n    }\\n\\n    function eligibleForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) public view virtual returns (uint256 maxMintable) {\\n        return super._eligibleForTier(tierId, minter, maxAllowance, proof);\\n    }\\n\\n    function remainingForTier(uint256 tierId) public view virtual returns (uint256) {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        uint256 availableSupply = _availableSupplyForTier(tierId);\\n        uint256 availableAllocation = l.tiers[tierId].maxAllocation - l.tierMints[tierId];\\n\\n        if (availableSupply < availableAllocation) {\\n            return availableSupply;\\n        } else {\\n            return availableAllocation;\\n        }\\n    }\\n\\n    function walletMintedByTier(uint256 tierId, address wallet) public view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().walletMinted[tierId][wallet];\\n    }\\n\\n    function tierMints(uint256 tierId) public view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().tierMints[tierId];\\n    }\\n\\n    function totalReserved() external view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().totalReserved;\\n    }\\n\\n    function reservedMints() external view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().reservedMints;\\n    }\\n\\n    function tiers(uint256 tierId) external view virtual returns (Tier memory) {\\n        return TieredSalesStorage.layout().tiers[tierId];\\n    }\\n}\\n\",\"keccak256\":\"0x3580acdf4d1e707e15d44d573ba1d7cfa96e8ecc623df27c41e3e24e35db532e\",\"license\":\"MIT\"},\"src/finance/sales/TieredSalesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ITieredSalesInternal.sol\\\";\\nimport \\\"./TieredSalesStorage.sol\\\";\\n\\nimport \\\"../../access/ownable/OwnableInternal.sol\\\";\\n\\n/**\\n * @title Sales mechanism for NFTs with multiple tiered pricing, allowlist and allocation plans\\n */\\nabstract contract TieredSalesInternal is ITieredSalesInternal, Context, OwnableInternal {\\n    using TieredSalesStorage for TieredSalesStorage.Layout;\\n\\n    function _configureTiering(uint256 tierId, Tier calldata tier) internal virtual {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        require(tier.maxAllocation >= l.tierMints[tierId], \\\"LOWER_THAN_MINTED\\\");\\n\\n        if (l.tiers[tierId].reserved > 0) {\\n            require(tier.reserved >= l.tierMints[tierId], \\\"LOW_RESERVE_AMOUNT\\\");\\n        }\\n\\n        if (l.tierMints[tierId] > 0) {\\n            require(tier.maxPerWallet >= l.tiers[tierId].maxPerWallet, \\\"LOW_MAX_PER_WALLET\\\");\\n        }\\n\\n        l.totalReserved -= l.tiers[tierId].reserved;\\n        l.tiers[tierId] = tier;\\n        l.totalReserved += tier.reserved;\\n    }\\n\\n    function _configureTiering(uint256[] calldata _tierIds, Tier[] calldata _tiers) internal virtual {\\n        for (uint256 i = 0; i < _tierIds.length; i++) {\\n            _configureTiering(_tierIds[i], _tiers[i]);\\n        }\\n    }\\n\\n    function _onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) internal view virtual returns (bool) {\\n        return\\n            MerkleProof.verify(\\n                proof,\\n                TieredSalesStorage.layout().tiers[tierId].merkleRoot,\\n                _generateMerkleLeaf(minter, maxAllowance)\\n            );\\n    }\\n\\n    function _eligibleForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) internal view virtual returns (uint256 maxMintable) {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        require(l.tiers[tierId].maxPerWallet > 0, \\\"NOT_EXISTS\\\");\\n        require(block.timestamp >= l.tiers[tierId].start, \\\"NOT_STARTED\\\");\\n        require(block.timestamp <= l.tiers[tierId].end, \\\"ALREADY_ENDED\\\");\\n\\n        maxMintable = l.tiers[tierId].maxPerWallet - l.walletMinted[tierId][minter];\\n\\n        if (l.tiers[tierId].merkleRoot != bytes32(0)) {\\n            require(l.walletMinted[tierId][minter] < maxAllowance, \\\"MAXED_ALLOWANCE\\\");\\n            require(_onTierAllowlist(tierId, minter, maxAllowance, proof), \\\"NOT_ALLOWLISTED\\\");\\n\\n            uint256 remainingAllowance = maxAllowance - l.walletMinted[tierId][minter];\\n\\n            if (maxMintable > remainingAllowance) {\\n                maxMintable = remainingAllowance;\\n            }\\n        }\\n    }\\n\\n    function _availableSupplyForTier(uint256 tierId) internal view virtual returns (uint256 remaining) {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        // Substract all the remaining reserved spots from the total remaining supply...\\n        remaining = _remainingSupplyForTier(tierId) - (l.totalReserved - l.reservedMints);\\n\\n        // If this tier has reserved spots, add remaining spots back to result...\\n        if (l.tiers[tierId].reserved > 0) {\\n            remaining += (l.tiers[tierId].reserved - l.tierMints[tierId]);\\n        }\\n    }\\n\\n    function _executeSale(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) internal virtual {\\n        address minter = _msgSender();\\n\\n        uint256 maxMintable = _eligibleForTier(tierId, minter, maxAllowance, proof);\\n\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        require(count <= maxMintable, \\\"EXCEEDS_MAX\\\");\\n        require(count <= _availableSupplyForTier(tierId), \\\"EXCEEDS_ALLOCATION\\\");\\n        require(count + l.tierMints[tierId] <= l.tiers[tierId].maxAllocation, \\\"EXCEEDS_ALLOCATION\\\");\\n\\n        if (l.tiers[tierId].currency == address(0)) {\\n            require(l.tiers[tierId].price * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n        } else {\\n            IERC20(l.tiers[tierId].currency).transferFrom(minter, address(this), l.tiers[tierId].price * count);\\n        }\\n\\n        l.walletMinted[tierId][minter] += count;\\n        l.tierMints[tierId] += count;\\n\\n        if (l.tiers[tierId].reserved > 0) {\\n            l.reservedMints += count;\\n        }\\n    }\\n\\n    function _remainingSupplyForTier(\\n        uint256 /*tierId*/\\n    ) internal view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /* PRIVATE */\\n\\n    function _generateMerkleLeaf(address account, uint256 maxAllowance) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, maxAllowance));\\n    }\\n}\\n\",\"keccak256\":\"0x3881ec0a19d983699dc2ef9dd4d19b860d20c5c1b7776fb47f3ae5d7cf621116\",\"license\":\"MIT\"},\"src/finance/sales/TieredSalesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./ITieredSales.sol\\\";\\n\\nlibrary TieredSalesStorage {\\n    struct Layout {\\n        uint256 totalReserved;\\n        uint256 reservedMints;\\n        mapping(uint256 => ITieredSales.Tier) tiers;\\n        mapping(uint256 => uint256) tierMints;\\n        mapping(uint256 => mapping(address => uint256)) walletMinted;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.TieredSales\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xffe3323cd374edf50e6d431e638527e0868de7f81623362e96a153d044f23e25\",\"license\":\"MIT\"},\"src/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC165\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId) internal view returns (bool) {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x636f4f2767ec384741cf56d2a1e8974c0bba208ca07de7258d4c98f93e680e1a\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./ERC2771ContextStorage.sol\\\";\\n\\nabstract contract ERC2771ContextInternal is Context {\\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x71d8e16ef98cee59e83c46fcf6f77ee851344f5fa2139722c3c0b482c9eaa2a1\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC2771ContextStorage {\\n    struct Layout {\\n        address trustedForwarder;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC2771Context\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29460eb99b9b76b701424d400001cbd6ecbf62874946ce91ce0b4af27f9f3fe6\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/mintable/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC1155Mintable {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintByFacet(\\n        address[] calldata tos,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd96779e40396479877630a8f1ce268e811ae45bd5222221d64e1601f788de188\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155SupplyStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => uint256) maxSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Supply\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8d194b171fccce7a314328a4682f65b45154c283d109b4bd7112d52a9f2cd16\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/IERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that tracks supply and defines a max supply cap per token ID.\\n */\\ninterface IERC1155Supply {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Maximum amount of tokens possible to exist for a given id.\\n     */\\n    function maxSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x59ca2ef958902c6a39a1e8aa99009af1943db7eda9d7d39e776af0cb960df699\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/sales/ERC1155TieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../../../../introspection/ERC165Storage.sol\\\";\\nimport \\\"../../../../finance/sales/TieredSales.sol\\\";\\nimport \\\"../../extensions/mintable/IERC1155Mintable.sol\\\";\\nimport \\\"../../extensions/supply/ERC1155SupplyStorage.sol\\\";\\nimport \\\"../../extensions/supply/IERC1155Supply.sol\\\";\\nimport \\\"./ERC1155TieredSalesStorage.sol\\\";\\nimport \\\"./IERC1155TieredSales.sol\\\";\\n\\n/**\\n * @title ERC1155 - Tiered Sales\\n * @notice Sales mechanism for ERC1155 NFTs with multiple tiered pricing, allowlist and allocation plans.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:required-dependencies 0xbb774d48\\n * @custom:provides-interfaces 0x79f33254 0x5ae18a74\\n */\\ncontract ERC1155TieredSales is IERC1155TieredSales, ReentrancyGuard, TieredSales {\\n    using ERC165Storage for ERC165Storage.Layout;\\n    using ERC1155TieredSalesStorage for ERC1155TieredSalesStorage.Layout;\\n    using ERC1155SupplyStorage for ERC1155SupplyStorage.Layout;\\n\\n    function mintByTier(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external payable virtual nonReentrant {\\n        super._executeSale(tierId, count, maxAllowance, proof);\\n\\n        IERC1155Mintable(address(this)).mintByFacet(\\n            _msgSender(),\\n            ERC1155TieredSalesStorage.layout().tierToTokenId[tierId],\\n            count,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    function tierToTokenId(uint256 tierId) external view virtual returns (uint256) {\\n        return ERC1155TieredSalesStorage.layout().tierToTokenId[tierId];\\n    }\\n\\n    function tierToTokenId(uint256[] calldata tierIds) external view virtual returns (uint256[] memory) {\\n        uint256[] memory tokenIds = new uint256[](tierIds.length);\\n\\n        for (uint256 i = 0; i < tierIds.length; i++) {\\n            tokenIds[i] = ERC1155TieredSalesStorage.layout().tierToTokenId[tierIds[i]];\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    function _remainingSupplyForTier(uint256 tierId) internal view virtual override returns (uint256) {\\n        if (!ERC165Storage.layout().supportedInterfaces[type(IERC1155Supply).interfaceId]) {\\n            return type(uint256).max;\\n        }\\n\\n        uint256 tokenId = ERC1155TieredSalesStorage.layout().tierToTokenId[tierId];\\n\\n        uint256 remainingSupply = ERC1155SupplyStorage.layout().maxSupply[tokenId] -\\n            ERC1155SupplyStorage.layout().totalSupply[tokenId];\\n\\n        return remainingSupply;\\n    }\\n}\\n\",\"keccak256\":\"0x02e3cae5b6e5a8e5a7ceda9e5a6819a5cedce04d972868866ee88bfaf372ea83\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/sales/ERC1155TieredSalesERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../../metatx/ERC2771ContextInternal.sol\\\";\\nimport \\\"./ERC1155TieredSales.sol\\\";\\n\\n/**\\n * @dev Tiered Sales facet for ERC1155 with meta-transactions support via ERC2771\\n */\\ncontract ERC1155TieredSalesERC2771 is ERC1155TieredSales, ERC2771ContextInternal {\\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\\n        return ERC2771ContextInternal._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\\n        return ERC2771ContextInternal._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xe6e4aefc70038582603c7c3676a5680daf9b5220394c6c53090b389a717caa24\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/sales/ERC1155TieredSalesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155TieredSalesStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) tierToTokenId;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155TieredSales\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb0b0f5aa99bffbb0a6e74b04ed6c800edbc024c4c42146465b76b7f9878b44fc\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/sales/IERC1155TieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155TieredSales {\\n    function tierToTokenId(uint256 tierId) external view returns (uint256);\\n\\n    function tierToTokenId(uint256[] calldata tierIds) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xd7136c9160040909f10dc546a89397d034868d17e6c956714e0769f3ffe91cf8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Tiered Sales facet for ERC1155 with meta-transactions support via ERC2771",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "src/token/ERC1155/facets/sales/ERC1155TieredSalesERC2771.sol:ERC1155TieredSalesERC2771",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}