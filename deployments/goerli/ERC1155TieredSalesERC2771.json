{
  "address": "0xA4c050edd78d26e0D3BF1e113cBa25E2c009585a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        }
      ],
      "name": "maxMintableForTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxMintable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "allowlistProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mintByTier",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "allowlistProof",
          "type": "bytes32[]"
        }
      ],
      "name": "onTierAllowlist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "remainingForTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "tierMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "tierToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tierIds",
          "type": "uint256[]"
        }
      ],
      "name": "tierToTokenId",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "reserved",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAllocation",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            }
          ],
          "internalType": "struct ITieredSalesInternal.Tier",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifySignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "walletMintedByTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x19f974e79b97a732342021d0464b1a6a17cc184304d6afa8ed8e92d5126e6600",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xA4c050edd78d26e0D3BF1e113cBa25E2c009585a",
    "transactionIndex": 71,
    "gasUsed": "1702619",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x602e7b5f1115af34c0cb4dac9967e43683d0f70bc652c7a2d59f113b84d4145d",
    "transactionHash": "0x19f974e79b97a732342021d0464b1a6a17cc184304d6afa8ed8e92d5126e6600",
    "logs": [],
    "blockNumber": 7769108,
    "cumulativeGasUsed": "19461385",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "c55c02555ed2787a9a3699470ac3d317",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"}],\"name\":\"maxMintableForTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"allowlistProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintByTier\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"allowlistProof\",\"type\":\"bytes32[]\"}],\"name\":\"onTierAllowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"remainingForTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"tierMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"tierToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tierIds\",\"type\":\"uint256[]\"}],\"name\":\"tierToTokenId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"reserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllocation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"internalType\":\"struct ITieredSalesInternal.Tier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"walletMintedByTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Tiered Sales facet for ERC1155 with meta-transactions support via ERC2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/facets/sales/ERC1155TieredSalesERC2771.sol\":\"ERC1155TieredSalesERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xe2a19d82d7050c0cd1afb542253f65ce34a650d7d99c0ffcdec6b4274fc51e31\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0x1f1b08cba51a05c8cea04e13251f9f8b8fc895017071cb205b0b4170900d1e5b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xaf69959fcc5b87a74426939bc35b8517566494e3ba575b5cfdb1b5c788c0636a\",\"license\":\"MIT\"},\"src/finance/sales/ITieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./ITieredSalesInternal.sol\\\";\\n\\ninterface ITieredSales is ITieredSalesInternal {\\n    function onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata allowlistProof\\n    ) external view returns (bool);\\n\\n    function verifySignature(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes calldata signature\\n    ) external view returns (bool);\\n\\n    function maxMintableForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance\\n    ) external view returns (uint256);\\n\\n    function mintByTier(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata allowlistProof,\\n        bytes calldata signature\\n    ) external payable;\\n\\n    function remainingForTier(uint256 tierId) external view returns (uint256);\\n\\n    function walletMintedByTier(uint256 tierId, address wallet) external view returns (uint256);\\n\\n    function tierMints(uint256 tierId) external view returns (uint256);\\n\\n    function totalReserved() external view returns (uint256);\\n\\n    function reservedMints() external view returns (uint256);\\n\\n    function tiers(uint256 tierId) external view returns (Tier memory);\\n}\\n\",\"keccak256\":\"0xc21a086b05103b6335fdbc99a0f983e320b6d9e8322ef2becbbbd47cbb981dd5\",\"license\":\"MIT\"},\"src/finance/sales/ITieredSalesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ITieredSalesInternal {\\n    struct Tier {\\n        uint256 start;\\n        uint256 end;\\n        address currency;\\n        uint256 price;\\n        uint256 maxPerWallet;\\n        bytes32 merkleRoot;\\n        uint256 reserved;\\n        uint256 maxAllocation;\\n        address signer;\\n    }\\n}\\n\",\"keccak256\":\"0x8a2ababf21b31457ec78ab6a307a8e8b87f8f90e3246a9c551f00357421000a0\",\"license\":\"MIT\"},\"src/finance/sales/TieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./ITieredSales.sol\\\";\\nimport \\\"./TieredSalesInternal.sol\\\";\\n\\n/**\\n * @title Abstract sales mechanism for any asset (e.g NFTs) with multiple tiered pricing, allowlist and allocation plans.\\n */\\nabstract contract TieredSales is ITieredSales, TieredSalesInternal {\\n    function onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata allowlistProof\\n    ) public view virtual returns (bool) {\\n        return super._onTierAllowlist(tierId, minter, maxAllowance, allowlistProof);\\n    }\\n\\n    function verifySignature(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes calldata signature\\n    ) public view virtual returns (bool) {\\n        return\\n            super._verifySignature(\\n                TieredSalesStorage.layout().tiers[tierId].signer,\\n                tierId,\\n                minter,\\n                maxAllowance,\\n                signature\\n            );\\n    }\\n\\n    function maxMintableForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance\\n    ) public view virtual returns (uint256 maxMintable) {\\n        return super._maxMintableForTier(tierId, minter, maxAllowance);\\n    }\\n\\n    function remainingForTier(uint256 tierId) public view virtual returns (uint256) {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        uint256 availableSupply = _availableSupplyForTier(tierId);\\n        uint256 availableAllocation = l.tiers[tierId].maxAllocation - l.tierMints[tierId];\\n\\n        if (availableSupply < availableAllocation) {\\n            return availableSupply;\\n        } else {\\n            return availableAllocation;\\n        }\\n    }\\n\\n    function walletMintedByTier(uint256 tierId, address wallet) public view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().walletMinted[tierId][wallet];\\n    }\\n\\n    function tierMints(uint256 tierId) public view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().tierMints[tierId];\\n    }\\n\\n    function totalReserved() external view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().totalReserved;\\n    }\\n\\n    function reservedMints() external view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().reservedMints;\\n    }\\n\\n    function tiers(uint256 tierId) external view virtual returns (Tier memory) {\\n        return TieredSalesStorage.layout().tiers[tierId];\\n    }\\n}\\n\",\"keccak256\":\"0x8a68c937136bd90cc990073c0d16b4344631e732c94e27306ecdd2641715d5b7\",\"license\":\"MIT\"},\"src/finance/sales/TieredSalesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"./ITieredSalesInternal.sol\\\";\\nimport \\\"./TieredSalesStorage.sol\\\";\\n\\nimport \\\"../../access/ownable/OwnableInternal.sol\\\";\\n\\n/**\\n * @title Sales mechanism for NFTs with multiple tiered pricing, allowlist and allocation plans\\n */\\nabstract contract TieredSalesInternal is ITieredSalesInternal, Context, OwnableInternal {\\n    using ECDSA for bytes32;\\n    using TieredSalesStorage for TieredSalesStorage.Layout;\\n\\n    function _configureTiering(uint256 tierId, Tier calldata tier) internal virtual {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        require(tier.maxAllocation >= l.tierMints[tierId], \\\"LOWER_THAN_MINTED\\\");\\n\\n        if (l.tiers[tierId].reserved > 0) {\\n            require(tier.reserved >= l.tierMints[tierId], \\\"LOW_RESERVE_AMOUNT\\\");\\n        }\\n\\n        if (l.tierMints[tierId] > 0) {\\n            require(tier.maxPerWallet >= l.tiers[tierId].maxPerWallet, \\\"LOW_MAX_PER_WALLET\\\");\\n        }\\n\\n        l.totalReserved -= l.tiers[tierId].reserved;\\n        l.tiers[tierId] = tier;\\n        l.totalReserved += tier.reserved;\\n    }\\n\\n    function _configureTiering(uint256[] calldata _tierIds, Tier[] calldata _tiers) internal virtual {\\n        for (uint256 i = 0; i < _tierIds.length; i++) {\\n            _configureTiering(_tierIds[i], _tiers[i]);\\n        }\\n    }\\n\\n    function _onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata allowlistProof\\n    ) internal view virtual returns (bool) {\\n        return\\n            MerkleProof.verify(\\n                allowlistProof,\\n                TieredSalesStorage.layout().tiers[tierId].merkleRoot,\\n                _generateMerkleLeaf(minter, maxAllowance)\\n            );\\n    }\\n\\n    function _verifySignature(\\n        address signer,\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes calldata signature\\n    ) internal view virtual returns (bool) {\\n        address recoveredSignerAddr = _typeHashTierTicket(tierId, minter, maxAllowance).recover(signature);\\n\\n        return recoveredSignerAddr == signer;\\n    }\\n\\n    function _maxMintableForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance\\n    ) internal view virtual returns (uint256 maxMintable) {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        require(l.tiers[tierId].maxPerWallet > 0, \\\"NOT_EXISTS\\\");\\n        require(block.timestamp >= l.tiers[tierId].start, \\\"NOT_STARTED\\\");\\n        require(block.timestamp <= l.tiers[tierId].end, \\\"ALREADY_ENDED\\\");\\n\\n        maxMintable = l.tiers[tierId].maxPerWallet - l.walletMinted[tierId][minter];\\n\\n        require(l.walletMinted[tierId][minter] < maxAllowance, \\\"MAXED_ALLOWANCE\\\");\\n\\n        uint256 remainingAllowance = maxAllowance - l.walletMinted[tierId][minter];\\n\\n        if (maxMintable > remainingAllowance) {\\n            maxMintable = remainingAllowance;\\n        }\\n    }\\n\\n    function _availableSupplyForTier(uint256 tierId) internal view virtual returns (uint256 remaining) {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        // Substract all the remaining reserved spots from the total remaining supply...\\n        remaining = _remainingSupply(tierId) - (l.totalReserved - l.reservedMints);\\n\\n        // If this tier has reserved spots, add remaining spots back to result...\\n        if (l.tiers[tierId].reserved > 0) {\\n            remaining += (l.tiers[tierId].reserved - l.tierMints[tierId]);\\n        }\\n    }\\n\\n    function _executeSale(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata allowlistProof,\\n        bytes calldata signature\\n    ) internal virtual {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        address minter = _msgSender();\\n\\n        {\\n            uint256 maxMintable = _maxMintableForTier(tierId, minter, maxAllowance);\\n\\n            require(count <= maxMintable, \\\"EXCEEDS_MAX\\\");\\n            require(count <= _availableSupplyForTier(tierId), \\\"EXCEEDS_SUPPLY\\\");\\n            require(count + l.tierMints[tierId] <= l.tiers[tierId].maxAllocation, \\\"EXCEEDS_ALLOCATION\\\");\\n\\n            if (l.tiers[tierId].merkleRoot != bytes32(0)) {\\n                require(_onTierAllowlist(tierId, minter, maxAllowance, allowlistProof), \\\"NOT_ALLOWLISTED\\\");\\n            }\\n\\n            if (l.tiers[tierId].signer != address(0)) {\\n                require(\\n                    _verifySignature(l.tiers[tierId].signer, tierId, minter, maxAllowance, signature),\\n                    \\\"INVALID_SIGNATURE\\\"\\n                );\\n            }\\n        }\\n\\n        if (l.tiers[tierId].currency == address(0)) {\\n            require(l.tiers[tierId].price * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n        } else {\\n            IERC20(l.tiers[tierId].currency).transferFrom(minter, address(this), l.tiers[tierId].price * count);\\n        }\\n\\n        {\\n            l.walletMinted[tierId][minter] += count;\\n            l.tierMints[tierId] += count;\\n\\n            if (l.tiers[tierId].reserved > 0) {\\n                l.reservedMints += count;\\n            }\\n        }\\n    }\\n\\n    function _remainingSupply(\\n        uint256 /*tierId*/\\n    ) internal view virtual returns (uint256) {\\n        // By default assume supply is unlimited (that means reserving allocation for tiers is irrelevant)\\n        return type(uint256).max;\\n    }\\n\\n    /* PRIVATE */\\n\\n    function _generateMerkleLeaf(address account, uint256 maxAllowance) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, maxAllowance));\\n    }\\n\\n    function _typeHashTierTicket(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance\\n    ) internal view returns (bytes32) {\\n        /* Per EIP 712. */\\n        bytes32 structHash = keccak256(\\n            abi.encode(TieredSalesStorage.TIER_TICKET_TYPEHASH, tierId, minter, maxAllowance)\\n        );\\n\\n        return ECDSA.toTypedDataHash(_tieredSalesDomainSeparator(), structHash);\\n    }\\n\\n    /**\\n     * @notice return the EIP-712 domain separator unique to contract and chain\\n     * @return domainSeparator domain separator\\n     */\\n    function _tieredSalesDomainSeparator() internal view returns (bytes32 domainSeparator) {\\n        domainSeparator = TieredSalesStorage.layout().domainSeparators[_chainId()];\\n\\n        if (domainSeparator == 0x00) {\\n            domainSeparator = _calculateDomainSeparator();\\n        }\\n    }\\n\\n    function _calculateDomainSeparator() private view returns (bytes32 domainSeparator) {\\n        // no need for assembly, running very rarely\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(\\\"TieredSales\\\")), // Name\\n                keccak256(bytes(\\\"2.x\\\")), // Version\\n                _chainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _chainId() private view returns (uint256 chainId) {\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xade766849623d9f5a7afc838050db05186107e72b913e8a3c5770ad018565a76\",\"license\":\"MIT\"},\"src/finance/sales/TieredSalesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./ITieredSales.sol\\\";\\n\\nlibrary TieredSalesStorage {\\n    struct Layout {\\n        mapping(uint256 => bytes32) domainSeparators;\\n        uint256 totalReserved;\\n        uint256 reservedMints;\\n        mapping(uint256 => ITieredSales.Tier) tiers;\\n        mapping(uint256 => uint256) tierMints;\\n        mapping(uint256 => mapping(address => uint256)) walletMinted;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.TieredSales\\\");\\n\\n    /* Typehash for EIP-712 */\\n    bytes32 internal constant TIER_TICKET_TYPEHASH =\\n        keccak256(\\\"TierTicket(uint256 tierId,address minter,uint256 maxAllowance)\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x08ef8e62691a05a9289615980c69694c42603d82fe5ae6306095bc172b938074\",\"license\":\"MIT\"},\"src/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC165\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId) internal view returns (bool) {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x8f7ee2e4f1d03abed56da30ff881baeff0f95aca7468e0c48261a4f613b5186b\",\"license\":\"MIT\"},\"src/metatx/erc2771/ERC2771ContextInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./ERC2771ContextStorage.sol\\\";\\n\\nabstract contract ERC2771ContextInternal is Context {\\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78f51039de18500ce56634bfa72f8d8a0510c97dd94f175e1cbd2385d4ae37\",\"license\":\"MIT\"},\"src/metatx/erc2771/ERC2771ContextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC2771ContextStorage {\\n    struct Layout {\\n        address trustedForwarder;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC2771Context\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb2e9e2c6145ecf4aae84a602ff668269869da26b25924e9b486b5e94936740e\",\"license\":\"MIT\"},\"src/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport { ReentrancyGuardStorage } from \\\"./ReentrancyGuardStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    using ReentrancyGuardStorage for ReentrancyGuardStorage.Layout;\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(ReentrancyGuardStorage.layout()._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        ReentrancyGuardStorage.layout()._status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        ReentrancyGuardStorage.layout()._status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x4bc4be7d7fab61f39f6e81f8430ad95a3ee6eba664a7bdb4fe1eb095f71c8a3b\",\"license\":\"MIT\"},\"src/security/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 _status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ReentrancyGuard\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf949d5ea9e6ff1af5da384c7d20834e3a62b814d56e830f662f559f61e1c8931\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/mintable/IERC1155MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC1155MintableExtension {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintByFacet(\\n        address[] calldata tos,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) external;\\n}\\n\",\"keccak256\":\"0x36a66ac7363491121de86a844df3da8d25195bab00cba74b6fa67ae020715d65\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC1155SupplyStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => uint256) maxSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Supply\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc914234f2b860ff31a51b08e0cbae0ea110b59425f892c98090f4bbd8ea0330a\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/IERC1155SupplyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that tracks supply and defines a max supply cap per token ID.\\n */\\ninterface IERC1155SupplyExtension {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Maximum amount of tokens possible to exist for a given id.\\n     */\\n    function maxSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe3770f06c4abd9378f182c4ca003c54dd3ab5932989707b210674ec8d5d169c7\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/sales/ERC1155TieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../introspection/ERC165Storage.sol\\\";\\nimport \\\"../../../../security/ReentrancyGuard.sol\\\";\\nimport \\\"../../../../finance/sales/TieredSales.sol\\\";\\nimport \\\"../../extensions/mintable/IERC1155MintableExtension.sol\\\";\\nimport \\\"../../extensions/supply/ERC1155SupplyStorage.sol\\\";\\nimport \\\"../../extensions/supply/IERC1155SupplyExtension.sol\\\";\\nimport \\\"./ERC1155TieredSalesStorage.sol\\\";\\nimport \\\"./IERC1155TieredSales.sol\\\";\\n\\n/**\\n * @title ERC1155 - Tiered Sales\\n * @notice Sales mechanism for ERC1155 NFTs with multiple tiered pricing, allowlist and allocation plans.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:required-dependencies IERC1155MintableExtension\\n * @custom:provides-interfaces ITieredSales IERC1155TieredSales\\n */\\ncontract ERC1155TieredSales is IERC1155TieredSales, ReentrancyGuard, TieredSales {\\n    using ERC165Storage for ERC165Storage.Layout;\\n    using ERC1155TieredSalesStorage for ERC1155TieredSalesStorage.Layout;\\n    using ERC1155SupplyStorage for ERC1155SupplyStorage.Layout;\\n\\n    function mintByTier(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata allowlistProof,\\n        bytes calldata signature\\n    ) external payable virtual nonReentrant {\\n        super._executeSale(tierId, count, maxAllowance, allowlistProof, signature);\\n\\n        IERC1155MintableExtension(address(this)).mintByFacet(\\n            _msgSender(),\\n            ERC1155TieredSalesStorage.layout().tierToTokenId[tierId],\\n            count,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    function tierToTokenId(uint256 tierId) external view virtual returns (uint256) {\\n        return ERC1155TieredSalesStorage.layout().tierToTokenId[tierId];\\n    }\\n\\n    function tierToTokenId(uint256[] calldata tierIds) external view virtual returns (uint256[] memory) {\\n        uint256[] memory tokenIds = new uint256[](tierIds.length);\\n\\n        for (uint256 i = 0; i < tierIds.length; i++) {\\n            tokenIds[i] = ERC1155TieredSalesStorage.layout().tierToTokenId[tierIds[i]];\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    function _remainingSupply(uint256 tierId) internal view virtual override returns (uint256) {\\n        if (!ERC165Storage.layout().supportedInterfaces[type(IERC1155SupplyExtension).interfaceId]) {\\n            return type(uint256).max;\\n        }\\n\\n        uint256 tokenId = ERC1155TieredSalesStorage.layout().tierToTokenId[tierId];\\n\\n        uint256 remainingSupply = ERC1155SupplyStorage.layout().maxSupply[tokenId] -\\n            ERC1155SupplyStorage.layout().totalSupply[tokenId];\\n\\n        return remainingSupply;\\n    }\\n}\\n\",\"keccak256\":\"0x4e804fd36b8cdd0ffbc580f3ea2eced5449d575d2fdaa2ff2536ea1e4ae97741\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/sales/ERC1155TieredSalesERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../metatx/erc2771/ERC2771ContextInternal.sol\\\";\\nimport \\\"./ERC1155TieredSales.sol\\\";\\n\\n/**\\n * @dev Tiered Sales facet for ERC1155 with meta-transactions support via ERC2771\\n */\\ncontract ERC1155TieredSalesERC2771 is ERC1155TieredSales, ERC2771ContextInternal {\\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\\n        return ERC2771ContextInternal._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\\n        return ERC2771ContextInternal._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x4ad5a3cf948a0a9634f948abde9978188ea947a1c60a2a18811e528337686e54\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/sales/ERC1155TieredSalesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC1155TieredSalesStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) tierToTokenId;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155TieredSales\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44239064b2c50b7892d0d0e7d460d80cc1efcc7c74283f1801f2b4f981bac566\",\"license\":\"MIT\"},\"src/token/ERC1155/facets/sales/IERC1155TieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC1155TieredSales {\\n    function tierToTokenId(uint256 tierId) external view returns (uint256);\\n\\n    function tierToTokenId(uint256[] calldata tierIds) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x4bef4517f50d67747e095620910677b6b9c1c3b02abaca2946e8bcab1edd8c50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611df3806100206000396000f3fe6080604052600436106100c75760003560e01c80635897f87811610074578063a7268b851161004e578063a7268b8514610365578063ba09e6321461037a578063c71b0e1c1461039a57600080fd5b80635897f878146102f557806368c7d37c146103155780639e5177951461034557600080fd5b80632cb9b2ac116100a55780632cb9b2ac1461024857806351607bf41461027c57806353367f08146102a957600080fd5b8063039af9eb146100cc5780630b81f1801461017f5780631123f2ef146101d9575b600080fd5b3480156100d857600080fd5b506100ec6100e736600461197b565b6103ce565b60405161017691906000610120820190508251825260208301516020830152604083015173ffffffffffffffffffffffffffffffffffffffff8082166040850152606085015160608501526080850151608085015260a085015160a085015260c085015160c085015260e085015160e0850152610100915080828601511682850152505092915050565b60405180910390f35b34801561018b57600080fd5b506101cb61019a36600461197b565b60009081527f46f908971db3fbea57e8a21b2e54575e0e567ff2f950ead3c0dc83f15ec67154602052604090205490565b604051908152602001610176565b3480156101e557600080fd5b506101cb6101f43660046119bd565b60009182527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cc06020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205490565b34801561025457600080fd5b507fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbd546101cb565b34801561028857600080fd5b5061029c610297366004611a2e565b6104fd565b6040516101769190611a70565b3480156102b557600080fd5b506101cb6102c436600461197b565b60009081527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbf602052604090205490565b34801561030157600080fd5b506101cb61031036600461197b565b6105d3565b34801561032157600080fd5b50610335610330366004611ab4565b61064a565b6040519015158152602001610176565b34801561035157600080fd5b50610335610360366004611b5e565b610663565b610378610373366004611bb5565b6106b8565b005b34801561038657600080fd5b506101cb610395366004611c42565b610869565b3480156103a657600080fd5b507fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbc546101cb565b61044c6040518061012001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600080191681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b5060009081527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbe602090815260409182902082516101208101845281548152600182015492810192909252600281015473ffffffffffffffffffffffffffffffffffffffff908116938301939093526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e08301526008015490911661010082015290565b606060008267ffffffffffffffff81111561051a5761051a611c77565b604051908082528060200260200182016040528015610543578160200160208202803683370190505b50905060005b838110156105cb577f46f908971db3fbea57e8a21b2e54575e0e567ff2f950ead3c0dc83f15ec67154600086868481811061058657610586611ca6565b905060200201358152602001908152602001600020548282815181106105ae576105ae611ca6565b6020908102919091010152806105c381611d04565b915050610549565b509392505050565b60007fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb816106008461089a565b60008581526004840160209081526040808320546003870190925282206007015492935090916106309190611d1e565b90508082101561064257509392505050565b949350505050565b6000610659868686868661097b565b9695505050505050565b60008581527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbe60205260408120600801546106599073ffffffffffffffffffffffffffffffffffffffff1687878787876109e2565b60027f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e0540361072e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60027f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e05561076187878787878787610a5b565b3063b164884b61076f610f11565b7f46f908971db3fbea57e8a21b2e54575e0e567ff2f950ead3c0dc83f15ec6715460008b815260209190915260408082205490517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff90931660048401526024830152604482018a905260806064830152608482015260a401600060405180830381600087803b15801561081e57600080fd5b505af1158015610832573d6000803e3d6000fd5b50505050600161085f7f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e090565b5550505050505050565b6000610642848484610f20565b7fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb90565b7fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbd547fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbc546000917fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb9161090d9190611d1e565b610916846111a5565b6109209190611d1e565b60008481526003830160205260409020600601549092501561097557600083815260048201602090815260408083205460038501909252909120600601546109689190611d1e565b6109729083611d35565b91505b50919050565b60006106598383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506109bd9250610876915050565b600089815260039190910160205260409020600501546109dd88886112b0565b61130b565b600080610a3284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a2c92508b91508a905089611321565b906113ae565b73ffffffffffffffffffffffffffffffffffffffff908116908916149150509695505050505050565b7fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb6000610a86610f11565b90506000610a958a838a610f20565b905080891115610ae75760405162461bcd60e51b815260206004820152600b60248201527f455843454544535f4d41580000000000000000000000000000000000000000006044820152606401610725565b610af08a61089a565b891115610b3f5760405162461bcd60e51b815260206004820152600e60248201527f455843454544535f535550504c590000000000000000000000000000000000006044820152606401610725565b60008a81526003840160209081526040808320600701546004870190925290912054610b6b908b611d35565b1115610bb95760405162461bcd60e51b815260206004820152601260248201527f455843454544535f414c4c4f434154494f4e00000000000000000000000000006044820152606401610725565b60008a815260038401602052604090206005015415610c2b57610bdf8a838a8a8a61097b565b610c2b5760405162461bcd60e51b815260206004820152600f60248201527f4e4f545f414c4c4f574c495354454400000000000000000000000000000000006044820152606401610725565b60008a815260038401602052604090206008015473ffffffffffffffffffffffffffffffffffffffff1615610cde5760008a8152600384016020526040902060080154610c929073ffffffffffffffffffffffffffffffffffffffff168b848b89896109e2565b610cde5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e41545552450000000000000000000000000000006044820152606401610725565b50600089815260038301602052604090206002015473ffffffffffffffffffffffffffffffffffffffff16610d815760008981526003808401602052604090912001543490610d2e908a90611d4d565b1115610d7c5760405162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e54000000000000000000000000006044820152606401610725565b610e68565b600089815260038084016020526040909120600281015491015473ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9083903090610dc9908d90611d4d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e669190611d6c565b505b6000898152600583016020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152812080548a9290610ea9908490611d35565b90915550506000898152600483016020526040812080548a9290610ece908490611d35565b9091555050600089815260038301602052604090206006015415610f065787826002016000828254610f009190611d35565b90915550505b505050505050505050565b6000610f1b6113ca565b905090565b60008381527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbe60205260408120600401547fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb90610fbf5760405162461bcd60e51b815260206004820152600a60248201527f4e4f545f455849535453000000000000000000000000000000000000000000006044820152606401610725565b600085815260038201602052604090205442101561101f5760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f535441525445440000000000000000000000000000000000000000006044820152606401610725565b60008581526003820160205260409020600101544211156110825760405162461bcd60e51b815260206004820152600d60248201527f414c52454144595f454e444544000000000000000000000000000000000000006044820152606401610725565b6000858152600582016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816845282528083205488845260038501909252909120600401546110cf9190611d1e565b6000868152600583016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916845290915290205490925083116111525760405162461bcd60e51b815260206004820152600f60248201527f4d415845445f414c4c4f57414e434500000000000000000000000000000000006044820152606401610725565b6000858152600582016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816845290915281205461118e9085611d1e565b90508083111561119c578092505b50509392505050565b7f744f4bd40000000000000000000000000000000000000000000000000000000060009081527fff923f4a67695a9cdd5da4b8580a5a20edf2183c42aa111dd7fc15dc7bed26406020527f35d3cc196fdbb37c639d9ccf02c0ac54b3a84c388495dbf9ab724144133fc6255460ff166112215750600019919050565b60008281527f46f908971db3fbea57e8a21b2e54575e0e567ff2f950ead3c0dc83f15ec6715460209081526040808320548084527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea58352818420547f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea69093529083205490929161064291611d1e565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b166020820152603481018290526000906054015b60405160208183030381529060405280519060200120905092915050565b600082611318858461143e565b14949350505050565b604080517f9f23751fb533d9025a36e9b630533d87af20421d8c8b005f4bda04e23ce057e3602082015290810184905273ffffffffffffffffffffffffffffffffffffffff8316606082015260808101829052600090819060a0016040516020818303038152906040528051906020012090506113a561139f611483565b826115bb565b95945050505050565b60008060006113bd85856115fd565b915091506105cb81611642565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f4205460009073ffffffffffffffffffffffffffffffffffffffff16330361143657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b90565b600081815b84518110156105cb5761146f8286838151811061146257611462611ca6565b6020026020010151611831565b91508061147b81611d04565b915050611443565b4660009081527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb60205260408120549081900361143b5750604080518082018252600b81527f54696572656453616c657300000000000000000000000000000000000000000060209182015281518083018352600381527f322e7800000000000000000000000000000000000000000000000000000000009082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f0a8f5cd262c609ce448522f0993fd8cd7e4c5487b979cac486662358ea244890818401527ff5f84182131be97a41a3d4efb82d0a0d5698d76e6ec4dc9589738f1341d900c960608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012090565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101839052604281018290526000906062016112ed565b60008082516041036116335760208301516040840151606085015160001a61162787828585611863565b9450945050505061163b565b506000905060025b9250929050565b600081600481111561165657611656611d8e565b0361165e5750565b600181600481111561167257611672611d8e565b036116bf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610725565b60028160048111156116d3576116d3611d8e565b036117205760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610725565b600381600481111561173457611734611d8e565b036117a75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610725565b60048160048111156117bb576117bb611d8e565b0361182e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610725565b50565b600081831061184d57600082815260208490526040902061185c565b60008381526020839052604090205b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561189a5750600090506003611972565b8460ff16601b141580156118b257508460ff16601c14155b156118c35750600090506004611972565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611917573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661196b57600060019250925050611972565b9150600090505b94509492505050565b60006020828403121561198d57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146119b857600080fd5b919050565b600080604083850312156119d057600080fd5b823591506119e060208401611994565b90509250929050565b60008083601f8401126119fb57600080fd5b50813567ffffffffffffffff811115611a1357600080fd5b6020830191508360208260051b850101111561163b57600080fd5b60008060208385031215611a4157600080fd5b823567ffffffffffffffff811115611a5857600080fd5b611a64858286016119e9565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611aa857835183529284019291840191600101611a8c565b50909695505050505050565b600080600080600060808688031215611acc57600080fd5b85359450611adc60208701611994565b935060408601359250606086013567ffffffffffffffff811115611aff57600080fd5b611b0b888289016119e9565b969995985093965092949392505050565b60008083601f840112611b2e57600080fd5b50813567ffffffffffffffff811115611b4657600080fd5b60208301915083602082850101111561163b57600080fd5b600080600080600060808688031215611b7657600080fd5b85359450611b8660208701611994565b935060408601359250606086013567ffffffffffffffff811115611ba957600080fd5b611b0b88828901611b1c565b600080600080600080600060a0888a031215611bd057600080fd5b873596506020880135955060408801359450606088013567ffffffffffffffff80821115611bfd57600080fd5b611c098b838c016119e9565b909650945060808a0135915080821115611c2257600080fd5b50611c2f8a828b01611b1c565b989b979a50959850939692959293505050565b600080600060608486031215611c5757600080fd5b83359250611c6760208501611994565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006000198203611d1757611d17611cd5565b5060010190565b600082821015611d3057611d30611cd5565b500390565b60008219821115611d4857611d48611cd5565b500190565b6000816000190483118215151615611d6757611d67611cd5565b500290565b600060208284031215611d7e57600080fd5b8151801515811461185c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220b596b59b0470feff9bf39dab319b7c0a75bcda8f90cfc33bd6f6a3f5497b481e64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106100c75760003560e01c80635897f87811610074578063a7268b851161004e578063a7268b8514610365578063ba09e6321461037a578063c71b0e1c1461039a57600080fd5b80635897f878146102f557806368c7d37c146103155780639e5177951461034557600080fd5b80632cb9b2ac116100a55780632cb9b2ac1461024857806351607bf41461027c57806353367f08146102a957600080fd5b8063039af9eb146100cc5780630b81f1801461017f5780631123f2ef146101d9575b600080fd5b3480156100d857600080fd5b506100ec6100e736600461197b565b6103ce565b60405161017691906000610120820190508251825260208301516020830152604083015173ffffffffffffffffffffffffffffffffffffffff8082166040850152606085015160608501526080850151608085015260a085015160a085015260c085015160c085015260e085015160e0850152610100915080828601511682850152505092915050565b60405180910390f35b34801561018b57600080fd5b506101cb61019a36600461197b565b60009081527f46f908971db3fbea57e8a21b2e54575e0e567ff2f950ead3c0dc83f15ec67154602052604090205490565b604051908152602001610176565b3480156101e557600080fd5b506101cb6101f43660046119bd565b60009182527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cc06020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205490565b34801561025457600080fd5b507fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbd546101cb565b34801561028857600080fd5b5061029c610297366004611a2e565b6104fd565b6040516101769190611a70565b3480156102b557600080fd5b506101cb6102c436600461197b565b60009081527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbf602052604090205490565b34801561030157600080fd5b506101cb61031036600461197b565b6105d3565b34801561032157600080fd5b50610335610330366004611ab4565b61064a565b6040519015158152602001610176565b34801561035157600080fd5b50610335610360366004611b5e565b610663565b610378610373366004611bb5565b6106b8565b005b34801561038657600080fd5b506101cb610395366004611c42565b610869565b3480156103a657600080fd5b507fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbc546101cb565b61044c6040518061012001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600080191681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b5060009081527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbe602090815260409182902082516101208101845281548152600182015492810192909252600281015473ffffffffffffffffffffffffffffffffffffffff908116938301939093526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e08301526008015490911661010082015290565b606060008267ffffffffffffffff81111561051a5761051a611c77565b604051908082528060200260200182016040528015610543578160200160208202803683370190505b50905060005b838110156105cb577f46f908971db3fbea57e8a21b2e54575e0e567ff2f950ead3c0dc83f15ec67154600086868481811061058657610586611ca6565b905060200201358152602001908152602001600020548282815181106105ae576105ae611ca6565b6020908102919091010152806105c381611d04565b915050610549565b509392505050565b60007fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb816106008461089a565b60008581526004840160209081526040808320546003870190925282206007015492935090916106309190611d1e565b90508082101561064257509392505050565b949350505050565b6000610659868686868661097b565b9695505050505050565b60008581527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbe60205260408120600801546106599073ffffffffffffffffffffffffffffffffffffffff1687878787876109e2565b60027f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e0540361072e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60027f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e05561076187878787878787610a5b565b3063b164884b61076f610f11565b7f46f908971db3fbea57e8a21b2e54575e0e567ff2f950ead3c0dc83f15ec6715460008b815260209190915260408082205490517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff90931660048401526024830152604482018a905260806064830152608482015260a401600060405180830381600087803b15801561081e57600080fd5b505af1158015610832573d6000803e3d6000fd5b50505050600161085f7f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e090565b5550505050505050565b6000610642848484610f20565b7fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb90565b7fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbd547fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbc546000917fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb9161090d9190611d1e565b610916846111a5565b6109209190611d1e565b60008481526003830160205260409020600601549092501561097557600083815260048201602090815260408083205460038501909252909120600601546109689190611d1e565b6109729083611d35565b91505b50919050565b60006106598383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506109bd9250610876915050565b600089815260039190910160205260409020600501546109dd88886112b0565b61130b565b600080610a3284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a2c92508b91508a905089611321565b906113ae565b73ffffffffffffffffffffffffffffffffffffffff908116908916149150509695505050505050565b7fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb6000610a86610f11565b90506000610a958a838a610f20565b905080891115610ae75760405162461bcd60e51b815260206004820152600b60248201527f455843454544535f4d41580000000000000000000000000000000000000000006044820152606401610725565b610af08a61089a565b891115610b3f5760405162461bcd60e51b815260206004820152600e60248201527f455843454544535f535550504c590000000000000000000000000000000000006044820152606401610725565b60008a81526003840160209081526040808320600701546004870190925290912054610b6b908b611d35565b1115610bb95760405162461bcd60e51b815260206004820152601260248201527f455843454544535f414c4c4f434154494f4e00000000000000000000000000006044820152606401610725565b60008a815260038401602052604090206005015415610c2b57610bdf8a838a8a8a61097b565b610c2b5760405162461bcd60e51b815260206004820152600f60248201527f4e4f545f414c4c4f574c495354454400000000000000000000000000000000006044820152606401610725565b60008a815260038401602052604090206008015473ffffffffffffffffffffffffffffffffffffffff1615610cde5760008a8152600384016020526040902060080154610c929073ffffffffffffffffffffffffffffffffffffffff168b848b89896109e2565b610cde5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e41545552450000000000000000000000000000006044820152606401610725565b50600089815260038301602052604090206002015473ffffffffffffffffffffffffffffffffffffffff16610d815760008981526003808401602052604090912001543490610d2e908a90611d4d565b1115610d7c5760405162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e54000000000000000000000000006044820152606401610725565b610e68565b600089815260038084016020526040909120600281015491015473ffffffffffffffffffffffffffffffffffffffff909116906323b872dd9083903090610dc9908d90611d4d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e669190611d6c565b505b6000898152600583016020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152812080548a9290610ea9908490611d35565b90915550506000898152600483016020526040812080548a9290610ece908490611d35565b9091555050600089815260038301602052604090206006015415610f065787826002016000828254610f009190611d35565b90915550505b505050505050505050565b6000610f1b6113ca565b905090565b60008381527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbe60205260408120600401547fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb90610fbf5760405162461bcd60e51b815260206004820152600a60248201527f4e4f545f455849535453000000000000000000000000000000000000000000006044820152606401610725565b600085815260038201602052604090205442101561101f5760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f535441525445440000000000000000000000000000000000000000006044820152606401610725565b60008581526003820160205260409020600101544211156110825760405162461bcd60e51b815260206004820152600d60248201527f414c52454144595f454e444544000000000000000000000000000000000000006044820152606401610725565b6000858152600582016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816845282528083205488845260038501909252909120600401546110cf9190611d1e565b6000868152600583016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916845290915290205490925083116111525760405162461bcd60e51b815260206004820152600f60248201527f4d415845445f414c4c4f57414e434500000000000000000000000000000000006044820152606401610725565b6000858152600582016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816845290915281205461118e9085611d1e565b90508083111561119c578092505b50509392505050565b7f744f4bd40000000000000000000000000000000000000000000000000000000060009081527fff923f4a67695a9cdd5da4b8580a5a20edf2183c42aa111dd7fc15dc7bed26406020527f35d3cc196fdbb37c639d9ccf02c0ac54b3a84c388495dbf9ab724144133fc6255460ff166112215750600019919050565b60008281527f46f908971db3fbea57e8a21b2e54575e0e567ff2f950ead3c0dc83f15ec6715460209081526040808320548084527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea58352818420547f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea69093529083205490929161064291611d1e565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b166020820152603481018290526000906054015b60405160208183030381529060405280519060200120905092915050565b600082611318858461143e565b14949350505050565b604080517f9f23751fb533d9025a36e9b630533d87af20421d8c8b005f4bda04e23ce057e3602082015290810184905273ffffffffffffffffffffffffffffffffffffffff8316606082015260808101829052600090819060a0016040516020818303038152906040528051906020012090506113a561139f611483565b826115bb565b95945050505050565b60008060006113bd85856115fd565b915091506105cb81611642565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f4205460009073ffffffffffffffffffffffffffffffffffffffff16330361143657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b90565b600081815b84518110156105cb5761146f8286838151811061146257611462611ca6565b6020026020010151611831565b91508061147b81611d04565b915050611443565b4660009081527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb60205260408120549081900361143b5750604080518082018252600b81527f54696572656453616c657300000000000000000000000000000000000000000060209182015281518083018352600381527f322e7800000000000000000000000000000000000000000000000000000000009082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f0a8f5cd262c609ce448522f0993fd8cd7e4c5487b979cac486662358ea244890818401527ff5f84182131be97a41a3d4efb82d0a0d5698d76e6ec4dc9589738f1341d900c960608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012090565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101839052604281018290526000906062016112ed565b60008082516041036116335760208301516040840151606085015160001a61162787828585611863565b9450945050505061163b565b506000905060025b9250929050565b600081600481111561165657611656611d8e565b0361165e5750565b600181600481111561167257611672611d8e565b036116bf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610725565b60028160048111156116d3576116d3611d8e565b036117205760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610725565b600381600481111561173457611734611d8e565b036117a75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610725565b60048160048111156117bb576117bb611d8e565b0361182e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610725565b50565b600081831061184d57600082815260208490526040902061185c565b60008381526020839052604090205b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561189a5750600090506003611972565b8460ff16601b141580156118b257508460ff16601c14155b156118c35750600090506004611972565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611917573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661196b57600060019250925050611972565b9150600090505b94509492505050565b60006020828403121561198d57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146119b857600080fd5b919050565b600080604083850312156119d057600080fd5b823591506119e060208401611994565b90509250929050565b60008083601f8401126119fb57600080fd5b50813567ffffffffffffffff811115611a1357600080fd5b6020830191508360208260051b850101111561163b57600080fd5b60008060208385031215611a4157600080fd5b823567ffffffffffffffff811115611a5857600080fd5b611a64858286016119e9565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611aa857835183529284019291840191600101611a8c565b50909695505050505050565b600080600080600060808688031215611acc57600080fd5b85359450611adc60208701611994565b935060408601359250606086013567ffffffffffffffff811115611aff57600080fd5b611b0b888289016119e9565b969995985093965092949392505050565b60008083601f840112611b2e57600080fd5b50813567ffffffffffffffff811115611b4657600080fd5b60208301915083602082850101111561163b57600080fd5b600080600080600060808688031215611b7657600080fd5b85359450611b8660208701611994565b935060408601359250606086013567ffffffffffffffff811115611ba957600080fd5b611b0b88828901611b1c565b600080600080600080600060a0888a031215611bd057600080fd5b873596506020880135955060408801359450606088013567ffffffffffffffff80821115611bfd57600080fd5b611c098b838c016119e9565b909650945060808a0135915080821115611c2257600080fd5b50611c2f8a828b01611b1c565b989b979a50959850939692959293505050565b600080600060608486031215611c5757600080fd5b83359250611c6760208501611994565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006000198203611d1757611d17611cd5565b5060010190565b600082821015611d3057611d30611cd5565b500390565b60008219821115611d4857611d48611cd5565b500190565b6000816000190483118215151615611d6757611d67611cd5565b500290565b600060208284031215611d7e57600080fd5b8151801515811461185c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220b596b59b0470feff9bf39dab319b7c0a75bcda8f90cfc33bd6f6a3f5497b481e64736f6c634300080f0033",
  "devdoc": {
    "details": "Tiered Sales facet for ERC1155 with meta-transactions support via ERC2771",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}