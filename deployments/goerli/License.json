{
  "address": "0x5116dE42771394c6c5E6f12895d0Fc2EA5fEeBF7",
  "abi": [
    {
      "inputs": [],
      "name": "ErrLicenseLocked",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "customLicenseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "customLicenseName",
          "type": "string"
        }
      ],
      "name": "CustomLicenseSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "LicenseLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ILicenseInternal.LicenseVersion",
          "name": "licenseVersion",
          "type": "uint8"
        }
      ],
      "name": "LicenseVersionSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "customLicenseName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "customLicenseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLicenseName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLicenseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "licenseVersion",
      "outputs": [
        {
          "internalType": "enum ILicenseInternal.LicenseVersion",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a87908c75c8f366a20e23510b1a43470705a9119432c889cbd7658dc070e723",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x5116dE42771394c6c5E6f12895d0Fc2EA5fEeBF7",
    "transactionIndex": 63,
    "gasUsed": "557573",
    "logsBloom": "0x
    "blockHash": "0xb15f646430a174ea86d06630b2ac944ec423a97baa1db274f2520d6a2f467774",
    "transactionHash": "0x9a87908c75c8f366a20e23510b1a43470705a9119432c889cbd7658dc070e723",
    "logs": [],
    "blockNumber": 7732895,
    "cumulativeGasUsed": "24356975",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3658236a21462c4569b756c91b400284",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrLicenseLocked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"customLicenseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"customLicenseName\",\"type\":\"string\"}],\"name\":\"CustomLicenseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LicenseLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ILicenseInternal.LicenseVersion\",\"name\":\"licenseVersion\",\"type\":\"uint8\"}],\"name\":\"LicenseVersionSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"customLicenseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customLicenseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLicenseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLicenseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"licenseVersion\",\"outputs\":[{\"internalType\":\"enum ILicenseInternal.LicenseVersion\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Legal\",\"custom:provides-interfaces\":\"0xec3bb95b 0x649a51a8\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"License\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Add license name and content URI for interacting or holding assets of this contract. Based on a16z's \\\"Can't Be Evil\\\".\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/legal/license/License.sol\":\"License\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/legal/license/ILicense.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./a16z/ICantBeEvil.sol\\\";\\nimport \\\"./ILicenseInternal.sol\\\";\\n\\ninterface ILicense is ILicenseInternal, ICantBeEvil {\\n    function licenseVersion() external view returns (ILicenseInternal.LicenseVersion);\\n\\n    function customLicenseURI() external view returns (string memory);\\n\\n    function customLicenseName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb9ef3fe3e76f97b4101bcdd6c521796ee45a78013191ff34f8d5053e6211fb9e\",\"license\":\"AGPL-3.0\"},\"src/legal/license/ILicenseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.15;\\n\\ninterface ILicenseInternal {\\n    enum LicenseVersion {\\n        CBE_CC0,\\n        CBE_ECR,\\n        CBE_NECR,\\n        CBE_NECR_HS,\\n        CBE_PR,\\n        CBE_PR_HS,\\n        CUSTOM,\\n        UNLICENSED\\n    }\\n\\n    error ErrLicenseLocked();\\n\\n    event CustomLicenseSet(string customLicenseURI, string customLicenseName);\\n    event LicenseVersionSet(LicenseVersion licenseVersion);\\n    event LicenseLocked();\\n}\\n\",\"keccak256\":\"0xc75d2e95c5ae90c2b0839a7f5597a949850ce695162b8f3347768b98db113b92\",\"license\":\"AGPL-3.0\"},\"src/legal/license/License.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./LicenseStorage.sol\\\";\\nimport \\\"./LicenseInternal.sol\\\";\\nimport \\\"./ILicense.sol\\\";\\n\\n/**\\n * @title License\\n * @notice Add license name and content URI for interacting or holding assets of this contract. Based on a16z's \\\"Can't Be Evil\\\".\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Legal\\n * @custom:provides-interfaces 0xec3bb95b 0x649a51a8\\n */\\ncontract License is ILicense, LicenseInternal {\\n    function getLicenseURI() external view returns (string memory) {\\n        return _getLicenseURI();\\n    }\\n\\n    function getLicenseName() external view returns (string memory) {\\n        return _getLicenseName();\\n    }\\n\\n    function licenseVersion() external view returns (LicenseVersion) {\\n        return _licenseVersion();\\n    }\\n\\n    function customLicenseURI() external view returns (string memory) {\\n        return LicenseStorage.layout().customLicenseURI;\\n    }\\n\\n    function customLicenseName() external view returns (string memory) {\\n        return LicenseStorage.layout().customLicenseName;\\n    }\\n}\\n\",\"keccak256\":\"0x26c613173fff5b631c1dd513703d545aa63a32bb692f0ed90c15fe31dde7d126\",\"license\":\"AGPL-3.0\"},\"src/legal/license/LicenseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./LicenseStorage.sol\\\";\\nimport \\\"./ILicenseInternal.sol\\\";\\n\\n/**\\n * @title Functionality to expose license name and URI for the assets of the contract.\\n */\\nabstract contract LicenseInternal is ILicenseInternal {\\n    using Strings for uint256;\\n    using LicenseStorage for LicenseStorage.Layout;\\n\\n    string internal constant A16Z_BASE_LICENSE_URI = \\\"ar://_D9kN1WrNWbCq55BSAGRbTB4bS3v8QAPTYmBThSbX3A/\\\";\\n\\n    function _licenseVersion() internal view virtual returns (ILicenseInternal.LicenseVersion) {\\n        return LicenseStorage.layout().licenseVersion;\\n    }\\n\\n    function _getLicenseURI() internal view virtual returns (string memory) {\\n        LicenseStorage.Layout storage l = LicenseStorage.layout();\\n\\n        if (l.licenseVersion == LicenseVersion.CUSTOM) {\\n            return l.customLicenseURI;\\n        }\\n        if (l.licenseVersion == LicenseVersion.UNLICENSED) {\\n            return \\\"\\\";\\n        }\\n\\n        return string.concat(A16Z_BASE_LICENSE_URI, uint256(l.licenseVersion).toString());\\n    }\\n\\n    function _getLicenseName() internal view virtual returns (string memory) {\\n        LicenseStorage.Layout storage l = LicenseStorage.layout();\\n\\n        if (l.licenseVersion == LicenseVersion.CUSTOM) {\\n            return l.customLicenseName;\\n        }\\n\\n        if (l.licenseVersion == LicenseVersion.UNLICENSED) {\\n            return \\\"\\\";\\n        }\\n\\n        if (LicenseVersion.CBE_CC0 == l.licenseVersion) return \\\"CBE_CC0\\\";\\n        if (LicenseVersion.CBE_ECR == l.licenseVersion) return \\\"CBE_ECR\\\";\\n        if (LicenseVersion.CBE_NECR == l.licenseVersion) return \\\"CBE_NECR\\\";\\n        if (LicenseVersion.CBE_NECR_HS == l.licenseVersion) return \\\"CBE_NECR_HS\\\";\\n        if (LicenseVersion.CBE_PR == l.licenseVersion) return \\\"CBE_PR\\\";\\n        else return \\\"CBE_PR_HS\\\";\\n    }\\n\\n    function _setCustomLicense(string calldata _customLicenseName, string calldata _customLicenseURI) internal virtual {\\n        LicenseStorage.Layout storage l = LicenseStorage.layout();\\n\\n        if (l.licenseVersionLocked) {\\n            revert ErrLicenseLocked();\\n        }\\n\\n        l.licenseVersion = LicenseVersion.CUSTOM;\\n        l.customLicenseName = _customLicenseName;\\n        l.customLicenseURI = _customLicenseURI;\\n\\n        emit CustomLicenseSet(_customLicenseName, _customLicenseURI);\\n    }\\n\\n    function _setLicenseVersion(LicenseVersion _newVersion) internal virtual {\\n        LicenseStorage.Layout storage l = LicenseStorage.layout();\\n\\n        if (l.licenseVersionLocked) {\\n            revert ErrLicenseLocked();\\n        }\\n\\n        l.licenseVersion = _newVersion;\\n\\n        emit LicenseVersionSet(_newVersion);\\n    }\\n\\n    function _lockLicenseVersion() internal virtual {\\n        LicenseStorage.layout().licenseVersionLocked = true;\\n\\n        emit LicenseLocked();\\n    }\\n}\\n\",\"keccak256\":\"0xb2ca3335d821bcda8387ea30cc82c59fe6976ba51a9cd2dbbf8cc7c13a471422\",\"license\":\"MIT\"},\"src/legal/license/LicenseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./ILicenseInternal.sol\\\";\\n\\nlibrary LicenseStorage {\\n    struct Layout {\\n        ILicenseInternal.LicenseVersion licenseVersion;\\n        string customLicenseURI;\\n        string customLicenseName;\\n        bool licenseVersionLocked;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.License\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97b1ddcd6aff15f09ac577f9d8874c119090c8e5309e18b1a563af5497a44cc3\",\"license\":\"MIT\"},\"src/legal/license/a16z/ICantBeEvil.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.15;\\n\\n// Adopted from \\\"@a16z/contracts/licenses/CantBeEvil.sol\\\"\\ninterface ICantBeEvil {\\n    function getLicenseURI() external view returns (string memory);\\n\\n    function getLicenseName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7eaf39d01529af1e7260c30ea63c74cf53f683ea6151378202a206090a1360ca\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610929806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a341793b11610050578063a341793b1461009f578063c7db2893146100a7578063d41a6f5f146100af57600080fd5b806350a5292f1461006c5780636884ff2b1461008a575b600080fd5b6100746100b7565b6040516100819190610706565b60405180910390f35b6100926100e9565b604051610081919061075e565b61009261019d565b6100926101a7565b6100926101b1565b60006100e47f686fbd75ec6671870c2ca65eac65ee184d2285f055fb69de73ba3ce5549e15f65460ff1690565b905090565b60607f686fbd75ec6671870c2ca65eac65ee184d2285f055fb69de73ba3ce5549e15f6600101805461011a90610791565b80601f016020809104026020016040519081016040528092919081815260200182805461014690610791565b80156101935780601f1061016857610100808354040283529160200191610193565b820191906000526020600020905b81548152906001019060200180831161017657829003601f168201915b5050505050905090565b60606100e46101e2565b60606100e46104d1565b60607f686fbd75ec6671870c2ca65eac65ee184d2285f055fb69de73ba3ce5549e15f6600201805461011a90610791565b606060007f686fbd75ec6671870c2ca65eac65ee184d2285f055fb69de73ba3ce5549e15f690506006815460ff166007811115610221576102216106f0565b036102b95780600201805461023590610791565b80601f016020809104026020016040519081016040528092919081815260200182805461026190610791565b80156102ae5780601f10610283576101008083540402835291602001916102ae565b820191906000526020600020905b81548152906001019060200180831161029157829003601f168201915b505050505091505090565b6007815460ff1660078111156102d1576102d16106f0565b036102ea57505060408051602081019091526000815290565b805460ff166007811115610300576103006106f0565b60000361034057505060408051808201909152600781527f4342455f43433000000000000000000000000000000000000000000000000000602082015290565b805460ff166007811115610356576103566106f0565b60010361039657505060408051808201909152600781527f4342455f45435200000000000000000000000000000000000000000000000000602082015290565b805460ff1660078111156103ac576103ac6106f0565b6002036103ec57505060408051808201909152600881527f4342455f4e454352000000000000000000000000000000000000000000000000602082015290565b805460ff166007811115610402576104026106f0565b60030361044257505060408051808201909152600b81527f4342455f4e4543525f4853000000000000000000000000000000000000000000602082015290565b805460ff166007811115610458576104586106f0565b60040361049857505060408051808201909152600681527f4342455f50520000000000000000000000000000000000000000000000000000602082015290565b505060408051808201909152600981527f4342455f50525f48530000000000000000000000000000000000000000000000602082015290565b606060007f686fbd75ec6671870c2ca65eac65ee184d2285f055fb69de73ba3ce5549e15f690506006815460ff166007811115610510576105106106f0565b036105245780600101805461023590610791565b6007815460ff16600781111561053c5761053c6106f0565b0361055557505060408051602081019091526000815290565b6040518060600160405280603181526020016108c360319139815461058d9060ff166007811115610588576105886106f0565b6105b3565b60405160200161059e9291906107cb565b60405160208183030381529060405291505090565b6060816000036105f657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610620578061060a81610810565b91506106199050600a8361083f565b91506105fa565b60008167ffffffffffffffff81111561063b5761063b610853565b6040519080825280601f01601f191660200182016040528015610665576020820181803683370190505b5090505b84156106e85761067a600183610869565b9150610687600a86610880565b610692906030610894565b60f81b8183815181106106a7576106a76108ac565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506106e1600a8661083f565b9450610669565b949350505050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061072857634e487b7160e01b600052602160045260246000fd5b91905290565b60005b83811015610749578181015183820152602001610731565b83811115610758576000848401525b50505050565b602081526000825180602084015261077d81604085016020870161072e565b601f01601f19169190910160400192915050565b600181811c908216806107a557607f821691505b6020821081036107c557634e487b7160e01b600052602260045260246000fd5b50919050565b600083516107dd81846020880161072e565b8351908301906107f181836020880161072e565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610822576108226107fa565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261084e5761084e610829565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561087b5761087b6107fa565b500390565b60008261088f5761088f610829565b500690565b600082198211156108a7576108a76107fa565b500190565b634e487b7160e01b600052603260045260246000fdfe61723a2f2f5f44396b4e3157724e576243713535425341475262544234625333763851415054596d42546853625833412fa26469706673582212200c58ee21ac526bf52f845016ce36aabc1872cdf0d37fbcd386dd6101773cf62e64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063a341793b11610050578063a341793b1461009f578063c7db2893146100a7578063d41a6f5f146100af57600080fd5b806350a5292f1461006c5780636884ff2b1461008a575b600080fd5b6100746100b7565b6040516100819190610706565b60405180910390f35b6100926100e9565b604051610081919061075e565b61009261019d565b6100926101a7565b6100926101b1565b60006100e47f686fbd75ec6671870c2ca65eac65ee184d2285f055fb69de73ba3ce5549e15f65460ff1690565b905090565b60607f686fbd75ec6671870c2ca65eac65ee184d2285f055fb69de73ba3ce5549e15f6600101805461011a90610791565b80601f016020809104026020016040519081016040528092919081815260200182805461014690610791565b80156101935780601f1061016857610100808354040283529160200191610193565b820191906000526020600020905b81548152906001019060200180831161017657829003601f168201915b5050505050905090565b60606100e46101e2565b60606100e46104d1565b60607f686fbd75ec6671870c2ca65eac65ee184d2285f055fb69de73ba3ce5549e15f6600201805461011a90610791565b606060007f686fbd75ec6671870c2ca65eac65ee184d2285f055fb69de73ba3ce5549e15f690506006815460ff166007811115610221576102216106f0565b036102b95780600201805461023590610791565b80601f016020809104026020016040519081016040528092919081815260200182805461026190610791565b80156102ae5780601f10610283576101008083540402835291602001916102ae565b820191906000526020600020905b81548152906001019060200180831161029157829003601f168201915b505050505091505090565b6007815460ff1660078111156102d1576102d16106f0565b036102ea57505060408051602081019091526000815290565b805460ff166007811115610300576103006106f0565b60000361034057505060408051808201909152600781527f4342455f43433000000000000000000000000000000000000000000000000000602082015290565b805460ff166007811115610356576103566106f0565b60010361039657505060408051808201909152600781527f4342455f45435200000000000000000000000000000000000000000000000000602082015290565b805460ff1660078111156103ac576103ac6106f0565b6002036103ec57505060408051808201909152600881527f4342455f4e454352000000000000000000000000000000000000000000000000602082015290565b805460ff166007811115610402576104026106f0565b60030361044257505060408051808201909152600b81527f4342455f4e4543525f4853000000000000000000000000000000000000000000602082015290565b805460ff166007811115610458576104586106f0565b60040361049857505060408051808201909152600681527f4342455f50520000000000000000000000000000000000000000000000000000602082015290565b505060408051808201909152600981527f4342455f50525f48530000000000000000000000000000000000000000000000602082015290565b606060007f686fbd75ec6671870c2ca65eac65ee184d2285f055fb69de73ba3ce5549e15f690506006815460ff166007811115610510576105106106f0565b036105245780600101805461023590610791565b6007815460ff16600781111561053c5761053c6106f0565b0361055557505060408051602081019091526000815290565b6040518060600160405280603181526020016108c360319139815461058d9060ff166007811115610588576105886106f0565b6105b3565b60405160200161059e9291906107cb565b60405160208183030381529060405291505090565b6060816000036105f657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610620578061060a81610810565b91506106199050600a8361083f565b91506105fa565b60008167ffffffffffffffff81111561063b5761063b610853565b6040519080825280601f01601f191660200182016040528015610665576020820181803683370190505b5090505b84156106e85761067a600183610869565b9150610687600a86610880565b610692906030610894565b60f81b8183815181106106a7576106a76108ac565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506106e1600a8661083f565b9450610669565b949350505050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061072857634e487b7160e01b600052602160045260246000fd5b91905290565b60005b83811015610749578181015183820152602001610731565b83811115610758576000848401525b50505050565b602081526000825180602084015261077d81604085016020870161072e565b601f01601f19169190910160400192915050565b600181811c908216806107a557607f821691505b6020821081036107c557634e487b7160e01b600052602260045260246000fd5b50919050565b600083516107dd81846020880161072e565b8351908301906107f181836020880161072e565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610822576108226107fa565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261084e5761084e610829565b500490565b634e487b7160e01b600052604160045260246000fd5b60008282101561087b5761087b6107fa565b500390565b60008261088f5761088f610829565b500690565b600082198211156108a7576108a76107fa565b500190565b634e487b7160e01b600052603260045260246000fdfe61723a2f2f5f44396b4e3157724e576243713535425341475262544234625333763851415054596d42546853625833412fa26469706673582212200c58ee21ac526bf52f845016ce36aabc1872cdf0d37fbcd386dd6101773cf62e64736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Legal",
    "custom:provides-interfaces": "0xec3bb95b 0x649a51a8",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "License",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Add license name and content URI for interacting or holding assets of this contract. Based on a16z's \"Can't Be Evil\".",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}