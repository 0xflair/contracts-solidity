{
  "address": "0x310aC50d2be97C3DB184B21F10F5ADb1c6b1fcD2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRoyaltyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "TokenRoyaltySet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFeeBps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFeeRecipients",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRaribleV2Royalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenRoyaltiesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTokenRoyaltyByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IRoyaltyInternal.TokenRoyaltyConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f347fc753020dbea287488f45970909e4fe945503a610bfe82061c0d4761fec",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x310aC50d2be97C3DB184B21F10F5ADb1c6b1fcD2",
    "transactionIndex": 45,
    "gasUsed": "523894",
    "logsBloom": "0x
    "blockHash": "0xf5ce4dc81cd1e46fefa6194d87d2307930c622a1365477cf2e5b7eb79c36773c",
    "transactionHash": "0x5f347fc753020dbea287488f45970909e4fe945503a610bfe82061c0d4761fec",
    "logs": [],
    "blockNumber": 7711446,
    "cumulativeGasUsed": "13652049",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "363731581ff015b2055daf0e9e0f8bde",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRoyaltyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRoyaltiesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyaltyByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IRoyaltyInternal.TokenRoyaltyConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Finance\",\"custom:provides-interfaces\":\"0xcad96cca 0xc69dbd8f\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"getFeeRecipients(uint256)\":{\"details\":\"IRaribleV1\"},\"getFees(uint256)\":{\"details\":\"IFoundation\"},\"getRaribleV2Royalties(uint256)\":{\"details\":\"IRaribleV2\"},\"getTokenRoyaltiesCount()\":{\"details\":\"IEIP2981RoyaltyOverride (Manifold)\"},\"getTokenRoyaltyByIndex(uint256)\":{\"details\":\"Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"EIP-2981\"}},\"title\":\"ERC2981 - Royalty\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provide standard on-chain EIP-2981 royalty support for ERC721 or ERC1155 tokens, and additional functions for Rarible and Foundation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/finance/royalty/Royalty.sol\":\"Royalty\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\ninterface IEIP2981RoyaltyOverride is IERC165 {\\n\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns(uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external view returns(TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n\\n}\\n\",\"keccak256\":\"0xb7f47d4711c6eb42dc5874ad916713ffb6e8754ad568cdb5e9b0c5fcb028c698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"src/finance/royalty/IRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\\\";\\n\\nimport \\\"./rarible/IRoyalties.sol\\\";\\nimport \\\"./rarible/LibPart.sol\\\";\\nimport \\\"./IRoyaltyInternal.sol\\\";\\n\\ninterface IRoyalty is IRoyaltyInternal, IRoyalties {\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external view returns (TokenRoyaltyConfig memory);\\n}\\n\",\"keccak256\":\"0x2dcd3fa36459313f62129cd23605684775c9010ed3cb1da974594306a3ca0a26\",\"license\":\"AGPL-3.0\"},\"src/finance/royalty/IRoyaltyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IRoyaltyInternal {\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n}\\n\",\"keccak256\":\"0x55db3f48d35d8f10788bf2ad3ef4ec9993647bc25475cdf5efaaa9fd54516569\",\"license\":\"MIT\"},\"src/finance/royalty/Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./RoyaltyInternal.sol\\\";\\nimport \\\"./RoyaltyStorage.sol\\\";\\nimport \\\"./IRoyalty.sol\\\";\\n\\n/**\\n * @title ERC2981 - Royalty\\n * @notice Provide standard on-chain EIP-2981 royalty support for ERC721 or ERC1155 tokens, and additional functions for Rarible and Foundation.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Finance\\n * @custom:provides-interfaces 0xcad96cca 0xc69dbd8f\\n */\\ncontract Royalty is IRoyalty, RoyaltyInternal {\\n    /**\\n     * @dev EIP-2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view virtual returns (address, uint256) {\\n        return _royaltyInfo(tokenId, value);\\n    }\\n\\n    /**\\n     * @dev IEIP2981RoyaltyOverride (Manifold)\\n     */\\n    function getTokenRoyaltiesCount() external view virtual override returns (uint256) {\\n        return _getTokenRoyaltiesCount();\\n    }\\n\\n    function getTokenRoyaltyByIndex(uint256 index) external view virtual override returns (TokenRoyaltyConfig memory) {\\n        return _getTokenRoyaltyByIndex(index);\\n    }\\n\\n    /**\\n     * @dev IFoundation\\n     */\\n    function getFees(uint256 tokenId) external view virtual returns (address payable[] memory, uint256[] memory) {\\n        address payable[] memory receivers = new address payable[](1);\\n        uint256[] memory bps = new uint256[](1);\\n\\n        (address receiver, uint256 value) = _royaltyInfo(tokenId, 10000);\\n\\n        receivers[0] = payable(receiver);\\n        bps[0] = value;\\n\\n        return (receivers, bps);\\n    }\\n\\n    /**\\n     * @dev IRaribleV1\\n     */\\n    function getFeeRecipients(uint256 tokenId) external view virtual returns (address payable[] memory) {\\n        address payable[] memory receivers = new address payable[](1);\\n\\n        (address receiver, ) = _royaltyInfo(tokenId, 10000);\\n        receivers[0] = payable(receiver);\\n\\n        return receivers;\\n    }\\n\\n    function getFeeBps(uint256 tokenId) external view virtual returns (uint256[] memory) {\\n        uint256[] memory bps = new uint256[](1);\\n\\n        (, uint256 value) = _royaltyInfo(tokenId, 10000);\\n\\n        bps[0] = value;\\n\\n        return bps;\\n    }\\n\\n    /**\\n     * @dev IRaribleV2\\n     */\\n    function getRaribleV2Royalties(uint256 tokenId)\\n        external\\n        view\\n        override(IRoyalties)\\n        returns (LibPart.Part[] memory result)\\n    {\\n        result = new LibPart.Part[](1);\\n\\n        // Passing 10,000 as value will give us the bps (basis points, out of 10,000) of the royalty.\\n        (address account, uint256 value) = _royaltyInfo(tokenId, 10000);\\n\\n        result[0].account = payable(account);\\n        result[0].value = uint96(value);\\n    }\\n}\\n\",\"keccak256\":\"0x1efd683c39e0ef06cb1e3b281bb0e0e654468864870a75ba0f3cc711a8b435c3\",\"license\":\"AGPL-3.0\"},\"src/finance/royalty/RoyaltyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IRoyaltyInternal.sol\\\";\\nimport \\\"./RoyaltyStorage.sol\\\";\\n\\n/**\\n * @title Royalty standard functionality base on EIP-2981 (derived from Manifold.xyz contracts to adopt Diamond architecture)\\n */\\nabstract contract RoyaltyInternal is IRoyaltyInternal {\\n    using RoyaltyStorage for RoyaltyStorage.Layout;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @dev Sets token royalties. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs) internal virtual {\\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\\n\\n        for (uint256 i = 0; i < royaltyConfigs.length; i++) {\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\n\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\n\\n            if (royaltyConfig.recipient == address(0)) {\\n                delete l.tokenRoyalties[royaltyConfig.tokenId];\\n                l.tokensWithRoyalties.remove(royaltyConfig.tokenId);\\n\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\n            } else {\\n                l.tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(royaltyConfig.recipient, royaltyConfig.bps);\\n                l.tokensWithRoyalties.add(royaltyConfig.tokenId);\\n\\n                emit TokenRoyaltySet(royaltyConfig.tokenId, royaltyConfig.recipient, royaltyConfig.bps);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets default royalty. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal virtual {\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\n\\n        RoyaltyStorage.layout().defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\n\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\n     */\\n    function _getTokenRoyaltiesCount() internal view virtual returns (uint256) {\\n        return RoyaltyStorage.layout().tokensWithRoyalties.length();\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\n     */\\n    function _getTokenRoyaltyByIndex(uint256 index) internal view virtual returns (TokenRoyaltyConfig memory) {\\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\\n\\n        uint256 tokenId = l.tokensWithRoyalties.at(index);\\n        TokenRoyalty memory royalty = l.tokenRoyalties[tokenId];\\n\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\n     */\\n    function _royaltyInfo(uint256 tokenId, uint256 value) internal view virtual returns (address, uint256) {\\n        RoyaltyStorage.Layout storage l = RoyaltyStorage.layout();\\n\\n        if (l.tokenRoyalties[tokenId].recipient != address(0)) {\\n            return (l.tokenRoyalties[tokenId].recipient, (value * l.tokenRoyalties[tokenId].bps) / 10000);\\n        }\\n\\n        if (l.defaultRoyalty.recipient != address(0) && l.defaultRoyalty.bps != 0) {\\n            return (l.defaultRoyalty.recipient, (value * l.defaultRoyalty.bps) / 10000);\\n        }\\n\\n        return (address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0x28e0731f23f41aa1421735e93c10435023368721efaf8d9b4e15ce4b21cadab3\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IRoyaltyInternal.sol\\\";\\nimport \\\"./IRoyalty.sol\\\";\\n\\nlibrary RoyaltyStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct Layout {\\n        IRoyaltyInternal.TokenRoyalty defaultRoyalty;\\n        mapping(uint256 => IRoyaltyInternal.TokenRoyalty) tokenRoyalties;\\n        EnumerableSet.UintSet tokensWithRoyalties;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Royalty\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9d9f32073c4fc94ec40826e7288c9c61cf700bc961a96fc0f7649eb3d9d8d3b\",\"license\":\"MIT\"},\"src/finance/royalty/rarible/IRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface IRoyalties {\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x24a8daacfc4605ae9a0425319a743da6760ec2bf812e1f7bc8367f606d9250ba\",\"license\":\"MIT\"},\"src/finance/royalty/rarible/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH =\\n        keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0x3760ed091741e10ea42975124780b905a846fcad9e270386f89f70f7b607b0c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610884806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637e9803421161005b5780637e9803421461011b578063b9c4d9fb14610131578063cad96cca14610151578063d5a06d4c1461017157600080fd5b80630653aca5146100825780630ebd4c7f146100c95780632a55205a146100e9575b600080fd5b610095610090366004610680565b610192565b60408051825181526020808401516001600160a01b0316908201529181015161ffff16908201526060015b60405180910390f35b6100dc6100d7366004610680565b6101be565b6040516100c091906106d4565b6100fc6100f73660046106e7565b61021b565b604080516001600160a01b0390931683526020830191909152016100c0565b610123610234565b6040519081526020016100c0565b61014461013f366004610680565b610243565b6040516100c09190610742565b61016461015f366004610680565b6102ad565b6040516100c09190610755565b61018461017f366004610680565b610381565b6040516100c09291906107bb565b60408051606081018252600080825260208201819052918101919091526101b88261043d565b92915050565b604080516001808252818301909252606091600091906020808301908036833701905050905060006101f284612710610509565b9150508082600081518110610209576102096107e9565b60209081029190910101525092915050565b6000806102288484610509565b915091505b9250929050565b600061023e61060e565b905090565b6040805160018082528183019092526060916000919060208083019080368337019050509050600061027784612710610509565b509050808260008151811061028e5761028e6107e9565b6001600160a01b03909216602092830291909101909101525092915050565b604080516001808252818301909252606091816020015b60408051808201909152600080825260208201528152602001906001900390816102c45790505090506000806102fc84612710610509565b915091508183600081518110610314576103146107e9565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050808360008151811061034c5761034c6107e9565b6020026020010151602001906bffffffffffffffffffffffff1690816bffffffffffffffffffffffff16815250505050919050565b60408051600180825281830190925260609182916000916020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090506000806103da87612710610509565b9150915081846000815181106103f2576103f26107e9565b60200260200101906001600160a01b031690816001600160a01b0316815250508083600081518110610426576104266107e9565b602090810291909101015250919590945092505050565b60408051606081018252600080825260208201819052918101829052907fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075906104a67fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea07785610639565b6000818152600190930160209081526040938490208451808601865290546001600160a01b03808216835261ffff600160a01b90920482168385019081528751606081018952958652925116928401929092525116928101929092525092915050565b60008281527fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea076602052604081205481907fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075906001600160a01b0316156105b25760008581526001820160205260409020546001600160a01b038116906127109061059e90600160a01b900461ffff16876107ff565b6105a8919061082c565b925092505061022d565b80546001600160a01b0316158015906105d657508054600160a01b900461ffff1615155b156106015780546001600160a01b038116906127109061059e90600160a01b900461ffff16876107ff565b5060009485945092505050565b600061023e7fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea07761064c565b60006106458383610656565b9392505050565b60006101b8825490565b600082600001828154811061066d5761066d6107e9565b9060005260206000200154905092915050565b60006020828403121561069257600080fd5b5035919050565b600081518084526020808501945080840160005b838110156106c9578151875295820195908201906001016106ad565b509495945050505050565b6020815260006106456020830184610699565b600080604083850312156106fa57600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b838110156106c95781516001600160a01b03168752958201959082019060010161071d565b6020815260006106456020830184610709565b602080825282518282018190526000919060409081850190868401855b828110156107ae57815180516001600160a01b031685528601516bffffffffffffffffffffffff16868501529284019290850190600101610772565b5091979650505050505050565b6040815260006107ce6040830185610709565b82810360208401526107e08185610699565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561082757634e487b7160e01b600052601160045260246000fd5b500290565b60008261084957634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220787aa8423d384ab5619fbd0b58e78bce010ce4eb60e3181ab3989c4787cebf6d64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637e9803421161005b5780637e9803421461011b578063b9c4d9fb14610131578063cad96cca14610151578063d5a06d4c1461017157600080fd5b80630653aca5146100825780630ebd4c7f146100c95780632a55205a146100e9575b600080fd5b610095610090366004610680565b610192565b60408051825181526020808401516001600160a01b0316908201529181015161ffff16908201526060015b60405180910390f35b6100dc6100d7366004610680565b6101be565b6040516100c091906106d4565b6100fc6100f73660046106e7565b61021b565b604080516001600160a01b0390931683526020830191909152016100c0565b610123610234565b6040519081526020016100c0565b61014461013f366004610680565b610243565b6040516100c09190610742565b61016461015f366004610680565b6102ad565b6040516100c09190610755565b61018461017f366004610680565b610381565b6040516100c09291906107bb565b60408051606081018252600080825260208201819052918101919091526101b88261043d565b92915050565b604080516001808252818301909252606091600091906020808301908036833701905050905060006101f284612710610509565b9150508082600081518110610209576102096107e9565b60209081029190910101525092915050565b6000806102288484610509565b915091505b9250929050565b600061023e61060e565b905090565b6040805160018082528183019092526060916000919060208083019080368337019050509050600061027784612710610509565b509050808260008151811061028e5761028e6107e9565b6001600160a01b03909216602092830291909101909101525092915050565b604080516001808252818301909252606091816020015b60408051808201909152600080825260208201528152602001906001900390816102c45790505090506000806102fc84612710610509565b915091508183600081518110610314576103146107e9565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050808360008151811061034c5761034c6107e9565b6020026020010151602001906bffffffffffffffffffffffff1690816bffffffffffffffffffffffff16815250505050919050565b60408051600180825281830190925260609182916000916020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505090506000806103da87612710610509565b9150915081846000815181106103f2576103f26107e9565b60200260200101906001600160a01b031690816001600160a01b0316815250508083600081518110610426576104266107e9565b602090810291909101015250919590945092505050565b60408051606081018252600080825260208201819052918101829052907fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075906104a67fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea07785610639565b6000818152600190930160209081526040938490208451808601865290546001600160a01b03808216835261ffff600160a01b90920482168385019081528751606081018952958652925116928401929092525116928101929092525092915050565b60008281527fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea076602052604081205481907fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea075906001600160a01b0316156105b25760008581526001820160205260409020546001600160a01b038116906127109061059e90600160a01b900461ffff16876107ff565b6105a8919061082c565b925092505061022d565b80546001600160a01b0316158015906105d657508054600160a01b900461ffff1615155b156106015780546001600160a01b038116906127109061059e90600160a01b900461ffff16876107ff565b5060009485945092505050565b600061023e7fad41a88d044cfe4c318a78970a1f122259b5b1a56fdee398e17d1e83109ea07761064c565b60006106458383610656565b9392505050565b60006101b8825490565b600082600001828154811061066d5761066d6107e9565b9060005260206000200154905092915050565b60006020828403121561069257600080fd5b5035919050565b600081518084526020808501945080840160005b838110156106c9578151875295820195908201906001016106ad565b509495945050505050565b6020815260006106456020830184610699565b600080604083850312156106fa57600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b838110156106c95781516001600160a01b03168752958201959082019060010161071d565b6020815260006106456020830184610709565b602080825282518282018190526000919060409081850190868401855b828110156107ae57815180516001600160a01b031685528601516bffffffffffffffffffffffff16868501529284019290850190600101610772565b5091979650505050505050565b6040815260006107ce6040830185610709565b82810360208401526107e08185610699565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561082757634e487b7160e01b600052601160045260246000fd5b500290565b60008261084957634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220787aa8423d384ab5619fbd0b58e78bce010ce4eb60e3181ab3989c4787cebf6d64736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Finance",
    "custom:provides-interfaces": "0xcad96cca 0xc69dbd8f",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "getFeeRecipients(uint256)": {
        "details": "IRaribleV1"
      },
      "getFees(uint256)": {
        "details": "IFoundation"
      },
      "getRaribleV2Royalties(uint256)": {
        "details": "IRaribleV2"
      },
      "getTokenRoyaltiesCount()": {
        "details": "IEIP2981RoyaltyOverride (Manifold)"
      },
      "getTokenRoyaltyByIndex(uint256)": {
        "details": "Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations"
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "EIP-2981"
      }
    },
    "title": "ERC2981 - Royalty",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Provide standard on-chain EIP-2981 royalty support for ERC721 or ERC1155 tokens, and additional functions for Rarible and Foundation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}