{
  "address": "0x4393fEe416BaAcbBCB3cC0039f77C2A448dD9054",
  "abi": [
    {
      "inputs": [],
      "name": "ErrMaxSupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrSenderIsNotSelf",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2c96b89cd3c9c5ea4463fedbc7cf7aebbf2b4215e94f3bc1a55765735efb886",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x4393fEe416BaAcbBCB3cC0039f77C2A448dD9054",
    "transactionIndex": 93,
    "gasUsed": "736514",
    "logsBloom": "0x
    "blockHash": "0x01b2e456d5c2a321d455f8daf6090e63f5996eef33d50c7d3f0f43044cf54cbe",
    "transactionHash": "0xf2c96b89cd3c9c5ea4463fedbc7cf7aebbf2b4215e94f3bc1a55765735efb886",
    "logs": [],
    "blockNumber": 8277442,
    "cumulativeGasUsed": "21392078",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "57edd0cd4923c138b9de1d77ec5eb062",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrMaxSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrSenderIsNotSelf\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Tokens\",\"custom:provides-interfaces\":\"IERC20 IERC20Base IERC20SupplyExtension IERC20MintableExtension\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"holder\":\"approver of allowance\",\"spender\":\"recipient of allowance\"},\"returns\":{\"_0\":\"token allowance\"}},\"approve(address,uint256)\":{\"details\":\"prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\",\"params\":{\"amount\":\"quantity of tokens approved for spending\",\"spender\":\"recipient of allowance\"},\"returns\":{\"_0\":\"success status (always true; otherwise function should revert)\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"token balance\"}},\"maxSupply()\":{\"details\":\"Maximum amount of tokens possible to exist.\"},\"mintByFacet(address,uint256)\":{\"details\":\"Creates `amount` new tokens for `to`, of token type `id`. See {ERC20-_mint}. Requirements: - the caller must be diamond itself (other facets).\"},\"totalSupply()\":{\"returns\":{\"_0\":\"token supply\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"recipient\":\"beneficiary of token transfer\"},\"returns\":{\"_0\":\"success status (always true; otherwise function should revert)\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"holder\":\"holder of tokens prior to transfer\",\"recipient\":\"beneficiary of token transfer\"},\"returns\":{\"_0\":\"success status (always true; otherwise function should revert)\"}}},\"title\":\"ERC20 - with meta-transactions\",\"version\":1},\"userdoc\":{\"errors\":{\"ErrSenderIsNotSelf()\":[{\"notice\":\"The caller must be the current contract itself.\"}]},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"query the allowance granted from given holder to given spender\"},\"approve(address,uint256)\":{\"notice\":\"grant approval to spender to spend tokens\"},\"balanceOf(address)\":{\"notice\":\"query the token balance of given account\"},\"totalSupply()\":{\"notice\":\"query the total minted token supply\"},\"transfer(address,uint256)\":{\"notice\":\"transfer tokens to given recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer tokens to given recipient on behalf of given holder\"}},\"notice\":\"Standard EIP-20 with ability to accept meta transactions (mainly transfer and approve methods).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC20/ERC20WithERC2771.sol\":\"ERC20WithERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d14e1780f0ea212b19c07b83c8e51b9dc6903017df71e6de1fae364d724e0d\",\"license\":\"MIT\"},\"src/common/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * The caller must be the current contract itself.\\n */\\nerror ErrSenderIsNotSelf();\\n\",\"keccak256\":\"0xd1592cdff5defdc5c2eabccce2fcd663d930338b99dad69567c7054c81711bc9\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./ERC2771ContextStorage.sol\\\";\\n\\nabstract contract ERC2771ContextInternal is Context {\\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78f51039de18500ce56634bfa72f8d8a0510c97dd94f175e1cbd2385d4ae37\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC2771ContextStorage {\\n    struct Layout {\\n        address trustedForwarder;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC2771Context\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb2e9e2c6145ecf4aae84a602ff668269869da26b25924e9b486b5e94936740e\",\"license\":\"MIT\"},\"src/token/ERC20/ERC20WithERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./base/ERC20BaseERC2771.sol\\\";\\nimport \\\"./extensions/supply/ERC20SupplyExtension.sol\\\";\\nimport \\\"./extensions/mintable/ERC20MintableExtension.sol\\\";\\nimport \\\"./extensions/burnable/ERC20BurnableExtension.sol\\\";\\n\\n/**\\n * @title ERC20 - with meta-transactions\\n * @notice Standard EIP-20 with ability to accept meta transactions (mainly transfer and approve methods).\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Tokens\\n * @custom:provides-interfaces IERC20 IERC20Base IERC20SupplyExtension IERC20MintableExtension\\n */\\ncontract ERC20WithERC2771 is ERC20BaseERC2771, ERC20SupplyExtension, ERC20MintableExtension {\\n    function _msgSender() internal view virtual override(Context, ERC20BaseERC2771) returns (address) {\\n        return ERC20BaseERC2771._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC20BaseERC2771) returns (bytes calldata) {\\n        return ERC20BaseERC2771._msgData();\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20BaseInternal, ERC20SupplyExtension) {\\n        ERC20SupplyExtension._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x328e710b7d3b419ac89796532803dfa13f2708c79837e420e93d9afa4c3594c9\",\"license\":\"MIT\"},\"src/token/ERC20/base/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport { IERC20Base } from \\\"./IERC20Base.sol\\\";\\nimport { ERC20BaseInternal } from \\\"./ERC20BaseInternal.sol\\\";\\nimport { ERC20BaseStorage } from \\\"./ERC20BaseStorage.sol\\\";\\n\\n/**\\n * @title Base ERC20 implementation, excluding optional extensions\\n */\\nabstract contract ERC20Base is IERC20Base, ERC20BaseInternal {\\n    /**\\n     * @inheritdoc IERC20Base\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Base\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Base\\n     */\\n    function allowance(address holder, address spender) public view virtual returns (uint256) {\\n        return _allowance(holder, spender);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Base\\n     */\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        return _approve(_msgSender(), spender, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Base\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\\n        return _transfer(_msgSender(), recipient, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Base\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        return _transferFrom(holder, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xac239ace6187ed9ee47075b323887d289aae14fa25eb84eeb554c8bb33814a12\",\"license\":\"MIT\"},\"src/token/ERC20/base/ERC20BaseERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../metatx/ERC2771ContextInternal.sol\\\";\\n\\nimport \\\"./ERC20Base.sol\\\";\\n\\n/**\\n * @title Base ERC20 contract with meta-transactions support (via ERC2771).\\n */\\nabstract contract ERC20BaseERC2771 is ERC20Base, ERC2771ContextInternal {\\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\\n        return ERC2771ContextInternal._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\\n        return ERC2771ContextInternal._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x490176f05895f48fdc9ca51a6bf69c144231df0033704e30c7b358de3c5012a5\",\"license\":\"MIT\"},\"src/token/ERC20/base/ERC20BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport { IERC20BaseInternal } from \\\"./IERC20BaseInternal.sol\\\";\\nimport { ERC20BaseStorage } from \\\"./ERC20BaseStorage.sol\\\";\\n\\n/**\\n * @title Base ERC20 internal functions, excluding optional extensions\\n */\\nabstract contract ERC20BaseInternal is Context, IERC20BaseInternal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function _totalSupply() internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().totalSupply;\\n    }\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account) internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().balances[account];\\n    }\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function _allowance(address holder, address spender) internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @notice enable spender to spend tokens on behalf of holder\\n     * @param holder address on whose behalf tokens may be spent\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        require(holder != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        ERC20BaseStorage.layout().allowances[holder][spender] = amount;\\n\\n        emit Approval(holder, spender, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice mint tokens for given account\\n     * @param account recipient of minted tokens\\n     * @param amount quantity of tokens minted\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        l.totalSupply += amount;\\n        l.balances[account] += amount;\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @notice burn tokens held by given account\\n     * @param account holder of burned tokens\\n     * @param amount quantity of tokens burned\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        uint256 balance = l.balances[account];\\n        require(balance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            l.balances[account] = balance - amount;\\n        }\\n        l.totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens from holder to recipient\\n     * @param holder owner of tokens to be transferred\\n     * @param recipient beneficiary of transfer\\n     * @param amount quantity of tokens transferred\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function _transfer(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        require(holder != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(holder, recipient, amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        uint256 holderBalance = l.balances[holder];\\n        require(holderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            l.balances[holder] = holderBalance - amount;\\n        }\\n        l.balances[recipient] += amount;\\n\\n        emit Transfer(holder, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function _transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        uint256 currentAllowance = _allowance(holder, _msgSender());\\n\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n\\n        unchecked {\\n            _approve(holder, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        _transfer(holder, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice ERC20 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param amount quantity of tokens transferred\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa5fb819585b11678cf475778cae162f8e53c0e63fc85a75cfc1f9d811b9c0e72\",\"license\":\"MIT\"},\"src/token/ERC20/base/ERC20BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC20BaseStorage {\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 totalSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC20Base\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1143563f62ebcfa1e9f33bc811326777472ad88db4b4ee8e0480526b1436bb43\",\"license\":\"MIT\"},\"src/token/ERC20/base/IERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport { IERC20BaseInternal } from \\\"./IERC20BaseInternal.sol\\\";\\n\\n/**\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20Base is IERC20BaseInternal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(address holder, address spender) external view returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc07109815d6215b95cfdc9dd0f1dd1c7b0d28b9af4bb99fae40ebc5c68748dda\",\"license\":\"MIT\"},\"src/token/ERC20/base/IERC20BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20BaseInternal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6dc671c578d0bb2fa16ae70edb63756b3694e412d9f72c72d490171df19e8695\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/burnable/ERC20BurnableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../base/ERC20BaseInternal.sol\\\";\\nimport \\\"./IERC20BurnableExtension.sol\\\";\\n\\n/**\\n * @title Extension of {ERC20} that allows users or approved operators to burn tokens.\\n */\\nabstract contract ERC20BurnableExtension is IERC20BurnableExtension, ERC20BaseInternal {\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Burn from another facet, allow skipping of ownership check as facets are trusted.\\n     */\\n    function burnByFacet(address account, uint256 amount) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa0895b4d261559fd2083308e1307d5a4159df09b66b37fb520acd09b84d6ebc0\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/burnable/IERC20BurnableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC20} that allows holders or approved operators to burn tokens.\\n */\\ninterface IERC20BurnableExtension {\\n    function burn(uint256 amount) external;\\n\\n    function burnByFacet(address account, uint256 id) external;\\n}\\n\",\"keccak256\":\"0xb66d33d9c4a224a876b94db1435e755781400f071bf912134558d419bdd1a410\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/mintable/ERC20MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../base/ERC20BaseInternal.sol\\\";\\nimport \\\"./IERC20MintableExtension.sol\\\";\\n\\n/**\\n * @title Extension of {ERC20} that allows other facets of the diamond to mint based on arbitrary logic.\\n */\\nabstract contract ERC20MintableExtension is IERC20MintableExtension, ERC20BaseInternal {\\n    /**\\n     * @inheritdoc IERC20MintableExtension\\n     */\\n    function mintByFacet(address to, uint256 amount) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _mint(to, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20MintableExtension\\n     */\\n    function mintByFacet(address[] calldata tos, uint256[] calldata amounts) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            _mint(tos[i], amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4e4836cd04aaa5a649122586218a3746b735b706640c6e6d4608235772debfc\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/mintable/IERC20MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC20} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC20MintableExtension {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(address to, uint256 amount) external;\\n\\n    function mintByFacet(address[] memory tos, uint256[] memory amounts) external;\\n}\\n\",\"keccak256\":\"0x825fce5331786c12949eac166522bdcc762898be1551a27ad5bc42e50275cff1\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/supply/ERC20SupplyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\nimport \\\"../../base/ERC20BaseInternal.sol\\\";\\nimport \\\"./ERC20SupplyStorage.sol\\\";\\nimport \\\"./ERC20SupplyInternal.sol\\\";\\nimport \\\"./IERC20SupplyExtension.sol\\\";\\n\\nabstract contract ERC20SupplyExtension is IERC20SupplyExtension, ERC20BaseInternal, ERC20SupplyInternal {\\n    using ERC20SupplyStorage for ERC20SupplyStorage.Layout;\\n\\n    function maxSupply() external view virtual override returns (uint256) {\\n        return _maxSupply();\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        if (from == address(0)) {\\n            if (to != address(0)) {\\n                if (_totalSupply() + amount > ERC20SupplyStorage.layout().maxSupply) {\\n                    revert ErrMaxSupplyExceeded();\\n                }\\n            }\\n        }\\n\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc8ca6c2aadb66d1bec6f7d2619699dc2d00cd8b795a315b5fe0bfa561e2e530e\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/supply/ERC20SupplyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\nimport \\\"../../base/ERC20BaseInternal.sol\\\";\\nimport \\\"./IERC20SupplyInternal.sol\\\";\\nimport \\\"./ERC20SupplyStorage.sol\\\";\\n\\nabstract contract ERC20SupplyInternal is IERC20SupplyInternal {\\n    using ERC20SupplyStorage for ERC20SupplyStorage.Layout;\\n\\n    function _maxSupply() internal view returns (uint256) {\\n        return ERC20SupplyStorage.layout().maxSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xc5cfb7d1aecbfaca0e39e782ad82db655b57d0a14ebbe681f9dc4d50ea75802b\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/supply/ERC20SupplyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC20SupplyStorage {\\n    struct Layout {\\n        // Maximum possible supply of tokens.\\n        uint256 maxSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC20Supply\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafb8dddd36d656553d51620a153c5fc57d5c36ae7a4c9a37dc18a5dfcf5085d9\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/supply/IERC20SupplyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC20} that tracks supply and defines a max supply cap.\\n */\\ninterface IERC20SupplyExtension {\\n    /**\\n     * @dev Maximum amount of tokens possible to exist.\\n     */\\n    function maxSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x74d8acb2df3ce425890d4bac16f2afc4a4409b179a7cf154c8cc444efba955e6\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/supply/IERC20SupplyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20SupplyInternal {\\n    error ErrMaxSupplyExceeded();\\n}\\n\",\"keccak256\":\"0x4d347c01b8b17e52b8125d62f49b5f71bee2968a36dce3aaa2296bbc5f5e271c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c66806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806349142a1411610076578063a9059cbb1161005b578063a9059cbb14610169578063d5abeb011461017c578063dd62ed3e1461018457600080fd5b806349142a141461010e57806370a082311461012157600080fd5b8063095ea7b3146100a857806318160ddd146100d057806323b872dd146100e65780632d4f475f146100f9575b600080fd5b6100bb6100b6366004610a67565b610197565b60405190151581526020015b60405180910390f35b6100d86101b2565b6040519081526020016100c7565b6100bb6100f4366004610a91565b6101e1565b61010c610107366004610a67565b6101f6565b005b61010c61011c366004610b19565b610224565b6100d861012f366004610b85565b6001600160a01b031660009081527fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e05602052604090205490565b6100bb610177366004610a67565b6102b0565b6100d86102c4565b6100d8610192366004610ba0565b6102ee565b60006101ab6101a461033a565b8484610344565b9392505050565b60006101dc7fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e075490565b905090565b60006101ee8484846104c8565b949350505050565b3033146102165760405163fd570b5160e01b815260040160405180910390fd5b61022082826105c5565b5050565b3033146102445760405163fd570b5160e01b815260040160405180910390fd5b60005b838110156102a95761029785858381811061026457610264610bd3565b90506020020160208101906102799190610b85565b84848481811061028b5761028b610bd3565b905060200201356105c5565b806102a181610bff565b915050610247565b5050505050565b60006101ab6102bd61033a565b84846106f4565b60006101dc7f992082eab08422324340bd25ada2736d6cd62f0b0f29a637f182303af822d56e5490565b6001600160a01b0380831660009081527fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e06602090815260408083209385168352929052908120546101ab565b60006101dc610941565b60006001600160a01b0384166103c65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b0383166104425760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103bd565b6001600160a01b0384811660008181527fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e066020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600080610521856104d761033a565b6001600160a01b0391821660009081527fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e066020908152604080832093909416825291909152205490565b9050828110156105995760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084016103bd565b6105ad856105a561033a565b858403610344565b506105b98585856106f4565b50600195945050505050565b6001600160a01b03821661061b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103bd565b6106276000838361094b565b7fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e0780547fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e0591839160009061067c908490610c18565b90915550506001600160a01b038316600090815260208290526040812080548492906106a9908490610c18565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60006001600160a01b0384166107725760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103bd565b6001600160a01b0383166107ee5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103bd565b6107f984848461094b565b6001600160a01b03841660009081527fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e056020819052604090912054838110156108aa5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103bd565b6001600160a01b038087166000908152602084905260408082208785039055918716815290812080548692906108e1908490610c18565b92505081905550846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161092d91815260200190565b60405180910390a350600195945050505050565b60006101dc61095b565b6109568383836109a1565b505050565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f420546000906001600160a01b0316330361099c575060131936013560601c90565b503390565b6001600160a01b038316610956576001600160a01b03821615610956577f992082eab08422324340bd25ada2736d6cd62f0b0f29a637f182303af822d56e5481610a097fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e075490565b610a139190610c18565b1115610956576040517fb746b1c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80356001600160a01b0381168114610a6257600080fd5b919050565b60008060408385031215610a7a57600080fd5b610a8383610a4b565b946020939093013593505050565b600080600060608486031215610aa657600080fd5b610aaf84610a4b565b9250610abd60208501610a4b565b9150604084013590509250925092565b60008083601f840112610adf57600080fd5b50813567ffffffffffffffff811115610af757600080fd5b6020830191508360208260051b8501011115610b1257600080fd5b9250929050565b60008060008060408587031215610b2f57600080fd5b843567ffffffffffffffff80821115610b4757600080fd5b610b5388838901610acd565b90965094506020870135915080821115610b6c57600080fd5b50610b7987828801610acd565b95989497509550505050565b600060208284031215610b9757600080fd5b6101ab82610a4b565b60008060408385031215610bb357600080fd5b610bbc83610a4b565b9150610bca60208401610a4b565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610c1157610c11610be9565b5060010190565b60008219821115610c2b57610c2b610be9565b50019056fea264697066735822122061bfe9b8d44458586d8cfa1ec39ae77c514dbb72b44ffd9e387b08807d03fcf064736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c806349142a1411610076578063a9059cbb1161005b578063a9059cbb14610169578063d5abeb011461017c578063dd62ed3e1461018457600080fd5b806349142a141461010e57806370a082311461012157600080fd5b8063095ea7b3146100a857806318160ddd146100d057806323b872dd146100e65780632d4f475f146100f9575b600080fd5b6100bb6100b6366004610a67565b610197565b60405190151581526020015b60405180910390f35b6100d86101b2565b6040519081526020016100c7565b6100bb6100f4366004610a91565b6101e1565b61010c610107366004610a67565b6101f6565b005b61010c61011c366004610b19565b610224565b6100d861012f366004610b85565b6001600160a01b031660009081527fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e05602052604090205490565b6100bb610177366004610a67565b6102b0565b6100d86102c4565b6100d8610192366004610ba0565b6102ee565b60006101ab6101a461033a565b8484610344565b9392505050565b60006101dc7fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e075490565b905090565b60006101ee8484846104c8565b949350505050565b3033146102165760405163fd570b5160e01b815260040160405180910390fd5b61022082826105c5565b5050565b3033146102445760405163fd570b5160e01b815260040160405180910390fd5b60005b838110156102a95761029785858381811061026457610264610bd3565b90506020020160208101906102799190610b85565b84848481811061028b5761028b610bd3565b905060200201356105c5565b806102a181610bff565b915050610247565b5050505050565b60006101ab6102bd61033a565b84846106f4565b60006101dc7f992082eab08422324340bd25ada2736d6cd62f0b0f29a637f182303af822d56e5490565b6001600160a01b0380831660009081527fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e06602090815260408083209385168352929052908120546101ab565b60006101dc610941565b60006001600160a01b0384166103c65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b0383166104425760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103bd565b6001600160a01b0384811660008181527fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e066020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600080610521856104d761033a565b6001600160a01b0391821660009081527fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e066020908152604080832093909416825291909152205490565b9050828110156105995760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084016103bd565b6105ad856105a561033a565b858403610344565b506105b98585856106f4565b50600195945050505050565b6001600160a01b03821661061b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103bd565b6106276000838361094b565b7fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e0780547fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e0591839160009061067c908490610c18565b90915550506001600160a01b038316600090815260208290526040812080548492906106a9908490610c18565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60006001600160a01b0384166107725760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103bd565b6001600160a01b0383166107ee5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103bd565b6107f984848461094b565b6001600160a01b03841660009081527fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e056020819052604090912054838110156108aa5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103bd565b6001600160a01b038087166000908152602084905260408082208785039055918716815290812080548692906108e1908490610c18565b92505081905550846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161092d91815260200190565b60405180910390a350600195945050505050565b60006101dc61095b565b6109568383836109a1565b505050565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f420546000906001600160a01b0316330361099c575060131936013560601c90565b503390565b6001600160a01b038316610956576001600160a01b03821615610956577f992082eab08422324340bd25ada2736d6cd62f0b0f29a637f182303af822d56e5481610a097fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e075490565b610a139190610c18565b1115610956576040517fb746b1c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80356001600160a01b0381168114610a6257600080fd5b919050565b60008060408385031215610a7a57600080fd5b610a8383610a4b565b946020939093013593505050565b600080600060608486031215610aa657600080fd5b610aaf84610a4b565b9250610abd60208501610a4b565b9150604084013590509250925092565b60008083601f840112610adf57600080fd5b50813567ffffffffffffffff811115610af757600080fd5b6020830191508360208260051b8501011115610b1257600080fd5b9250929050565b60008060008060408587031215610b2f57600080fd5b843567ffffffffffffffff80821115610b4757600080fd5b610b5388838901610acd565b90965094506020870135915080821115610b6c57600080fd5b50610b7987828801610acd565b95989497509550505050565b600060208284031215610b9757600080fd5b6101ab82610a4b565b60008060408385031215610bb357600080fd5b610bbc83610a4b565b9150610bca60208401610a4b565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610c1157610c11610be9565b5060010190565b60008219821115610c2b57610c2b610be9565b50019056fea264697066735822122061bfe9b8d44458586d8cfa1ec39ae77c514dbb72b44ffd9e387b08807d03fcf064736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Tokens",
    "custom:provides-interfaces": "IERC20 IERC20Base IERC20SupplyExtension IERC20MintableExtension",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "holder": "approver of allowance",
          "spender": "recipient of allowance"
        },
        "returns": {
          "_0": "token allowance"
        }
      },
      "approve(address,uint256)": {
        "details": "prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)",
        "params": {
          "amount": "quantity of tokens approved for spending",
          "spender": "recipient of allowance"
        },
        "returns": {
          "_0": "success status (always true; otherwise function should revert)"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "maxSupply()": {
        "details": "Maximum amount of tokens possible to exist."
      },
      "mintByFacet(address,uint256)": {
        "details": "Creates `amount` new tokens for `to`, of token type `id`. See {ERC20-_mint}. Requirements: - the caller must be diamond itself (other facets)."
      },
      "totalSupply()": {
        "returns": {
          "_0": "token supply"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "recipient": "beneficiary of token transfer"
        },
        "returns": {
          "_0": "success status (always true; otherwise function should revert)"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "holder": "holder of tokens prior to transfer",
          "recipient": "beneficiary of token transfer"
        },
        "returns": {
          "_0": "success status (always true; otherwise function should revert)"
        }
      }
    },
    "title": "ERC20 - with meta-transactions",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ErrSenderIsNotSelf()": [
        {
          "notice": "The caller must be the current contract itself."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "query the allowance granted from given holder to given spender"
      },
      "approve(address,uint256)": {
        "notice": "grant approval to spender to spend tokens"
      },
      "balanceOf(address)": {
        "notice": "query the token balance of given account"
      },
      "totalSupply()": {
        "notice": "query the total minted token supply"
      },
      "transfer(address,uint256)": {
        "notice": "transfer tokens to given recipient"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer tokens to given recipient on behalf of given holder"
      }
    },
    "notice": "Standard EIP-20 with ability to accept meta transactions (mainly transfer and approve methods).",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}