{
  "address": "0x69af26E5701a498d67691B983a4Cc38ADeD965DB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "diamondCutFacet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "diamondLoupeFacet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "erc165Facet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ownableFacet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contextFacet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "DiamondFacetAlreadyExists",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6b0fba3977dec1c2541f0af6bee8da87ed2370f92592e68c594efe0639db4f81",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x69af26E5701a498d67691B983a4Cc38ADeD965DB",
    "transactionIndex": 6,
    "gasUsed": "1163233",
    "logsBloom": "0x
    "blockHash": "0xb875a9c5e382615c2cc8fa44f9c8432f0c6777335baf3b30338eefa2f9246031",
    "transactionHash": "0x6b0fba3977dec1c2541f0af6bee8da87ed2370f92592e68c594efe0639db4f81",
    "logs": [],
    "blockNumber": 11362532,
    "cumulativeGasUsed": "2533884",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x8d4e0b2f7e483cF1ea91efb3109EB2C0EFca84Ba",
    "0x883A5b91f21e3529d3A9B31D955b37Cd7382D3e2",
    "0xF161D7f77d5d57179ED534d6C82D1F8441804632",
    "0x5f6d4A179D0f36029d5E314Bde9FDd50b5F77cf0",
    "0x9c583203Ca6fD9aE8aA1DB2abcc44E362d0404Fd"
  ],
  "numDeployments": 8,
  "solcInputHash": "ffc6e07a79fa964cefe1c357bb110a4e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"diamondCutFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"diamondLoupeFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc165Facet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownableFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contextFacet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"DiamondFacetAlreadyExists\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Diamond.sol\":\"Diamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/core/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {OwnableStorage} from \\\"../features/access/ownable/OwnableStorage.sol\\\";\\nimport {IERC173} from \\\"../features/access/ownable/IERC173.sol\\\";\\nimport {IERC165, ERC165Storage} from \\\"../features/introspection/ERC165.sol\\\";\\nimport {ERC2771Context} from \\\"../features/metatx/ERC2771Context.sol\\\";\\nimport {IDiamondCut} from \\\"../features/diamond/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../features/diamond/IDiamondLoupe.sol\\\";\\n\\nimport {DiamondStorage} from \\\"./DiamondStorage.sol\\\";\\n\\ncontract Diamond {\\n    using ERC165Storage for ERC165Storage.Layout;\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    constructor(\\n        address owner,\\n        address diamondCutFacet,\\n        address diamondLoupeFacet,\\n        address erc165Facet,\\n        address ownableFacet,\\n        address contextFacet\\n    ) {\\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\\n\\n        // register DiamondCut\\n\\n        bytes4[] memory selectorsDiamondCut = new bytes4[](1);\\n        selectorsDiamondCut[0] = IDiamondCut.diamondCut.selector;\\n\\n        erc165.setSupportedInterface(type(IDiamondCut).interfaceId, true);\\n\\n        // register DiamondLoupe\\n\\n        bytes4[] memory selectorsDiamondLoupe = new bytes4[](4);\\n        selectorsDiamondLoupe[0] = IDiamondLoupe.facets.selector;\\n        selectorsDiamondLoupe[1] = IDiamondLoupe\\n            .facetFunctionSelectors\\n            .selector;\\n        selectorsDiamondLoupe[2] = IDiamondLoupe.facetAddresses.selector;\\n        selectorsDiamondLoupe[3] = IDiamondLoupe.facetAddress.selector;\\n\\n        erc165.setSupportedInterface(type(IDiamondLoupe).interfaceId, true);\\n\\n        // register ERC165 (supportsInterface)\\n\\n        bytes4[] memory selectorsERC165 = new bytes4[](1);\\n        selectorsERC165[0] = IERC165.supportsInterface.selector;\\n\\n        erc165.setSupportedInterface(type(IERC165).interfaceId, true);\\n\\n        // register ERC173 (Ownable)\\n\\n        bytes4[] memory selectorsOwnable = new bytes4[](2);\\n        selectorsOwnable[0] = IERC173.owner.selector;\\n        selectorsOwnable[1] = IERC173.transferOwnership.selector;\\n\\n        erc165.setSupportedInterface(type(IERC173).interfaceId, true);\\n\\n        // register ERC2771 (Context)\\n\\n        bytes4[] memory selectorsContext = new bytes4[](2);\\n        selectorsContext[0] = ERC2771Context.setTrustedForwarder.selector;\\n        selectorsContext[1] = ERC2771Context.isTrustedForwarder.selector;\\n\\n        // execute the first ever diamond cut\\n        // we are calling the addFunctions directly to save ~ %50 gas\\n\\n        DiamondStorage.addFunctions(diamondCutFacet, selectorsDiamondCut);\\n        DiamondStorage.addFunctions(diamondLoupeFacet, selectorsDiamondLoupe);\\n        DiamondStorage.addFunctions(erc165Facet, selectorsERC165);\\n        DiamondStorage.addFunctions(ownableFacet, selectorsOwnable);\\n        DiamondStorage.addFunctions(contextFacet, selectorsContext);\\n\\n        // set owner\\n\\n        OwnableStorage.layout().setOwner(owner);\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        DiamondStorage.Layout storage l;\\n        bytes32 position = DiamondStorage.DIAMOND_STORAGE_POSITION;\\n        // get diamond storage\\n        assembly {\\n            l.slot := position\\n        }\\n\\n        // get facet from function selector\\n        address facet = l.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"BAD_FUNC\\\");\\n\\n        // Execute external function from facet using delegatecall and return any value.\\n        assembly {\\n            // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n            // execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n            // return any return value or error back to the caller\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x06ef14bba5d2c4ed53bfaa6207969538277fe9747eaf829d8cdffaaec1091aeb\",\"license\":\"MIT\"},\"contracts/core/DiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../features/diamond/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror DiamondFacetAlreadyExists(address facet, bytes4 selector);\\nerror DiamondFacetSameFunction(address facet, bytes4 selector);\\n\\nlibrary DiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct Layout {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            l.slot := position\\n        }\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        // require(\\n        //     _functionSelectors.length > 0,\\n        //     \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        // );\\n        Layout storage l = layout();\\n        // require(\\n        //     _facetAddress != address(0),\\n        //     \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        // );\\n        uint96 selectorPosition = uint96(\\n            l.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(l, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n\\n            if (oldFacetAddress != address(0)) {\\n                revert DiamondFacetAlreadyExists(oldFacetAddress, selector);\\n            }\\n\\n            addFunction(l, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        // require(\\n        //     _functionSelectors.length > 0,\\n        //     \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        // );\\n        Layout storage l = layout();\\n        // require(\\n        //     _facetAddress != address(0),\\n        //     \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        // );\\n        uint96 selectorPosition = uint96(\\n            l.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(l, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n\\n            if (oldFacetAddress == _facetAddress) {\\n                revert DiamondFacetSameFunction(oldFacetAddress, selector);\\n            }\\n\\n            removeFunction(l, oldFacetAddress, selector);\\n            addFunction(l, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        // require(\\n        //     _functionSelectors.length > 0,\\n        //     \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        // );\\n        Layout storage l = layout();\\n        // if function does not exist then do nothing and return\\n        // require(\\n        //     _facetAddress == address(0),\\n        //     \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        // );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(l, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(Layout storage l, address _facetAddress) internal {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        l.facetFunctionSelectors[_facetAddress].facetAddressPosition = l\\n            .facetAddresses\\n            .length;\\n        l.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        Layout storage l,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        l\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        l.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        l.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        Layout storage l,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        // require(\\n        //     _facetAddress != address(0),\\n        //     \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        // );\\n        // an immutable function is a function defined directly in a diamond\\n        // require(\\n        //     _facetAddress != address(this),\\n        //     \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        // );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = l\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = l\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = l\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            l.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            l\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        l.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete l.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = l.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = l\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = l.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                l.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                l\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            l.facetAddresses.pop();\\n            delete l.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x3b1da314ca1ef3b4e00e924d30379b9e565431d1d7a777ac41cc226977bce2a4\",\"license\":\"MIT\"},\"contracts/features/access/ownable/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {IERC173Events} from \\\"./IERC173Events.sol\\\";\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Events {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0xda719e7049fdd1fb88bab509955bf090a22be170efe6189090256f547503ac14\",\"license\":\"MIT\"},\"contracts/features/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0xaa69cf8eab7188097d9aa84c92692ec30614ee2f6bf8d2255482162611255db4\",\"license\":\"MIT\"},\"contracts/features/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {OwnableStorage} from \\\"./OwnableStorage.sol\\\";\\nimport {IERC173Events} from \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(msg.sender, account);\\n    }\\n}\\n\",\"keccak256\":\"0x8789cacff1b43be2f20333233dc5f70aed9311cc8b4abaf70d20c979146a5404\",\"license\":\"MIT\"},\"contracts/features/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x26eea1f665c393b0046c3dcb9421f3caa1322ca996689fa0aa941eff5a1dcda2\",\"license\":\"MIT\"},\"contracts/features/diamond/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xb85e6227a1c576c2ecca3d896f95b298ec7a918b74700d6e4999a1cd8fc89b95\",\"license\":\"MIT\"},\"contracts/features/diamond/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x58bc79a9f2484a2216b1d08185344725f0c6fbf627861fd043b36eb9c7b795b3\",\"license\":\"MIT\"},\"contracts/features/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {ERC165Storage} from \\\"./ERC165Storage.sol\\\";\\n\\n/**\\n * @title ERC165 implementation\\n */\\ncontract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x311e725298fc8c5f83096237feda26aa3af3ce7042e90bfda45cfa8ef7f4705d\",\"license\":\"MIT\"},\"contracts/features/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"openzeppelin.contracts.storage.ERC165\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x3d1b5ced0623f06b686563b0f1bd1bc054d61039d257450a546f85d9c5bb6eca\",\"license\":\"MIT\"},\"contracts/features/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2008fcbb4474e5eaea1b65a7ac7616edba96ea4021940f5f0ecc305dc95eb4b7\",\"license\":\"MIT\"},\"contracts/features/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {ERC2771ContextStorage} from \\\"./ERC2771ContextStorage.sol\\\";\\nimport {ERC2771ContextInternal} from \\\"./ERC2771ContextInternal.sol\\\";\\nimport {OwnableInternal} from \\\"../access/ownable/OwnableInternal.sol\\\";\\n\\ncontract ERC2771Context is ERC2771ContextInternal, OwnableInternal {\\n    function setTrustedForwarder(address trustedForwarder) public onlyOwner {\\n        ERC2771ContextStorage.layout().trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n}\\n\",\"keccak256\":\"0xbe22d38426db482b9069f977738ce894905f250b1d9fd1be76082f00bccacb16\",\"license\":\"MIT\"},\"contracts/features/metatx/ERC2771ContextInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {ERC2771ContextStorage} from \\\"./ERC2771ContextStorage.sol\\\";\\n\\nabstract contract ERC2771ContextInternal is Context {\\n    function _isTrustedForwarder(address operator)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcac34f47496b4b1c80dbc373d7be632c02249772048e3303f50f02be3431df26\",\"license\":\"MIT\"},\"contracts/features/metatx/ERC2771ContextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC2771ContextStorage {\\n    struct Layout {\\n        address trustedForwarder;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"v1.flair.contracts.storage.ERC2771Context\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3c11e4bd34c08e0befd9c6337ac9a955a85feac56112906c4c6220c163939c79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000e7c38038062000e7c8339810160408190526200003491620007e3565b60006200004b6200046d60201b620000b31760201c565b6040805160018082528183019092529192506000919060208083019080368337019050509050631f931c1c60e01b816000815181106200008f576200008f62000864565b6001600160e01b0319909216602092830291909101820152620000c99083906307e4c70760e21b90600190620000d762000491821b17901c565b60408051600480825260a0820190925260009160208201608080368337019050509050637a0ed62760e01b816000815181106200010a576200010a62000864565b6001600160e01b03199092166020928302919091019091015280516356fe50af60e11b908290600190811062000144576200014462000864565b6001600160e01b03199092166020928302919091019091015280516314bbdacb60e21b90829060029081106200017e576200017e62000864565b6001600160e01b03199092166020928302919091019091015280516366ffd66360e11b9082906003908110620001b857620001b862000864565b6001600160e01b0319909216602092830291909101820152620001f29084906348e2b09360e01b90600190620000d762000491821b17901c565b604080516001808252818301909252600091602080830190803683370190505090506301ffc9a760e01b8160008151811062000232576200023262000864565b6001600160e01b03199092166020928302919091018201526200026c9085906301ffc9a760e01b90600190620000d762000491821b17901c565b604080516002808252606082018352600092602083019080368337019050509050638da5cb5b60e01b81600081518110620002ab57620002ab62000864565b6001600160e01b031990921660209283029190910190910152805163f2fde38b60e01b9082906001908110620002e557620002e562000864565b6001600160e01b03199092166020928302919091018201526200031f9086906307f5828d60e41b90600190620000d762000491821b17901c565b60408051600280825260608201835260009260208301908036833701905050905063da74222860e01b816000815181106200035e576200035e62000864565b6001600160e01b031990921660209283029190910190910152805163572b6c0560e01b908290600190811062000398576200039862000864565b60200260200101906001600160e01b03191690816001600160e01b03191681525050620003d18b866200051f60201b6200015e1760201c565b620003e88a856200051f60201b6200015e1760201c565b620003ff89846200051f60201b6200015e1760201c565b6200041688836200051f60201b6200015e1760201c565b6200042d87826200051f60201b6200015e1760201c565b6200045b8c62000447620006ee60201b6200031f1760201c565b6200071260201b620003431790919060201c565b50505050505050505050505062000935565b7fff923f4a67695a9cdd5da4b8580a5a20edf2183c42aa111dd7fc15dc7bed264090565b6001600160e01b03198083169003620004f15760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e746572666163652069640000000060448201526064015b60405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03821660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260408120547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c916001600160601b038216900362000596576200059682856200072f565b60005b8351811015620006e7576000848281518110620005ba57620005ba62000864565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03168015620006285760405163752eb76d60e01b81526001600160a01b03821660048201526001600160e01b031983166024820152604401620004e8565b6001600160e01b0319821660008181526020878152604080832080546001600160a01b03908116600160a01b6001600160601b038c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b03191617905583620006cc8162000890565b94505050508080620006de90620008c1565b91505062000599565b5050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed490565b81546001600160a01b0319166001600160a01b0391909116179055565b620007548160405180606001604052806024815260200162000e58602491396200079c565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b813b8181620007c05760405162461bcd60e51b8152600401620004e89190620008dd565b50505050565b80516001600160a01b0381168114620007de57600080fd5b919050565b60008060008060008060c08789031215620007fd57600080fd5b6200080887620007c6565b95506200081860208801620007c6565b94506200082860408801620007c6565b93506200083860608801620007c6565b92506200084860808801620007c6565b91506200085860a08801620007c6565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160601b038281166002600160601b03198101620008b757620008b76200087a565b6001019392505050565b600060018201620008d657620008d66200087a565b5060010190565b600060208083528351808285015260005b818110156200090c57858101830151858201604001528201620008ee565b818111156200091f576000604083870101525b50601f01601f1916929092016040019392505050565b61051380620009456000396000f3fe60806040523661000b57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602081905260409091205481906001600160a01b03168061008f5760405162461bcd60e51b81526020600482015260086024820152674241445f46554e4360c01b60448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100ae573d6000f35b3d6000fd5b7fff923f4a67695a9cdd5da4b8580a5a20edf2183c42aa111dd7fc15dc7bed264090565b6001600160e01b031980831690036101305760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610086565b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03821660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260408120547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c916001600160601b03821690036101d2576101d28285610360565b60005b83518110156103185760008482815181106101f2576101f26103f1565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0316801561025e5760405163752eb76d60e01b81526001600160a01b03821660048201526001600160e01b031983166024820152604401610086565b6001600160e01b0319821660008181526020878152604080832080546001600160a01b03908116600160a01b6001600160601b038c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b031916179055836103008161041d565b945050505080806103109061044b565b9150506101d5565b5050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed490565b81546001600160a01b0319166001600160a01b0391909116179055565b610382816040518060600160405280602481526020016104ba602491396103ca565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b813b81816103eb5760405162461bcd60e51b81526004016100869190610464565b50505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160601b038281166002600160601b0319810161044157610441610407565b6001019392505050565b60006001820161045d5761045d610407565b5060010190565b600060208083528351808285015260005b8181101561049157858101830151858201604001528201610475565b818111156104a3576000604083870101525b50601f01601f191692909201604001939250505056fe4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a26469706673582212202a0cca9db6a20bfe735ce9806bb34e855b2e8d76fba640f46c87595aca99d83664736f6c634300080f00334c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465",
  "deployedBytecode": "0x60806040523661000b57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602081905260409091205481906001600160a01b03168061008f5760405162461bcd60e51b81526020600482015260086024820152674241445f46554e4360c01b60448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100ae573d6000f35b3d6000fd5b7fff923f4a67695a9cdd5da4b8580a5a20edf2183c42aa111dd7fc15dc7bed264090565b6001600160e01b031980831690036101305760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610086565b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03821660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d60205260408120547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c916001600160601b03821690036101d2576101d28285610360565b60005b83518110156103185760008482815181106101f2576101f26103f1565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0316801561025e5760405163752eb76d60e01b81526001600160a01b03821660048201526001600160e01b031983166024820152604401610086565b6001600160e01b0319821660008181526020878152604080832080546001600160a01b03908116600160a01b6001600160601b038c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b031916179055836103008161041d565b945050505080806103109061044b565b9150506101d5565b5050505050565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed490565b81546001600160a01b0319166001600160a01b0391909116179055565b610382816040518060600160405280602481526020016104ba602491396103ca565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b813b81816103eb5760405162461bcd60e51b81526004016100869190610464565b50505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160601b038281166002600160601b0319810161044157610441610407565b6001019392505050565b60006001820161045d5761045d610407565b5060010190565b600060208083528351808285015260005b8181101561049157858101830151858201604001528201610475565b818111156104a3576000604083870101525b50601f01601f191692909201604001939250505056fe4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a26469706673582212202a0cca9db6a20bfe735ce9806bb34e855b2e8d76fba640f46c87595aca99d83664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}