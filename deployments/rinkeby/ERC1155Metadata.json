{
  "address": "0x799b9D1a6514047481B988c39FAc6344e03A9988",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6829be41f90359567e95160704a8c70c4324b9f94d19d46c5a7f3a6b8e4f148",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x799b9D1a6514047481B988c39FAc6344e03A9988",
    "transactionIndex": 20,
    "gasUsed": "393203",
    "logsBloom": "0x
    "blockHash": "0xda5d9bebab0add59d413587966d6abaeef27d0ed9cd929f81286dc98b68332ce",
    "transactionHash": "0xb6829be41f90359567e95160704a8c70c4324b9f94d19d46c5a7f3a6b8e4f148",
    "logs": [],
    "blockNumber": 11372380,
    "cumulativeGasUsed": "12254489",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "df203424e31fe01ef0ba38744a8022b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uri(uint256)\":{\"notice\":\"inheritdoc IERC1155Metadata\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/features/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":\"ERC1155Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/features/token/ERC1155/facets/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IERC1155Metadata.sol\\\";\\nimport \\\"./ERC1155MetadataInternal.sol\\\";\\nimport \\\"./ERC1155MetadataStorage.sol\\\";\\n\\ncontract ERC1155Metadata is IERC1155Metadata, ERC1155MetadataInternal {\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId) public view virtual returns (string memory) {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        baseURI,\\n                        l.fallbackURI,\\n                        Strings.toString(tokenId)\\n                    )\\n                );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb84185028adfa2f0a5923501d6c7634f4aa0689904793368a4bd89a7fa9fd677\",\"license\":\"MIT\"},\"contracts/features/token/ERC1155/facets/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC1155MetadataEvents.sol\\\";\\nimport \\\"./ERC1155MetadataStorage.sol\\\";\\n\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataEvents {\\n    function _setBaseURI(string memory baseURI) internal {\\n        require(\\n            !ERC1155MetadataStorage.layout().baseURILocked,\\n            \\\"ERC1155Metadata: baseURI locked\\\"\\n        );\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setFallbackURI(string memory baseURI) internal {\\n        require(\\n            !ERC1155MetadataStorage.layout().fallbackURILocked,\\n            \\\"ERC1155Metadata: fallbackURI locked\\\"\\n        );\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal {\\n        require(\\n            tokenId > ERC1155MetadataStorage.layout().lastLockedTokenId,\\n            \\\"ERC1155Metadata: tokenURI locked\\\"\\n        );\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n\\n    function _lockBaseURI() internal {\\n        ERC1155MetadataStorage.layout().baseURILocked = true;\\n    }\\n\\n    function _lockFallbackURI() internal {\\n        ERC1155MetadataStorage.layout().fallbackURILocked = true;\\n    }\\n\\n    function _lockURIUntil(uint256 tokenId) internal {\\n        ERC1155MetadataStorage.layout().lastLockedTokenId = tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0xe77919e5dd2c400c34799ec95531e24a4a71a3b994f6eb5bbbb749bc7f666c17\",\"license\":\"MIT\"},\"contracts/features/token/ERC1155/facets/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"v1.flair.contracts.storage.ERC1155Metadata\\\");\\n\\n    struct Layout {\\n        string baseURI;\\n        string fallbackURI;\\n        bool baseURILocked;\\n        bool fallbackURILocked;\\n        uint256 lastLockedTokenId;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xebd19c70113fea48d40b6a6f3af8b96aed8ad71c2e0941730d1256d279af7da4\",\"license\":\"MIT\"},\"contracts/features/token/ERC1155/facets/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155Metadata {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x06e9faa914aad892109cae7c0ae1c7f5f185510536cb75e6afdf49051e100e38\",\"license\":\"MIT\"},\"contracts/features/token/ERC1155/facets/metadata/IERC1155MetadataEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC1155MetadataEvents {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0x6c2413e5d685f420399db32888a545321422521fb5e4ffb72de3c5e53cbd503c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610628806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630e89341c14610030575b600080fd5b61004361003e36600461036a565b610059565b60405161005091906103b3565b60405180910390f35b60008181527f1b500ec4e120b7131cf0678a75da1479b330ec0fd954d2ec6a43f590159364ff6020526040812080546060927f1b500ec4e120b7131cf0678a75da1479b330ec0fd954d2ec6a43f590159364fb9290916100b8906103e6565b80601f01602080910402602001604051908101604052809291908181526020018280546100e4906103e6565b80156101315780601f1061010657610100808354040283529160200191610131565b820191906000526020600020905b81548152906001019060200180831161011457829003601f168201915b505050505090506000826000018054610149906103e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610175906103e6565b80156101c25780601f10610197576101008083540402835291602001916101c2565b820191906000526020600020905b8154815290600101906020018083116101a557829003601f168201915b5050505050905080516000036101da57509392505050565b81511561020d5780826040516020016101f492919061043c565b6040516020818303038152906040529350505050919050565b808360010161021b8761022d565b6040516020016101f49392919061046b565b60608160000361027057505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561029a578061028481610540565b91506102939050600a8361056f565b9150610274565b60008167ffffffffffffffff8111156102b5576102b5610583565b6040519080825280601f01601f1916602001820160405280156102df576020820181803683370190505b5090505b8415610362576102f4600183610599565b9150610301600a866105b0565b61030c9060306105c4565b60f81b818381518110610321576103216105dc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061035b600a8661056f565b94506102e3565b949350505050565b60006020828403121561037c57600080fd5b5035919050565b60005b8381101561039e578181015183820152602001610386565b838111156103ad576000848401525b50505050565b60208152600082518060208401526103d2816040850160208701610383565b601f01601f19169190910160400192915050565b600181811c908216806103fa57607f821691505b60208210810361041a57634e487b7160e01b600052602260045260246000fd5b50919050565b60008151610432818560208601610383565b9290920192915050565b6000835161044e818460208801610383565b835190830190610462818360208801610383565b01949350505050565b60008451602061047e8285838a01610383565b855491840191600090600181811c908083168061049c57607f831692505b85831081036104b957634e487b7160e01b85526022600452602485fd5b8080156104cd57600181146104e25761050f565b60ff198516885283151584028801955061050f565b60008c81526020902060005b858110156105075781548a8201529084019088016104ee565b505083880195505b505050505061051e8187610420565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016105525761055261052a565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261057e5761057e610559565b500490565b634e487b7160e01b600052604160045260246000fd5b6000828210156105ab576105ab61052a565b500390565b6000826105bf576105bf610559565b500690565b600082198211156105d7576105d761052a565b500190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212204172bdc6b533d68cf7138d60237513a10be5ad42d1aa8930de0fbbf34e3086a064736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80630e89341c14610030575b600080fd5b61004361003e36600461036a565b610059565b60405161005091906103b3565b60405180910390f35b60008181527f1b500ec4e120b7131cf0678a75da1479b330ec0fd954d2ec6a43f590159364ff6020526040812080546060927f1b500ec4e120b7131cf0678a75da1479b330ec0fd954d2ec6a43f590159364fb9290916100b8906103e6565b80601f01602080910402602001604051908101604052809291908181526020018280546100e4906103e6565b80156101315780601f1061010657610100808354040283529160200191610131565b820191906000526020600020905b81548152906001019060200180831161011457829003601f168201915b505050505090506000826000018054610149906103e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610175906103e6565b80156101c25780601f10610197576101008083540402835291602001916101c2565b820191906000526020600020905b8154815290600101906020018083116101a557829003601f168201915b5050505050905080516000036101da57509392505050565b81511561020d5780826040516020016101f492919061043c565b6040516020818303038152906040529350505050919050565b808360010161021b8761022d565b6040516020016101f49392919061046b565b60608160000361027057505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561029a578061028481610540565b91506102939050600a8361056f565b9150610274565b60008167ffffffffffffffff8111156102b5576102b5610583565b6040519080825280601f01601f1916602001820160405280156102df576020820181803683370190505b5090505b8415610362576102f4600183610599565b9150610301600a866105b0565b61030c9060306105c4565b60f81b818381518110610321576103216105dc565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061035b600a8661056f565b94506102e3565b949350505050565b60006020828403121561037c57600080fd5b5035919050565b60005b8381101561039e578181015183820152602001610386565b838111156103ad576000848401525b50505050565b60208152600082518060208401526103d2816040850160208701610383565b601f01601f19169190910160400192915050565b600181811c908216806103fa57607f821691505b60208210810361041a57634e487b7160e01b600052602260045260246000fd5b50919050565b60008151610432818560208601610383565b9290920192915050565b6000835161044e818460208801610383565b835190830190610462818360208801610383565b01949350505050565b60008451602061047e8285838a01610383565b855491840191600090600181811c908083168061049c57607f831692505b85831081036104b957634e487b7160e01b85526022600452602485fd5b8080156104cd57600181146104e25761050f565b60ff198516885283151584028801955061050f565b60008c81526020902060005b858110156105075781548a8201529084019088016104ee565b505083880195505b505050505061051e8187610420565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016105525761055261052a565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261057e5761057e610559565b500490565b634e487b7160e01b600052604160045260246000fd5b6000828210156105ab576105ab61052a565b500390565b6000826105bf576105bf610559565b500690565b600082198211156105d7576105d761052a565b500190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212204172bdc6b533d68cf7138d60237513a10be5ad42d1aa8930de0fbbf34e3086a064736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "uri(uint256)": {
        "notice": "inheritdoc IERC1155Metadata"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}