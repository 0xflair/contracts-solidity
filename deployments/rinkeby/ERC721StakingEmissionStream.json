{
  "address": "0x82282b7c01C36FD7aE461d4FD3d9854E909FE832",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockedUntilTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "minStakingLockTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "maxStakingTotalDurations",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "emissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "emissionTimeUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionEnd",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "claimLockedUntil",
              "type": "uint64"
            }
          ],
          "internalType": "struct ERC721StakingEmissionStream.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimMany",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EmergencyPowerRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "claimTokens",
          "type": "address[]"
        }
      ],
      "name": "EmergencyWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLockedUntil",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPowerRevoked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "claimTokens",
          "type": "address[]"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "calcUntil",
          "type": "uint64"
        }
      ],
      "name": "emissionAmountUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionEnd",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionStart",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionTimeUnit",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "entitlements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721EmissionReleaseExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721LockableClaimExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721LockedStakingExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockedUntilTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "minStakingLockTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "maxStakingTotalDurations",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "emissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "emissionTimeUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionEnd",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "claimLockedUntil",
              "type": "uint64"
            }
          ],
          "internalType": "struct ERC721StakingEmissionStream.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastStakingTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "lockUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedUntilTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakingTotalDurations",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakingLockTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "calcUntil",
          "type": "uint64"
        }
      ],
      "name": "releasedAmountUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeEmergencyPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "savedStakedDurations",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setClaimLockedUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionTimeUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setMaxStakingTotalDurations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setMinStakingLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "totalStakedDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "totalStakedDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unlockingTime",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "unlockingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdc30bb13023c8237bed4400dfb0848ef028432cb3243e4fe5a4b851451bf3703",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x82282b7c01C36FD7aE461d4FD3d9854E909FE832",
    "transactionIndex": 7,
    "gasUsed": "3184613",
    "logsBloom": "0x
    "blockHash": "0xa21a94a72f6843a335a35684abb951b4e3d1b6db242c5c4559a8963756e8c235",
    "transactionHash": "0xdc30bb13023c8237bed4400dfb0848ef028432cb3243e4fe5a4b851451bf3703",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 11052034,
        "transactionHash": "0xdc30bb13023c8237bed4400dfb0848ef028432cb3243e4fe5a4b851451bf3703",
        "address": "0x82282b7c01C36FD7aE461d4FD3d9854E909FE832",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xa21a94a72f6843a335a35684abb951b4e3d1b6db242c5c4559a8963756e8c235"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 11052034,
        "transactionHash": "0xdc30bb13023c8237bed4400dfb0848ef028432cb3243e4fe5a4b851451bf3703",
        "address": "0x82282b7c01C36FD7aE461d4FD3d9854E909FE832",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xa21a94a72f6843a335a35684abb951b4e3d1b6db242c5c4559a8963756e8c235"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 11052034,
        "transactionHash": "0xdc30bb13023c8237bed4400dfb0848ef028432cb3243e4fe5a4b851451bf3703",
        "address": "0x82282b7c01C36FD7aE461d4FD3d9854E909FE832",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 12,
        "blockHash": "0xa21a94a72f6843a335a35684abb951b4e3d1b6db242c5c4559a8963756e8c235"
      }
    ],
    "blockNumber": 11052034,
    "cumulativeGasUsed": "9548707",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "ticketToken": "0x0000000000000000000000000000000000000000",
      "lockedUntilTimestamp": 0,
      "minStakingLockTime": 0,
      "maxStakingTotalDurations": 0,
      "emissionRate": 0,
      "emissionTimeUnit": 0,
      "emissionStart": 0,
      "emissionEnd": 0,
      "claimLockedUntil": 0
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "3223f5fd7f0e19e9f93d0d54288f152e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minStakingLockTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxStakingTotalDurations\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"emissionTimeUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"claimLockedUntil\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721StakingEmissionStream.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimMany\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyPowerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"claimTokens\",\"type\":\"address[]\"}],\"name\":\"EmergencyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLockedUntil\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPowerRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"claimTokens\",\"type\":\"address[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"calcUntil\",\"type\":\"uint64\"}],\"name\":\"emissionAmountUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionEnd\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionStart\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionTimeUnit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entitlements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721EmissionReleaseExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721LockableClaimExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721LockedStakingExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minStakingLockTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxStakingTotalDurations\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"emissionTimeUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"claimLockedUntil\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721StakingEmissionStream.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastStakingTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"lockUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntilTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakingTotalDurations\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingLockTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"calcUntil\",\"type\":\"uint64\"}],\"name\":\"releasedAmountUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeEmergencyPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"savedStakedDurations\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setClaimLockedUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionTimeUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setMaxStakingTotalDurations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setMinStakingLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"totalStakedDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"totalStakedDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unlockingTime\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"unlockingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Flair (https://flair.finance)\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol\":\"ERC721StakingEmissionStream\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d14e1780f0ea212b19c07b83c8e51b9dc6903017df71e6de1fae364d724e0d\",\"license\":\"MIT\"},\"contracts/collections/ERC721/extensions/ERC721AutoIdMinterExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721AutoIdMinterExtension {\\n    function setMaxSupply(uint256 newValue) external;\\n\\n    function freezeMaxSupply() external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\\n */\\nabstract contract ERC721AutoIdMinterExtension is\\n    IERC721AutoIdMinterExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721,\\n    ERC721CollectionMetadataExtension\\n{\\n    using SafeMath for uint256;\\n\\n    uint256 public maxSupply;\\n    bool public maxSupplyFrozen;\\n\\n    uint256 internal _currentTokenId = 0;\\n\\n    function __ERC721AutoIdMinterExtension_init(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721AutoIdMinterExtension_init_unchained(_maxSupply);\\n    }\\n\\n    function __ERC721AutoIdMinterExtension_init_unchained(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        maxSupply = _maxSupply;\\n\\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\\n        _registerInterface(type(IERC721).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMaxSupply(uint256 newValue) external onlyOwner {\\n        require(!maxSupplyFrozen, \\\"BASE_URI_FROZEN\\\");\\n        maxSupply = newValue;\\n    }\\n\\n    function freezeMaxSupply() external onlyOwner {\\n        maxSupplyFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name()\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.symbol();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _currentTokenId;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _mintTo(address to, uint256 count) internal {\\n        require(totalSupply() + count <= maxSupply, \\\"EXCEEDS_MAX_SUPPLY\\\");\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 newTokenId = _currentTokenId;\\n            _safeMint(to, newTokenId);\\n            _incrementTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Increments the value of _currentTokenId\\n     */\\n    function _incrementTokenId() internal {\\n        _currentTokenId++;\\n    }\\n}\\n\",\"keccak256\":\"0x8213ae7b55faaf9c09a5c1a23b306e264fae49dbd7a6b60ba52168d61acf1705\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721CollectionMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface IERC721CollectionMetadataExtension {\\n    function setContractURI(string memory newValue) external;\\n\\n    function contractURI() external view returns (string memory);\\n}\\n\\n/**\\n * @dev Extension to allow configuring contract-level collection metadata URI.\\n */\\nabstract contract ERC721CollectionMetadataExtension is\\n    IERC721CollectionMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    IERC721Metadata\\n{\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    string private _contractURI;\\n\\n    function __ERC721CollectionMetadataExtension_init(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        __ERC721CollectionMetadataExtension_init_unchained(\\n            name_,\\n            symbol_,\\n            contractURI_\\n        );\\n    }\\n\\n    function __ERC721CollectionMetadataExtension_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _contractURI = contractURI_;\\n\\n        _registerInterface(\\n            type(IERC721CollectionMetadataExtension).interfaceId\\n        );\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setContractURI(string memory newValue) external onlyOwner {\\n        _contractURI = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, IERC165)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n}\\n\",\"keccak256\":\"0xa7eabdf899e9deda65348af07b1ddf9d6f4436d43872d014105ea463477e387b\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721LockableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721LockableExtension {\\n    function locked(uint256 tokenId) external view returns (bool);\\n\\n    function lock(uint256 tokenId) external;\\n\\n    function lock(uint256[] calldata tokenIds) external;\\n\\n    function unlock(uint256 tokenId) external;\\n\\n    function unlock(uint256[] calldata tokenIds) external;\\n}\\n\\n/**\\n * @dev Extension to allow locking NFTs, for use-cases like staking, without leaving holders wallet.\\n */\\nabstract contract ERC721LockableExtension is\\n    IERC721LockableExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension,\\n    ReentrancyGuard\\n{\\n    using BitMaps for BitMaps.BitMap;\\n\\n    BitMaps.BitMap internal lockedTokens;\\n\\n    function __ERC721LockableExtension_init() internal onlyInitializing {\\n        __ERC721LockableExtension_init_unchained();\\n    }\\n\\n    function __ERC721LockableExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721LockableExtension).interfaceId);\\n    }\\n\\n    // PUBLIC\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721AutoIdMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Returns if a token is locked or not.\\n     */\\n    function locked(uint256 tokenId) public view virtual returns (bool) {\\n        return lockedTokens.get(tokenId);\\n    }\\n\\n    function filterUnlocked(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory unlocked = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            if (!locked(ticketTokenIds[i])) {\\n                unlocked[i] = ticketTokenIds[i];\\n            }\\n        }\\n\\n        return unlocked;\\n    }\\n\\n    /* INTERNAL */\\n\\n    /**\\n     * At this moment staking is only possible from a certain address (usually a smart contract).\\n     *\\n     * This is because in almost all cases you want another contract to perform custom logic on lock and unlock operations,\\n     * without allowing users to directly unlock their tokens and sell them, for example.\\n     */\\n    function _lock(uint256 tokenId) internal virtual {\\n        require(!lockedTokens.get(tokenId), \\\"ERC721/ALREADY_LOCKED\\\");\\n        lockedTokens.set(tokenId);\\n    }\\n\\n    function _unlock(uint256 tokenId) internal virtual {\\n        require(lockedTokens.get(tokenId), \\\"ERC721/NOT_LOCKED\\\");\\n        lockedTokens.unset(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721) {\\n        require(!lockedTokens.get(tokenId), \\\"ERC721/TOKEN_LOCKED\\\");\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x948ea3da9de14fb619d6e3b5eafe3ea311079b60f2746296feadf58df955e13b\",\"license\":\"AGPL-3.0\"},\"contracts/common/EmergencyOwnerWithdrawExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IEmergencyOwnerWithdrawExtension {\\n    function emergencyWithdraw(address[] calldata claimTokens) external;\\n\\n    function revokeEmergencyPower() external;\\n}\\n\\nabstract contract EmergencyOwnerWithdrawExtension is\\n    IEmergencyOwnerWithdrawExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    event EmergencyPowerRevoked();\\n    event EmergencyWithdrawn(address[] claimTokens);\\n\\n    bool public emergencyPowerRevoked;\\n\\n    /* INTERNAL */\\n\\n    function __EmergencyOwnerWithdrawExtension_init()\\n        internal\\n        onlyInitializing\\n    {\\n        __EmergencyOwnerWithdrawExtension_init_unchained();\\n    }\\n\\n    function __EmergencyOwnerWithdrawExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IEmergencyOwnerWithdrawExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function emergencyWithdraw(address[] calldata claimTokens)\\n        public\\n        onlyOwner\\n    {\\n        require(!emergencyPowerRevoked, \\\"EMERGENCY_POWER_REVOKED\\\");\\n\\n        address _owner = owner();\\n\\n        for (uint256 i = 0; i < claimTokens.length; i++) {\\n            if (claimTokens[i] == address(0)) {\\n                payable(_owner).sendValue(address(this).balance);\\n            } else {\\n                IERC20(claimTokens[i]).transfer(\\n                    _owner,\\n                    IERC20(claimTokens[i]).balanceOf(address(this))\\n                );\\n            }\\n        }\\n    }\\n\\n    function revokeEmergencyPower() public onlyOwner {\\n        emergencyPowerRevoked = true;\\n        emit EmergencyPowerRevoked();\\n    }\\n}\\n\",\"keccak256\":\"0x1979325bfede1650d40cbde5a3434f9907281d490abe9f7a7c4c05c3dbf81554\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/base/ERC721MultiTokenStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721MultiTokenStream {\\n    // Claim native currency for a single ticket token\\n    function claim(uint256 ticketTokenId) external;\\n\\n    // Claim an erc20 claim token for a single ticket token\\n    function claim(uint256 ticketTokenId, address claimToken) external;\\n\\n    // Claim native currency for multiple ticket tokens (only if all owned by sender)\\n    function claim(uint256[] calldata ticketTokenIds) external;\\n\\n    // Claim native or erc20 tokens for multiple ticket tokens (only if all owned by `owner`)\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address owner\\n    ) external;\\n\\n    // Total native currency ever supplied to this stream\\n    function streamTotalSupply() external view returns (uint256);\\n\\n    // Total erc20 token ever supplied to this stream by claim token address\\n    function streamTotalSupply(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed from this stream\\n    function streamTotalClaimed() external view returns (uint256);\\n\\n    // Total erc20 token ever claimed from this stream by claim token address\\n    function streamTotalClaimed(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for a single ticket token\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for multiple token IDs\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total erc20 token ever claimed for multiple token IDs\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) external view returns (uint256);\\n\\n    // Calculate currently claimable amount for a specific ticket token ID and a specific claim token address\\n    // Pass 0x0000000000000000000000000000000000000000 as claim token to represent native currency\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        external\\n        view\\n        returns (uint256 claimableAmount);\\n}\\n\\nabstract contract ERC721MultiTokenStream is\\n    IERC721MultiTokenStream,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    struct Entitlement {\\n        uint256 totalClaimed;\\n        uint256 lastClaimedAt;\\n    }\\n\\n    // Config\\n    address public ticketToken;\\n\\n    // Locks changing the config until this timestamp is reached\\n    uint64 public lockedUntilTimestamp;\\n\\n    // Map of ticket token ID -> claim token address -> entitlement\\n    mapping(uint256 => mapping(address => Entitlement)) public entitlements;\\n\\n    // Map of claim token address -> Total amount claimed by all holders\\n    mapping(address => uint256) internal _streamTotalClaimed;\\n\\n    /* EVENTS */\\n\\n    event Claim(\\n        address operator,\\n        address beneficiary,\\n        uint256 ticketTokenId,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    event ClaimMany(\\n        address operator,\\n        address beneficiary,\\n        uint256[] ticketTokenIds,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    function __ERC721MultiTokenStream_init(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        __ERC721MultiTokenStream_init_unchained(\\n            _ticketToken,\\n            _lockedUntilTimestamp\\n        );\\n    }\\n\\n    function __ERC721MultiTokenStream_init_unchained(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        ticketToken = _ticketToken;\\n        lockedUntilTimestamp = _lockedUntilTimestamp;\\n\\n        _registerInterface(type(IERC721MultiTokenStream).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function lockUntil(uint64 newValue) public onlyOwner {\\n        require(newValue > lockedUntilTimestamp, \\\"STREAM/CANNOT_REWIND\\\");\\n        lockedUntilTimestamp = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    receive() external payable {\\n        require(msg.value > 0);\\n    }\\n\\n    function claim(uint256 ticketTokenId) public {\\n        claim(ticketTokenId, address(0));\\n    }\\n\\n    function claim(uint256 ticketTokenId, address claimToken)\\n        public\\n        nonReentrant\\n    {\\n        /* CHECKS */\\n        address owner = IERC721(ticketToken).ownerOf(ticketTokenId);\\n\\n        _beforeClaim(ticketTokenId, claimToken, owner);\\n\\n        uint256 claimable = streamClaimableAmount(ticketTokenId, claimToken);\\n        require(claimable > 0, \\\"STREAM/NOTHING_TO_CLAIM\\\");\\n\\n        /* EFFECTS */\\n\\n        entitlements[ticketTokenId][claimToken].totalClaimed += claimable;\\n        entitlements[ticketTokenId][claimToken].lastClaimedAt = block.timestamp;\\n\\n        _streamTotalClaimed[claimToken] += claimable;\\n\\n        _afterClaimCalculation(ticketTokenId, claimToken, claimable);\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(owner)).sendValue(claimable);\\n        } else {\\n            IERC20(claimToken).transfer(owner, claimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit Claim(_msgSender(), owner, ticketTokenId, claimToken, claimable);\\n    }\\n\\n    function claim(uint256[] calldata ticketTokenIds) public {\\n        claim(ticketTokenIds, address(0), _msgSender());\\n    }\\n\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address owner\\n    ) public nonReentrant {\\n        uint256 totalClaimable;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            _beforeClaim(ticketTokenIds[i], claimToken, owner);\\n\\n            /* CHECKS */\\n            require(\\n                IERC721(ticketToken).ownerOf(ticketTokenIds[i]) == owner,\\n                \\\"STREAM/NOT_NFT_OWNER\\\"\\n            );\\n\\n            /* EFFECTS */\\n            uint256 claimable = streamClaimableAmount(\\n                ticketTokenIds[i],\\n                claimToken\\n            );\\n\\n            if (claimable > 0) {\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .totalClaimed += claimable;\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .lastClaimedAt = block.timestamp;\\n\\n                totalClaimable += claimable;\\n            }\\n\\n            _afterClaimCalculation(ticketTokenIds[i], claimToken, claimable);\\n        }\\n\\n        _streamTotalClaimed[claimToken] += totalClaimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(owner)).sendValue(totalClaimable);\\n        } else {\\n            IERC20(claimToken).transfer(owner, totalClaimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit ClaimMany(\\n            _msgSender(),\\n            owner,\\n            ticketTokenIds,\\n            claimToken,\\n            totalClaimable\\n        );\\n    }\\n\\n    /* READ ONLY */\\n\\n    function streamTotalSupply() public view returns (uint256) {\\n        return streamTotalSupply(address(0));\\n    }\\n\\n    function streamTotalSupply(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (claimToken == address(0)) {\\n            return _streamTotalClaimed[claimToken] + address(this).balance;\\n        }\\n\\n        return\\n            _streamTotalClaimed[claimToken] +\\n            IERC20(claimToken).balanceOf(address(this));\\n    }\\n\\n    function streamTotalClaimed() public view returns (uint256) {\\n        return _streamTotalClaimed[address(0)];\\n    }\\n\\n    function streamTotalClaimed(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _streamTotalClaimed[claimToken];\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][address(0)].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamTotalClaimed(ticketTokenIds, address(0));\\n    }\\n\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimed = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimed += entitlements[ticketTokenIds[i]][claimToken].totalClaimed;\\n        }\\n\\n        return claimed;\\n    }\\n\\n    function streamClaimableAmount(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimable = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimable += streamClaimableAmount(ticketTokenIds[i], claimToken);\\n        }\\n\\n        return claimable;\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamClaimableAmount(ticketTokenId, address(0));\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 totalReleased = _totalTokenReleasedAmount(\\n            _totalStreamReleasedAmount(\\n                streamTotalSupply(claimToken),\\n                ticketTokenId,\\n                claimToken\\n            ),\\n            ticketTokenId,\\n            claimToken\\n        );\\n\\n        return\\n            totalReleased -\\n            entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    /* INTERNAL */\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address owner_\\n    ) internal virtual {}\\n\\n    function _afterClaimCalculation(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        uint256 claimable_\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x312db11e1bdc17fbcdbfce6ecb82ed4ebb0ec3f2eb8241b7da839907f10b8670\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721EmissionReleaseExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721EmissionReleaseExtension {\\n    function hasERC721EmissionReleaseExtension() external view returns (bool);\\n\\n    function setEmissionRate(uint256 newValue) external;\\n\\n    function setEmissionTimeUnit(uint64 newValue) external;\\n\\n    function setEmissionStart(uint64 newValue) external;\\n\\n    function setEmissionEnd(uint64 newValue) external;\\n\\n    function releasedAmountUntil(uint64 calcUntil)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function emissionAmountUntil(uint64 calcUntil)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721EmissionReleaseExtension is\\n    IERC721EmissionReleaseExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ERC721MultiTokenStream\\n{\\n    // Number of tokens released every `emissionTimeUnit`\\n    uint256 public emissionRate;\\n\\n    // Time unit to release tokens, users can only claim once every `emissionTimeUnit`\\n    uint64 public emissionTimeUnit;\\n\\n    // When emission and calculating tokens starts\\n    uint64 public emissionStart;\\n\\n    // When to stop calculating the tokens released\\n    uint64 public emissionEnd;\\n\\n    /* INIT */\\n\\n    function __ERC721EmissionReleaseExtension_init(\\n        uint256 _emissionRate,\\n        uint64 _emissionTimeUnit,\\n        uint64 _emissionStart,\\n        uint64 _emissionEnd\\n    ) internal onlyInitializing {\\n        __ERC721EmissionReleaseExtension_init_unchained(\\n            _emissionRate,\\n            _emissionTimeUnit,\\n            _emissionStart,\\n            _emissionEnd\\n        );\\n    }\\n\\n    function __ERC721EmissionReleaseExtension_init_unchained(\\n        uint256 _emissionRate,\\n        uint64 _emissionTimeUnit,\\n        uint64 _emissionStart,\\n        uint64 _emissionEnd\\n    ) internal onlyInitializing {\\n        emissionRate = _emissionRate;\\n        emissionTimeUnit = _emissionTimeUnit;\\n        emissionStart = _emissionStart;\\n        emissionEnd = _emissionEnd;\\n\\n        _registerInterface(type(IERC721EmissionReleaseExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setEmissionRate(uint256 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionRate = newValue;\\n    }\\n\\n    function setEmissionTimeUnit(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionTimeUnit = newValue;\\n    }\\n\\n    function setEmissionStart(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionStart = newValue;\\n    }\\n\\n    function setEmissionEnd(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionEnd = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721EmissionReleaseExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function releasedAmountUntil(uint64 calcUntil)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return\\n            emissionRate *\\n            // Intentionally rounded down:\\n            ((calcUntil - emissionStart) / emissionTimeUnit);\\n    }\\n\\n    function emissionAmountUntil(uint64 calcUntil)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return ((calcUntil - emissionStart) * emissionRate) / emissionTimeUnit;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual override returns (uint256) {\\n        streamTotalSupply_;\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        if (block.timestamp < emissionStart) {\\n            return 0;\\n        } else if (emissionEnd > 0 && block.timestamp > emissionEnd) {\\n            return releasedAmountUntil(emissionEnd);\\n        } else {\\n            return releasedAmountUntil(uint64(block.timestamp));\\n        }\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId,\\n        address claimToken,\\n        address owner_\\n    ) internal virtual override {\\n        owner_;\\n\\n        require(emissionStart < block.timestamp, \\\"STREAM/NOT_STARTED\\\");\\n\\n        require(\\n            entitlements[ticketTokenId][claimToken].lastClaimedAt <\\n                block.timestamp - emissionTimeUnit,\\n            \\\"STREAM/TOO_EARLY\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdab45441241958dbb2744341333c022d1a4bbfd616637d2f955d0cbf990bb815\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721LockableClaimExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721LockableClaimExtension {\\n    function hasERC721LockableClaimExtension() external view returns (bool);\\n\\n    function setClaimLockedUntil(uint64 newValue) external;\\n}\\n\\nabstract contract ERC721LockableClaimExtension is\\n    IERC721LockableClaimExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ERC721MultiTokenStream\\n{\\n    // Claiming is only possible after this time (unix timestamp)\\n    uint64 public claimLockedUntil;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721LockableClaimExtension_init(uint64 _claimLockedUntil)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721LockableClaimExtension_init_unchained(_claimLockedUntil);\\n    }\\n\\n    function __ERC721LockableClaimExtension_init_unchained(\\n        uint64 _claimLockedUntil\\n    ) internal onlyInitializing {\\n        claimLockedUntil = _claimLockedUntil;\\n\\n        _registerInterface(type(IERC721LockableClaimExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setClaimLockedUntil(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        claimLockedUntil = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721LockableClaimExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address owner_\\n    ) internal virtual override {\\n        ticketTokenId_;\\n        claimToken_;\\n        owner_;\\n\\n        require(claimLockedUntil < block.timestamp, \\\"STREAM/CLAIM_LOCKED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x31f63a9506b02f54de4bbc5b8cf212a1961ebad22d206abb40a35dbd270bc889\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721LockedStakingExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {IERC721LockableExtension} from \\\"../../../collections/ERC721/extensions/ERC721LockableExtension.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ninterface IERC721LockedStakingExtension {\\n    function hasERC721LockedStakingExtension() external view returns (bool);\\n\\n    function stake(uint256 tokenId) external;\\n\\n    function stake(uint256[] calldata tokenIds) external;\\n}\\n\\nabstract contract ERC721LockedStakingExtension is\\n    IERC721LockedStakingExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ERC721MultiTokenStream\\n{\\n    // Minimum seconds that token must be locked before unstaking.\\n    uint64 public minStakingLockTime;\\n\\n    // Maximum sum total of all durations staking that will be counted (across all stake/unstakes for each token). Staked durations beyond this number is ignored.\\n    uint64 public maxStakingTotalDurations;\\n\\n    // Map of token ID to the time of last staking\\n    mapping(uint256 => uint64) public lastStakingTime;\\n\\n    // Map of token ID to the sum total of all previous staked durations\\n    mapping(uint256 => uint64) public savedStakedDurations;\\n\\n    /* INIT */\\n\\n    function __ERC721LockedStakingExtension_init(\\n        uint64 _minStakingLockTime,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        __ERC721LockedStakingExtension_init_unchained(\\n            _minStakingLockTime,\\n            _maxStakingTotalDurations\\n        );\\n    }\\n\\n    function __ERC721LockedStakingExtension_init_unchained(\\n        uint64 _minStakingLockTime,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        minStakingLockTime = _minStakingLockTime;\\n        maxStakingTotalDurations = _maxStakingTotalDurations;\\n\\n        _registerInterface(type(IERC721LockedStakingExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMinStakingLockTime(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        minStakingLockTime = newValue;\\n    }\\n\\n    function setMaxStakingTotalDurations(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        maxStakingTotalDurations = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721LockedStakingExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function stake(uint256 tokenId) public virtual {\\n        require(\\n            _msgSender() == IERC721(ticketToken).ownerOf(tokenId),\\n            \\\"STREAM/NOT_TOKEN_OWNER\\\"\\n        );\\n\\n        require(\\n            totalStakedDuration(tokenId) < maxStakingTotalDurations,\\n            \\\"STREAM/MAX_STAKE_DURATION_EXCEEDED\\\"\\n        );\\n\\n        lastStakingTime[tokenId] = uint64(block.timestamp);\\n\\n        IERC721LockableExtension(ticketToken).lock(tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public virtual {\\n        address sender = _msgSender();\\n        uint64 currentTime = uint64(block.timestamp);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(\\n                sender == IERC721(ticketToken).ownerOf(tokenIds[i]),\\n                \\\"STREAM/NOT_TOKEN_OWNER\\\"\\n            );\\n\\n            require(\\n                totalStakedDuration(tokenIds[i]) < maxStakingTotalDurations,\\n                \\\"STREAM/MAX_STAKE_DURATION_EXCEEDED\\\"\\n            );\\n\\n            lastStakingTime[tokenIds[i]] = currentTime;\\n        }\\n\\n        IERC721LockableExtension(ticketToken).lock(tokenIds);\\n    }\\n\\n    function unstake(uint256 tokenId) public virtual {\\n        _unstake(_msgSender(), uint64(block.timestamp), tokenId);\\n        IERC721LockableExtension(ticketToken).unlock(tokenId);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) public virtual {\\n        address operator = _msgSender();\\n        uint64 currentTime = uint64(block.timestamp);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _unstake(operator, currentTime, tokenIds[i]);\\n        }\\n\\n        IERC721LockableExtension(ticketToken).unlock(tokenIds);\\n    }\\n\\n    function totalStakedDuration(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        virtual\\n        returns (uint64)\\n    {\\n        uint64 totalDurations = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            totalDurations += totalStakedDuration(ticketTokenIds[i]);\\n        }\\n\\n        return totalDurations;\\n    }\\n\\n    function totalStakedDuration(uint256 ticketTokenId)\\n        public\\n        view\\n        virtual\\n        returns (uint64)\\n    {\\n        uint64 total = savedStakedDurations[ticketTokenId];\\n\\n        if (lastStakingTime[ticketTokenId] > 0) {\\n            uint64 targetTime = _stakingTimeLimit();\\n\\n            if (targetTime > block.timestamp) {\\n                targetTime = uint64(block.timestamp);\\n            }\\n\\n            if (lastStakingTime[ticketTokenId] > 0) {\\n                if (targetTime > lastStakingTime[ticketTokenId]) {\\n                    total += (targetTime - lastStakingTime[ticketTokenId]);\\n                }\\n            }\\n        }\\n\\n        if (total > maxStakingTotalDurations) {\\n            total = maxStakingTotalDurations;\\n        }\\n\\n        return total;\\n    }\\n\\n    function unlockingTime(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            lastStakingTime[ticketTokenId] > 0\\n                ? lastStakingTime[ticketTokenId] + minStakingLockTime\\n                : 0;\\n    }\\n\\n    function unlockingTime(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory unlockedAt = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            unlockedAt[i] = unlockingTime(ticketTokenIds[i]);\\n        }\\n\\n        return unlockedAt;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _stakingTimeLimit() internal view virtual returns (uint64) {\\n        return 18_446_744_073_709_551_615; // max(uint64)\\n    }\\n\\n    function _unstake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal {\\n        require(lastStakingTime[tokenId] > 0, \\\"STREAM/NOT_STAKED\\\");\\n\\n        require(\\n            currentTime >= lastStakingTime[tokenId] + minStakingLockTime,\\n            \\\"STREAM/NOT_LOCKED_ENOUGH\\\"\\n        );\\n\\n        require(\\n            operator == IERC721(ticketToken).ownerOf(tokenId),\\n            \\\"STREAM/NOT_TOKEN_OWNER\\\"\\n        );\\n\\n        savedStakedDurations[tokenId] = totalStakedDuration(tokenId);\\n\\n        lastStakingTime[tokenId] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5d51384a4f86bad4299b125edb134e1f12e9fa022c6d47805f0dfdb375e686f8\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/EmergencyOwnerWithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721EmissionReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockedStakingExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ncontract ERC721StakingEmissionStream is\\n    Initializable,\\n    Ownable,\\n    EmergencyOwnerWithdrawExtension,\\n    ERC721EmissionReleaseExtension,\\n    ERC721LockedStakingExtension,\\n    ERC721LockableClaimExtension\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Staking Emission Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Locked staking extension\\n        uint64 minStakingLockTime; // in seconds. Minimum time the NFT must stay locked before unstaking.\\n        uint64 maxStakingTotalDurations; // in seconds. Maximum sum total of all durations staking that will be counted (across all stake/unstakes for each token).\\n        // Emission release extension\\n        uint256 emissionRate;\\n        uint64 emissionTimeUnit;\\n        uint64 emissionStart;\\n        uint64 emissionEnd;\\n        // Lockable claim extension\\n        uint64 claimLockedUntil;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __EmergencyOwnerWithdrawExtension_init();\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721LockedStakingExtension_init(\\n            config.minStakingLockTime,\\n            config.maxStakingTotalDurations\\n        );\\n        __ERC721EmissionReleaseExtension_init(\\n            config.emissionRate,\\n            config.emissionTimeUnit,\\n            config.emissionStart,\\n            config.emissionEnd\\n        );\\n        __ERC721LockableClaimExtension_init(config.claimLockedUntil);\\n    }\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    )\\n        internal\\n        view\\n        virtual\\n        override(ERC721MultiTokenStream, ERC721EmissionReleaseExtension)\\n        returns (uint256)\\n    {\\n        // Removing the logic from emission extension because it is irrevelant when staking.\\n        return 0;\\n    }\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual override returns (uint256) {\\n        totalReleasedAmount_;\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        return\\n            emissionRate *\\n            // Intentionally rounded down\\n            (totalStakedDuration(ticketTokenId_) / emissionTimeUnit);\\n    }\\n\\n    function _stakingTimeLimit()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint64)\\n    {\\n        return emissionEnd;\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address owner_\\n    )\\n        internal\\n        override(\\n            ERC721MultiTokenStream,\\n            ERC721EmissionReleaseExtension,\\n            ERC721LockableClaimExtension\\n        )\\n    {\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            owner_\\n        );\\n        ERC721EmissionReleaseExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            owner_\\n        );\\n    }\\n\\n    /* PUBLIC */\\n\\n    function stake(uint256 tokenId) public override {\\n        require(\\n            uint64(block.timestamp) >= emissionStart,\\n            \\\"STREAM/NOT_STARTED_YET\\\"\\n        );\\n\\n        super.stake(tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public override {\\n        require(\\n            uint64(block.timestamp) >= emissionStart,\\n            \\\"STREAM/NOT_STARTED_YET\\\"\\n        );\\n\\n        super.stake(tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0x2209314b7115f854ee10b564b88adcd10cc181fdea90fac555068b1db96a60d3\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003c4838038062003c4883398101604081905262000034916200065a565b6200003f3362000057565b6001600355620000508133620000a9565b50620007b5565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000620000b7600162000193565b90508015620000d0576000805461ff0019166101001790555b620000db8262000057565b620000e562000245565b82516020840151620000f891906200027b565b6200011283604001518460600151620002b560201b60201c565b6200013683608001518460a001518560c001518660e00151620002eb60201b60201c565b610100830151620001479062000329565b80156200018e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60008054610100900460ff1615620001fc578160ff166001148015620001cc5750620001ca306200036160201b620020ad1760201c565b155b620001f45760405162461bcd60e51b8152600401620001eb906200071c565b60405180910390fd5b506000919050565b60005460ff808416911610620002265760405162461bcd60e51b8152600401620001eb906200071c565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166200026f5760405162461bcd60e51b8152600401620001eb906200076a565b6200027962000370565b565b600054610100900460ff16620002a55760405162461bcd60e51b8152600401620001eb906200076a565b620002b18282620003ac565b5050565b600054610100900460ff16620002df5760405162461bcd60e51b8152600401620001eb906200076a565b620002b1828262000416565b600054610100900460ff16620003155760405162461bcd60e51b8152600401620001eb906200076a565b620003238484848462000491565b50505050565b600054610100900460ff16620003535760405162461bcd60e51b8152600401620001eb906200076a565b6200035e816200051c565b50565b6001600160a01b03163b151590565b600054610100900460ff166200039a5760405162461bcd60e51b8152600401620001eb906200076a565b620002796326bcdb3160e01b6200056e565b600054610100900460ff16620003d65760405162461bcd60e51b8152600401620001eb906200076a565b600480546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b03851617179055620002b1631ba050e960e21b6200056e565b600054610100900460ff16620004405760405162461bcd60e51b8152600401620001eb906200076a565b600880546001600160c01b0316600160c01b6001600160401b038581169190910291909117909155600980546001600160401b031916918316919091179055620002b1630fe9fbd560e31b6200056e565b600054610100900460ff16620004bb5760405162461bcd60e51b8152600401620001eb906200076a565b6007849055600880546001600160401b03838116600160801b02600160801b600160c01b031986831668010000000000000000026001600160801b031990941692881692909217929092171617905562000323634d0b5a4960e01b6200056e565b600054610100900460ff16620005465760405162461bcd60e51b8152600401620001eb906200076a565b600c80546001600160401b0319166001600160401b0383161790556200035e6317b2ef4360e31b5b6001600160e01b03198082161415620005ca5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401620001eb565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60405161012081016001600160401b03811182821017156200062457634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200024057600080fd5b80516001600160401b03811681146200024057600080fd5b600061012082840312156200066e57600080fd5b62000678620005f2565b62000683836200062a565b8152620006936020840162000642565b6020820152620006a66040840162000642565b6040820152620006b96060840162000642565b606082015260808301516080820152620006d660a0840162000642565b60a0820152620006e960c0840162000642565b60c0820152620006fc60e0840162000642565b60e08201526101006200071181850162000642565b908201529392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b61348380620007c56000396000f3fe6080604052600436106102955760003560e01c80630191c0af146102ae57806301c1dfba146102e157806301ffc9a71461030157806306fdde031461033157806308289dbe146103875780630c805a44146103d55780630fbf0a931461040b57806314427a961461042b5780631c725fdc1461044b57806325289bad1461046b578063277d048b146104925780632890d033146104a75780632c0e1313146104bc5780632e17de78146104dc57806333abcdbd146104fc578063379607f51461051c5780633b3f12e21461053c5780633d2dded51461055c5780634abb4c49146105995780634e631783146105c6578063513da948146105e757806354fd4d501461060e57806357dc48c81461063d57806361949636146106915780636b10939c146106b15780636ba4c138146106d1578063715018a6146106f157806378b094ca14610706578063790c0c73146107265780638368909c1461074657806389c6b8151461076d5780638da5cb5b1461078d5780639199690b146107af578063968d9b2c146107c357806396afc450146107e35780639edfe830146107f9578063a1bdb15e14610819578063a1cf649314610839578063a694fc3a1461087c578063a86b21e81461089c578063a8d2d338146108bc578063aaf2f999146108dc578063c0881849146108fc578063d0d6641d14610932578063d1335b69146107af578063d4244f2414610952578063d5ed4d5a14610972578063d6642801146107af578063d870a15114610992578063d97314f5146109b9578063ddd5e1b2146109d9578063de76a676146109f9578063e449f34114610a19578063f2fde38b14610a39578063f389b6e414610a59578063f4415ad614610a79578063f593dfc814610ab1578063f66e38c214610ad157600080fd5b366102a957600034116102a757600080fd5b005b600080fd5b3480156102ba57600080fd5b506102ce6102c9366004612cb6565b610af1565b6040519081526020015b60405180910390f35b3480156102ed57600080fd5b506102a76102fc366004612d0c565b610b47565b34801561030d57600080fd5b5061032161031c366004612d4d565b610d9b565b60405190151581526020016102d8565b34801561033d57600080fd5b5061037a6040518060400160405280601e81526020017f455243373231205374616b696e6720456d697373696f6e2053747265616d000081525081565b6040516102d89190612d77565b34801561039357600080fd5b506103bd6103a2366004612dcc565b600b602052600090815260409020546001600160401b031681565b6040516001600160401b0390911681526020016102d8565b3480156103e157600080fd5b506103bd6103f0366004612dcc565b600a602052600090815260409020546001600160401b031681565b34801561041757600080fd5b506102a7610426366004612d0c565b610ddb565b34801561043757600080fd5b50600c546103bd906001600160401b031681565b34801561045757600080fd5b506102a7610466366004612dfc565b610e20565b34801561047757600080fd5b506004546103bd90600160a01b90046001600160401b031681565b34801561049e57600080fd5b506102a7610ed7565b3480156104b357600080fd5b506102ce610f44565b3480156104c857600080fd5b506102a76104d7366004612dfc565b610f55565b3480156104e857600080fd5b506102a76104f7366004612dcc565b610fd8565b34801561050857600080fd5b506103bd610517366004612dcc565b611043565b34801561052857600080fd5b506102a7610537366004612dcc565b611128565b34801561054857600080fd5b506102ce610557366004612cb6565b611136565b34801561056857600080fd5b506000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8546102ce565b3480156105a557600080fd5b506105b96105b4366004612d0c565b6111b4565b6040516102d89190612e17565b3480156105d257600080fd5b5060025461032190600160a01b900460ff1681565b3480156105f357600080fd5b506008546103bd90600160401b90046001600160401b031681565b34801561061a57600080fd5b5061037a60405180604001604052806003815260200162302e3160e81b81525081565b34801561064957600080fd5b5061067c610658366004612e5b565b60056020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016102d8565b34801561069d57600080fd5b506008546103bd906001600160401b031681565b3480156106bd57600080fd5b506102a76106cc366004612dfc565b61125f565b3480156106dd57600080fd5b506102a76106ec366004612d0c565b6112e8565b3480156106fd57600080fd5b506102a76112f5565b34801561071257600080fd5b506102a7610721366004612dfc565b611330565b34801561073257600080fd5b506102ce610741366004612e8b565b6113bd565b34801561075257600080fd5b506008546103bd90600160801b90046001600160401b031681565b34801561077957600080fd5b506102ce610788366004612d0c565b611490565b34801561079957600080fd5b506107a26114a5565b6040516102d89190612ea8565b3480156107bb57600080fd5b506001610321565b3480156107cf57600080fd5b506102ce6107de366004612dcc565b6114b4565b3480156107ef57600080fd5b506102ce60075481565b34801561080557600080fd5b506102ce610814366004612dfc565b6114c1565b34801561082557600080fd5b506102a7610834366004612dcc565b611506565b34801561084557600080fd5b506102ce610854366004612e5b565b60009182526005602090815260408084206001600160a01b0393909316845291905290205490565b34801561088857600080fd5b506102a7610897366004612dcc565b61156c565b3480156108a857600080fd5b506102ce6108b7366004612dfc565b6115ac565b3480156108c857600080fd5b506102a76108d7366004612f09565b6115f2565b3480156108e857600080fd5b506102a76108f7366004612dfc565b6116c0565b34801561090857600080fd5b506102ce610917366004612e8b565b6001600160a01b031660009081526006602052604090205490565b34801561093e57600080fd5b506102ce61094d366004612dcc565b61174d565b34801561095e57600080fd5b506009546103bd906001600160401b031681565b34801561097e57600080fd5b506004546107a2906001600160a01b031681565b34801561099e57600080fd5b506008546103bd90600160c01b90046001600160401b031681565b3480156109c557600080fd5b506102a76109d4366004612dfc565b6117ae565b3480156109e557600080fd5b506102a76109f4366004612e5b565b611831565b348015610a0557600080fd5b506103bd610a14366004612d0c565b611ac9565b348015610a2557600080fd5b506102a7610a34366004612d0c565b611b15565b348015610a4557600080fd5b506102a7610a54366004612e8b565b611bc1565b348015610a6557600080fd5b506102a7610a74366004612fdf565b611c5e565b348015610a8557600080fd5b506102ce610a94366004612dcc565b600090815260056020908152604080832083805290915290205490565b348015610abd57600080fd5b506102a7610acc366004612dfc565b611fd3565b348015610add57600080fd5b506102ce610aec366004612e5b565b612056565b600080805b84811015610b3e57610b20868683818110610b1357610b13613046565b9050602002013585612056565b610b2a9083613072565b915080610b368161308a565b915050610af6565b50949350505050565b33610b506114a5565b6001600160a01b031614610b7f5760405162461bcd60e51b8152600401610b76906130a5565b60405180910390fd5b600254600160a01b900460ff1615610bd35760405162461bcd60e51b81526020600482015260176024820152761153515491d15390d657d413d5d15497d4915593d2d151604a1b6044820152606401610b76565b6000610bdd6114a5565b905060005b82811015610d95576000848483818110610bfe57610bfe613046565b9050602002016020810190610c139190612e8b565b6001600160a01b03161415610c3a57610c356001600160a01b038316476120bc565b610d83565b838382818110610c4c57610c4c613046565b9050602002016020810190610c619190612e8b565b6001600160a01b031663a9059cbb83868685818110610c8257610c82613046565b9050602002016020810190610c979190612e8b565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610cc29190612ea8565b60206040518083038186803b158015610cda57600080fd5b505afa158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1291906130da565b6040518363ffffffff1660e01b8152600401610d2f9291906130f3565b602060405180830381600087803b158015610d4957600080fd5b505af1158015610d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d81919061310c565b505b80610d8d8161308a565b915050610be2565b50505050565b60006301ffc9a760e01b6001600160e01b031983161480610dd557506001600160e01b0319821660009081526001602052604090205460ff165b92915050565b6008546001600160401b03600160401b9091048116429091161015610e125760405162461bcd60e51b8152600401610b769061312e565b610e1c82826121d2565b5050565b33610e296114a5565b6001600160a01b031614610e4f5760405162461bcd60e51b8152600401610b76906130a5565b6004546001600160401b03600160a01b909104811690821611610eab5760405162461bcd60e51b815260206004820152601460248201527314d5149150534bd0d0539393d517d49155d2539160621b6044820152606401610b76565b600480546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b33610ee06114a5565b6001600160a01b031614610f065760405162461bcd60e51b8152600401610b76906130a5565b6002805460ff60a01b1916600160a01b1790556040517f21fadcdbe90fc4e8062dd78003616bbe56d48e0f1bfc58eacd10b11bba16b79690600090a1565b6000610f5060006113bd565b905090565b33610f5e6114a5565b6001600160a01b031614610f845760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b031610610fb65760405162461bcd60e51b8152600401610b769061315e565b600c80546001600160401b0319166001600160401b0392909216919091179055565b610fe3334283612383565b60048054604051636198e33960e01b81529182018390526001600160a01b031690636198e339906024015b600060405180830381600087803b15801561102857600080fd5b505af115801561103c573d6000803e3d6000fd5b5050505050565b6000818152600b6020908152604080832054600a9092528220546001600160401b039182169116156110fe57600854600160801b90046001600160401b03164281111561108d5750425b6000848152600a60205260409020546001600160401b0316156110fc576000848152600a60205260409020546001600160401b0390811690821611156110fc576000848152600a60205260409020546110ef906001600160401b03168261318c565b6110f990836131b4565b91505b505b6009546001600160401b039081169082161115610dd557506009546001600160401b031692915050565b611133816000611831565b50565b600080805b84811015610b3e576005600087878481811061115957611159613046565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826111a09190613072565b9150806111ac8161308a565b91505061113b565b60606000826001600160401b038111156111d0576111d0612ebc565b6040519080825280602002602001820160405280156111f9578160200160208202803683370190505b50905060005b838110156112575761122885858381811061121c5761121c613046565b9050602002013561174d565b82828151811061123a5761123a613046565b60209081029190910101528061124f8161308a565b9150506111ff565b509392505050565b336112686114a5565b6001600160a01b03161461128e5760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b0316106112c05760405162461bcd60e51b8152600401610b769061315e565b600880546001600160401b03909216600160c01b026001600160c01b03909216919091179055565b610e1c8282600033611c5e565b336112fe6114a5565b6001600160a01b0316146113245760405162461bcd60e51b8152600401610b76906130a5565b61132e600061255a565b565b336113396114a5565b6001600160a01b03161461135f5760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b0316106113915760405162461bcd60e51b8152600401610b769061315e565b600880546001600160401b03909216600160801b02600160801b600160c01b0319909216919091179055565b60006001600160a01b0382166113f1576001600160a01b038216600090815260066020526040902054610dd5904790613072565b6040516370a0823160e01b81526001600160a01b038316906370a082319061141d903090600401612ea8565b60206040518083038186803b15801561143557600080fd5b505afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d91906130da565b6001600160a01b038316600090815260066020526040902054610dd59190613072565b600061149e83836000611136565b9392505050565b6002546001600160a01b031690565b6000610dd5826000612056565b6008546000906001600160401b03808216916114e691600160401b909104168461318c565b6114f091906131f5565b6001600160401b0316600754610dd5919061321b565b3361150f6114a5565b6001600160a01b0316146115355760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b0316106115675760405162461bcd60e51b8152600401610b769061315e565b600755565b6008546001600160401b03600160401b90910481164290911610156115a35760405162461bcd60e51b8152600401610b769061312e565b611133816125ac565b6008546007546000916001600160401b0380821692916115d591600160401b909104168561318c565b6001600160401b03166115e8919061321b565b610dd5919061323a565b60006115fe60016126ea565b90508015611616576000805461ff0019166101001790555b61161f8261255a565b61162761277e565b611639836000015184602001516127ad565b61164b836040015184606001516127de565b61166783608001518460a001518560c001518660e0015161280f565b611675836101000151612842565b80156116bb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b336116c96114a5565b6001600160a01b0316146116ef5760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b0316106117215760405162461bcd60e51b8152600401610b769061315e565b600880546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b6000818152600a60205260408120546001600160401b031661177057600061179f565b6008546000838152600a602052604090205461179f916001600160401b03600160c01b909104811691166131b4565b6001600160401b031692915050565b336117b76114a5565b6001600160a01b0316146117dd5760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b03161061180f5760405162461bcd60e51b8152600401610b769061315e565b600880546001600160401b0319166001600160401b0392909216919091179055565b600260035414156118545760405162461bcd60e51b8152600401610b769061324e565b6002600355600480546040516331a9108f60e11b81529182018490526000916001600160a01b0390911690636352211e9060240160206040518083038186803b1580156118a057600080fd5b505afa1580156118b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d89190613285565b90506118e5838383612872565b60006118f18484612056565b90506000811161193d5760405162461bcd60e51b815260206004820152601760248201527653545245414d2f4e4f5448494e475f544f5f434c41494d60481b6044820152606401610b76565b60008481526005602090815260408083206001600160a01b03871684529091528120805483929061196f908490613072565b909155505060008481526005602090815260408083206001600160a01b03871684528252808320426001909101556006909152812080548392906119b4908490613072565b909155506119bf9050565b6001600160a01b0383166119e5576119e06001600160a01b038316826120bc565b611a67565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611a1390859085906004016130f3565b602060405180830381600087803b158015611a2d57600080fd5b505af1158015611a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a65919061310c565b505b604080513381526001600160a01b038481166020830152818301879052851660608201526080810183905290517fa2d3c4c1fc934d6d2d8f9e862df90c01ae4eb0e920cd8957d242ba26b8dc40789181900360a00190a1505060016003555050565b600080805b8381101561125757611af7858583818110611aeb57611aeb613046565b90506020020135611043565b611b0190836131b4565b915080611b0d8161308a565b915050611ace565b334260005b83811015611b5757611b458383878785818110611b3957611b39613046565b90506020020135612383565b80611b4f8161308a565b915050611b1a565b5060048054604051635d36598f60e01b81526001600160a01b0390911691635d36598f91611b899188918891016132d8565b600060405180830381600087803b158015611ba357600080fd5b505af1158015611bb7573d6000803e3d6000fd5b5050505050505050565b33611bca6114a5565b6001600160a01b031614611bf05760405162461bcd60e51b8152600401610b76906130a5565b6001600160a01b038116611c555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b76565b6111338161255a565b60026003541415611c815760405162461bcd60e51b8152600401610b769061324e565b60026003556000805b84811015611eb057611cb5868683818110611ca757611ca7613046565b905060200201358585612872565b6004546001600160a01b038085169116636352211e888885818110611cdc57611cdc613046565b905060200201356040518263ffffffff1660e01b8152600401611d0191815260200190565b60206040518083038186803b158015611d1957600080fd5b505afa158015611d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d519190613285565b6001600160a01b031614611d9e5760405162461bcd60e51b815260206004820152601460248201527329aa2922a0a697a727aa2fa7232a2fa7aba722a960611b6044820152606401610b76565b6000611dc2878784818110611db557611db5613046565b9050602002013586612056565b90508015611e88578060056000898986818110611de157611de1613046565b9050602002013581526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000206000016000828254611e2b9190613072565b9091555042905060056000898986818110611e4857611e48613046565b6020908102929092013583525081810192909252604090810160009081206001600160a01b038a168252909252902060010155611e858184613072565b92505b611e9d8787848181106116bb576116bb613046565b5080611ea88161308a565b915050611c8a565b506001600160a01b03831660009081526006602052604081208054839290611ed9908490613072565b90915550506001600160a01b038316611f0457611eff6001600160a01b038316826120bc565b611f86565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611f3290859085906004016130f3565b602060405180830381600087803b158015611f4c57600080fd5b505af1158015611f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f84919061310c565b505b7fd84a5c424a4f777bcf4f645712b8e5ebfc550f42bde444fa822fe98ee1b132b1338387878786604051611fbf969594939291906132ec565b60405180910390a150506001600355505050565b33611fdc6114a5565b6001600160a01b0316146120025760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b0316106120345760405162461bcd60e51b8152600401610b769061315e565b600980546001600160401b0319166001600160401b0392909216919091179055565b60008061207561206e612068856113bd565b50600090565b8585612888565b60008581526005602090815260408083206001600160a01b03881684529091529020549091506120a5908261332b565b949350505050565b6001600160a01b03163b151590565b8047101561210c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610b76565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612159576040519150601f19603f3d011682016040523d82523d6000602084013e61215e565b606091505b50509050806116bb5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610b76565b334260005b83811015612351576004546001600160a01b0316636352211e86868481811061220257612202613046565b905060200201356040518263ffffffff1660e01b815260040161222791815260200190565b60206040518083038186803b15801561223f57600080fd5b505afa158015612253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122779190613285565b6001600160a01b0316836001600160a01b0316146122a75760405162461bcd60e51b8152600401610b7690613342565b6009546001600160401b03166122c8868684818110611aeb57611aeb613046565b6001600160401b0316106122ee5760405162461bcd60e51b8152600401610b7690613372565b81600a600087878581811061230557612305613046565b90506020020135815260200190815260200160002060006101000a8154816001600160401b0302191690836001600160401b0316021790555080806123499061308a565b9150506121d7565b50600480546040516342cb086360e11b81526001600160a01b039091169163859610c691611b899188918891016132d8565b6000818152600a60205260409020546001600160401b03166123db5760405162461bcd60e51b815260206004820152601160248201527014d5149150534bd393d517d4d51052d151607a1b6044820152606401610b76565b6008546000828152600a602052604090205461240a916001600160401b03600160c01b909104811691166131b4565b6001600160401b0316826001600160401b031610156124665760405162461bcd60e51b81526020600482015260186024820152770a6a8a48a829a5e9c9ea8be989e86968a88be8a9c9eaa8e960431b6044820152606401610b76565b600480546040516331a9108f60e11b81529182018390526001600160a01b031690636352211e9060240160206040518083038186803b1580156124a857600080fd5b505afa1580156124bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e09190613285565b6001600160a01b0316836001600160a01b0316146125105760405162461bcd60e51b8152600401610b7690613342565b61251981611043565b6000918252600b6020908152604080842080546001600160401b03949094166001600160401b0319948516179055600a909152909120805490911690555050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600480546040516331a9108f60e11b81529182018390526001600160a01b031690636352211e9060240160206040518083038186803b1580156125ee57600080fd5b505afa158015612602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126269190613285565b6001600160a01b0316336001600160a01b0316146126565760405162461bcd60e51b8152600401610b7690613342565b6009546001600160401b031661266b82611043565b6001600160401b0316106126915760405162461bcd60e51b8152600401610b7690613372565b6000818152600a60205260409081902080546001600160401b031916426001600160401b03161790556004805491516337519c1960e21b81529081018390526001600160a01b039091169063dd4670649060240161100e565b60008054610100900460ff1615612738578160ff1660011480156127145750612712306120ad565b155b6127305760405162461bcd60e51b8152600401610b76906133b4565b506000919050565b60005460ff80841691161061275f5760405162461bcd60e51b8152600401610b76906133b4565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166127a55760405162461bcd60e51b8152600401610b7690613402565b61132e6128c0565b600054610100900460ff166127d45760405162461bcd60e51b8152600401610b7690613402565b610e1c82826128f7565b600054610100900460ff166128055760405162461bcd60e51b8152600401610b7690613402565b610e1c828261295c565b600054610100900460ff166128365760405162461bcd60e51b8152600401610b7690613402565b610d95848484846129d2565b600054610100900460ff166128695760405162461bcd60e51b8152600401610b7690613402565b61113381612a53565b61287d838383612aa5565b6116bb838383612af7565b6008546000906001600160401b03166128a084611043565b6128aa91906131f5565b6001600160401b03166007546120a5919061321b565b600054610100900460ff166128e75760405162461bcd60e51b8152600401610b7690613402565b61132e6326bcdb3160e01b612bca565b600054610100900460ff1661291e5760405162461bcd60e51b8152600401610b7690613402565b600480546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b03851617179055610e1c631ba050e960e21b612bca565b600054610100900460ff166129835760405162461bcd60e51b8152600401610b7690613402565b600880546001600160c01b0316600160c01b6001600160401b038581169190910291909117909155600980546001600160401b031916918316919091179055610e1c630fe9fbd560e31b612bca565b600054610100900460ff166129f95760405162461bcd60e51b8152600401610b7690613402565b6007849055600880546001600160401b03838116600160801b02600160801b600160c01b0319868316600160401b026001600160801b0319909416928816929092179290921716179055610d95634d0b5a4960e01b612bca565b600054610100900460ff16612a7a5760405162461bcd60e51b8152600401610b7690613402565b600c80546001600160401b0319166001600160401b0383161790556111336317b2ef4360e31b612bca565b600c54426001600160401b03909116106116bb5760405162461bcd60e51b815260206004820152601360248201527214d5149150534bd0d310525357d313d0d2d151606a1b6044820152606401610b76565b60085442600160401b9091046001600160401b031610612b4e5760405162461bcd60e51b815260206004820152601260248201527114d5149150534bd393d517d4d5105495115160721b6044820152606401610b76565b600854612b64906001600160401b03164261332b565b60008481526005602090815260408083206001600160a01b0387168452909152902060010154106116bb5760405162461bcd60e51b815260206004820152601060248201526f53545245414d2f544f4f5f4541524c5960801b6044820152606401610b76565b6001600160e01b03198082161415612c235760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610b76565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60008083601f840112612c5d57600080fd5b5081356001600160401b03811115612c7457600080fd5b6020830191508360208260051b8501011115612c8f57600080fd5b9250929050565b6001600160a01b038116811461113357600080fd5b803561277981612c96565b600080600060408486031215612ccb57600080fd5b83356001600160401b03811115612ce157600080fd5b612ced86828701612c4b565b9094509250506020840135612d0181612c96565b809150509250925092565b60008060208385031215612d1f57600080fd5b82356001600160401b03811115612d3557600080fd5b612d4185828601612c4b565b90969095509350505050565b600060208284031215612d5f57600080fd5b81356001600160e01b03198116811461149e57600080fd5b600060208083528351808285015260005b81811015612da457858101830151858201604001528201612d88565b81811115612db6576000604083870101525b50601f01601f1916929092016040019392505050565b600060208284031215612dde57600080fd5b5035919050565b80356001600160401b038116811461277957600080fd5b600060208284031215612e0e57600080fd5b61149e82612de5565b6020808252825182820181905260009190848201906040850190845b81811015612e4f57835183529284019291840191600101612e33565b50909695505050505050565b60008060408385031215612e6e57600080fd5b823591506020830135612e8081612c96565b809150509250929050565b600060208284031215612e9d57600080fd5b813561149e81612c96565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715612f0357634e487b7160e01b600052604160045260246000fd5b60405290565b600080828403610140811215612f1e57600080fd5b61012080821215612f2e57600080fd5b612f36612ed2565b9150612f4185612cab565b8252612f4f60208601612de5565b6020830152612f6060408601612de5565b6040830152612f7160608601612de5565b606083015260808501356080830152612f8c60a08601612de5565b60a0830152612f9d60c08601612de5565b60c0830152612fae60e08601612de5565b60e0830152610100612fc1818701612de5565b8184015250819350612fd4818601612cab565b925050509250929050565b60008060008060608587031215612ff557600080fd5b84356001600160401b0381111561300b57600080fd5b61301787828801612c4b565b909550935050602085013561302b81612c96565b9150604085013561303b81612c96565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156130855761308561305c565b500190565b600060001982141561309e5761309e61305c565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156130ec57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561311e57600080fd5b8151801515811461149e57600080fd5b60208082526016908201527514d5149150534bd393d517d4d5105495115117d6515560521b604082015260600190565b60208082526014908201527314d5149150534bd0d3d3919251d7d313d0d2d15160621b604082015260600190565b60006001600160401b03838116908316818110156131ac576131ac61305c565b039392505050565b60006001600160401b038281168482168083038211156131d6576131d661305c565b01949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b038381168061320f5761320f6131df565b92169190910492915050565b60008160001904831182151516156132355761323561305c565b500290565b600082613249576132496131df565b500490565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561329757600080fd5b815161149e81612c96565b81835260006001600160fb1b038311156132bb57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020815260006120a56020830184866132a2565b600060018060a01b038089168352808816602084015260a0604084015261331760a0840187896132a2565b941660608301525060800152949350505050565b60008282101561333d5761333d61305c565b500390565b60208082526016908201527529aa2922a0a697a727aa2faa27a5a2a72fa7aba722a960511b604082015260600190565b60208082526022908201527f53545245414d2f4d41585f5354414b455f4455524154494f4e5f455843454544604082015261115160f21b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220e234216ec5759a9469922b9efaaf24b1dc979e0d88dd0f89fd12bdf674d4260964736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102955760003560e01c80630191c0af146102ae57806301c1dfba146102e157806301ffc9a71461030157806306fdde031461033157806308289dbe146103875780630c805a44146103d55780630fbf0a931461040b57806314427a961461042b5780631c725fdc1461044b57806325289bad1461046b578063277d048b146104925780632890d033146104a75780632c0e1313146104bc5780632e17de78146104dc57806333abcdbd146104fc578063379607f51461051c5780633b3f12e21461053c5780633d2dded51461055c5780634abb4c49146105995780634e631783146105c6578063513da948146105e757806354fd4d501461060e57806357dc48c81461063d57806361949636146106915780636b10939c146106b15780636ba4c138146106d1578063715018a6146106f157806378b094ca14610706578063790c0c73146107265780638368909c1461074657806389c6b8151461076d5780638da5cb5b1461078d5780639199690b146107af578063968d9b2c146107c357806396afc450146107e35780639edfe830146107f9578063a1bdb15e14610819578063a1cf649314610839578063a694fc3a1461087c578063a86b21e81461089c578063a8d2d338146108bc578063aaf2f999146108dc578063c0881849146108fc578063d0d6641d14610932578063d1335b69146107af578063d4244f2414610952578063d5ed4d5a14610972578063d6642801146107af578063d870a15114610992578063d97314f5146109b9578063ddd5e1b2146109d9578063de76a676146109f9578063e449f34114610a19578063f2fde38b14610a39578063f389b6e414610a59578063f4415ad614610a79578063f593dfc814610ab1578063f66e38c214610ad157600080fd5b366102a957600034116102a757600080fd5b005b600080fd5b3480156102ba57600080fd5b506102ce6102c9366004612cb6565b610af1565b6040519081526020015b60405180910390f35b3480156102ed57600080fd5b506102a76102fc366004612d0c565b610b47565b34801561030d57600080fd5b5061032161031c366004612d4d565b610d9b565b60405190151581526020016102d8565b34801561033d57600080fd5b5061037a6040518060400160405280601e81526020017f455243373231205374616b696e6720456d697373696f6e2053747265616d000081525081565b6040516102d89190612d77565b34801561039357600080fd5b506103bd6103a2366004612dcc565b600b602052600090815260409020546001600160401b031681565b6040516001600160401b0390911681526020016102d8565b3480156103e157600080fd5b506103bd6103f0366004612dcc565b600a602052600090815260409020546001600160401b031681565b34801561041757600080fd5b506102a7610426366004612d0c565b610ddb565b34801561043757600080fd5b50600c546103bd906001600160401b031681565b34801561045757600080fd5b506102a7610466366004612dfc565b610e20565b34801561047757600080fd5b506004546103bd90600160a01b90046001600160401b031681565b34801561049e57600080fd5b506102a7610ed7565b3480156104b357600080fd5b506102ce610f44565b3480156104c857600080fd5b506102a76104d7366004612dfc565b610f55565b3480156104e857600080fd5b506102a76104f7366004612dcc565b610fd8565b34801561050857600080fd5b506103bd610517366004612dcc565b611043565b34801561052857600080fd5b506102a7610537366004612dcc565b611128565b34801561054857600080fd5b506102ce610557366004612cb6565b611136565b34801561056857600080fd5b506000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8546102ce565b3480156105a557600080fd5b506105b96105b4366004612d0c565b6111b4565b6040516102d89190612e17565b3480156105d257600080fd5b5060025461032190600160a01b900460ff1681565b3480156105f357600080fd5b506008546103bd90600160401b90046001600160401b031681565b34801561061a57600080fd5b5061037a60405180604001604052806003815260200162302e3160e81b81525081565b34801561064957600080fd5b5061067c610658366004612e5b565b60056020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016102d8565b34801561069d57600080fd5b506008546103bd906001600160401b031681565b3480156106bd57600080fd5b506102a76106cc366004612dfc565b61125f565b3480156106dd57600080fd5b506102a76106ec366004612d0c565b6112e8565b3480156106fd57600080fd5b506102a76112f5565b34801561071257600080fd5b506102a7610721366004612dfc565b611330565b34801561073257600080fd5b506102ce610741366004612e8b565b6113bd565b34801561075257600080fd5b506008546103bd90600160801b90046001600160401b031681565b34801561077957600080fd5b506102ce610788366004612d0c565b611490565b34801561079957600080fd5b506107a26114a5565b6040516102d89190612ea8565b3480156107bb57600080fd5b506001610321565b3480156107cf57600080fd5b506102ce6107de366004612dcc565b6114b4565b3480156107ef57600080fd5b506102ce60075481565b34801561080557600080fd5b506102ce610814366004612dfc565b6114c1565b34801561082557600080fd5b506102a7610834366004612dcc565b611506565b34801561084557600080fd5b506102ce610854366004612e5b565b60009182526005602090815260408084206001600160a01b0393909316845291905290205490565b34801561088857600080fd5b506102a7610897366004612dcc565b61156c565b3480156108a857600080fd5b506102ce6108b7366004612dfc565b6115ac565b3480156108c857600080fd5b506102a76108d7366004612f09565b6115f2565b3480156108e857600080fd5b506102a76108f7366004612dfc565b6116c0565b34801561090857600080fd5b506102ce610917366004612e8b565b6001600160a01b031660009081526006602052604090205490565b34801561093e57600080fd5b506102ce61094d366004612dcc565b61174d565b34801561095e57600080fd5b506009546103bd906001600160401b031681565b34801561097e57600080fd5b506004546107a2906001600160a01b031681565b34801561099e57600080fd5b506008546103bd90600160c01b90046001600160401b031681565b3480156109c557600080fd5b506102a76109d4366004612dfc565b6117ae565b3480156109e557600080fd5b506102a76109f4366004612e5b565b611831565b348015610a0557600080fd5b506103bd610a14366004612d0c565b611ac9565b348015610a2557600080fd5b506102a7610a34366004612d0c565b611b15565b348015610a4557600080fd5b506102a7610a54366004612e8b565b611bc1565b348015610a6557600080fd5b506102a7610a74366004612fdf565b611c5e565b348015610a8557600080fd5b506102ce610a94366004612dcc565b600090815260056020908152604080832083805290915290205490565b348015610abd57600080fd5b506102a7610acc366004612dfc565b611fd3565b348015610add57600080fd5b506102ce610aec366004612e5b565b612056565b600080805b84811015610b3e57610b20868683818110610b1357610b13613046565b9050602002013585612056565b610b2a9083613072565b915080610b368161308a565b915050610af6565b50949350505050565b33610b506114a5565b6001600160a01b031614610b7f5760405162461bcd60e51b8152600401610b76906130a5565b60405180910390fd5b600254600160a01b900460ff1615610bd35760405162461bcd60e51b81526020600482015260176024820152761153515491d15390d657d413d5d15497d4915593d2d151604a1b6044820152606401610b76565b6000610bdd6114a5565b905060005b82811015610d95576000848483818110610bfe57610bfe613046565b9050602002016020810190610c139190612e8b565b6001600160a01b03161415610c3a57610c356001600160a01b038316476120bc565b610d83565b838382818110610c4c57610c4c613046565b9050602002016020810190610c619190612e8b565b6001600160a01b031663a9059cbb83868685818110610c8257610c82613046565b9050602002016020810190610c979190612e8b565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610cc29190612ea8565b60206040518083038186803b158015610cda57600080fd5b505afa158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1291906130da565b6040518363ffffffff1660e01b8152600401610d2f9291906130f3565b602060405180830381600087803b158015610d4957600080fd5b505af1158015610d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d81919061310c565b505b80610d8d8161308a565b915050610be2565b50505050565b60006301ffc9a760e01b6001600160e01b031983161480610dd557506001600160e01b0319821660009081526001602052604090205460ff165b92915050565b6008546001600160401b03600160401b9091048116429091161015610e125760405162461bcd60e51b8152600401610b769061312e565b610e1c82826121d2565b5050565b33610e296114a5565b6001600160a01b031614610e4f5760405162461bcd60e51b8152600401610b76906130a5565b6004546001600160401b03600160a01b909104811690821611610eab5760405162461bcd60e51b815260206004820152601460248201527314d5149150534bd0d0539393d517d49155d2539160621b6044820152606401610b76565b600480546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b33610ee06114a5565b6001600160a01b031614610f065760405162461bcd60e51b8152600401610b76906130a5565b6002805460ff60a01b1916600160a01b1790556040517f21fadcdbe90fc4e8062dd78003616bbe56d48e0f1bfc58eacd10b11bba16b79690600090a1565b6000610f5060006113bd565b905090565b33610f5e6114a5565b6001600160a01b031614610f845760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b031610610fb65760405162461bcd60e51b8152600401610b769061315e565b600c80546001600160401b0319166001600160401b0392909216919091179055565b610fe3334283612383565b60048054604051636198e33960e01b81529182018390526001600160a01b031690636198e339906024015b600060405180830381600087803b15801561102857600080fd5b505af115801561103c573d6000803e3d6000fd5b5050505050565b6000818152600b6020908152604080832054600a9092528220546001600160401b039182169116156110fe57600854600160801b90046001600160401b03164281111561108d5750425b6000848152600a60205260409020546001600160401b0316156110fc576000848152600a60205260409020546001600160401b0390811690821611156110fc576000848152600a60205260409020546110ef906001600160401b03168261318c565b6110f990836131b4565b91505b505b6009546001600160401b039081169082161115610dd557506009546001600160401b031692915050565b611133816000611831565b50565b600080805b84811015610b3e576005600087878481811061115957611159613046565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826111a09190613072565b9150806111ac8161308a565b91505061113b565b60606000826001600160401b038111156111d0576111d0612ebc565b6040519080825280602002602001820160405280156111f9578160200160208202803683370190505b50905060005b838110156112575761122885858381811061121c5761121c613046565b9050602002013561174d565b82828151811061123a5761123a613046565b60209081029190910101528061124f8161308a565b9150506111ff565b509392505050565b336112686114a5565b6001600160a01b03161461128e5760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b0316106112c05760405162461bcd60e51b8152600401610b769061315e565b600880546001600160401b03909216600160c01b026001600160c01b03909216919091179055565b610e1c8282600033611c5e565b336112fe6114a5565b6001600160a01b0316146113245760405162461bcd60e51b8152600401610b76906130a5565b61132e600061255a565b565b336113396114a5565b6001600160a01b03161461135f5760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b0316106113915760405162461bcd60e51b8152600401610b769061315e565b600880546001600160401b03909216600160801b02600160801b600160c01b0319909216919091179055565b60006001600160a01b0382166113f1576001600160a01b038216600090815260066020526040902054610dd5904790613072565b6040516370a0823160e01b81526001600160a01b038316906370a082319061141d903090600401612ea8565b60206040518083038186803b15801561143557600080fd5b505afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d91906130da565b6001600160a01b038316600090815260066020526040902054610dd59190613072565b600061149e83836000611136565b9392505050565b6002546001600160a01b031690565b6000610dd5826000612056565b6008546000906001600160401b03808216916114e691600160401b909104168461318c565b6114f091906131f5565b6001600160401b0316600754610dd5919061321b565b3361150f6114a5565b6001600160a01b0316146115355760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b0316106115675760405162461bcd60e51b8152600401610b769061315e565b600755565b6008546001600160401b03600160401b90910481164290911610156115a35760405162461bcd60e51b8152600401610b769061312e565b611133816125ac565b6008546007546000916001600160401b0380821692916115d591600160401b909104168561318c565b6001600160401b03166115e8919061321b565b610dd5919061323a565b60006115fe60016126ea565b90508015611616576000805461ff0019166101001790555b61161f8261255a565b61162761277e565b611639836000015184602001516127ad565b61164b836040015184606001516127de565b61166783608001518460a001518560c001518660e0015161280f565b611675836101000151612842565b80156116bb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b336116c96114a5565b6001600160a01b0316146116ef5760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b0316106117215760405162461bcd60e51b8152600401610b769061315e565b600880546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b6000818152600a60205260408120546001600160401b031661177057600061179f565b6008546000838152600a602052604090205461179f916001600160401b03600160c01b909104811691166131b4565b6001600160401b031692915050565b336117b76114a5565b6001600160a01b0316146117dd5760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b03161061180f5760405162461bcd60e51b8152600401610b769061315e565b600880546001600160401b0319166001600160401b0392909216919091179055565b600260035414156118545760405162461bcd60e51b8152600401610b769061324e565b6002600355600480546040516331a9108f60e11b81529182018490526000916001600160a01b0390911690636352211e9060240160206040518083038186803b1580156118a057600080fd5b505afa1580156118b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d89190613285565b90506118e5838383612872565b60006118f18484612056565b90506000811161193d5760405162461bcd60e51b815260206004820152601760248201527653545245414d2f4e4f5448494e475f544f5f434c41494d60481b6044820152606401610b76565b60008481526005602090815260408083206001600160a01b03871684529091528120805483929061196f908490613072565b909155505060008481526005602090815260408083206001600160a01b03871684528252808320426001909101556006909152812080548392906119b4908490613072565b909155506119bf9050565b6001600160a01b0383166119e5576119e06001600160a01b038316826120bc565b611a67565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611a1390859085906004016130f3565b602060405180830381600087803b158015611a2d57600080fd5b505af1158015611a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a65919061310c565b505b604080513381526001600160a01b038481166020830152818301879052851660608201526080810183905290517fa2d3c4c1fc934d6d2d8f9e862df90c01ae4eb0e920cd8957d242ba26b8dc40789181900360a00190a1505060016003555050565b600080805b8381101561125757611af7858583818110611aeb57611aeb613046565b90506020020135611043565b611b0190836131b4565b915080611b0d8161308a565b915050611ace565b334260005b83811015611b5757611b458383878785818110611b3957611b39613046565b90506020020135612383565b80611b4f8161308a565b915050611b1a565b5060048054604051635d36598f60e01b81526001600160a01b0390911691635d36598f91611b899188918891016132d8565b600060405180830381600087803b158015611ba357600080fd5b505af1158015611bb7573d6000803e3d6000fd5b5050505050505050565b33611bca6114a5565b6001600160a01b031614611bf05760405162461bcd60e51b8152600401610b76906130a5565b6001600160a01b038116611c555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b76565b6111338161255a565b60026003541415611c815760405162461bcd60e51b8152600401610b769061324e565b60026003556000805b84811015611eb057611cb5868683818110611ca757611ca7613046565b905060200201358585612872565b6004546001600160a01b038085169116636352211e888885818110611cdc57611cdc613046565b905060200201356040518263ffffffff1660e01b8152600401611d0191815260200190565b60206040518083038186803b158015611d1957600080fd5b505afa158015611d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d519190613285565b6001600160a01b031614611d9e5760405162461bcd60e51b815260206004820152601460248201527329aa2922a0a697a727aa2fa7232a2fa7aba722a960611b6044820152606401610b76565b6000611dc2878784818110611db557611db5613046565b9050602002013586612056565b90508015611e88578060056000898986818110611de157611de1613046565b9050602002013581526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000206000016000828254611e2b9190613072565b9091555042905060056000898986818110611e4857611e48613046565b6020908102929092013583525081810192909252604090810160009081206001600160a01b038a168252909252902060010155611e858184613072565b92505b611e9d8787848181106116bb576116bb613046565b5080611ea88161308a565b915050611c8a565b506001600160a01b03831660009081526006602052604081208054839290611ed9908490613072565b90915550506001600160a01b038316611f0457611eff6001600160a01b038316826120bc565b611f86565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611f3290859085906004016130f3565b602060405180830381600087803b158015611f4c57600080fd5b505af1158015611f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f84919061310c565b505b7fd84a5c424a4f777bcf4f645712b8e5ebfc550f42bde444fa822fe98ee1b132b1338387878786604051611fbf969594939291906132ec565b60405180910390a150506001600355505050565b33611fdc6114a5565b6001600160a01b0316146120025760405162461bcd60e51b8152600401610b76906130a5565b60045442600160a01b9091046001600160401b0316106120345760405162461bcd60e51b8152600401610b769061315e565b600980546001600160401b0319166001600160401b0392909216919091179055565b60008061207561206e612068856113bd565b50600090565b8585612888565b60008581526005602090815260408083206001600160a01b03881684529091529020549091506120a5908261332b565b949350505050565b6001600160a01b03163b151590565b8047101561210c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610b76565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612159576040519150601f19603f3d011682016040523d82523d6000602084013e61215e565b606091505b50509050806116bb5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610b76565b334260005b83811015612351576004546001600160a01b0316636352211e86868481811061220257612202613046565b905060200201356040518263ffffffff1660e01b815260040161222791815260200190565b60206040518083038186803b15801561223f57600080fd5b505afa158015612253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122779190613285565b6001600160a01b0316836001600160a01b0316146122a75760405162461bcd60e51b8152600401610b7690613342565b6009546001600160401b03166122c8868684818110611aeb57611aeb613046565b6001600160401b0316106122ee5760405162461bcd60e51b8152600401610b7690613372565b81600a600087878581811061230557612305613046565b90506020020135815260200190815260200160002060006101000a8154816001600160401b0302191690836001600160401b0316021790555080806123499061308a565b9150506121d7565b50600480546040516342cb086360e11b81526001600160a01b039091169163859610c691611b899188918891016132d8565b6000818152600a60205260409020546001600160401b03166123db5760405162461bcd60e51b815260206004820152601160248201527014d5149150534bd393d517d4d51052d151607a1b6044820152606401610b76565b6008546000828152600a602052604090205461240a916001600160401b03600160c01b909104811691166131b4565b6001600160401b0316826001600160401b031610156124665760405162461bcd60e51b81526020600482015260186024820152770a6a8a48a829a5e9c9ea8be989e86968a88be8a9c9eaa8e960431b6044820152606401610b76565b600480546040516331a9108f60e11b81529182018390526001600160a01b031690636352211e9060240160206040518083038186803b1580156124a857600080fd5b505afa1580156124bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e09190613285565b6001600160a01b0316836001600160a01b0316146125105760405162461bcd60e51b8152600401610b7690613342565b61251981611043565b6000918252600b6020908152604080842080546001600160401b03949094166001600160401b0319948516179055600a909152909120805490911690555050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600480546040516331a9108f60e11b81529182018390526001600160a01b031690636352211e9060240160206040518083038186803b1580156125ee57600080fd5b505afa158015612602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126269190613285565b6001600160a01b0316336001600160a01b0316146126565760405162461bcd60e51b8152600401610b7690613342565b6009546001600160401b031661266b82611043565b6001600160401b0316106126915760405162461bcd60e51b8152600401610b7690613372565b6000818152600a60205260409081902080546001600160401b031916426001600160401b03161790556004805491516337519c1960e21b81529081018390526001600160a01b039091169063dd4670649060240161100e565b60008054610100900460ff1615612738578160ff1660011480156127145750612712306120ad565b155b6127305760405162461bcd60e51b8152600401610b76906133b4565b506000919050565b60005460ff80841691161061275f5760405162461bcd60e51b8152600401610b76906133b4565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166127a55760405162461bcd60e51b8152600401610b7690613402565b61132e6128c0565b600054610100900460ff166127d45760405162461bcd60e51b8152600401610b7690613402565b610e1c82826128f7565b600054610100900460ff166128055760405162461bcd60e51b8152600401610b7690613402565b610e1c828261295c565b600054610100900460ff166128365760405162461bcd60e51b8152600401610b7690613402565b610d95848484846129d2565b600054610100900460ff166128695760405162461bcd60e51b8152600401610b7690613402565b61113381612a53565b61287d838383612aa5565b6116bb838383612af7565b6008546000906001600160401b03166128a084611043565b6128aa91906131f5565b6001600160401b03166007546120a5919061321b565b600054610100900460ff166128e75760405162461bcd60e51b8152600401610b7690613402565b61132e6326bcdb3160e01b612bca565b600054610100900460ff1661291e5760405162461bcd60e51b8152600401610b7690613402565b600480546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b03851617179055610e1c631ba050e960e21b612bca565b600054610100900460ff166129835760405162461bcd60e51b8152600401610b7690613402565b600880546001600160c01b0316600160c01b6001600160401b038581169190910291909117909155600980546001600160401b031916918316919091179055610e1c630fe9fbd560e31b612bca565b600054610100900460ff166129f95760405162461bcd60e51b8152600401610b7690613402565b6007849055600880546001600160401b03838116600160801b02600160801b600160c01b0319868316600160401b026001600160801b0319909416928816929092179290921716179055610d95634d0b5a4960e01b612bca565b600054610100900460ff16612a7a5760405162461bcd60e51b8152600401610b7690613402565b600c80546001600160401b0319166001600160401b0383161790556111336317b2ef4360e31b612bca565b600c54426001600160401b03909116106116bb5760405162461bcd60e51b815260206004820152601360248201527214d5149150534bd0d310525357d313d0d2d151606a1b6044820152606401610b76565b60085442600160401b9091046001600160401b031610612b4e5760405162461bcd60e51b815260206004820152601260248201527114d5149150534bd393d517d4d5105495115160721b6044820152606401610b76565b600854612b64906001600160401b03164261332b565b60008481526005602090815260408083206001600160a01b0387168452909152902060010154106116bb5760405162461bcd60e51b815260206004820152601060248201526f53545245414d2f544f4f5f4541524c5960801b6044820152606401610b76565b6001600160e01b03198082161415612c235760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610b76565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60008083601f840112612c5d57600080fd5b5081356001600160401b03811115612c7457600080fd5b6020830191508360208260051b8501011115612c8f57600080fd5b9250929050565b6001600160a01b038116811461113357600080fd5b803561277981612c96565b600080600060408486031215612ccb57600080fd5b83356001600160401b03811115612ce157600080fd5b612ced86828701612c4b565b9094509250506020840135612d0181612c96565b809150509250925092565b60008060208385031215612d1f57600080fd5b82356001600160401b03811115612d3557600080fd5b612d4185828601612c4b565b90969095509350505050565b600060208284031215612d5f57600080fd5b81356001600160e01b03198116811461149e57600080fd5b600060208083528351808285015260005b81811015612da457858101830151858201604001528201612d88565b81811115612db6576000604083870101525b50601f01601f1916929092016040019392505050565b600060208284031215612dde57600080fd5b5035919050565b80356001600160401b038116811461277957600080fd5b600060208284031215612e0e57600080fd5b61149e82612de5565b6020808252825182820181905260009190848201906040850190845b81811015612e4f57835183529284019291840191600101612e33565b50909695505050505050565b60008060408385031215612e6e57600080fd5b823591506020830135612e8081612c96565b809150509250929050565b600060208284031215612e9d57600080fd5b813561149e81612c96565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715612f0357634e487b7160e01b600052604160045260246000fd5b60405290565b600080828403610140811215612f1e57600080fd5b61012080821215612f2e57600080fd5b612f36612ed2565b9150612f4185612cab565b8252612f4f60208601612de5565b6020830152612f6060408601612de5565b6040830152612f7160608601612de5565b606083015260808501356080830152612f8c60a08601612de5565b60a0830152612f9d60c08601612de5565b60c0830152612fae60e08601612de5565b60e0830152610100612fc1818701612de5565b8184015250819350612fd4818601612cab565b925050509250929050565b60008060008060608587031215612ff557600080fd5b84356001600160401b0381111561300b57600080fd5b61301787828801612c4b565b909550935050602085013561302b81612c96565b9150604085013561303b81612c96565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156130855761308561305c565b500190565b600060001982141561309e5761309e61305c565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156130ec57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561311e57600080fd5b8151801515811461149e57600080fd5b60208082526016908201527514d5149150534bd393d517d4d5105495115117d6515560521b604082015260600190565b60208082526014908201527314d5149150534bd0d3d3919251d7d313d0d2d15160621b604082015260600190565b60006001600160401b03838116908316818110156131ac576131ac61305c565b039392505050565b60006001600160401b038281168482168083038211156131d6576131d661305c565b01949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b038381168061320f5761320f6131df565b92169190910492915050565b60008160001904831182151516156132355761323561305c565b500290565b600082613249576132496131df565b500490565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561329757600080fd5b815161149e81612c96565b81835260006001600160fb1b038311156132bb57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020815260006120a56020830184866132a2565b600060018060a01b038089168352808816602084015260a0604084015261331760a0840187896132a2565b941660608301525060800152949350505050565b60008282101561333d5761333d61305c565b500390565b60208082526016908201527529aa2922a0a697a727aa2faa27a5a2a72fa7aba722a960511b604082015260600190565b60208082526022908201527f53545245414d2f4d41585f5354414b455f4455524154494f4e5f455843454544604082015261115160f21b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220e234216ec5759a9469922b9efaaf24b1dc979e0d88dd0f89fd12bdf674d4260964736f6c63430008090033",
  "devdoc": {
    "author": "Flair (https://flair.finance)",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 886,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 889,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4693,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 782,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12716,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "emergencyPowerRevoked",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1124,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13891,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "ticketToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13893,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "lockedUntilTimestamp",
        "offset": 20,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 13900,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "entitlements",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)13889_storage))"
      },
      {
        "astId": 13904,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "_streamTotalClaimed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14646,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "emissionRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14648,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "emissionTimeUnit",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 14650,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "emissionStart",
        "offset": 8,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 14652,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "emissionEnd",
        "offset": 16,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 15275,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "minStakingLockTime",
        "offset": 24,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 15277,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "maxStakingTotalDurations",
        "offset": 0,
        "slot": "9",
        "type": "t_uint64"
      },
      {
        "astId": 15281,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "lastStakingTime",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint64)"
      },
      {
        "astId": 15285,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "savedStakedDurations",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint64)"
      },
      {
        "astId": 15147,
        "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
        "label": "claimLockedUntil",
        "offset": 0,
        "slot": "12",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Entitlement)13889_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721MultiTokenStream.Entitlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Entitlement)13889_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)13889_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ERC721MultiTokenStream.Entitlement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Entitlement)13889_storage)"
      },
      "t_mapping(t_uint256,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_struct(Entitlement)13889_storage": {
        "encoding": "inplace",
        "label": "struct ERC721MultiTokenStream.Entitlement",
        "members": [
          {
            "astId": 13886,
            "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13888,
            "contract": "contracts/streams/ERC721/presets/ERC721StakingEmissionStream.sol:ERC721StakingEmissionStream",
            "label": "lastClaimedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}