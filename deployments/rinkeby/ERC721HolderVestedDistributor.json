{
  "address": "0xe05D20C9c2765D7F4BAAe306dd73D76e6730f37E",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "claimToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vestingRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTimeUnit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimEnd",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC721HolderVestedDistributor.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimBulk",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "calculateClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "calcUntil",
          "type": "uint256"
        }
      ],
      "name": "calculateClaimableAmountUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "calculateReleasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "calcUntil",
          "type": "uint256"
        }
      ],
      "name": "calculateReleasedAmountUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "entitlements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTotalClaimableBulk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTotalClaimedBulk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTotalReleasedBulk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "claimToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vestingRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingTimeUnit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimEnd",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC721HolderVestedDistributor.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setClaimEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setClaimStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setVestingRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setVestingTimeUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingTimeUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x021b2418663d544fc393a6c1cb3c2f539dd49050dcca03a0f11bbf706444d8af",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xe05D20C9c2765D7F4BAAe306dd73D76e6730f37E",
    "transactionIndex": 1,
    "gasUsed": "1542038",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000020000000000000000000000000000800000000000000000000000100000000000000000001000000000400000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000020000000800000000000001000000000000000000000000000000000000000000000",
    "blockHash": "0x0bc2aaa93b2138b69eefde904af4ea5ee0e9965affcaf66f4f91973d5370b34b",
    "transactionHash": "0x021b2418663d544fc393a6c1cb3c2f539dd49050dcca03a0f11bbf706444d8af",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10880523,
        "transactionHash": "0x021b2418663d544fc393a6c1cb3c2f539dd49050dcca03a0f11bbf706444d8af",
        "address": "0xe05D20C9c2765D7F4BAAe306dd73D76e6730f37E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0bc2aaa93b2138b69eefde904af4ea5ee0e9965affcaf66f4f91973d5370b34b"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10880523,
        "transactionHash": "0x021b2418663d544fc393a6c1cb3c2f539dd49050dcca03a0f11bbf706444d8af",
        "address": "0xe05D20C9c2765D7F4BAAe306dd73D76e6730f37E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0bc2aaa93b2138b69eefde904af4ea5ee0e9965affcaf66f4f91973d5370b34b"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10880523,
        "transactionHash": "0x021b2418663d544fc393a6c1cb3c2f539dd49050dcca03a0f11bbf706444d8af",
        "address": "0xe05D20C9c2765D7F4BAAe306dd73D76e6730f37E",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 2,
        "blockHash": "0x0bc2aaa93b2138b69eefde904af4ea5ee0e9965affcaf66f4f91973d5370b34b"
      }
    ],
    "blockNumber": 10880523,
    "cumulativeGasUsed": "1594686",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "claimToken": "0x0000000000000000000000000000000000000000",
      "ticketToken": "0x0000000000000000000000000000000000000000",
      "vestingRate": "1000000000000000000",
      "vestingTimeUnit": 3600,
      "claimStart": 0,
      "claimEnd": 999999999999999
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "9ed528b3a904d6e5013923fb4fd7945b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC721HolderVestedDistributor.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimBulk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"calculateClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"calcUntil\",\"type\":\"uint256\"}],\"name\":\"calculateClaimableAmountUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"calculateReleasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"calcUntil\",\"type\":\"uint256\"}],\"name\":\"calculateReleasedAmountUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entitlements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getTotalClaimableBulk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getTotalClaimedBulk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getTotalReleasedBulk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC721HolderVestedDistributor.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setClaimEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setClaimStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setVestingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setVestingTimeUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTimeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol\":\"ERC721HolderVestedDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/streams/ERC721/core/ERC721SingleTokenDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ERC721SingleTokenDistributorInterface {\\n    function claim(uint256 ticketTokenId) external;\\n\\n    function claimBulk(uint256[] calldata ticketTokenIds) external;\\n\\n    function streamTotalSupply() external view returns (uint256);\\n\\n    function getTotalClaimedBulk(uint256[] calldata ticketTokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateClaimableAmount(uint256 ticketTokenId)\\n        external\\n        view\\n        returns (uint256 claimableAmount);\\n}\\n\\nabstract contract ERC721SingleTokenDistributor is\\n    OwnableUpgradeable,\\n    ReentrancyGuard,\\n    ERC721SingleTokenDistributorInterface\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    struct Entitlement {\\n        uint256 totalClaimed;\\n        uint256 lastClaimedAt;\\n    }\\n\\n    // Config\\n    address public claimToken;\\n    address public ticketToken;\\n\\n    // Map of ticket token ID -> entitlement\\n    mapping(uint256 => Entitlement) public entitlements;\\n\\n    // Total amount claimed by all holders\\n    uint256 public streamTotalClaimed;\\n\\n    /* EVENTS */\\n\\n    event Claim(address claimer, uint256 ticketTokenId, uint256 releasedAmount);\\n\\n    event ClaimBulk(\\n        address claimer,\\n        uint256[] ticketTokenIds,\\n        uint256 releasedAmount\\n    );\\n\\n    function __ERC721SingleTokenDistributor_init(\\n        address _claimToken,\\n        address _ticketToken\\n    ) internal onlyInitializing {\\n        __Context_init();\\n        __Ownable_init();\\n        __ERC721SingleTokenDistributor_init_unchained(\\n            _claimToken,\\n            _ticketToken\\n        );\\n    }\\n\\n    function __ERC721SingleTokenDistributor_init_unchained(\\n        address _claimToken,\\n        address _ticketToken\\n    ) internal onlyInitializing {\\n        claimToken = _claimToken;\\n        ticketToken = _ticketToken;\\n    }\\n\\n    /* PUBLIC */\\n\\n    receive() external payable {\\n        require(msg.value > 0);\\n        require(claimToken == address(0));\\n    }\\n\\n    function claim(uint256 ticketTokenId) public nonReentrant {\\n        /* CHECKS */\\n\\n        _beforeClaim(ticketTokenId);\\n\\n        require(\\n            IERC721(ticketToken).ownerOf(ticketTokenId) == _msgSender(),\\n            \\\"DISTRIBUTOR/NOT_NFT_OWNER\\\"\\n        );\\n\\n        uint256 claimableAmount = calculateClaimableAmount(ticketTokenId);\\n        require(claimableAmount > 0, \\\"DISTRIBUTOR/NOTHING_TO_CLAIM\\\");\\n\\n        /* EFFECTS */\\n\\n        entitlements[ticketTokenId].totalClaimed += claimableAmount;\\n        entitlements[ticketTokenId].lastClaimedAt = block.timestamp;\\n\\n        streamTotalClaimed += claimableAmount;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(_msgSender())).sendValue(claimableAmount);\\n        } else {\\n            IERC20(claimToken).transfer(_msgSender(), claimableAmount);\\n        }\\n\\n        /* LOGS */\\n\\n        emit Claim(_msgSender(), ticketTokenId, claimableAmount);\\n    }\\n\\n    function claimBulk(uint256[] calldata ticketTokenIds) public nonReentrant {\\n        uint256 totalClaimableAmount;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            _beforeClaim(ticketTokenIds[i]);\\n\\n            /* CHECKS */\\n            require(\\n                IERC721(ticketToken).ownerOf(ticketTokenIds[i]) == _msgSender(),\\n                \\\"DISTRIBUTOR/NOT_NFT_OWNER\\\"\\n            );\\n\\n            /* EFFECTS */\\n            uint256 claimableAmount = calculateClaimableAmount(\\n                ticketTokenIds[i]\\n            );\\n\\n            if (claimableAmount > 0) {\\n                entitlements[ticketTokenIds[i]].totalClaimed += claimableAmount;\\n                entitlements[ticketTokenIds[i]].lastClaimedAt = block.timestamp;\\n\\n                totalClaimableAmount += claimableAmount;\\n            }\\n        }\\n\\n        streamTotalClaimed += totalClaimableAmount;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(_msgSender())).sendValue(totalClaimableAmount);\\n        } else {\\n            IERC20(claimToken).transfer(_msgSender(), totalClaimableAmount);\\n        }\\n\\n        /* LOGS */\\n\\n        emit ClaimBulk(_msgSender(), ticketTokenIds, totalClaimableAmount);\\n    }\\n\\n    /* READ ONLY */\\n\\n    function streamTotalSupply() public view returns (uint256) {\\n        return streamTotalClaimed + IERC20(claimToken).balanceOf(address(this));\\n    }\\n\\n    function getTotalClaimedBulk(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalClaimed = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            totalClaimed += entitlements[ticketTokenIds[i]].totalClaimed;\\n        }\\n\\n        return totalClaimed;\\n    }\\n\\n    function getTotalClaimableBulk(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalClaimable = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            totalClaimable += calculateClaimableAmount(ticketTokenIds[i]);\\n        }\\n\\n        return totalClaimable;\\n    }\\n\\n    function calculateClaimableAmount(uint256 ticketTokenId)\\n        public\\n        view\\n        virtual\\n        returns (uint256 claimableAmount);\\n\\n    // INTERNAL\\n\\n    function _beforeClaim(uint256 ticketTokenId) internal virtual;\\n}\\n\",\"keccak256\":\"0x925c69fc28c738f12deb98b3a8e2c8c24682041bd17317cdcea6030bac7f67ab\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../core/ERC721SingleTokenDistributor.sol\\\";\\n\\ncontract ERC721HolderVestedDistributor is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ERC721SingleTokenDistributor\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Vested Distributor\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        address claimToken;\\n        address ticketToken;\\n        uint256 vestingRate;\\n        uint256 vestingTimeUnit;\\n        uint256 claimStart;\\n        uint256 claimEnd;\\n    }\\n\\n    uint256 public vestingRate;\\n    uint256 public vestingTimeUnit;\\n    uint256 public claimStart;\\n    uint256 public claimEnd;\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config);\\n    }\\n\\n    // To enable factory cloning\\n    function initialize(Config memory config) public initializer {\\n        __Context_init();\\n        __Ownable_init();\\n        __ERC721SingleTokenDistributor_init(\\n            config.claimToken,\\n            config.ticketToken\\n        );\\n\\n        vestingRate = config.vestingRate;\\n        vestingTimeUnit = config.vestingTimeUnit;\\n        claimStart = config.claimStart;\\n        claimEnd = config.claimEnd;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function setVestingRate(uint256 newValue) public onlyOwner {\\n        vestingRate = newValue;\\n    }\\n\\n    function setVestingTimeUnit(uint256 newValue) public onlyOwner {\\n        vestingTimeUnit = newValue;\\n    }\\n\\n    function setClaimStart(uint256 newValue) public onlyOwner {\\n        claimStart = newValue;\\n    }\\n\\n    function setClaimEnd(uint256 newValue) public onlyOwner {\\n        claimEnd = newValue;\\n    }\\n\\n    function _beforeClaim(uint256 ticketTokenId) internal view override {\\n        require(claimStart < block.timestamp, \\\"DISTRIBUTOR/NOT_STARTED\\\");\\n\\n        require(\\n            entitlements[ticketTokenId].lastClaimedAt <\\n                block.timestamp - vestingTimeUnit,\\n            \\\"DISTRIBUTOR/TOO_EARLY\\\"\\n        );\\n    }\\n\\n    function getTotalReleasedBulk(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalReleased = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            totalReleased += calculateReleasedAmount(ticketTokenIds[i]);\\n        }\\n\\n        return totalReleased;\\n    }\\n\\n    function calculateClaimableAmount(uint256 ticketTokenId)\\n        public\\n        view\\n        override\\n        returns (uint256 claimableAmount)\\n    {\\n        claimableAmount =\\n            calculateClaimableAmountUntil(\\n                claimEnd > 0 && block.timestamp > claimEnd\\n                    ? claimEnd\\n                    : block.timestamp\\n            ) -\\n            entitlements[ticketTokenId].totalClaimed;\\n    }\\n\\n    function calculateClaimableAmountUntil(uint256 calcUntil)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (calcUntil < claimStart) {\\n            return 0;\\n        }\\n\\n        return\\n            vestingRate *\\n            // Intentionally rounded down:\\n            ((calcUntil - claimStart) / vestingTimeUnit);\\n    }\\n\\n    function calculateReleasedAmount(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256 releasedAmount)\\n    {\\n        releasedAmount =\\n            calculateReleasedAmountUntil(\\n                claimEnd > 0 && block.timestamp > claimEnd\\n                    ? claimEnd\\n                    : block.timestamp\\n            ) -\\n            entitlements[ticketTokenId].totalClaimed;\\n    }\\n\\n    function calculateReleasedAmountUntil(uint256 calcUntil)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return ((calcUntil - claimStart) * vestingRate) / vestingTimeUnit;\\n    }\\n}\\n\",\"keccak256\":\"0xeb574d91dd9f04e48de0d97070a859cfd14e73db200aa6d6bad8642944ccf716\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c9b38038062001c9b833981016040819052620000349162000366565b600160655562000044816200004b565b5062000498565b600062000059600162000104565b9050801562000072576000805461ff0019166101001790555b6200007c620001b6565b62000086620001e2565b8151602083015162000099919062000216565b6040820151606a556060820151606b556080820151606c5560a0820151606d55801562000100576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60008054610100900460ff16156200016d578160ff1660011480156200013d57506200013b306200026060201b62000f5e1760201c565b155b620001655760405162461bcd60e51b81526004016200015c90620003ff565b60405180910390fd5b506000919050565b60005460ff808416911610620001975760405162461bcd60e51b81526004016200015c90620003ff565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16620001e05760405162461bcd60e51b81526004016200015c906200044d565b565b600054610100900460ff166200020c5760405162461bcd60e51b81526004016200015c906200044d565b620001e06200026f565b600054610100900460ff16620002405760405162461bcd60e51b81526004016200015c906200044d565b6200024a620001b6565b62000254620001e2565b620001008282620002a4565b6001600160a01b03163b151590565b600054610100900460ff16620002995760405162461bcd60e51b81526004016200015c906200044d565b620001e033620002fc565b600054610100900460ff16620002ce5760405162461bcd60e51b81526004016200015c906200044d565b606680546001600160a01b039384166001600160a01b03199182161790915560678054929093169116179055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0381168114620001b157600080fd5b600060c082840312156200037957600080fd5b60405160c081016001600160401b0381118282101715620003aa57634e487b7160e01b600052604160045260246000fd5b604052620003b8836200034e565b8152620003c8602084016200034e565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201528091505092915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6117f380620004a86000396000f3fe60806040526004361061014b5760003560e01c8063033cfed31461017a57806306fdde03146101ad5780631a87a934146101ff5780632493530f1461021f5780632890d0331461023f57806329e34b26146102545780632ef3521414610274578063379607f5146102945780633ccfa92f146102b45780633d2dded5146102ca5780634451d89f146102e057806346be42fa1461030d578063496ef2171461032d5780634a1c86b71461034d5780634fcddd151461036d57806354fd4d501461038d57806369ceb15f146103bc5780636cc8e783146103d2578063715018a6146103f25780638da5cb5b146104075780639fcd34151461041c578063b0aa1e041461043c578063c7871ba91461045c578063d5ed4d5a14610472578063e74d0c2814610492578063f04d688f146104b2578063f28f9b56146104c8578063f2fde38b1461051157600080fd5b36610175576000341161015d57600080fd5b6066546001600160a01b03161561017357600080fd5b005b600080fd5b34801561018657600080fd5b5061019a610195366004611339565b610531565b6040519081526020015b60405180910390f35b3480156101b957600080fd5b506101f26040518060400160405280601981526020017822a9219b9918902b32b9ba32b2102234b9ba3934b13aba37b960391b81525081565b6040516101a49190611352565b34801561020b57600080fd5b5061017361021a3660046113c7565b610561565b34801561022b57600080fd5b5061019a61023a36600461145a565b610611565b34801561024b57600080fd5b5061019a610665565b34801561026057600080fd5b5061017361026f366004611339565b6106f8565b34801561028057600080fd5b5061017361028f366004611339565b610735565b3480156102a057600080fd5b506101736102af366004611339565b610769565b3480156102c057600080fd5b5061019a606d5481565b3480156102d657600080fd5b5061019a60695481565b3480156102ec57600080fd5b50606654610300906001600160a01b031681565b6040516101a491906114ce565b34801561031957600080fd5b5061019a610328366004611339565b6109e3565b34801561033957600080fd5b5061017361034836600461145a565b610a24565b34801561035957600080fd5b50610173610368366004611339565b610cf3565b34801561037957600080fd5b5061019a61038836600461145a565b610d27565b34801561039957600080fd5b506101f260405180604001604052806003815260200162302e3160e81b81525081565b3480156103c857600080fd5b5061019a606b5481565b3480156103de57600080fd5b5061019a6103ed366004611339565b610d82565b3480156103fe57600080fd5b50610173610db9565b34801561041357600080fd5b50610300610df4565b34801561042857600080fd5b5061019a61043736600461145a565b610e03565b34801561044857600080fd5b50610173610457366004611339565b610e4f565b34801561046857600080fd5b5061019a606a5481565b34801561047e57600080fd5b50606754610300906001600160a01b031681565b34801561049e57600080fd5b5061019a6104ad366004611339565b610e83565b3480156104be57600080fd5b5061019a606c5481565b3480156104d457600080fd5b506104fc6104e3366004611339565b6068602052600090815260409020805460019091015482565b604080519283526020830191909152016101a4565b34801561051d57600080fd5b5061017361052c3660046114e2565b610ebe565b6000606b54606a54606c5484610547919061151c565b6105519190611533565b61055b9190611552565b92915050565b600061056d6001610f6d565b90508015610585576000805461ff0019166101001790555b61058d611001565b610595611028565b6105a782600001518360200151611057565b6040820151606a556060820151606b556080820151606c5560a0820151606d55801561060d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600080805b8381101561065d5761063f85858381811061063357610633611574565b905060200201356109e3565b610649908361158a565b915080610655816115a2565b915050610616565b509392505050565b6066546040516370a0823160e01b81526000916001600160a01b0316906370a08231906106969030906004016114ce565b60206040518083038186803b1580156106ae57600080fd5b505afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e691906115bd565b6069546106f3919061158a565b905090565b33610701610df4565b6001600160a01b0316146107305760405162461bcd60e51b8152600401610727906115d6565b60405180910390fd5b606b55565b3361073e610df4565b6001600160a01b0316146107645760405162461bcd60e51b8152600401610727906115d6565b606a55565b6002606554141561078c5760405162461bcd60e51b81526004016107279061160b565b600260655561079a81611098565b336067546040516331a9108f60e11b8152600481018490526001600160a01b039283169290911690636352211e9060240160206040518083038186803b1580156107e357600080fd5b505afa1580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190611642565b6001600160a01b0316146108415760405162461bcd60e51b81526004016107279061165f565b600061084c826109e3565b90506000811161089d5760405162461bcd60e51b815260206004820152601c60248201527b4449535452494255544f522f4e4f5448494e475f544f5f434c41494d60201b6044820152606401610727565b600082815260686020526040812080548392906108bb90849061158a565b9091555050600082815260686020526040812042600190910155606980548392906108e790849061158a565b90915550506066546001600160a01b03166109165761091181335b6001600160a01b031690611147565b61099a565b6066546001600160a01b031663a9059cbb33836040518363ffffffff1660e01b8152600401610946929190611692565b602060405180830381600087803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099891906116ab565b505b604080513381526020810184905280820183905290517f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf79181900360600190a150506001606555565b600081815260686020526040812054606d54610a1a9015801590610a085750606d5442115b610a125742610e83565b606d54610e83565b61055b919061151c565b60026065541415610a475760405162461bcd60e51b81526004016107279061160b565b60026065556000805b82811015610bf157610a79848483818110610a6d57610a6d611574565b90506020020135611098565b60675433906001600160a01b0316636352211e868685818110610a9e57610a9e611574565b905060200201356040518263ffffffff1660e01b8152600401610ac391815260200190565b60206040518083038186803b158015610adb57600080fd5b505afa158015610aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b139190611642565b6001600160a01b031614610b395760405162461bcd60e51b81526004016107279061165f565b6000610b5085858481811061063357610633611574565b90508015610bde578060686000878786818110610b6f57610b6f611574565b9050602002013581526020019081526020016000206000016000828254610b96919061158a565b9091555042905060686000878786818110610bb357610bb3611574565b905060200201358152602001908152602001600020600101819055508083610bdb919061158a565b92505b5080610be9816115a2565b915050610a50565b508060696000828254610c04919061158a565b90915550506066546001600160a01b0316610c2857610c238133610902565b610cac565b6066546001600160a01b031663a9059cbb33836040518363ffffffff1660e01b8152600401610c58929190611692565b602060405180830381600087803b158015610c7257600080fd5b505af1158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa91906116ab565b505b7f8f15b992ee81dad1534e0a4cabd2960c3fcec43609eab7fcce29e22253bae2f633848484604051610ce194939291906116cd565b60405180910390a15050600160655550565b33610cfc610df4565b6001600160a01b031614610d225760405162461bcd60e51b8152600401610727906115d6565b606d55565b600080805b8381101561065d5760686000868684818110610d4a57610d4a611574565b9050602002013581526020019081526020016000206000015482610d6e919061158a565b915080610d7a816115a2565b915050610d2c565b600081815260686020526040812054606d54610a1a9015801590610da75750606d5442115b610db15742610531565b606d54610531565b33610dc2610df4565b6001600160a01b031614610de85760405162461bcd60e51b8152600401610727906115d6565b610df26000611262565b565b6033546001600160a01b031690565b600080805b8381101561065d57610e31858583818110610e2557610e25611574565b90506020020135610d82565b610e3b908361158a565b915080610e47816115a2565b915050610e08565b33610e58610df4565b6001600160a01b031614610e7e5760405162461bcd60e51b8152600401610727906115d6565b606c55565b6000606c54821015610e9757506000919050565b606b54606c54610ea7908461151c565b610eb19190611552565b606a5461055b9190611533565b33610ec7610df4565b6001600160a01b031614610eed5760405162461bcd60e51b8152600401610727906115d6565b6001600160a01b038116610f525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610727565b610f5b81611262565b50565b6001600160a01b03163b151590565b60008054610100900460ff1615610fbb578160ff166001148015610f975750610f9530610f5e565b155b610fb35760405162461bcd60e51b815260040161072790611724565b506000919050565b60005460ff808416911610610fe25760405162461bcd60e51b815260040161072790611724565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610df25760405162461bcd60e51b815260040161072790611772565b600054610100900460ff1661104f5760405162461bcd60e51b815260040161072790611772565b610df26112b4565b600054610100900460ff1661107e5760405162461bcd60e51b815260040161072790611772565b611086611001565b61108e611028565b61060d82826112e4565b42606c54106110e35760405162461bcd60e51b8152602060048201526017602482015276111254d5149250955513d48bd393d517d4d51054951151604a1b6044820152606401610727565b606b546110f0904261151c565b60008281526068602052604090206001015410610f5b5760405162461bcd60e51b81526020600482015260156024820152744449535452494255544f522f544f4f5f4541524c5960581b6044820152606401610727565b804710156111975760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610727565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146111e4576040519150601f19603f3d011682016040523d82523d6000602084013e6111e9565b606091505b505090508061125d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610727565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166112db5760405162461bcd60e51b815260040161072790611772565b610df233611262565b600054610100900460ff1661130b5760405162461bcd60e51b815260040161072790611772565b606680546001600160a01b039384166001600160a01b03199182161790915560678054929093169116179055565b60006020828403121561134b57600080fd5b5035919050565b600060208083528351808285015260005b8181101561137f57858101830151858201604001528201611363565b81811115611391576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114610f5b57600080fd5b8035610ffc816113a7565b600060c082840312156113d957600080fd5b60405160c081016001600160401b038111828210171561140957634e487b7160e01b600052604160045260246000fd5b604052611415836113bc565b8152611423602084016113bc565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b6000806020838503121561146d57600080fd5b82356001600160401b038082111561148457600080fd5b818501915085601f83011261149857600080fd5b8135818111156114a757600080fd5b8660208260051b85010111156114bc57600080fd5b60209290920196919550909350505050565b6001600160a01b0391909116815260200190565b6000602082840312156114f457600080fd5b81356114ff816113a7565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561152e5761152e611506565b500390565b600081600019048311821515161561154d5761154d611506565b500290565b60008261156f57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000821982111561159d5761159d611506565b500190565b60006000198214156115b6576115b6611506565b5060010190565b6000602082840312156115cf57600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561165457600080fd5b81516114ff816113a7565b6020808252601990820152782224a9aa2924a12aaa27a917a727aa2fa7232a2fa7aba722a960391b604082015260600190565b6001600160a01b03929092168252602082015260400190565b6000602082840312156116bd57600080fd5b815180151581146114ff57600080fd5b6001600160a01b0385168152606060208201819052810183905260006001600160fb1b038411156116fd57600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220685e93a0d11408227373c781bb599bb2f1c946afb22f58387e75bd9729715bbe64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c8063033cfed31461017a57806306fdde03146101ad5780631a87a934146101ff5780632493530f1461021f5780632890d0331461023f57806329e34b26146102545780632ef3521414610274578063379607f5146102945780633ccfa92f146102b45780633d2dded5146102ca5780634451d89f146102e057806346be42fa1461030d578063496ef2171461032d5780634a1c86b71461034d5780634fcddd151461036d57806354fd4d501461038d57806369ceb15f146103bc5780636cc8e783146103d2578063715018a6146103f25780638da5cb5b146104075780639fcd34151461041c578063b0aa1e041461043c578063c7871ba91461045c578063d5ed4d5a14610472578063e74d0c2814610492578063f04d688f146104b2578063f28f9b56146104c8578063f2fde38b1461051157600080fd5b36610175576000341161015d57600080fd5b6066546001600160a01b03161561017357600080fd5b005b600080fd5b34801561018657600080fd5b5061019a610195366004611339565b610531565b6040519081526020015b60405180910390f35b3480156101b957600080fd5b506101f26040518060400160405280601981526020017822a9219b9918902b32b9ba32b2102234b9ba3934b13aba37b960391b81525081565b6040516101a49190611352565b34801561020b57600080fd5b5061017361021a3660046113c7565b610561565b34801561022b57600080fd5b5061019a61023a36600461145a565b610611565b34801561024b57600080fd5b5061019a610665565b34801561026057600080fd5b5061017361026f366004611339565b6106f8565b34801561028057600080fd5b5061017361028f366004611339565b610735565b3480156102a057600080fd5b506101736102af366004611339565b610769565b3480156102c057600080fd5b5061019a606d5481565b3480156102d657600080fd5b5061019a60695481565b3480156102ec57600080fd5b50606654610300906001600160a01b031681565b6040516101a491906114ce565b34801561031957600080fd5b5061019a610328366004611339565b6109e3565b34801561033957600080fd5b5061017361034836600461145a565b610a24565b34801561035957600080fd5b50610173610368366004611339565b610cf3565b34801561037957600080fd5b5061019a61038836600461145a565b610d27565b34801561039957600080fd5b506101f260405180604001604052806003815260200162302e3160e81b81525081565b3480156103c857600080fd5b5061019a606b5481565b3480156103de57600080fd5b5061019a6103ed366004611339565b610d82565b3480156103fe57600080fd5b50610173610db9565b34801561041357600080fd5b50610300610df4565b34801561042857600080fd5b5061019a61043736600461145a565b610e03565b34801561044857600080fd5b50610173610457366004611339565b610e4f565b34801561046857600080fd5b5061019a606a5481565b34801561047e57600080fd5b50606754610300906001600160a01b031681565b34801561049e57600080fd5b5061019a6104ad366004611339565b610e83565b3480156104be57600080fd5b5061019a606c5481565b3480156104d457600080fd5b506104fc6104e3366004611339565b6068602052600090815260409020805460019091015482565b604080519283526020830191909152016101a4565b34801561051d57600080fd5b5061017361052c3660046114e2565b610ebe565b6000606b54606a54606c5484610547919061151c565b6105519190611533565b61055b9190611552565b92915050565b600061056d6001610f6d565b90508015610585576000805461ff0019166101001790555b61058d611001565b610595611028565b6105a782600001518360200151611057565b6040820151606a556060820151606b556080820151606c5560a0820151606d55801561060d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600080805b8381101561065d5761063f85858381811061063357610633611574565b905060200201356109e3565b610649908361158a565b915080610655816115a2565b915050610616565b509392505050565b6066546040516370a0823160e01b81526000916001600160a01b0316906370a08231906106969030906004016114ce565b60206040518083038186803b1580156106ae57600080fd5b505afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e691906115bd565b6069546106f3919061158a565b905090565b33610701610df4565b6001600160a01b0316146107305760405162461bcd60e51b8152600401610727906115d6565b60405180910390fd5b606b55565b3361073e610df4565b6001600160a01b0316146107645760405162461bcd60e51b8152600401610727906115d6565b606a55565b6002606554141561078c5760405162461bcd60e51b81526004016107279061160b565b600260655561079a81611098565b336067546040516331a9108f60e11b8152600481018490526001600160a01b039283169290911690636352211e9060240160206040518083038186803b1580156107e357600080fd5b505afa1580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190611642565b6001600160a01b0316146108415760405162461bcd60e51b81526004016107279061165f565b600061084c826109e3565b90506000811161089d5760405162461bcd60e51b815260206004820152601c60248201527b4449535452494255544f522f4e4f5448494e475f544f5f434c41494d60201b6044820152606401610727565b600082815260686020526040812080548392906108bb90849061158a565b9091555050600082815260686020526040812042600190910155606980548392906108e790849061158a565b90915550506066546001600160a01b03166109165761091181335b6001600160a01b031690611147565b61099a565b6066546001600160a01b031663a9059cbb33836040518363ffffffff1660e01b8152600401610946929190611692565b602060405180830381600087803b15801561096057600080fd5b505af1158015610974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099891906116ab565b505b604080513381526020810184905280820183905290517f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf79181900360600190a150506001606555565b600081815260686020526040812054606d54610a1a9015801590610a085750606d5442115b610a125742610e83565b606d54610e83565b61055b919061151c565b60026065541415610a475760405162461bcd60e51b81526004016107279061160b565b60026065556000805b82811015610bf157610a79848483818110610a6d57610a6d611574565b90506020020135611098565b60675433906001600160a01b0316636352211e868685818110610a9e57610a9e611574565b905060200201356040518263ffffffff1660e01b8152600401610ac391815260200190565b60206040518083038186803b158015610adb57600080fd5b505afa158015610aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b139190611642565b6001600160a01b031614610b395760405162461bcd60e51b81526004016107279061165f565b6000610b5085858481811061063357610633611574565b90508015610bde578060686000878786818110610b6f57610b6f611574565b9050602002013581526020019081526020016000206000016000828254610b96919061158a565b9091555042905060686000878786818110610bb357610bb3611574565b905060200201358152602001908152602001600020600101819055508083610bdb919061158a565b92505b5080610be9816115a2565b915050610a50565b508060696000828254610c04919061158a565b90915550506066546001600160a01b0316610c2857610c238133610902565b610cac565b6066546001600160a01b031663a9059cbb33836040518363ffffffff1660e01b8152600401610c58929190611692565b602060405180830381600087803b158015610c7257600080fd5b505af1158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa91906116ab565b505b7f8f15b992ee81dad1534e0a4cabd2960c3fcec43609eab7fcce29e22253bae2f633848484604051610ce194939291906116cd565b60405180910390a15050600160655550565b33610cfc610df4565b6001600160a01b031614610d225760405162461bcd60e51b8152600401610727906115d6565b606d55565b600080805b8381101561065d5760686000868684818110610d4a57610d4a611574565b9050602002013581526020019081526020016000206000015482610d6e919061158a565b915080610d7a816115a2565b915050610d2c565b600081815260686020526040812054606d54610a1a9015801590610da75750606d5442115b610db15742610531565b606d54610531565b33610dc2610df4565b6001600160a01b031614610de85760405162461bcd60e51b8152600401610727906115d6565b610df26000611262565b565b6033546001600160a01b031690565b600080805b8381101561065d57610e31858583818110610e2557610e25611574565b90506020020135610d82565b610e3b908361158a565b915080610e47816115a2565b915050610e08565b33610e58610df4565b6001600160a01b031614610e7e5760405162461bcd60e51b8152600401610727906115d6565b606c55565b6000606c54821015610e9757506000919050565b606b54606c54610ea7908461151c565b610eb19190611552565b606a5461055b9190611533565b33610ec7610df4565b6001600160a01b031614610eed5760405162461bcd60e51b8152600401610727906115d6565b6001600160a01b038116610f525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610727565b610f5b81611262565b50565b6001600160a01b03163b151590565b60008054610100900460ff1615610fbb578160ff166001148015610f975750610f9530610f5e565b155b610fb35760405162461bcd60e51b815260040161072790611724565b506000919050565b60005460ff808416911610610fe25760405162461bcd60e51b815260040161072790611724565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610df25760405162461bcd60e51b815260040161072790611772565b600054610100900460ff1661104f5760405162461bcd60e51b815260040161072790611772565b610df26112b4565b600054610100900460ff1661107e5760405162461bcd60e51b815260040161072790611772565b611086611001565b61108e611028565b61060d82826112e4565b42606c54106110e35760405162461bcd60e51b8152602060048201526017602482015276111254d5149250955513d48bd393d517d4d51054951151604a1b6044820152606401610727565b606b546110f0904261151c565b60008281526068602052604090206001015410610f5b5760405162461bcd60e51b81526020600482015260156024820152744449535452494255544f522f544f4f5f4541524c5960581b6044820152606401610727565b804710156111975760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610727565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146111e4576040519150601f19603f3d011682016040523d82523d6000602084013e6111e9565b606091505b505090508061125d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610727565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166112db5760405162461bcd60e51b815260040161072790611772565b610df233611262565b600054610100900460ff1661130b5760405162461bcd60e51b815260040161072790611772565b606680546001600160a01b039384166001600160a01b03199182161790915560678054929093169116179055565b60006020828403121561134b57600080fd5b5035919050565b600060208083528351808285015260005b8181101561137f57858101830151858201604001528201611363565b81811115611391576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114610f5b57600080fd5b8035610ffc816113a7565b600060c082840312156113d957600080fd5b60405160c081016001600160401b038111828210171561140957634e487b7160e01b600052604160045260246000fd5b604052611415836113bc565b8152611423602084016113bc565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b6000806020838503121561146d57600080fd5b82356001600160401b038082111561148457600080fd5b818501915085601f83011261149857600080fd5b8135818111156114a757600080fd5b8660208260051b85010111156114bc57600080fd5b60209290920196919550909350505050565b6001600160a01b0391909116815260200190565b6000602082840312156114f457600080fd5b81356114ff816113a7565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561152e5761152e611506565b500390565b600081600019048311821515161561154d5761154d611506565b500290565b60008261156f57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000821982111561159d5761159d611506565b500190565b60006000198214156115b6576115b6611506565b5060010190565b6000602082840312156115cf57600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561165457600080fd5b81516114ff816113a7565b6020808252601990820152782224a9aa2924a12aaa27a917a727aa2fa7232a2fa7aba722a960391b604082015260600190565b6001600160a01b03929092168252602082015260400190565b6000602082840312156116bd57600080fd5b815180151581146114ff57600080fd5b6001600160a01b0385168152606060208201819052810183905260006001600160fb1b038411156116fd57600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220685e93a0d11408227373c781bb599bb2f1c946afb22f58387e75bd9729715bbe64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 512,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 515,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 931,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 392,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 504,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1533,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 10211,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "claimToken",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 10213,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "ticketToken",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 10218,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "entitlements",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint256,t_struct(Entitlement)10209_storage)"
      },
      {
        "astId": 10220,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "streamTotalClaimed",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 10658,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "vestingRate",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 10660,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "vestingTimeUnit",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 10662,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "claimStart",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 10664,
        "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
        "label": "claimEnd",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Entitlement)10209_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721SingleTokenDistributor.Entitlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Entitlement)10209_storage"
      },
      "t_struct(Entitlement)10209_storage": {
        "encoding": "inplace",
        "label": "struct ERC721SingleTokenDistributor.Entitlement",
        "members": [
          {
            "astId": 10206,
            "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10208,
            "contract": "contracts/streams/ERC721/presets/ERC721HolderVestedDistributor.sol:ERC721HolderVestedDistributor",
            "label": "lastClaimedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}