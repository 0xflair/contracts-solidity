{
  "address": "0x79A358D2Ea856Ec11ab7E2041F9d1Df20C62849F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa05de118b6060ec08a46d54de9e2cfbe52f7673431f0cd2218b04f46a5e058f9",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x79A358D2Ea856Ec11ab7E2041F9d1Df20C62849F",
    "transactionIndex": 10,
    "gasUsed": "185395",
    "logsBloom": "0x
    "blockHash": "0xfc4c4f8cda6bb2e0e2d98398a55ac45557f5e3443e58438a85823488e3b9d0aa",
    "transactionHash": "0xa05de118b6060ec08a46d54de9e2cfbe52f7673431f0cd2218b04f46a5e058f9",
    "logs": [],
    "blockNumber": 11355756,
    "cumulativeGasUsed": "755089",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "87eb926eb364a50df675f52093495652",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"conrtact owner\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"params\":{\"account\":\"address of new owner\"}}},\"title\":\"Ownership access control based on ERC173\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/access/ownable/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/facets/access/ownable/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {IERC173Event} from \\\"./IERC173Event.sol\\\";\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Event {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0xf761939a8aead842b7fd5f906187649d39a4383e21d2c87b837c98a0d59cce80\",\"license\":\"MIT\"},\"contracts/facets/access/ownable/IERC173Event.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Event {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0xb9306908ca1d13e6acb543bff1a8999cd1cbff979e2eda29793aaa67b6925467\",\"license\":\"MIT\"},\"contracts/facets/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {IERC173} from \\\"./IERC173.sol\\\";\\nimport {OwnableInternal} from \\\"./OwnableInternal.sol\\\";\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\ncontract Ownable is IERC173, OwnableInternal {\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0xc7d720eea44dc44b9289ea7a904f60e7d05a2c9128b9c41e40321abeea46ca92\",\"license\":\"MIT\"},\"contracts/facets/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {OwnableStorage} from \\\"./OwnableStorage.sol\\\";\\nimport {IERC173Event} from \\\"./IERC173Event.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Event {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(msg.sender, account);\\n    }\\n}\\n\",\"keccak256\":\"0xd06576bfdd6b65237d9e3e602e7c35d3a6aa6e1d24bf91685d33264cd2bb4422\",\"license\":\"MIT\"},\"contracts/facets/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x26eea1f665c393b0046c3dcb9421f3caa1322ca996689fa0aa941eff5a1dcda2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610264806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b14610074575b600080fd5b61004e610087565b005b6100586100d4565b6040516001600160a01b03909116815260200160405180910390f35b61004e6100823660046101c7565b6100e3565b61008f610127565b6001600160a01b0316336001600160a01b0316146100c85760405162461bcd60e51b81526004016100bf906101f7565b60405180910390fd5b6100d26000610140565b565b60006100de610127565b905090565b6100eb610127565b6001600160a01b0316336001600160a01b03161461011b5760405162461bcd60e51b81526004016100bf906101f7565b61012481610140565b50565b60006101316101a3565b546001600160a01b0316919050565b61016a8161014c6101a3565b9081546001600160a01b0319166001600160a01b0391909116179055565b6040516001600160a01b0382169033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed490565b6000602082840312156101d957600080fd5b81356001600160a01b03811681146101f057600080fd5b9392505050565b6020808252601d908201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060408201526060019056fea2646970667358221220f0b20daaa29f7bd477f59b4dc9ee88b6d198a61524a22617b67274cce86aaaa164736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b14610074575b600080fd5b61004e610087565b005b6100586100d4565b6040516001600160a01b03909116815260200160405180910390f35b61004e6100823660046101c7565b6100e3565b61008f610127565b6001600160a01b0316336001600160a01b0316146100c85760405162461bcd60e51b81526004016100bf906101f7565b60405180910390fd5b6100d26000610140565b565b60006100de610127565b905090565b6100eb610127565b6001600160a01b0316336001600160a01b03161461011b5760405162461bcd60e51b81526004016100bf906101f7565b61012481610140565b50565b60006101316101a3565b546001600160a01b0316919050565b61016a8161014c6101a3565b9081546001600160a01b0319166001600160a01b0391909116179055565b6040516001600160a01b0382169033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed490565b6000602082840312156101d957600080fd5b81356001600160a01b03811681146101f057600080fd5b9392505050565b6020808252601d908201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060408201526060019056fea2646970667358221220f0b20daaa29f7bd477f59b4dc9ee88b6d198a61524a22617b67274cce86aaaa164736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "returns": {
          "_0": "conrtact owner"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "params": {
          "account": "address of new owner"
        }
      }
    },
    "title": "Ownership access control based on ERC173",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}