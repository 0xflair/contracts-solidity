{
  "address": "0x7473F6C1A7bD11a164Ffea82Ac02FcEfC0833cdD",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockedUntilTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "totalTickets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "emissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "emissionTimeUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionEnd",
              "type": "uint64"
            }
          ],
          "internalType": "struct ERC721EqualEmissionStream.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimMany",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "calcUntil",
          "type": "uint64"
        }
      ],
      "name": "emissionAmountUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionEnd",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionStart",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionTimeUnit",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "entitlements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721EmissionReleaseExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721EqualSplitExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockedUntilTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "totalTickets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "emissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "emissionTimeUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionEnd",
              "type": "uint64"
            }
          ],
          "internalType": "struct ERC721EqualEmissionStream.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "lockUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedUntilTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "calcUntil",
          "type": "uint64"
        }
      ],
      "name": "releasedAmountUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionTimeUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setTotalTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1c6670ce0d67494e1d788ff60d48366211629b33370fec195808c091a7f504c6",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x7473F6C1A7bD11a164Ffea82Ac02FcEfC0833cdD",
    "transactionIndex": 11,
    "gasUsed": "2108103",
    "logsBloom": "0x
    "blockHash": "0x1760f2243aa886513997b3df8640bd03e65cf483219169ab9080dd9833e2dc45",
    "transactionHash": "0x1c6670ce0d67494e1d788ff60d48366211629b33370fec195808c091a7f504c6",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 10947992,
        "transactionHash": "0x1c6670ce0d67494e1d788ff60d48366211629b33370fec195808c091a7f504c6",
        "address": "0x7473F6C1A7bD11a164Ffea82Ac02FcEfC0833cdD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x1760f2243aa886513997b3df8640bd03e65cf483219169ab9080dd9833e2dc45"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10947992,
        "transactionHash": "0x1c6670ce0d67494e1d788ff60d48366211629b33370fec195808c091a7f504c6",
        "address": "0x7473F6C1A7bD11a164Ffea82Ac02FcEfC0833cdD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x1760f2243aa886513997b3df8640bd03e65cf483219169ab9080dd9833e2dc45"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10947992,
        "transactionHash": "0x1c6670ce0d67494e1d788ff60d48366211629b33370fec195808c091a7f504c6",
        "address": "0x7473F6C1A7bD11a164Ffea82Ac02FcEfC0833cdD",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 10,
        "blockHash": "0x1760f2243aa886513997b3df8640bd03e65cf483219169ab9080dd9833e2dc45"
      }
    ],
    "blockNumber": 10947992,
    "cumulativeGasUsed": "3236776",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "ticketToken": "0x0000000000000000000000000000000000000000",
      "lockedUntilTimestamp": 0,
      "totalTickets": 0,
      "emissionRate": 0,
      "emissionTimeUnit": 0,
      "emissionStart": 0,
      "emissionEnd": 0
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "b4e41c71547365416a59b3966c49faa3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"emissionTimeUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionEnd\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721EqualEmissionStream.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimMany\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"calcUntil\",\"type\":\"uint64\"}],\"name\":\"emissionAmountUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionEnd\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionStart\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionTimeUnit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entitlements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721EmissionReleaseExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721EqualSplitExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"emissionTimeUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionEnd\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721EqualEmissionStream.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"lockUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntilTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"calcUntil\",\"type\":\"uint64\"}],\"name\":\"releasedAmountUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionTimeUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTotalTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol\":\"ERC721EqualEmissionStream\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/streams/ERC721/base/ERC721MultiTokenStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721MultiTokenStream {\\n    // Claim native currency for a single ticket token\\n    function claim(uint256 ticketTokenId) external;\\n\\n    // Claim an erc20 claim token for a single ticket token\\n    function claim(uint256 ticketTokenId, address claimToken) external;\\n\\n    // Claim native currency for multiple ticket tokens (only if all owned by sender)\\n    function claim(uint256[] calldata ticketTokenIds) external;\\n\\n    // Claim native or erc20 tokens for multiple ticket tokens (only if all owned by `owner`)\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address owner\\n    ) external;\\n\\n    // Total native currency ever supplied to this stream\\n    function streamTotalSupply() external view returns (uint256);\\n\\n    // Total erc20 token ever supplied to this stream by claim token address\\n    function streamTotalSupply(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed from this stream\\n    function streamTotalClaimed() external view returns (uint256);\\n\\n    // Total erc20 token ever claimed from this stream by claim token address\\n    function streamTotalClaimed(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for a single ticket token\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for multiple token IDs\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total erc20 token ever claimed for multiple token IDs\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) external view returns (uint256);\\n\\n    // Calculate currently claimable amount for a specific ticket token ID and a specific claim token address\\n    // Pass 0x0000000000000000000000000000000000000000 as claim token to represent native currency\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        external\\n        view\\n        returns (uint256 claimableAmount);\\n}\\n\\nabstract contract ERC721MultiTokenStream is\\n    IERC721MultiTokenStream,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    struct Entitlement {\\n        uint256 totalClaimed;\\n        uint256 lastClaimedAt;\\n    }\\n\\n    // Config\\n    address public ticketToken;\\n\\n    // Locks changing the config until this timestamp is reached\\n    uint64 public lockedUntilTimestamp;\\n\\n    // Map of ticket token ID -> claim token address -> entitlement\\n    mapping(uint256 => mapping(address => Entitlement)) public entitlements;\\n\\n    // Map of claim token address -> Total amount claimed by all holders\\n    mapping(address => uint256) internal _streamTotalClaimed;\\n\\n    /* EVENTS */\\n\\n    event Claim(\\n        address operator,\\n        address beneficiary,\\n        uint256 ticketTokenId,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    event ClaimMany(\\n        address operator,\\n        address beneficiary,\\n        uint256[] ticketTokenIds,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    function __ERC721MultiTokenStream_init(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        __ERC721MultiTokenStream_init_unchained(\\n            _ticketToken,\\n            _lockedUntilTimestamp\\n        );\\n    }\\n\\n    function __ERC721MultiTokenStream_init_unchained(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        ticketToken = _ticketToken;\\n        lockedUntilTimestamp = _lockedUntilTimestamp;\\n\\n        _registerInterface(type(IERC721MultiTokenStream).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function lockUntil(uint64 newValue) public onlyOwner {\\n        require(newValue > lockedUntilTimestamp, \\\"STREAM/CANNOT_REWIND\\\");\\n        lockedUntilTimestamp = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    receive() external payable {\\n        require(msg.value > 0);\\n    }\\n\\n    function claim(uint256 ticketTokenId) public {\\n        claim(ticketTokenId, address(0));\\n    }\\n\\n    function claim(uint256 ticketTokenId, address claimToken)\\n        public\\n        nonReentrant\\n    {\\n        /* CHECKS */\\n\\n        _beforeClaim(ticketTokenId, claimToken);\\n\\n        address owner = IERC721(ticketToken).ownerOf(ticketTokenId);\\n        uint256 claimable = streamClaimableAmount(ticketTokenId, claimToken);\\n        require(claimable > 0, \\\"STREAM/NOTHING_TO_CLAIM\\\");\\n\\n        /* EFFECTS */\\n\\n        entitlements[ticketTokenId][claimToken].totalClaimed += claimable;\\n        entitlements[ticketTokenId][claimToken].lastClaimedAt = block.timestamp;\\n\\n        _streamTotalClaimed[claimToken] += claimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(owner)).sendValue(claimable);\\n        } else {\\n            IERC20(claimToken).transfer(owner, claimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit Claim(_msgSender(), owner, ticketTokenId, claimToken, claimable);\\n    }\\n\\n    function claim(uint256[] calldata ticketTokenIds) public {\\n        claim(ticketTokenIds, address(0), _msgSender());\\n    }\\n\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address owner\\n    ) public nonReentrant {\\n        uint256 totalClaimable;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            _beforeClaim(ticketTokenIds[i], claimToken);\\n\\n            /* CHECKS */\\n            require(\\n                IERC721(ticketToken).ownerOf(ticketTokenIds[i]) == owner,\\n                \\\"STREAM/NOT_NFT_OWNER\\\"\\n            );\\n\\n            /* EFFECTS */\\n            uint256 claimable = streamClaimableAmount(\\n                ticketTokenIds[i],\\n                claimToken\\n            );\\n\\n            if (claimable > 0) {\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .totalClaimed += claimable;\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .lastClaimedAt = block.timestamp;\\n\\n                totalClaimable += claimable;\\n            }\\n        }\\n\\n        _streamTotalClaimed[claimToken] += totalClaimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(owner)).sendValue(totalClaimable);\\n        } else {\\n            IERC20(claimToken).transfer(owner, totalClaimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit ClaimMany(\\n            _msgSender(),\\n            owner,\\n            ticketTokenIds,\\n            claimToken,\\n            totalClaimable\\n        );\\n    }\\n\\n    /* READ ONLY */\\n\\n    function streamTotalSupply() public view returns (uint256) {\\n        return streamTotalSupply(address(0));\\n    }\\n\\n    function streamTotalSupply(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (claimToken == address(0)) {\\n            return _streamTotalClaimed[claimToken] + address(this).balance;\\n        }\\n\\n        return\\n            _streamTotalClaimed[claimToken] +\\n            IERC20(claimToken).balanceOf(address(this));\\n    }\\n\\n    function streamTotalClaimed() public view returns (uint256) {\\n        return _streamTotalClaimed[address(0)];\\n    }\\n\\n    function streamTotalClaimed(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _streamTotalClaimed[claimToken];\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][address(0)].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamTotalClaimed(ticketTokenIds, address(0));\\n    }\\n\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimed = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimed += entitlements[ticketTokenIds[i]][claimToken].totalClaimed;\\n        }\\n\\n        return claimed;\\n    }\\n\\n    function streamClaimableAmount(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimable = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimable += streamClaimableAmount(ticketTokenIds[i], claimToken);\\n        }\\n\\n        return claimable;\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamClaimableAmount(ticketTokenId, address(0));\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 totalReleased = _totalTokenShare(\\n            _totalReleasedAmount(\\n                streamTotalSupply(claimToken),\\n                ticketTokenId,\\n                claimToken\\n            ),\\n            ticketTokenId,\\n            claimToken\\n        );\\n\\n        return\\n            totalReleased -\\n            entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function _totalReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    function _totalTokenShare(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    /* INTERNAL */\\n\\n    function _beforeClaim(uint256 ticketTokenId_, address claimToken_)\\n        internal\\n        view\\n        virtual\\n    {}\\n}\\n\",\"keccak256\":\"0x65d5493f5593442974b89d9b7bbfa2c1a077817763d96721a288acda36b8947b\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721EmissionReleaseExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721EmissionReleaseExtension {\\n    function hasERC721EmissionReleaseExtension() external view returns (bool);\\n\\n    function setEmissionRate(uint256 newValue) external;\\n\\n    function setEmissionTimeUnit(uint64 newValue) external;\\n\\n    function setEmissionStart(uint64 newValue) external;\\n\\n    function setEmissionEnd(uint64 newValue) external;\\n\\n    function releasedAmountUntil(uint64 calcUntil)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function emissionAmountUntil(uint64 calcUntil)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\nabstract contract ERC721EmissionReleaseExtension is\\n    IERC721EmissionReleaseExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ERC721MultiTokenStream\\n{\\n    // Number of tokens released every `emissionTimeUnit`\\n    uint256 public emissionRate;\\n\\n    // Time unit to release tokens, users can only claim once every `emissionTimeUnit`\\n    uint64 public emissionTimeUnit;\\n\\n    // When emission and calculating tokens starts\\n    uint64 public emissionStart;\\n\\n    // When to stop calculating the tokens released\\n    uint64 public emissionEnd;\\n\\n    /* INIT */\\n\\n    function __ERC721EmissionReleaseExtension_init(\\n        uint256 _emissionRate,\\n        uint64 _emissionTimeUnit,\\n        uint64 _emissionStart,\\n        uint64 _emissionEnd\\n    ) internal onlyInitializing {\\n        __ERC721EmissionReleaseExtension_init_unchained(\\n            _emissionRate,\\n            _emissionTimeUnit,\\n            _emissionStart,\\n            _emissionEnd\\n        );\\n    }\\n\\n    function __ERC721EmissionReleaseExtension_init_unchained(\\n        uint256 _emissionRate,\\n        uint64 _emissionTimeUnit,\\n        uint64 _emissionStart,\\n        uint64 _emissionEnd\\n    ) internal onlyInitializing {\\n        emissionRate = _emissionRate;\\n        emissionTimeUnit = _emissionTimeUnit;\\n        emissionStart = _emissionStart;\\n        emissionEnd = _emissionEnd;\\n\\n        _registerInterface(type(IERC721EmissionReleaseExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setEmissionRate(uint256 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionRate = newValue;\\n    }\\n\\n    function setEmissionTimeUnit(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionTimeUnit = newValue;\\n    }\\n\\n    function setEmissionStart(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionStart = newValue;\\n    }\\n\\n    function setEmissionEnd(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionEnd = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721EmissionReleaseExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function releasedAmountUntil(uint64 calcUntil)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            emissionRate *\\n            // Intentionally rounded down:\\n            ((calcUntil - emissionStart) / emissionTimeUnit);\\n    }\\n\\n    function emissionAmountUntil(uint64 calcUntil)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return ((calcUntil - emissionStart) * emissionRate) / emissionTimeUnit;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _totalReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view override returns (uint256) {\\n        streamTotalSupply_;\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        if (block.timestamp < emissionStart) {\\n            return 0;\\n        } else if (emissionEnd > 0 && block.timestamp > emissionEnd) {\\n            return releasedAmountUntil(emissionEnd);\\n        } else {\\n            return releasedAmountUntil(uint64(block.timestamp));\\n        }\\n    }\\n\\n    function _beforeClaim(uint256 ticketTokenId, address claimToken)\\n        internal\\n        view\\n        virtual\\n        override\\n    {\\n        require(emissionStart < block.timestamp, \\\"STREAM/NOT_STARTED\\\");\\n\\n        require(\\n            entitlements[ticketTokenId][claimToken].lastClaimedAt <\\n                block.timestamp - emissionTimeUnit,\\n            \\\"STREAM/TOO_EARLY\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdf5c7c975c737f025b9d43e29ffd317183bb44748392c832792d85d0c5aefad4\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721EqualSplitExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721EqualSplitExtension {\\n    function hasERC721EqualSplitExtension() external view returns (bool);\\n\\n    function setTotalTickets(uint256 newValue) external;\\n}\\n\\nabstract contract ERC721EqualSplitExtension is\\n    IERC721EqualSplitExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ERC721MultiTokenStream\\n{\\n    // Total number of ERC721 tokens to calculate their equal split share\\n    uint256 public totalTickets;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721EqualSplitExtension_init(uint256 _totalTickets)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721EqualSplitExtension_init_unchained(_totalTickets);\\n    }\\n\\n    function __ERC721EqualSplitExtension_init_unchained(uint256 _totalTickets)\\n        internal\\n        onlyInitializing\\n    {\\n        totalTickets = _totalTickets;\\n\\n        _registerInterface(type(IERC721EqualSplitExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setTotalTickets(uint256 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CANNOT_REWIND\\\");\\n        totalTickets = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721EqualSplitExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _totalTokenShare(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view override returns (uint256) {\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        return totalReleasedAmount_ / totalTickets;\\n    }\\n}\\n\",\"keccak256\":\"0x1df9fc1ee3f9dd8eb00fdbf94c8522dcae478abc51609ab22d85dc1afdfda48c\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../extensions/ERC721EmissionReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721EqualSplitExtension.sol\\\";\\n\\ncontract ERC721EqualEmissionStream is\\n    Initializable,\\n    Ownable,\\n    ERC721EmissionReleaseExtension,\\n    ERC721EqualSplitExtension\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Equal Emission Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Equal split extension\\n        uint256 totalTickets;\\n        // Emission release extension\\n        uint256 emissionRate;\\n        uint64 emissionTimeUnit;\\n        uint64 emissionStart;\\n        uint64 emissionEnd;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721EmissionReleaseExtension_init(\\n            config.emissionRate,\\n            config.emissionTimeUnit,\\n            config.emissionStart,\\n            config.emissionEnd\\n        );\\n        __ERC721EqualSplitExtension_init(config.totalTickets);\\n    }\\n\\n    function _beforeClaim(uint256 ticketTokenId, address claimToken)\\n        internal\\n        view\\n        override(ERC721MultiTokenStream, ERC721EmissionReleaseExtension)\\n    {\\n        return\\n            ERC721EmissionReleaseExtension._beforeClaim(\\n                ticketTokenId,\\n                claimToken\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x47f8f22f0399e5c9538d39e025878708bfffa2b6c65964b68b677067f83a2a59\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002830380380620028308339810160408190526200003491620004c4565b6200003f3362000057565b6001600355620000508133620000a9565b5062000618565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000620000b760016200016e565b90508015620000d0576000805461ff0019166101001790555b620000db8262000057565b82516020840151620000ee919062000220565b62000112836060015184608001518560a001518660c001516200025a60201b60201c565b6040830151620001229062000298565b801562000169576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60008054610100900460ff1615620001d7578160ff166001148015620001a75750620001a530620002d060201b6200156d1760201c565b155b620001cf5760405162461bcd60e51b8152600401620001c6906200057f565b60405180910390fd5b506000919050565b60005460ff808416911610620002015760405162461bcd60e51b8152600401620001c6906200057f565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166200024a5760405162461bcd60e51b8152600401620001c690620005cd565b620002568282620002df565b5050565b600054610100900460ff16620002845760405162461bcd60e51b8152600401620001c690620005cd565b620002928484848462000349565b50505050565b600054610100900460ff16620002c25760405162461bcd60e51b8152600401620001c690620005cd565b620002cd81620003d4565b50565b6001600160a01b03163b151590565b600054610100900460ff16620003095760405162461bcd60e51b8152600401620001c690620005cd565b600480546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b0385161717905562000256631ba050e960e21b62000410565b600054610100900460ff16620003735760405162461bcd60e51b8152600401620001c690620005cd565b6007849055600880546001600160401b03838116600160801b02600160801b600160c01b031986831668010000000000000000026001600160801b031990941692881692909217929092171617905562000292634d0b5a4960e01b62000410565b600054610100900460ff16620003fe5760405162461bcd60e51b8152600401620001c690620005cd565b6009819055620002cd632d5305cb60e21b5b6001600160e01b031980821614156200046c5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401620001c6565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b80516001600160a01b03811681146200021b57600080fd5b80516001600160401b03811681146200021b57600080fd5b600060e08284031215620004d757600080fd5b60405160e081016001600160401b03811182821017156200050857634e487b7160e01b600052604160045260246000fd5b604052620005168362000494565b81526200052660208401620004ac565b602082015260408301516040820152606083015160608201526200054d60808401620004ac565b60808201526200056060a08401620004ac565b60a08201526200057360c08401620004ac565b60c08201529392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b61220880620006286000396000f3fe6080604052600436106101cf5760003560e01c80630191c0af146101e857806301ffc9a71461021b57806306fdde031461024b5780631bc51b26146102a05780631c725fdc146102b457806325289bad146102d45780632890d03314610313578063379607f5146103285780633b3f12e2146103485780633d2dded514610368578063513da948146103a557806354fd4d50146103cc57806357dc48c8146103fb578063619496361461044f5780636ba4c1381461046f578063715018a61461048f57806378b094ca146104a4578063790c0c73146104c45780638368909c146104e457806389c6b8151461050b5780638da5cb5b1461052b578063968d9b2c1461054d57806396afc4501461056d5780639edfe83014610583578063a1bdb15e146105a3578063a1cf6493146105c3578063a86b21e814610606578063aa02a74b14610626578063aaf2f99914610646578063ae890c0a14610666578063c088184914610686578063d1335b69146102a0578063d5ed4d5a146106bc578063d97314f5146106dc578063dd11247e146106fc578063ddd5e1b214610712578063f2fde38b14610732578063f389b6e414610752578063f4415ad614610772578063f66e38c2146107aa57600080fd5b366101e357600034116101e157600080fd5b005b600080fd5b3480156101f457600080fd5b50610208610203366004611b95565b6107ca565b6040519081526020015b60405180910390f35b34801561022757600080fd5b5061023b610236366004611beb565b610822565b6040519015158152602001610212565b34801561025757600080fd5b506102936040518060400160405280601c81526020017b45524337323120457175616c20456d697373696f6e2053747265616d60201b81525081565b6040516102129190611c15565b3480156102ac57600080fd5b50600161023b565b3480156102c057600080fd5b506101e16102cf366004611c81565b610862565b3480156102e057600080fd5b506004546102fb90600160a01b90046001600160401b031681565b6040516001600160401b039091168152602001610212565b34801561031f57600080fd5b506102086108fb565b34801561033457600080fd5b506101e1610343366004611c9c565b61090c565b34801561035457600080fd5b50610208610363366004611b95565b61091a565b34801561037457600080fd5b506000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f854610208565b3480156103b157600080fd5b506008546102fb90600160401b90046001600160401b031681565b3480156103d857600080fd5b5061029360405180604001604052806003815260200162302e3160e81b81525081565b34801561040757600080fd5b5061043a610416366004611cb5565b60056020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610212565b34801561045b57600080fd5b506008546102fb906001600160401b031681565b34801561047b57600080fd5b506101e161048a366004611ce5565b610998565b34801561049b57600080fd5b506101e16109a9565b3480156104b057600080fd5b506101e16104bf366004611c81565b6109e4565b3480156104d057600080fd5b506102086104df366004611d26565b610a71565b3480156104f057600080fd5b506008546102fb90600160801b90046001600160401b031681565b34801561051757600080fd5b50610208610526366004611ce5565b610b44565b34801561053757600080fd5b50610540610b52565b6040516102129190611d43565b34801561055957600080fd5b50610208610568366004611c9c565b610b61565b34801561057957600080fd5b5061020860075481565b34801561058f57600080fd5b5061020861059e366004611c81565b610b6e565b3480156105af57600080fd5b506101e16105be366004611c9c565b610bb3565b3480156105cf57600080fd5b506102086105de366004611cb5565b60009182526005602090815260408084206001600160a01b0393909316845291905290205490565b34801561061257600080fd5b50610208610621366004611c81565b610c19565b34801561063257600080fd5b506101e1610641366004611d57565b610c5f565b34801561065257600080fd5b506101e1610661366004611c81565b610d12565b34801561067257600080fd5b506101e1610681366004611c9c565b610d9f565b34801561069257600080fd5b506102086106a1366004611d26565b6001600160a01b031660009081526006602052604090205490565b3480156106c857600080fd5b50600454610540906001600160a01b031681565b3480156106e857600080fd5b506101e16106f7366004611c81565b610e05565b34801561070857600080fd5b5061020860095481565b34801561071e57600080fd5b506101e161072d366004611cb5565b610e88565b34801561073e57600080fd5b506101e161074d366004611d26565b611119565b34801561075e57600080fd5b506101e161076d366004611e28565b6111b6565b34801561077e57600080fd5b5061020861078d366004611c9c565b600090815260056020908152604080832083805290915290205490565b3480156107b657600080fd5b506102086107c5366004611cb5565b611515565b600080805b84811015610817576107f98686838181106107ec576107ec611e8f565b9050602002013585611515565b6108039083611ebb565b91508061080f81611ed3565b9150506107cf565b5090505b9392505050565b60006301ffc9a760e01b6001600160e01b03198316148061085c57506001600160e01b0319821660009081526001602052604090205460ff165b92915050565b3361086b610b52565b6001600160a01b03161461089a5760405162461bcd60e51b815260040161089190611eee565b60405180910390fd5b6004546001600160401b03600160a01b9091048116908216116108cf5760405162461bcd60e51b815260040161089190611f23565b600480546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b60006109076000610a71565b905090565b610917816000610e88565b50565b600080805b84811015610817576005600087878481811061093d5761093d611e8f565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826109849190611ebb565b91508061099081611ed3565b91505061091f565b6109a582826000336111b6565b5050565b336109b2610b52565b6001600160a01b0316146109d85760405162461bcd60e51b815260040161089190611eee565b6109e2600061157c565b565b336109ed610b52565b6001600160a01b031614610a135760405162461bcd60e51b815260040161089190611eee565b60045442600160a01b9091046001600160401b031610610a455760405162461bcd60e51b815260040161089190611f51565b600880546001600160401b03909216600160801b02600160801b600160c01b0319909216919091179055565b60006001600160a01b038216610aa5576001600160a01b03821660009081526006602052604090205461085c904790611ebb565b6040516370a0823160e01b81526001600160a01b038316906370a0823190610ad1903090600401611d43565b60206040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b219190611f7f565b6001600160a01b03831660009081526006602052604090205461085c9190611ebb565b600061081b8383600061091a565b6002546001600160a01b031690565b600061085c826000611515565b6008546000906001600160401b0380821691610b9391600160401b9091041684611f98565b610b9d9190611fd6565b6001600160401b031660075461085c9190611ffc565b33610bbc610b52565b6001600160a01b031614610be25760405162461bcd60e51b815260040161089190611eee565b60045442600160a01b9091046001600160401b031610610c145760405162461bcd60e51b815260040161089190611f51565b600755565b6008546007546000916001600160401b038082169291610c4291600160401b9091041685611f98565b6001600160401b0316610c559190611ffc565b61085c919061201b565b6000610c6b60016115ce565b90508015610c83576000805461ff0019166101001790555b610c8c8261157c565b610c9e83600001518460200151611662565b610cba836060015184608001518560a001518660c00151611693565b610cc783604001516116cc565b8015610d0d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b33610d1b610b52565b6001600160a01b031614610d415760405162461bcd60e51b815260040161089190611eee565b60045442600160a01b9091046001600160401b031610610d735760405162461bcd60e51b815260040161089190611f51565b600880546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b33610da8610b52565b6001600160a01b031614610dce5760405162461bcd60e51b815260040161089190611eee565b60045442600160a01b9091046001600160401b031610610e005760405162461bcd60e51b815260040161089190611f23565b600955565b33610e0e610b52565b6001600160a01b031614610e345760405162461bcd60e51b815260040161089190611eee565b60045442600160a01b9091046001600160401b031610610e665760405162461bcd60e51b815260040161089190611f51565b600880546001600160401b0319166001600160401b0392909216919091179055565b60026003541415610eab5760405162461bcd60e51b81526004016108919061202f565b6002600355610eba82826116fc565b600480546040516331a9108f60e11b81529182018490526000916001600160a01b0390911690636352211e9060240160206040518083038186803b158015610f0157600080fd5b505afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f399190612066565b90506000610f478484611515565b905060008111610f935760405162461bcd60e51b815260206004820152601760248201527653545245414d2f4e4f5448494e475f544f5f434c41494d60481b6044820152606401610891565b60008481526005602090815260408083206001600160a01b038716845290915281208054839290610fc5908490611ebb565b909155505060008481526005602090815260408083206001600160a01b038716845282528083204260019091015560069091528120805483929061100a908490611ebb565b90915550506001600160a01b038316611035576110306001600160a01b03831682611706565b6110b7565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906110639085908590600401612083565b602060405180830381600087803b15801561107d57600080fd5b505af1158015611091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b5919061209c565b505b604080513381526001600160a01b038481166020830152818301879052851660608201526080810183905290517fa2d3c4c1fc934d6d2d8f9e862df90c01ae4eb0e920cd8957d242ba26b8dc40789181900360a00190a1505060016003555050565b33611122610b52565b6001600160a01b0316146111485760405162461bcd60e51b815260040161089190611eee565b6001600160a01b0381166111ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610891565b6109178161157c565b600260035414156111d95760405162461bcd60e51b81526004016108919061202f565b60026003556000805b848110156113f25761120c8686838181106111ff576111ff611e8f565b90506020020135856116fc565b6004546001600160a01b038085169116636352211e88888581811061123357611233611e8f565b905060200201356040518263ffffffff1660e01b815260040161125891815260200190565b60206040518083038186803b15801561127057600080fd5b505afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a89190612066565b6001600160a01b0316146112f55760405162461bcd60e51b815260206004820152601460248201527329aa2922a0a697a727aa2fa7232a2fa7aba722a960611b6044820152606401610891565b600061131987878481811061130c5761130c611e8f565b9050602002013586611515565b905080156113df57806005600089898681811061133857611338611e8f565b9050602002013581526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060000160008282546113829190611ebb565b909155504290506005600089898681811061139f5761139f611e8f565b6020908102929092013583525081810192909252604090810160009081206001600160a01b038a1682529092529020600101556113dc8184611ebb565b92505b50806113ea81611ed3565b9150506111e2565b506001600160a01b0383166000908152600660205260408120805483929061141b908490611ebb565b90915550506001600160a01b038316611446576114416001600160a01b03831682611706565b6114c8565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906114749085908590600401612083565b602060405180830381600087803b15801561148e57600080fd5b505af11580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c6919061209c565b505b7fd84a5c424a4f777bcf4f645712b8e5ebfc550f42bde444fa822fe98ee1b132b1338387878786604051611501969594939291906120be565b60405180910390a150506001600355505050565b60008061153561152e61152785610a71565b868661181c565b85856118a4565b60008581526005602090815260408083206001600160a01b03881684529091529020549091506115659082612122565b949350505050565b6001600160a01b03163b151590565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff161561161c578160ff1660011480156115f857506115f63061156d565b155b6116145760405162461bcd60e51b815260040161089190612139565b506000919050565b60005460ff8084169116106116435760405162461bcd60e51b815260040161089190612139565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166116895760405162461bcd60e51b815260040161089190612187565b6109a582826118b4565b600054610100900460ff166116ba5760405162461bcd60e51b815260040161089190612187565b6116c684848484611919565b50505050565b600054610100900460ff166116f35760405162461bcd60e51b815260040161089190612187565b6109178161199a565b6109a582826119d6565b804710156117565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610891565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146117a3576040519150601f19603f3d011682016040523d82523d6000602084013e6117a8565b606091505b5050905080610d0d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610891565b600854600090600160401b90046001600160401b03164210156118415750600061081b565b600854600160801b90046001600160401b0316158015906118735750600854600160801b90046001600160401b031642115b1561189b5760085461189490600160801b90046001600160401b0316610b6e565b905061081b565b61189442610b6e565b600060095484611565919061201b565b600054610100900460ff166118db5760405162461bcd60e51b815260040161089190612187565b600480546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b038516171790556109a5631ba050e960e21b611aa9565b600054610100900460ff166119405760405162461bcd60e51b815260040161089190612187565b6007849055600880546001600160401b03838116600160801b02600160801b600160c01b0319868316600160401b026001600160801b03199094169288169290921792909217161790556116c6634d0b5a4960e01b611aa9565b600054610100900460ff166119c15760405162461bcd60e51b815260040161089190612187565b6009819055610917632d5305cb60e21b611aa9565b60085442600160401b9091046001600160401b031610611a2d5760405162461bcd60e51b815260206004820152601260248201527114d5149150534bd393d517d4d5105495115160721b6044820152606401610891565b600854611a43906001600160401b031642612122565b60008381526005602090815260408083206001600160a01b0386168452909152902060010154106109a55760405162461bcd60e51b815260206004820152601060248201526f53545245414d2f544f4f5f4541524c5960801b6044820152606401610891565b6001600160e01b03198082161415611b025760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610891565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60008083601f840112611b3c57600080fd5b5081356001600160401b03811115611b5357600080fd5b6020830191508360208260051b8501011115611b6e57600080fd5b9250929050565b6001600160a01b038116811461091757600080fd5b803561165d81611b75565b600080600060408486031215611baa57600080fd5b83356001600160401b03811115611bc057600080fd5b611bcc86828701611b2a565b9094509250506020840135611be081611b75565b809150509250925092565b600060208284031215611bfd57600080fd5b81356001600160e01b03198116811461081b57600080fd5b600060208083528351808285015260005b81811015611c4257858101830151858201604001528201611c26565b81811115611c54576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160401b038116811461165d57600080fd5b600060208284031215611c9357600080fd5b61081b82611c6a565b600060208284031215611cae57600080fd5b5035919050565b60008060408385031215611cc857600080fd5b823591506020830135611cda81611b75565b809150509250929050565b60008060208385031215611cf857600080fd5b82356001600160401b03811115611d0e57600080fd5b611d1a85828601611b2a565b90969095509350505050565b600060208284031215611d3857600080fd5b813561081b81611b75565b6001600160a01b0391909116815260200190565b600080828403610100811215611d6c57600080fd5b60e0811215611d7a57600080fd5b5060405160e081016001600160401b0381118282101715611dab57634e487b7160e01b600052604160045260246000fd5b604052611db784611b8a565b8152611dc560208501611c6a565b60208201526040840135604082015260608401356060820152611dea60808501611c6a565b6080820152611dfb60a08501611c6a565b60a0820152611e0c60c08501611c6a565b60c08201529150611e1f60e08401611b8a565b90509250929050565b60008060008060608587031215611e3e57600080fd5b84356001600160401b03811115611e5457600080fd5b611e6087828801611b2a565b9095509350506020850135611e7481611b75565b91506040850135611e8481611b75565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611ece57611ece611ea5565b500190565b6000600019821415611ee757611ee7611ea5565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527314d5149150534bd0d0539393d517d49155d2539160621b604082015260600190565b60208082526014908201527314d5149150534bd0d3d3919251d7d313d0d2d15160621b604082015260600190565b600060208284031215611f9157600080fd5b5051919050565b60006001600160401b0383811690831681811015611fb857611fb8611ea5565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b0383811680611ff057611ff0611fc0565b92169190910492915050565b600081600019048311821515161561201657612016611ea5565b500290565b60008261202a5761202a611fc0565b500490565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561207857600080fd5b815161081b81611b75565b6001600160a01b03929092168252602082015260400190565b6000602082840312156120ae57600080fd5b8151801515811461081b57600080fd5b6001600160a01b038781168252868116602083015260a06040830181905282018590526000906001600160fb1b038611156120f857600080fd5b8560051b808860c0860137600090840160c001908152941660608301525060800152949350505050565b60008282101561213457612134611ea5565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220763049d110666c57e6751f6d6eaf611a39bf295d60b2f9a9768368c8c638789564736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101cf5760003560e01c80630191c0af146101e857806301ffc9a71461021b57806306fdde031461024b5780631bc51b26146102a05780631c725fdc146102b457806325289bad146102d45780632890d03314610313578063379607f5146103285780633b3f12e2146103485780633d2dded514610368578063513da948146103a557806354fd4d50146103cc57806357dc48c8146103fb578063619496361461044f5780636ba4c1381461046f578063715018a61461048f57806378b094ca146104a4578063790c0c73146104c45780638368909c146104e457806389c6b8151461050b5780638da5cb5b1461052b578063968d9b2c1461054d57806396afc4501461056d5780639edfe83014610583578063a1bdb15e146105a3578063a1cf6493146105c3578063a86b21e814610606578063aa02a74b14610626578063aaf2f99914610646578063ae890c0a14610666578063c088184914610686578063d1335b69146102a0578063d5ed4d5a146106bc578063d97314f5146106dc578063dd11247e146106fc578063ddd5e1b214610712578063f2fde38b14610732578063f389b6e414610752578063f4415ad614610772578063f66e38c2146107aa57600080fd5b366101e357600034116101e157600080fd5b005b600080fd5b3480156101f457600080fd5b50610208610203366004611b95565b6107ca565b6040519081526020015b60405180910390f35b34801561022757600080fd5b5061023b610236366004611beb565b610822565b6040519015158152602001610212565b34801561025757600080fd5b506102936040518060400160405280601c81526020017b45524337323120457175616c20456d697373696f6e2053747265616d60201b81525081565b6040516102129190611c15565b3480156102ac57600080fd5b50600161023b565b3480156102c057600080fd5b506101e16102cf366004611c81565b610862565b3480156102e057600080fd5b506004546102fb90600160a01b90046001600160401b031681565b6040516001600160401b039091168152602001610212565b34801561031f57600080fd5b506102086108fb565b34801561033457600080fd5b506101e1610343366004611c9c565b61090c565b34801561035457600080fd5b50610208610363366004611b95565b61091a565b34801561037457600080fd5b506000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f854610208565b3480156103b157600080fd5b506008546102fb90600160401b90046001600160401b031681565b3480156103d857600080fd5b5061029360405180604001604052806003815260200162302e3160e81b81525081565b34801561040757600080fd5b5061043a610416366004611cb5565b60056020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610212565b34801561045b57600080fd5b506008546102fb906001600160401b031681565b34801561047b57600080fd5b506101e161048a366004611ce5565b610998565b34801561049b57600080fd5b506101e16109a9565b3480156104b057600080fd5b506101e16104bf366004611c81565b6109e4565b3480156104d057600080fd5b506102086104df366004611d26565b610a71565b3480156104f057600080fd5b506008546102fb90600160801b90046001600160401b031681565b34801561051757600080fd5b50610208610526366004611ce5565b610b44565b34801561053757600080fd5b50610540610b52565b6040516102129190611d43565b34801561055957600080fd5b50610208610568366004611c9c565b610b61565b34801561057957600080fd5b5061020860075481565b34801561058f57600080fd5b5061020861059e366004611c81565b610b6e565b3480156105af57600080fd5b506101e16105be366004611c9c565b610bb3565b3480156105cf57600080fd5b506102086105de366004611cb5565b60009182526005602090815260408084206001600160a01b0393909316845291905290205490565b34801561061257600080fd5b50610208610621366004611c81565b610c19565b34801561063257600080fd5b506101e1610641366004611d57565b610c5f565b34801561065257600080fd5b506101e1610661366004611c81565b610d12565b34801561067257600080fd5b506101e1610681366004611c9c565b610d9f565b34801561069257600080fd5b506102086106a1366004611d26565b6001600160a01b031660009081526006602052604090205490565b3480156106c857600080fd5b50600454610540906001600160a01b031681565b3480156106e857600080fd5b506101e16106f7366004611c81565b610e05565b34801561070857600080fd5b5061020860095481565b34801561071e57600080fd5b506101e161072d366004611cb5565b610e88565b34801561073e57600080fd5b506101e161074d366004611d26565b611119565b34801561075e57600080fd5b506101e161076d366004611e28565b6111b6565b34801561077e57600080fd5b5061020861078d366004611c9c565b600090815260056020908152604080832083805290915290205490565b3480156107b657600080fd5b506102086107c5366004611cb5565b611515565b600080805b84811015610817576107f98686838181106107ec576107ec611e8f565b9050602002013585611515565b6108039083611ebb565b91508061080f81611ed3565b9150506107cf565b5090505b9392505050565b60006301ffc9a760e01b6001600160e01b03198316148061085c57506001600160e01b0319821660009081526001602052604090205460ff165b92915050565b3361086b610b52565b6001600160a01b03161461089a5760405162461bcd60e51b815260040161089190611eee565b60405180910390fd5b6004546001600160401b03600160a01b9091048116908216116108cf5760405162461bcd60e51b815260040161089190611f23565b600480546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b60006109076000610a71565b905090565b610917816000610e88565b50565b600080805b84811015610817576005600087878481811061093d5761093d611e8f565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826109849190611ebb565b91508061099081611ed3565b91505061091f565b6109a582826000336111b6565b5050565b336109b2610b52565b6001600160a01b0316146109d85760405162461bcd60e51b815260040161089190611eee565b6109e2600061157c565b565b336109ed610b52565b6001600160a01b031614610a135760405162461bcd60e51b815260040161089190611eee565b60045442600160a01b9091046001600160401b031610610a455760405162461bcd60e51b815260040161089190611f51565b600880546001600160401b03909216600160801b02600160801b600160c01b0319909216919091179055565b60006001600160a01b038216610aa5576001600160a01b03821660009081526006602052604090205461085c904790611ebb565b6040516370a0823160e01b81526001600160a01b038316906370a0823190610ad1903090600401611d43565b60206040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b219190611f7f565b6001600160a01b03831660009081526006602052604090205461085c9190611ebb565b600061081b8383600061091a565b6002546001600160a01b031690565b600061085c826000611515565b6008546000906001600160401b0380821691610b9391600160401b9091041684611f98565b610b9d9190611fd6565b6001600160401b031660075461085c9190611ffc565b33610bbc610b52565b6001600160a01b031614610be25760405162461bcd60e51b815260040161089190611eee565b60045442600160a01b9091046001600160401b031610610c145760405162461bcd60e51b815260040161089190611f51565b600755565b6008546007546000916001600160401b038082169291610c4291600160401b9091041685611f98565b6001600160401b0316610c559190611ffc565b61085c919061201b565b6000610c6b60016115ce565b90508015610c83576000805461ff0019166101001790555b610c8c8261157c565b610c9e83600001518460200151611662565b610cba836060015184608001518560a001518660c00151611693565b610cc783604001516116cc565b8015610d0d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b33610d1b610b52565b6001600160a01b031614610d415760405162461bcd60e51b815260040161089190611eee565b60045442600160a01b9091046001600160401b031610610d735760405162461bcd60e51b815260040161089190611f51565b600880546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b33610da8610b52565b6001600160a01b031614610dce5760405162461bcd60e51b815260040161089190611eee565b60045442600160a01b9091046001600160401b031610610e005760405162461bcd60e51b815260040161089190611f23565b600955565b33610e0e610b52565b6001600160a01b031614610e345760405162461bcd60e51b815260040161089190611eee565b60045442600160a01b9091046001600160401b031610610e665760405162461bcd60e51b815260040161089190611f51565b600880546001600160401b0319166001600160401b0392909216919091179055565b60026003541415610eab5760405162461bcd60e51b81526004016108919061202f565b6002600355610eba82826116fc565b600480546040516331a9108f60e11b81529182018490526000916001600160a01b0390911690636352211e9060240160206040518083038186803b158015610f0157600080fd5b505afa158015610f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f399190612066565b90506000610f478484611515565b905060008111610f935760405162461bcd60e51b815260206004820152601760248201527653545245414d2f4e4f5448494e475f544f5f434c41494d60481b6044820152606401610891565b60008481526005602090815260408083206001600160a01b038716845290915281208054839290610fc5908490611ebb565b909155505060008481526005602090815260408083206001600160a01b038716845282528083204260019091015560069091528120805483929061100a908490611ebb565b90915550506001600160a01b038316611035576110306001600160a01b03831682611706565b6110b7565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906110639085908590600401612083565b602060405180830381600087803b15801561107d57600080fd5b505af1158015611091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b5919061209c565b505b604080513381526001600160a01b038481166020830152818301879052851660608201526080810183905290517fa2d3c4c1fc934d6d2d8f9e862df90c01ae4eb0e920cd8957d242ba26b8dc40789181900360a00190a1505060016003555050565b33611122610b52565b6001600160a01b0316146111485760405162461bcd60e51b815260040161089190611eee565b6001600160a01b0381166111ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610891565b6109178161157c565b600260035414156111d95760405162461bcd60e51b81526004016108919061202f565b60026003556000805b848110156113f25761120c8686838181106111ff576111ff611e8f565b90506020020135856116fc565b6004546001600160a01b038085169116636352211e88888581811061123357611233611e8f565b905060200201356040518263ffffffff1660e01b815260040161125891815260200190565b60206040518083038186803b15801561127057600080fd5b505afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a89190612066565b6001600160a01b0316146112f55760405162461bcd60e51b815260206004820152601460248201527329aa2922a0a697a727aa2fa7232a2fa7aba722a960611b6044820152606401610891565b600061131987878481811061130c5761130c611e8f565b9050602002013586611515565b905080156113df57806005600089898681811061133857611338611e8f565b9050602002013581526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060000160008282546113829190611ebb565b909155504290506005600089898681811061139f5761139f611e8f565b6020908102929092013583525081810192909252604090810160009081206001600160a01b038a1682529092529020600101556113dc8184611ebb565b92505b50806113ea81611ed3565b9150506111e2565b506001600160a01b0383166000908152600660205260408120805483929061141b908490611ebb565b90915550506001600160a01b038316611446576114416001600160a01b03831682611706565b6114c8565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906114749085908590600401612083565b602060405180830381600087803b15801561148e57600080fd5b505af11580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c6919061209c565b505b7fd84a5c424a4f777bcf4f645712b8e5ebfc550f42bde444fa822fe98ee1b132b1338387878786604051611501969594939291906120be565b60405180910390a150506001600355505050565b60008061153561152e61152785610a71565b868661181c565b85856118a4565b60008581526005602090815260408083206001600160a01b03881684529091529020549091506115659082612122565b949350505050565b6001600160a01b03163b151590565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff161561161c578160ff1660011480156115f857506115f63061156d565b155b6116145760405162461bcd60e51b815260040161089190612139565b506000919050565b60005460ff8084169116106116435760405162461bcd60e51b815260040161089190612139565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166116895760405162461bcd60e51b815260040161089190612187565b6109a582826118b4565b600054610100900460ff166116ba5760405162461bcd60e51b815260040161089190612187565b6116c684848484611919565b50505050565b600054610100900460ff166116f35760405162461bcd60e51b815260040161089190612187565b6109178161199a565b6109a582826119d6565b804710156117565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610891565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146117a3576040519150601f19603f3d011682016040523d82523d6000602084013e6117a8565b606091505b5050905080610d0d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610891565b600854600090600160401b90046001600160401b03164210156118415750600061081b565b600854600160801b90046001600160401b0316158015906118735750600854600160801b90046001600160401b031642115b1561189b5760085461189490600160801b90046001600160401b0316610b6e565b905061081b565b61189442610b6e565b600060095484611565919061201b565b600054610100900460ff166118db5760405162461bcd60e51b815260040161089190612187565b600480546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b038516171790556109a5631ba050e960e21b611aa9565b600054610100900460ff166119405760405162461bcd60e51b815260040161089190612187565b6007849055600880546001600160401b03838116600160801b02600160801b600160c01b0319868316600160401b026001600160801b03199094169288169290921792909217161790556116c6634d0b5a4960e01b611aa9565b600054610100900460ff166119c15760405162461bcd60e51b815260040161089190612187565b6009819055610917632d5305cb60e21b611aa9565b60085442600160401b9091046001600160401b031610611a2d5760405162461bcd60e51b815260206004820152601260248201527114d5149150534bd393d517d4d5105495115160721b6044820152606401610891565b600854611a43906001600160401b031642612122565b60008381526005602090815260408083206001600160a01b0386168452909152902060010154106109a55760405162461bcd60e51b815260206004820152601060248201526f53545245414d2f544f4f5f4541524c5960801b6044820152606401610891565b6001600160e01b03198082161415611b025760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610891565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60008083601f840112611b3c57600080fd5b5081356001600160401b03811115611b5357600080fd5b6020830191508360208260051b8501011115611b6e57600080fd5b9250929050565b6001600160a01b038116811461091757600080fd5b803561165d81611b75565b600080600060408486031215611baa57600080fd5b83356001600160401b03811115611bc057600080fd5b611bcc86828701611b2a565b9094509250506020840135611be081611b75565b809150509250925092565b600060208284031215611bfd57600080fd5b81356001600160e01b03198116811461081b57600080fd5b600060208083528351808285015260005b81811015611c4257858101830151858201604001528201611c26565b81811115611c54576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160401b038116811461165d57600080fd5b600060208284031215611c9357600080fd5b61081b82611c6a565b600060208284031215611cae57600080fd5b5035919050565b60008060408385031215611cc857600080fd5b823591506020830135611cda81611b75565b809150509250929050565b60008060208385031215611cf857600080fd5b82356001600160401b03811115611d0e57600080fd5b611d1a85828601611b2a565b90969095509350505050565b600060208284031215611d3857600080fd5b813561081b81611b75565b6001600160a01b0391909116815260200190565b600080828403610100811215611d6c57600080fd5b60e0811215611d7a57600080fd5b5060405160e081016001600160401b0381118282101715611dab57634e487b7160e01b600052604160045260246000fd5b604052611db784611b8a565b8152611dc560208501611c6a565b60208201526040840135604082015260608401356060820152611dea60808501611c6a565b6080820152611dfb60a08501611c6a565b60a0820152611e0c60c08501611c6a565b60c08201529150611e1f60e08401611b8a565b90509250929050565b60008060008060608587031215611e3e57600080fd5b84356001600160401b03811115611e5457600080fd5b611e6087828801611b2a565b9095509350506020850135611e7481611b75565b91506040850135611e8481611b75565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611ece57611ece611ea5565b500190565b6000600019821415611ee757611ee7611ea5565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527314d5149150534bd0d0539393d517d49155d2539160621b604082015260600190565b60208082526014908201527314d5149150534bd0d3d3919251d7d313d0d2d15160621b604082015260600190565b600060208284031215611f9157600080fd5b5051919050565b60006001600160401b0383811690831681811015611fb857611fb8611ea5565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b0383811680611ff057611ff0611fc0565b92169190910492915050565b600081600019048311821515161561201657612016611ea5565b500290565b60008261202a5761202a611fc0565b500490565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006020828403121561207857600080fd5b815161081b81611b75565b6001600160a01b03929092168252602082015260400190565b6000602082840312156120ae57600080fd5b8151801515811461081b57600080fd5b6001600160a01b038781168252868116602083015260a06040830181905282018590526000906001600160fb1b038611156120f857600080fd5b8560051b808860c0860137600090840160c001908152941660608301525060800152949350505050565b60008282101561213457612134611ea5565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220763049d110666c57e6751f6d6eaf611a39bf295d60b2f9a9768368c8c638789564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 886,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 889,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4693,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 782,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1124,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 11590,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "ticketToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11592,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "lockedUntilTimestamp",
        "offset": 20,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 11599,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "entitlements",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)11588_storage))"
      },
      {
        "astId": 11603,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "_streamTotalClaimed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13241,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "emissionRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 13243,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "emissionTimeUnit",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 13245,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "emissionStart",
        "offset": 8,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 13247,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "emissionEnd",
        "offset": 16,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 13546,
        "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
        "label": "totalTickets",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Entitlement)11588_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721MultiTokenStream.Entitlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Entitlement)11588_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)11588_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ERC721MultiTokenStream.Entitlement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Entitlement)11588_storage)"
      },
      "t_struct(Entitlement)11588_storage": {
        "encoding": "inplace",
        "label": "struct ERC721MultiTokenStream.Entitlement",
        "members": [
          {
            "astId": 11585,
            "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11587,
            "contract": "contracts/streams/ERC721/presets/ERC721EqualEmissionStream.sol:ERC721EqualEmissionStream",
            "label": "lastClaimedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}