{
  "address": "0x408c8B8A3f656F1Dcf659E1f981Ae7cfc8A87c7c",
  "abi": [
    {
      "inputs": [],
      "name": "ErrSenderIsNotSelf",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatchByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnablePausedUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "existsBatch",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "maxSupplyBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "mintByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "totalSupplyBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf96b591cce16b002cfaee29bc9bae95213081a1b89be8489478f95b131949362",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x408c8B8A3f656F1Dcf659E1f981Ae7cfc8A87c7c",
    "transactionIndex": 3,
    "gasUsed": "2836465",
    "logsBloom": "0x
    "blockHash": "0xe6d1e8fdb245e68892d24757ca2e1e199a90aac2527cf795028cbe2ee8cfbaa1",
    "transactionHash": "0xf96b591cce16b002cfaee29bc9bae95213081a1b89be8489478f95b131949362",
    "logs": [],
    "blockNumber": 11499830,
    "cumulativeGasUsed": "3893412",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "2e62b3179ca41ce77a7e5b730aa039ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrSenderIsNotSelf\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatchByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnablePausedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"existsBatch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"maxSupplyBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"mintByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"totalSupplyBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:provides-interfaces\":\"0xd9b67a26 0x744f4bd4 0x813a0876 0xdc290004 0xff3508c6 0xbb774d48\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"existsBatch(uint256[])\":{\"details\":\"Indicates whether tokens exist given a list of IDs.\"},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"lockByFacet(address,uint256,uint256)\":{\"details\":\"Locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets).\"},\"maxSupply(uint256)\":{\"details\":\"Maximum amount of tokens possible to exist for a given id.\"},\"maxSupplyBatch(uint256[])\":{\"details\":\"Maximum amount of tokens possible to exist for a list of IDs.\"},\"mintByFacet(address,uint256,uint256,bytes)\":{\"details\":\"Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must be diamond itself (other facets).\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"totalSupplyBatch(uint256[])\":{\"details\":\"Total amount of tokens for a list of IDs.\"},\"unlockByFacet(address,uint256,uint256)\":{\"details\":\"Un-locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets).\"}},\"title\":\"ERC1155 - Standard\",\"version\":1},\"userdoc\":{\"errors\":{\"ErrSenderIsNotSelf()\":[{\"notice\":\"The caller must be the current contract itself.\"}]},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"}},\"notice\":\"Standard EIP-1155 NFTs with core capabilities of Mintable, Burnable and Lockable.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/common/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * The caller must be the current contract itself.\\n */\\nerror ErrSenderIsNotSelf();\\n\",\"keccak256\":\"0x64efb13fd5aa2acfa65e986bc45fe64c1871eafe304064f3db9301ff544759cc\",\"license\":\"MIT\"},\"src/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2008fcbb4474e5eaea1b65a7ac7616edba96ea4021940f5f0ecc305dc95eb4b7\",\"license\":\"MIT\"},\"src/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./base/ERC1155Base.sol\\\";\\nimport \\\"./extensions/supply/ERC1155Supply.sol\\\";\\nimport \\\"./extensions/lockable/ERC1155Lockable.sol\\\";\\nimport \\\"./extensions/mintable/ERC1155Mintable.sol\\\";\\nimport \\\"./extensions/burnable/ERC1155Burnable.sol\\\";\\n\\n/**\\n * @title ERC1155 - Standard\\n * @notice Standard EIP-1155 NFTs with core capabilities of Mintable, Burnable and Lockable.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:provides-interfaces 0xd9b67a26 0x744f4bd4 0x813a0876 0xdc290004 0xff3508c6 0xbb774d48\\n */\\ncontract ERC1155 is ERC1155Base, ERC1155Supply, ERC1155Mintable, ERC1155Burnable, ERC1155Lockable {\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155SupplyInternal, ERC1155LockableInternal) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xb0fab48912c2089db3f7b6138b0357f15ecaad0ad3a350aa21f42aeaa69d065f\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC1155Events.sol\\\";\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Events {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf6697ad977d6038c9c58a769d60f03b0623d293ea347a4c0fc9f7842564ddcdc\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Events {\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0x9d40b0d210f02cdf3f59d1fa1fd0143a7e183d39593d338307a1cb324b598838\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4db59f10b814dbf1d09008eda59e1bf169cfa31293eeabe685ceb0309ccb59b9\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../IERC1155.sol\\\";\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"./ERC1155BaseInternal.sol\\\";\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\ncontract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                require(accounts[i] != address(0), \\\"ERC1155: batch balance query for the zero address\\\");\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status) public virtual {\\n        address sender = _msgSender();\\n        require(sender != operator, \\\"ERC1155: setting approval status for self\\\");\\n        ERC1155BaseStorage.layout().operatorApprovals[sender][operator] = status;\\n        emit ApprovalForAll(sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        require(from == sender || isApprovedForAll(from, sender), \\\"ERC1155: caller is not owner nor approved\\\");\\n        _safeTransfer(sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        require(from == sender || isApprovedForAll(from, sender), \\\"ERC1155: caller is not owner nor approved\\\");\\n        _safeTransferBatch(sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xf36537c56fc10947a5bdb9b8749ff3117f8361837f450b78cdf47bbe231c6d2c\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"../IERC1155Events.sol\\\";\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"./ERC1155BaseStorage.sol\\\";\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is Context, IERC1155Events {\\n    using Address for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account, uint256 id) internal view virtual returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        address operator = _msgSender();\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        ERC1155BaseStorage.layout().balances[id][account] += amount;\\n\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(_msgSender(), address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, address(0), account, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            balances[ids[i]][account] += amounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), account, ids, amounts);\\n    }\\n\\n    function _mintBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(accounts.length == amounts.length, \\\"ERC1155: accounts and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            _beforeTokenTransfer(\\n                operator,\\n                address(0),\\n                accounts[i],\\n                _asSingletonArray(ids[i]),\\n                _asSingletonArray(amounts[i]),\\n                datas[i]\\n            );\\n\\n            balances[ids[i]][accounts[i]] += amounts[i];\\n\\n            emit TransferSingle(operator, address(0), accounts[i], ids[i], amounts[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(_msgSender(), address(0), account, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage.layout().balances[id];\\n\\n        unchecked {\\n            require(balances[account] >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, account, address(0), ids, amounts, \\\"\\\");\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                require(balances[id][account] >= amounts[i], \\\"ERC1155: burn amount exceeds balance\\\");\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        require(recipient != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(operator, sender, recipient, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            require(senderBalance >= amount, \\\"ERC1155: insufficient balances for transfer\\\");\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, sender, recipient, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(recipient != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n\\n                require(senderBalance >= amount, \\\"ERC1155: insufficient balances for transfer\\\");\\n\\n                balances[token][sender] = senderBalance - amount;\\n\\n                i++;\\n            }\\n\\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, sender, recipient, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155Received.selector,\\n                    \\\"ERC1155: ERC1155Receiver rejected tokens\\\"\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155BatchReceived.selector,\\n                    \\\"ERC1155: ERC1155Receiver rejected tokens\\\"\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd8a05b45b23f474f38192a61c3b7cba4ec6bd10f9d01f9f7b87976fed625c786\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC1155Base\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60a4436f4730864fd105ea85927ad069db44b305f071b4788fbb6659ee8cecd9\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/burnable/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../IERC1155.sol\\\";\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./IERC1155Burnable.sol\\\";\\nimport \\\"./ERC1155BurnableStorage.sol\\\";\\n\\n/**\\n * @title Extension of {ERC1155} that allows users or approved operators to burn tokens.\\n */\\nabstract contract ERC1155Burnable is IERC1155Burnable, ERC1155BaseInternal {\\n    function burnablePausedUntil() public view override returns (uint256) {\\n        return ERC1155BurnableStorage.layout().pausedUntil;\\n    }\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || IERC1155(address(this)).isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || IERC1155(address(this)).isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    function burnByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _burn(account, id, amount);\\n    }\\n\\n    function burnBatchByFacet(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x09855a49cb2bc2eb0f2f02670b924ecb9dd12607ad828c25b66ccb0ecbcf8ef4\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/burnable/ERC1155BurnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155BurnableStorage {\\n    struct Layout {\\n        uint256 pausedUntil;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Burnable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb89ef67e0dea1c9e9156fbd1c8244bbfe3471e331531076f7fcefb23d5566af2\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/burnable/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows holders or approved operators to burn tokens.\\n */\\ninterface IERC1155Burnable {\\n    function burnablePausedUntil() external view returns (uint256);\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n\\n    function burnByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function burnBatchByFacet(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9a33ca40f57d23f91c3623d810b69f1386f583191755de2690bcb5e3cee911da\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"./ERC1155LockableInternal.sol\\\";\\nimport \\\"./IERC1155Lockable.sol\\\";\\n\\nabstract contract ERC1155Lockable is IERC1155Lockable, ERC1155LockableInternal {\\n    function locked(address account, uint256 tokenId) public view virtual returns (uint256) {\\n        return super._locked(account, tokenId);\\n    }\\n\\n    function locked(address account, uint256[] calldata ticketTokenIds) public view virtual returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            amounts[i] = _locked(account, ticketTokenIds[i]);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Lockable\\n     */\\n    function lockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _lock(account, id, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Lockable\\n     */\\n    function unlockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _unlock(account, id, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x97c2fbce460354a65917fd7feedc43bda9c88b18475e1f20490f1e0829e3c9f2\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155LockableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./ERC1155LockableStorage.sol\\\";\\n\\nabstract contract ERC1155LockableInternal is ERC1155BaseInternal {\\n    using ERC1155LockableStorage for ERC1155LockableStorage.Layout;\\n\\n    function _locked(address account, uint256 tokenId) internal view virtual returns (uint256) {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        return locks[tokenId];\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _lock(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        require(_balanceOf(account, tokenId) - locks[tokenId] >= amount, \\\"NOT_ENOUGH_BALANCE\\\");\\n\\n        locks[tokenId] += amount;\\n    }\\n\\n    function _unlock(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        require(locks[tokenId] >= amount, \\\"NOT_ENOUGH_LOCKED\\\");\\n\\n        locks[tokenId] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        if (from != address(0)) {\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                require(\\n                    _balanceOf(from, ids[i]) - ERC1155LockableStorage.layout().lockedAmount[from][ids[i]] >= amounts[i],\\n                    \\\"LOCKED\\\"\\n                );\\n            }\\n        }\\n\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x403f9579fc545df5be47b6a9c29f34ea5ea388f1f65f990af7e1b446c29c7205\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155LockableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155LockableStorage {\\n    struct Layout {\\n        mapping(address => mapping(uint256 => uint256)) lockedAmount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Lockable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4fbbfaeea2c50b8daf72bad0d2f89c2d6c7b38b4b6f670a78e7b097f0d339e5\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/IERC1155Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to lock the tokens.\\n */\\ninterface IERC1155Lockable {\\n    /**\\n     * @dev Locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function lockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Un-locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function unlockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb467863d85861203a4661fb57b3347a27be9f2d397a144189ead1915cc772e06\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/mintable/ERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./IERC1155Mintable.sol\\\";\\n\\n/**\\n * @title Extension of {ERC1155} that allows other facets of the diamond to mint based on arbitrary logic.\\n */\\nabstract contract ERC1155Mintable is IERC1155Mintable, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155Mintable\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Mintable\\n     */\\n    function mintByFacet(\\n        address[] calldata tos,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _mintBatch(tos, ids, amounts, datas);\\n    }\\n}\\n\",\"keccak256\":\"0x3c970470e281e018c642bca92756fed01cd87671bf79fa723c183cc2b2429616\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/mintable/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC1155Mintable {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintByFacet(\\n        address[] calldata tos,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd96779e40396479877630a8f1ce268e811ae45bd5222221d64e1601f788de188\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./ERC1155SupplyInternal.sol\\\";\\nimport \\\"./IERC1155Supply.sol\\\";\\nimport \\\"./IERC1155SupplyExtra.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is IERC1155Supply, IERC1155SupplyExtra, ERC1155SupplyInternal {\\n    /**\\n     * @inheritdoc IERC1155Supply\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Supply\\n     */\\n    function maxSupply(uint256 id) public view virtual returns (uint256) {\\n        return _maxSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Supply\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return _exists(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155SupplyExtra\\n     */\\n    function totalSupplyBatch(uint256[] calldata ids) public view virtual override returns (uint256[] memory) {\\n        uint256[] memory totalSupplies = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            totalSupplies[i] = _totalSupply(ids[i]);\\n        }\\n        return totalSupplies;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155SupplyExtra\\n     */\\n    function maxSupplyBatch(uint256[] calldata ids) public view virtual override returns (uint256[] memory) {\\n        uint256[] memory maxSupplies = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            maxSupplies[i] = _maxSupply(ids[i]);\\n        }\\n        return maxSupplies;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155SupplyExtra\\n     */\\n    function existsBatch(uint256[] calldata ids) public view virtual override returns (bool[] memory) {\\n        bool[] memory existences = new bool[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            existences[i] = _exists(ids[i]);\\n        }\\n        return existences;\\n    }\\n}\\n\",\"keccak256\":\"0x06f666e60dd454c0aeb77a157e8908b6aab37653d168418d39372357427cd2b1\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./ERC1155SupplyStorage.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyInternal is ERC1155BaseInternal {\\n    using ERC1155SupplyStorage for ERC1155SupplyStorage.Layout;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function _totalSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155SupplyStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function _maxSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155SupplyStorage.layout().maxSupply[id];\\n    }\\n\\n    /**\\n     * @dev Seta maximum amount of tokens possible to exist for a given token ID.\\n     */\\n    function _setMaxSupply(uint256 tokenId, uint256 newValue) internal {\\n        ERC1155SupplyStorage.layout().maxSupply[tokenId] = newValue;\\n    }\\n\\n    /**\\n     * @dev Sets maximum amount of tokens possible to exist for multiple token IDs.\\n     */\\n    function _setMaxSupplyBatch(uint256[] calldata tokenIds, uint256[] calldata newValues) internal {\\n        mapping(uint256 => uint256) storage l = ERC1155SupplyStorage.layout().maxSupply;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            l[tokenIds[i]] = newValues[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function _exists(uint256 id) internal view virtual returns (bool) {\\n        return ERC1155SupplyStorage.layout().totalSupply[id] > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            mapping(uint256 => uint256) storage totalSupply = ERC1155SupplyStorage.layout().totalSupply;\\n            mapping(uint256 => uint256) storage maxSupply = ERC1155SupplyStorage.layout().maxSupply;\\n\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                totalSupply[ids[i]] += amounts[i];\\n\\n                require(totalSupply[ids[i]] <= maxSupply[ids[i]], \\\"SUPPLY_EXCEED_MAX\\\");\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            mapping(uint256 => uint256) storage totalSupply = ERC1155SupplyStorage.layout().totalSupply;\\n\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6d0224b5d77ec8de51990070c65fbd4a5cfe845846d9765c1c8331b6a647dc5\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155SupplyStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => uint256) maxSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Supply\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8d194b171fccce7a314328a4682f65b45154c283d109b4bd7112d52a9f2cd16\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/IERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that tracks supply and defines a max supply cap per token ID.\\n */\\ninterface IERC1155Supply {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Maximum amount of tokens possible to exist for a given id.\\n     */\\n    function maxSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x59ca2ef958902c6a39a1e8aa99009af1943db7eda9d7d39e776af0cb960df699\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/IERC1155SupplyExtra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} to add batch view operations for supply.\\n */\\ninterface IERC1155SupplyExtra {\\n    /**\\n     * @dev Total amount of tokens for a list of IDs.\\n     */\\n    function totalSupplyBatch(uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Maximum amount of tokens possible to exist for a list of IDs.\\n     */\\n    function maxSupplyBatch(uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Indicates whether tokens exist given a list of IDs.\\n     */\\n    function existsBatch(uint256[] calldata ids) external view returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0x6865aa9d319fbdc388efc78d71b365f750f8fde93e6b61948dc1cb305f93b20d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613264806100206000396000f3fe608060405234801561001057600080fd5b506004361061018c5760003560e01c806377954ac2116100e3578063b164884b1161008c578063e985e9c511610066578063e985e9c514610360578063f242432a146103bb578063f5298aca146103ce57600080fd5b8063b164884b14610327578063bd85b0391461033a578063bf7bab731461034d57600080fd5b8063a22cb465116100bd578063a22cb465146102ee578063a47fe40f14610301578063a91a988a1461031457600080fd5b806377954ac2146102b5578063869f7594146102c8578063983da156146102db57600080fd5b806348f2f5361161014557806352d0a6bb1161011f57806352d0a6bb1461026f5780636708a9901461028f5780636b20c454146102a257600080fd5b806348f2f536146102195780634e1273f41461022c5780634f558e791461024c57600080fd5b80630ad2bbac116101765780630ad2bbac146101cc57806314e35aa4146101df5780632eb2c2d61461020657600080fd5b8062fdd58e146101915780630a13c503146101b7575b600080fd5b6101a461019f366004612763565b6103e1565b6040519081526020015b60405180910390f35b6101ca6101c53660046127d9565b6103f4565b005b6101ca6101da36600461289d565b61042e565b7f20cb9ad5a22f74f90c7fecbece6b6ab3beb2a63812efb8693c5ff39f2b73ee0f546101a4565b6101ca6102143660046129f6565b610462565b6101ca610227366004612afa565b610537565b61023f61023a366004612b2d565b610567565b6040516101ae9190612c33565b61025f61025a366004612c46565b61078e565b60405190151581526020016101ae565b61028261027d366004612c5f565b6107c5565b6040516101ae9190612ca1565b6101ca61029d366004612afa565b6108a4565b6101ca6102b036600461289d565b6108cf565b61023f6102c3366004612c5f565b6109b6565b6101a46102d6366004612c46565b610a86565b6101ca6102e9366004612afa565b610ab9565b6101ca6102fc366004612cf8565b610ae4565b61023f61030f366004612c5f565b610bf0565b61023f610322366004612d2f565b610cc0565b6101ca610335366004612dc4565b610da7565b6101a4610348366004612c46565b610dd4565b6101a461035b366004612763565b610e07565b61025f61036e366004612e1b565b6001600160a01b0391821660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832093909416825291909152205460ff1690565b6101ca6103c9366004612e4e565b610e4f565b6101ca6103dc366004612afa565b610f21565b60006103ed8383611008565b9392505050565b3033146104145760405163fd570b5160e01b815260040160405180910390fd5b61042488888888888888886110cd565b5050505050505050565b30331461044e5760405163fd570b5160e01b815260040160405180910390fd5b61045b85858585856113fd565b5050505050565b336001600160a01b0386168114806104be57506001600160a01b0380871660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b6105215760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084015b60405180910390fd5b61052f8187878787876116e6565b505050505050565b3033146105575760405163fd570b5160e01b815260040160405180910390fd5b610562838383611702565b505050565b606081518351146105e05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610518565b82517ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a79060009067ffffffffffffffff81111561061f5761061f61291e565b604051908082528060200260200182016040528015610648578160200160208202803683370190505b50905060005b85518110156107855760006001600160a01b031686828151811061067457610674612ec6565b60200260200101516001600160a01b0316036106f85760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527f20746865207a65726f20616464726573730000000000000000000000000000006064820152608401610518565b82600086838151811061070d5761070d612ec6565b60200260200101518152602001908152602001600020600087838151811061073757610737612ec6565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061077257610772612ec6565b602090810291909101015260010161064e565b50949350505050565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604081205415155b92915050565b606060008267ffffffffffffffff8111156107e2576107e261291e565b60405190808252806020026020018201604052801561080b578160200160208202803683370190505b50905060005b8381101561089c5761086885858381811061082e5761082e612ec6565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea56020526040902054151590565b82828151811061087a5761087a612ec6565b911515602092830291909101909101528061089481612ef2565b915050610811565b509392505050565b3033146108c45760405163fd570b5160e01b815260040160405180910390fd5b610562838383611895565b6001600160a01b03851633148061095857503063e985e9c586336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190612f0b565b61044e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610518565b606060008267ffffffffffffffff8111156109d3576109d361291e565b6040519080825280602002602001820160405280156109fc578160200160208202803683370190505b50905060005b8381101561089c57610a57858583818110610a1f57610a1f612ec6565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604090205490565b828281518110610a6957610a69612ec6565b602090810291909101015280610a7e81612ef2565b915050610a02565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea660205260408120546107bf565b303314610ad95760405163fd570b5160e01b815260040160405180910390fd5b610562838383611952565b336001600160a01b0383168103610b635760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610518565b6001600160a01b0381811660008181527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832094881680845294825291829020805460ff1916871515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b606060008267ffffffffffffffff811115610c0d57610c0d61291e565b604051908082528060200260200182016040528015610c36578160200160208202803683370190505b50905060005b8381101561089c57610c91858583818110610c5957610c59612ec6565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea6602052604090205490565b828281518110610ca357610ca3612ec6565b602090810291909101015280610cb881612ef2565b915050610c3c565b606060008267ffffffffffffffff811115610cdd57610cdd61291e565b604051908082528060200260200182016040528015610d06578160200160208202803683370190505b50905060005b8381101561078557610d7886868684818110610d2a57610d2a612ec6565b905060200201356001600160a01b039190911660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320938352929052205490565b828281518110610d8a57610d8a612ec6565b602090810291909101015280610d9f81612ef2565b915050610d0c565b303314610dc75760405163fd570b5160e01b815260040160405180910390fd5b61045b8585858585611a19565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea560205260408120546107bf565b6001600160a01b03821660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b287527820602090815260408083208484529091528120546103ed565b336001600160a01b038716811480610eab57506001600160a01b0380881660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b610f095760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610518565b610f1881888888888888611b95565b50505050505050565b6001600160a01b038316331480610faa57503063e985e9c584336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faa9190612f0b565b6105575760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610518565b60006001600160a01b0383166110865760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f20616464726573730000000000000000000000000000000000000000006064820152608401610518565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a76000928352602090815260408084206001600160a01b0395909516845293905250205490565b84831461112d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610518565b8683146111a25760405162461bcd60e51b815260206004820152602d60248201527f455243313135353a206163636f756e747320616e6420616d6f756e7473206c6560448201527f6e677468206d69736d61746368000000000000000000000000000000000000006064820152608401610518565b337ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b878110156113f0576112908360008d8d858181106111e7576111e7612ec6565b90506020020160208101906111fc9190612f28565b61121d8d8d8781811061121157611211612ec6565b90506020020135611be8565b6112328c8c8881811061121157611211612ec6565b8a8a8881811061124457611244612ec6565b90506020028101906112569190612f43565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c3392505050565b8686828181106112a2576112a2612ec6565b905060200201358260008b8b858181106112be576112be612ec6565b90506020020135815260200190815260200160002060008d8d858181106112e7576112e7612ec6565b90506020020160208101906112fc9190612f28565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461132b9190612f8a565b909155508b90508a8281811061134357611343612ec6565b90506020020160208101906113589190612f28565b6001600160a01b031660006001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628c8c868181106113a9576113a9612ec6565b905060200201358b8b878181106113c2576113c2612ec6565b905060200201356040516113e0929190918252602082015260400190565b60405180910390a46001016111c7565b5050505050505050505050565b6001600160a01b03851661145f5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610518565b8281146114bf5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610518565b60003390506115438187600088888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092018290525060408051602081019091529081529250611c33915050565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b8581101561168057600087878381811061158357611583612ec6565b90506020020135905085858381811061159e5761159e612ec6565b9050602002013583600083815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000205410156116355760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610518565b85858381811061164757611647612ec6565b6000938452602086815260408086206001600160a01b038f16875282529094208054949091029290920135909203905550600101611567565b5060006001600160a01b0316876001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040516116d59493929190612ff1565b60405180910390a450505050505050565b6116f4868686868686611c41565b61052f868686868686611ebd565b6001600160a01b0383166117645760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610518565b336117938185600061177587611be8565b61177e87611be8565b60405180602001604052806000815250611c33565b60008381527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038816845291829052909120548311156118325760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610518565b6001600160a01b0385811660008181526020848152604080832080548990039055805189815291820188905291938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b2875278206020908152604080832085845291829052909120548211156119295760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f4c4f434b45440000000000000000000000000000006044820152606401610518565b60008381526020829052604081208054849290611947908490613023565b909155505050505050565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320858452918290529091205482906119a38686611008565b6119ad9190613023565b10156119fb5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f454e4f5547485f42414c414e434500000000000000000000000000006044820152606401610518565b60008381526020829052604081208054849290611947908490612f8a565b336001600160a01b038616611a965760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610518565b611aeb81600088611aa689611be8565b611aaf89611be8565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c3392505050565b60008581527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038a16845290915281208054869290611b3c908490612f8a565b909155505060408051868152602081018690526001600160a01b0380891692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050505050565b611ba487878787878787612062565b610f18878787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061226e92505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611c2257611c22612ec6565b602090810291909101015292915050565b61052f86868686868661236a565b6001600160a01b038416611ca55760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610518565b8151835114611d075760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610518565b611d15868686868686611c33565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b8451811015611e6d576000858281518110611d5657611d56612ec6565b602002602001015190506000858381518110611d7457611d74612ec6565b602090810291909101810151600084815286835260408082206001600160a01b038e168352909352919091205490915081811015611e1a5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e736665720000000000000000000000000000000000000000006064820152608401610518565b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a168152908120805460019590950194839290611e60908490612f8a565b90915550611d3992505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516116d592919061303a565b6001600160a01b0384163b1561052f5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611f0190899089908890889088906004016130b5565b6020604051808303816000875af1925050508015611f3c575060408051601f3d908101601f19168201909252611f3991810190613113565b60015b611ff157611f4861313d565b806308c379a003611f815750611f5c613159565b80611f675750611f83565b8060405162461bcd60e51b815260040161051891906131e3565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610518565b6001600160e01b0319811663bc197c8160e01b14610f185760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610518565b6001600160a01b0385166120c65760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610518565b61211a8787876120d588611be8565b6120de88611be8565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c3392505050565b60008481527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602081815260408084206001600160a01b038b16855290915290912054848110156121d35760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e736665720000000000000000000000000000000000000000006064820152608401610518565b6000868152602083815260408083206001600160a01b038c81168552925280832093889003909355881681529081208054869290612212908490612f8a565b909155505060408051868152602081018690526001600160a01b03808916928a821692918c16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050565b6001600160a01b0384163b1561052f5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906122b290899089908890889088906004016131f6565b6020604051808303816000875af19250505080156122ed575060408051601f3d908101601f191682019092526122ea91810190613113565b60015b6122f957611f4861313d565b6001600160e01b0319811663f23a6e6160e01b14610f185760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610518565b6001600160a01b038516156124a65760005b83518110156124a45782818151811061239757612397612ec6565b60200260200101516123c67f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782090565b6000016000886001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061240057612400612ec6565b602002602001015181526020019081526020016000205461243a8887858151811061242d5761242d612ec6565b6020026020010151611008565b6124449190613023565b10156124925760405162461bcd60e51b815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610518565b8061249c81612ef2565b91505061237c565b505b61052f8686868686866001600160a01b038516612620577f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea57f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea660005b855181101561261c5784818151811061251d5761251d612ec6565b602002602001015183600088848151811061253a5761253a612ec6565b60200260200101518152602001908152602001600020600082825461255f9190612f8a565b9250508190555081600087838151811061257b5761257b612ec6565b60200260200101518152602001908152602001600020548360008884815181106125a7576125a7612ec6565b6020026020010151815260200190815260200160002054111561260c5760405162461bcd60e51b815260206004820152601160248201527f535550504c595f4558434545445f4d41580000000000000000000000000000006044820152606401610518565b61261581612ef2565b9050612502565b5050505b6001600160a01b03841661052f577f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea560005b845181101561042457600085828151811061266f5761266f612ec6565b60200260200101519050600085838151811061268d5761268d612ec6565b602002602001015190506000846000848152602001908152602001600020549050818110156127245760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610518565b6000928352602085905260409092209103905561274081612ef2565b9050612652565b80356001600160a01b038116811461275e57600080fd5b919050565b6000806040838503121561277657600080fd5b61277f83612747565b946020939093013593505050565b60008083601f84011261279f57600080fd5b50813567ffffffffffffffff8111156127b757600080fd5b6020830191508360208260051b85010111156127d257600080fd5b9250929050565b6000806000806000806000806080898b0312156127f557600080fd5b883567ffffffffffffffff8082111561280d57600080fd5b6128198c838d0161278d565b909a50985060208b013591508082111561283257600080fd5b61283e8c838d0161278d565b909850965060408b013591508082111561285757600080fd5b6128638c838d0161278d565b909650945060608b013591508082111561287c57600080fd5b506128898b828c0161278d565b999c989b5096995094979396929594505050565b6000806000806000606086880312156128b557600080fd5b6128be86612747565b9450602086013567ffffffffffffffff808211156128db57600080fd5b6128e789838a0161278d565b9096509450604088013591508082111561290057600080fd5b5061290d8882890161278d565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561295a5761295a61291e565b6040525050565b600067ffffffffffffffff82111561297b5761297b61291e565b5060051b60200190565b600082601f83011261299657600080fd5b813560206129a382612961565b6040516129b08282612934565b83815260059390931b85018201928281019150868411156129d057600080fd5b8286015b848110156129eb57803583529183019183016129d4565b509695505050505050565b600080600080600060a08688031215612a0e57600080fd5b612a1786612747565b94506020612a26818801612747565b9450604087013567ffffffffffffffff80821115612a4357600080fd5b612a4f8a838b01612985565b95506060890135915080821115612a6557600080fd5b612a718a838b01612985565b94506080890135915080821115612a8757600080fd5b818901915089601f830112612a9b57600080fd5b813581811115612aad57612aad61291e565b6040519150612ac5601f8201601f1916850183612934565b8082528a84828501011115612ad957600080fd5b80848401858401376000848284010152508093505050509295509295909350565b600080600060608486031215612b0f57600080fd5b612b1884612747565b95602085013595506040909401359392505050565b60008060408385031215612b4057600080fd5b823567ffffffffffffffff80821115612b5857600080fd5b818501915085601f830112612b6c57600080fd5b81356020612b7982612961565b604051612b868282612934565b83815260059390931b8501820192828101915089841115612ba657600080fd5b948201945b83861015612bcb57612bbc86612747565b82529482019490820190612bab565b96505086013592505080821115612be157600080fd5b50612bee85828601612985565b9150509250929050565b600081518084526020808501945080840160005b83811015612c2857815187529582019590820190600101612c0c565b509495945050505050565b6020815260006103ed6020830184612bf8565b600060208284031215612c5857600080fd5b5035919050565b60008060208385031215612c7257600080fd5b823567ffffffffffffffff811115612c8957600080fd5b612c958582860161278d565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015612cdb578351151583529284019291840191600101612cbd565b50909695505050505050565b8015158114612cf557600080fd5b50565b60008060408385031215612d0b57600080fd5b612d1483612747565b91506020830135612d2481612ce7565b809150509250929050565b600080600060408486031215612d4457600080fd5b612d4d84612747565b9250602084013567ffffffffffffffff811115612d6957600080fd5b612d758682870161278d565b9497909650939450505050565b60008083601f840112612d9457600080fd5b50813567ffffffffffffffff811115612dac57600080fd5b6020830191508360208285010111156127d257600080fd5b600080600080600060808688031215612ddc57600080fd5b612de586612747565b94506020860135935060408601359250606086013567ffffffffffffffff811115612e0f57600080fd5b61290d88828901612d82565b60008060408385031215612e2e57600080fd5b612e3783612747565b9150612e4560208401612747565b90509250929050565b60008060008060008060a08789031215612e6757600080fd5b612e7087612747565b9550612e7e60208801612747565b94506040870135935060608701359250608087013567ffffffffffffffff811115612ea857600080fd5b612eb489828a01612d82565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612f0457612f04612edc565b5060010190565b600060208284031215612f1d57600080fd5b81516103ed81612ce7565b600060208284031215612f3a57600080fd5b6103ed82612747565b6000808335601e19843603018112612f5a57600080fd5b83018035915067ffffffffffffffff821115612f7557600080fd5b6020019150368190038213156127d257600080fd5b60008219821115612f9d57612f9d612edc565b500190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612fd457600080fd5b8260051b8083602087013760009401602001938452509192915050565b604081526000613005604083018688612fa2565b8281036020840152613018818587612fa2565b979650505050505050565b60008282101561303557613035612edc565b500390565b60408152600061304d6040830185612bf8565b828103602084015261305f8185612bf8565b95945050505050565b6000815180845260005b8181101561308e57602081850181015186830182015201613072565b818111156130a0576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a060408301526130e160a0830186612bf8565b82810360608401526130f38186612bf8565b905082810360808401526131078185613068565b98975050505050505050565b60006020828403121561312557600080fd5b81516001600160e01b0319811681146103ed57600080fd5b600060033d11156131565760046000803e5060005160e01c5b90565b600060443d10156131675790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561319757505050505090565b82850191508151818111156131af5750505050505090565b843d87010160208285010111156131c95750505050505090565b6131d860208286010187612934565b509095945050505050565b6020815260006103ed6020830184613068565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261301860a083018461306856fea2646970667358221220375187facb3d193693b81e23b0b578746c95f157d6c581ead780ca73be9cc66964736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018c5760003560e01c806377954ac2116100e3578063b164884b1161008c578063e985e9c511610066578063e985e9c514610360578063f242432a146103bb578063f5298aca146103ce57600080fd5b8063b164884b14610327578063bd85b0391461033a578063bf7bab731461034d57600080fd5b8063a22cb465116100bd578063a22cb465146102ee578063a47fe40f14610301578063a91a988a1461031457600080fd5b806377954ac2146102b5578063869f7594146102c8578063983da156146102db57600080fd5b806348f2f5361161014557806352d0a6bb1161011f57806352d0a6bb1461026f5780636708a9901461028f5780636b20c454146102a257600080fd5b806348f2f536146102195780634e1273f41461022c5780634f558e791461024c57600080fd5b80630ad2bbac116101765780630ad2bbac146101cc57806314e35aa4146101df5780632eb2c2d61461020657600080fd5b8062fdd58e146101915780630a13c503146101b7575b600080fd5b6101a461019f366004612763565b6103e1565b6040519081526020015b60405180910390f35b6101ca6101c53660046127d9565b6103f4565b005b6101ca6101da36600461289d565b61042e565b7f20cb9ad5a22f74f90c7fecbece6b6ab3beb2a63812efb8693c5ff39f2b73ee0f546101a4565b6101ca6102143660046129f6565b610462565b6101ca610227366004612afa565b610537565b61023f61023a366004612b2d565b610567565b6040516101ae9190612c33565b61025f61025a366004612c46565b61078e565b60405190151581526020016101ae565b61028261027d366004612c5f565b6107c5565b6040516101ae9190612ca1565b6101ca61029d366004612afa565b6108a4565b6101ca6102b036600461289d565b6108cf565b61023f6102c3366004612c5f565b6109b6565b6101a46102d6366004612c46565b610a86565b6101ca6102e9366004612afa565b610ab9565b6101ca6102fc366004612cf8565b610ae4565b61023f61030f366004612c5f565b610bf0565b61023f610322366004612d2f565b610cc0565b6101ca610335366004612dc4565b610da7565b6101a4610348366004612c46565b610dd4565b6101a461035b366004612763565b610e07565b61025f61036e366004612e1b565b6001600160a01b0391821660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832093909416825291909152205460ff1690565b6101ca6103c9366004612e4e565b610e4f565b6101ca6103dc366004612afa565b610f21565b60006103ed8383611008565b9392505050565b3033146104145760405163fd570b5160e01b815260040160405180910390fd5b61042488888888888888886110cd565b5050505050505050565b30331461044e5760405163fd570b5160e01b815260040160405180910390fd5b61045b85858585856113fd565b5050505050565b336001600160a01b0386168114806104be57506001600160a01b0380871660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b6105215760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084015b60405180910390fd5b61052f8187878787876116e6565b505050505050565b3033146105575760405163fd570b5160e01b815260040160405180910390fd5b610562838383611702565b505050565b606081518351146105e05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610518565b82517ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a79060009067ffffffffffffffff81111561061f5761061f61291e565b604051908082528060200260200182016040528015610648578160200160208202803683370190505b50905060005b85518110156107855760006001600160a01b031686828151811061067457610674612ec6565b60200260200101516001600160a01b0316036106f85760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527f20746865207a65726f20616464726573730000000000000000000000000000006064820152608401610518565b82600086838151811061070d5761070d612ec6565b60200260200101518152602001908152602001600020600087838151811061073757610737612ec6565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061077257610772612ec6565b602090810291909101015260010161064e565b50949350505050565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604081205415155b92915050565b606060008267ffffffffffffffff8111156107e2576107e261291e565b60405190808252806020026020018201604052801561080b578160200160208202803683370190505b50905060005b8381101561089c5761086885858381811061082e5761082e612ec6565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea56020526040902054151590565b82828151811061087a5761087a612ec6565b911515602092830291909101909101528061089481612ef2565b915050610811565b509392505050565b3033146108c45760405163fd570b5160e01b815260040160405180910390fd5b610562838383611895565b6001600160a01b03851633148061095857503063e985e9c586336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190612f0b565b61044e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610518565b606060008267ffffffffffffffff8111156109d3576109d361291e565b6040519080825280602002602001820160405280156109fc578160200160208202803683370190505b50905060005b8381101561089c57610a57858583818110610a1f57610a1f612ec6565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604090205490565b828281518110610a6957610a69612ec6565b602090810291909101015280610a7e81612ef2565b915050610a02565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea660205260408120546107bf565b303314610ad95760405163fd570b5160e01b815260040160405180910390fd5b610562838383611952565b336001600160a01b0383168103610b635760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610518565b6001600160a01b0381811660008181527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832094881680845294825291829020805460ff1916871515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b606060008267ffffffffffffffff811115610c0d57610c0d61291e565b604051908082528060200260200182016040528015610c36578160200160208202803683370190505b50905060005b8381101561089c57610c91858583818110610c5957610c59612ec6565b9050602002013560009081527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea6602052604090205490565b828281518110610ca357610ca3612ec6565b602090810291909101015280610cb881612ef2565b915050610c3c565b606060008267ffffffffffffffff811115610cdd57610cdd61291e565b604051908082528060200260200182016040528015610d06578160200160208202803683370190505b50905060005b8381101561078557610d7886868684818110610d2a57610d2a612ec6565b905060200201356001600160a01b039190911660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320938352929052205490565b828281518110610d8a57610d8a612ec6565b602090810291909101015280610d9f81612ef2565b915050610d0c565b303314610dc75760405163fd570b5160e01b815260040160405180910390fd5b61045b8585858585611a19565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea560205260408120546107bf565b6001600160a01b03821660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b287527820602090815260408083208484529091528120546103ed565b336001600160a01b038716811480610eab57506001600160a01b0380881660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b610f095760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610518565b610f1881888888888888611b95565b50505050505050565b6001600160a01b038316331480610faa57503063e985e9c584336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610f86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610faa9190612f0b565b6105575760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610518565b60006001600160a01b0383166110865760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f20616464726573730000000000000000000000000000000000000000006064820152608401610518565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a76000928352602090815260408084206001600160a01b0395909516845293905250205490565b84831461112d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610518565b8683146111a25760405162461bcd60e51b815260206004820152602d60248201527f455243313135353a206163636f756e747320616e6420616d6f756e7473206c6560448201527f6e677468206d69736d61746368000000000000000000000000000000000000006064820152608401610518565b337ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b878110156113f0576112908360008d8d858181106111e7576111e7612ec6565b90506020020160208101906111fc9190612f28565b61121d8d8d8781811061121157611211612ec6565b90506020020135611be8565b6112328c8c8881811061121157611211612ec6565b8a8a8881811061124457611244612ec6565b90506020028101906112569190612f43565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c3392505050565b8686828181106112a2576112a2612ec6565b905060200201358260008b8b858181106112be576112be612ec6565b90506020020135815260200190815260200160002060008d8d858181106112e7576112e7612ec6565b90506020020160208101906112fc9190612f28565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461132b9190612f8a565b909155508b90508a8281811061134357611343612ec6565b90506020020160208101906113589190612f28565b6001600160a01b031660006001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628c8c868181106113a9576113a9612ec6565b905060200201358b8b878181106113c2576113c2612ec6565b905060200201356040516113e0929190918252602082015260400190565b60405180910390a46001016111c7565b5050505050505050505050565b6001600160a01b03851661145f5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610518565b8281146114bf5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610518565b60003390506115438187600088888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092018290525060408051602081019091529081529250611c33915050565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b8581101561168057600087878381811061158357611583612ec6565b90506020020135905085858381811061159e5761159e612ec6565b9050602002013583600083815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000205410156116355760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610518565b85858381811061164757611647612ec6565b6000938452602086815260408086206001600160a01b038f16875282529094208054949091029290920135909203905550600101611567565b5060006001600160a01b0316876001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040516116d59493929190612ff1565b60405180910390a450505050505050565b6116f4868686868686611c41565b61052f868686868686611ebd565b6001600160a01b0383166117645760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610518565b336117938185600061177587611be8565b61177e87611be8565b60405180602001604052806000815250611c33565b60008381527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038816845291829052909120548311156118325760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610518565b6001600160a01b0385811660008181526020848152604080832080548990039055805189815291820188905291938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b2875278206020908152604080832085845291829052909120548211156119295760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f4c4f434b45440000000000000000000000000000006044820152606401610518565b60008381526020829052604081208054849290611947908490613023565b909155505050505050565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320858452918290529091205482906119a38686611008565b6119ad9190613023565b10156119fb5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f454e4f5547485f42414c414e434500000000000000000000000000006044820152606401610518565b60008381526020829052604081208054849290611947908490612f8a565b336001600160a01b038616611a965760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610518565b611aeb81600088611aa689611be8565b611aaf89611be8565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c3392505050565b60008581527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038a16845290915281208054869290611b3c908490612f8a565b909155505060408051868152602081018690526001600160a01b0380891692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050505050565b611ba487878787878787612062565b610f18878787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061226e92505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611c2257611c22612ec6565b602090810291909101015292915050565b61052f86868686868661236a565b6001600160a01b038416611ca55760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610518565b8151835114611d075760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610518565b611d15868686868686611c33565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b8451811015611e6d576000858281518110611d5657611d56612ec6565b602002602001015190506000858381518110611d7457611d74612ec6565b602090810291909101810151600084815286835260408082206001600160a01b038e168352909352919091205490915081811015611e1a5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e736665720000000000000000000000000000000000000000006064820152608401610518565b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a168152908120805460019590950194839290611e60908490612f8a565b90915550611d3992505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516116d592919061303a565b6001600160a01b0384163b1561052f5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611f0190899089908890889088906004016130b5565b6020604051808303816000875af1925050508015611f3c575060408051601f3d908101601f19168201909252611f3991810190613113565b60015b611ff157611f4861313d565b806308c379a003611f815750611f5c613159565b80611f675750611f83565b8060405162461bcd60e51b815260040161051891906131e3565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610518565b6001600160e01b0319811663bc197c8160e01b14610f185760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610518565b6001600160a01b0385166120c65760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610518565b61211a8787876120d588611be8565b6120de88611be8565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c3392505050565b60008481527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602081815260408084206001600160a01b038b16855290915290912054848110156121d35760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e736665720000000000000000000000000000000000000000006064820152608401610518565b6000868152602083815260408083206001600160a01b038c81168552925280832093889003909355881681529081208054869290612212908490612f8a565b909155505060408051868152602081018690526001600160a01b03808916928a821692918c16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050565b6001600160a01b0384163b1561052f5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906122b290899089908890889088906004016131f6565b6020604051808303816000875af19250505080156122ed575060408051601f3d908101601f191682019092526122ea91810190613113565b60015b6122f957611f4861313d565b6001600160e01b0319811663f23a6e6160e01b14610f185760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610518565b6001600160a01b038516156124a65760005b83518110156124a45782818151811061239757612397612ec6565b60200260200101516123c67f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782090565b6000016000886001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061240057612400612ec6565b602002602001015181526020019081526020016000205461243a8887858151811061242d5761242d612ec6565b6020026020010151611008565b6124449190613023565b10156124925760405162461bcd60e51b815260206004820152600660248201527f4c4f434b454400000000000000000000000000000000000000000000000000006044820152606401610518565b8061249c81612ef2565b91505061237c565b505b61052f8686868686866001600160a01b038516612620577f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea57f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea660005b855181101561261c5784818151811061251d5761251d612ec6565b602002602001015183600088848151811061253a5761253a612ec6565b60200260200101518152602001908152602001600020600082825461255f9190612f8a565b9250508190555081600087838151811061257b5761257b612ec6565b60200260200101518152602001908152602001600020548360008884815181106125a7576125a7612ec6565b6020026020010151815260200190815260200160002054111561260c5760405162461bcd60e51b815260206004820152601160248201527f535550504c595f4558434545445f4d41580000000000000000000000000000006044820152606401610518565b61261581612ef2565b9050612502565b5050505b6001600160a01b03841661052f577f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea560005b845181101561042457600085828151811061266f5761266f612ec6565b60200260200101519050600085838151811061268d5761268d612ec6565b602002602001015190506000846000848152602001908152602001600020549050818110156127245760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610518565b6000928352602085905260409092209103905561274081612ef2565b9050612652565b80356001600160a01b038116811461275e57600080fd5b919050565b6000806040838503121561277657600080fd5b61277f83612747565b946020939093013593505050565b60008083601f84011261279f57600080fd5b50813567ffffffffffffffff8111156127b757600080fd5b6020830191508360208260051b85010111156127d257600080fd5b9250929050565b6000806000806000806000806080898b0312156127f557600080fd5b883567ffffffffffffffff8082111561280d57600080fd5b6128198c838d0161278d565b909a50985060208b013591508082111561283257600080fd5b61283e8c838d0161278d565b909850965060408b013591508082111561285757600080fd5b6128638c838d0161278d565b909650945060608b013591508082111561287c57600080fd5b506128898b828c0161278d565b999c989b5096995094979396929594505050565b6000806000806000606086880312156128b557600080fd5b6128be86612747565b9450602086013567ffffffffffffffff808211156128db57600080fd5b6128e789838a0161278d565b9096509450604088013591508082111561290057600080fd5b5061290d8882890161278d565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561295a5761295a61291e565b6040525050565b600067ffffffffffffffff82111561297b5761297b61291e565b5060051b60200190565b600082601f83011261299657600080fd5b813560206129a382612961565b6040516129b08282612934565b83815260059390931b85018201928281019150868411156129d057600080fd5b8286015b848110156129eb57803583529183019183016129d4565b509695505050505050565b600080600080600060a08688031215612a0e57600080fd5b612a1786612747565b94506020612a26818801612747565b9450604087013567ffffffffffffffff80821115612a4357600080fd5b612a4f8a838b01612985565b95506060890135915080821115612a6557600080fd5b612a718a838b01612985565b94506080890135915080821115612a8757600080fd5b818901915089601f830112612a9b57600080fd5b813581811115612aad57612aad61291e565b6040519150612ac5601f8201601f1916850183612934565b8082528a84828501011115612ad957600080fd5b80848401858401376000848284010152508093505050509295509295909350565b600080600060608486031215612b0f57600080fd5b612b1884612747565b95602085013595506040909401359392505050565b60008060408385031215612b4057600080fd5b823567ffffffffffffffff80821115612b5857600080fd5b818501915085601f830112612b6c57600080fd5b81356020612b7982612961565b604051612b868282612934565b83815260059390931b8501820192828101915089841115612ba657600080fd5b948201945b83861015612bcb57612bbc86612747565b82529482019490820190612bab565b96505086013592505080821115612be157600080fd5b50612bee85828601612985565b9150509250929050565b600081518084526020808501945080840160005b83811015612c2857815187529582019590820190600101612c0c565b509495945050505050565b6020815260006103ed6020830184612bf8565b600060208284031215612c5857600080fd5b5035919050565b60008060208385031215612c7257600080fd5b823567ffffffffffffffff811115612c8957600080fd5b612c958582860161278d565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015612cdb578351151583529284019291840191600101612cbd565b50909695505050505050565b8015158114612cf557600080fd5b50565b60008060408385031215612d0b57600080fd5b612d1483612747565b91506020830135612d2481612ce7565b809150509250929050565b600080600060408486031215612d4457600080fd5b612d4d84612747565b9250602084013567ffffffffffffffff811115612d6957600080fd5b612d758682870161278d565b9497909650939450505050565b60008083601f840112612d9457600080fd5b50813567ffffffffffffffff811115612dac57600080fd5b6020830191508360208285010111156127d257600080fd5b600080600080600060808688031215612ddc57600080fd5b612de586612747565b94506020860135935060408601359250606086013567ffffffffffffffff811115612e0f57600080fd5b61290d88828901612d82565b60008060408385031215612e2e57600080fd5b612e3783612747565b9150612e4560208401612747565b90509250929050565b60008060008060008060a08789031215612e6757600080fd5b612e7087612747565b9550612e7e60208801612747565b94506040870135935060608701359250608087013567ffffffffffffffff811115612ea857600080fd5b612eb489828a01612d82565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612f0457612f04612edc565b5060010190565b600060208284031215612f1d57600080fd5b81516103ed81612ce7565b600060208284031215612f3a57600080fd5b6103ed82612747565b6000808335601e19843603018112612f5a57600080fd5b83018035915067ffffffffffffffff821115612f7557600080fd5b6020019150368190038213156127d257600080fd5b60008219821115612f9d57612f9d612edc565b500190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612fd457600080fd5b8260051b8083602087013760009401602001938452509192915050565b604081526000613005604083018688612fa2565b8281036020840152613018818587612fa2565b979650505050505050565b60008282101561303557613035612edc565b500390565b60408152600061304d6040830185612bf8565b828103602084015261305f8185612bf8565b95945050505050565b6000815180845260005b8181101561308e57602081850181015186830182015201613072565b818111156130a0576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a060408301526130e160a0830186612bf8565b82810360608401526130f38186612bf8565b905082810360808401526131078185613068565b98975050505050505050565b60006020828403121561312557600080fd5b81516001600160e01b0319811681146103ed57600080fd5b600060033d11156131565760046000803e5060005160e01c5b90565b600060443d10156131675790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561319757505050505090565b82850191508151818111156131af5750505050505090565b843d87010160208285010111156131c95750505050505090565b6131d860208286010187612934565b509095945050505050565b6020815260006103ed6020830184613068565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261301860a083018461306856fea2646970667358221220375187facb3d193693b81e23b0b578746c95f157d6c581ead780ca73be9cc66964736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:provides-interfaces": "0xd9b67a26 0x744f4bd4 0x813a0876 0xdc290004 0xff3508c6 0xbb774d48",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "existsBatch(uint256[])": {
        "details": "Indicates whether tokens exist given a list of IDs."
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "lockByFacet(address,uint256,uint256)": {
        "details": "Locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets)."
      },
      "maxSupply(uint256)": {
        "details": "Maximum amount of tokens possible to exist for a given id."
      },
      "maxSupplyBatch(uint256[])": {
        "details": "Maximum amount of tokens possible to exist for a list of IDs."
      },
      "mintByFacet(address,uint256,uint256,bytes)": {
        "details": "Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must be diamond itself (other facets)."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "totalSupplyBatch(uint256[])": {
        "details": "Total amount of tokens for a list of IDs."
      },
      "unlockByFacet(address,uint256,uint256)": {
        "details": "Un-locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets)."
      }
    },
    "title": "ERC1155 - Standard",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ErrSenderIsNotSelf()": [
        {
          "notice": "The caller must be the current contract itself."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      }
    },
    "notice": "Standard EIP-1155 NFTs with core capabilities of Mintable, Burnable and Lockable.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}