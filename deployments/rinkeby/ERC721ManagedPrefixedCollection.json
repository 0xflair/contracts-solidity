{
  "address": "0xE47C6dC8ccA497a2a9E3baa6A8aE56d24Bd5A168",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contractURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "placeholderURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenURIPrefix",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "initialHolders",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "initialAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "defaultRoyaltyAddress",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "defaultRoyaltyBps",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "trustedForwarder",
              "type": "address"
            }
          ],
          "internalType": "struct ERC721ManagedPrefixedCollection.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRoyaltyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "TokenRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultRoyalty",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_senderBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRaribleV2Royalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenRoyaltiesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTokenRoyaltyByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contractURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "placeholderURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenURIPrefix",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "initialHolders",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "initialAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "defaultRoyaltyAddress",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "defaultRoyaltyBps",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "trustedForwarder",
              "type": "address"
            }
          ],
          "internalType": "struct ERC721ManagedPrefixedCollection.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementPowerRevoked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mintByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "placeholderURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeManagementPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IEIP2981RoyaltyOverride.TokenRoyalty",
          "name": "royalty",
          "type": "tuple"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "setPlaceholderURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig[]",
          "name": "royaltyConfigs",
          "type": "tuple[]"
        }
      ],
      "name": "setTokenRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "setTokenURIPrefix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "setTokenURISuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURIFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURIPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURISuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "transferFromBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "from",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "transferFromBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b6c9e99b592cb418a04ec0313473e8f76b3ec878ee05e53819d35e7a54075e0",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xE47C6dC8ccA497a2a9E3baa6A8aE56d24Bd5A168",
    "transactionIndex": 13,
    "gasUsed": "3536329",
    "logsBloom": "0x
    "blockHash": "0x0fb98a12c6054876c5638260d0a8ac5b4bd6fa51ec39d6f4c7f994bfc20564ba",
    "transactionHash": "0x8b6c9e99b592cb418a04ec0313473e8f76b3ec878ee05e53819d35e7a54075e0",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 11317942,
        "transactionHash": "0x8b6c9e99b592cb418a04ec0313473e8f76b3ec878ee05e53819d35e7a54075e0",
        "address": "0xE47C6dC8ccA497a2a9E3baa6A8aE56d24Bd5A168",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 372,
        "blockHash": "0x0fb98a12c6054876c5638260d0a8ac5b4bd6fa51ec39d6f4c7f994bfc20564ba"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 11317942,
        "transactionHash": "0x8b6c9e99b592cb418a04ec0313473e8f76b3ec878ee05e53819d35e7a54075e0",
        "address": "0xE47C6dC8ccA497a2a9E3baa6A8aE56d24Bd5A168",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 373,
        "blockHash": "0x0fb98a12c6054876c5638260d0a8ac5b4bd6fa51ec39d6f4c7f994bfc20564ba"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 11317942,
        "transactionHash": "0x8b6c9e99b592cb418a04ec0313473e8f76b3ec878ee05e53819d35e7a54075e0",
        "address": "0xE47C6dC8ccA497a2a9E3baa6A8aE56d24Bd5A168",
        "topics": [
          "0x2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe41"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 374,
        "blockHash": "0x0fb98a12c6054876c5638260d0a8ac5b4bd6fa51ec39d6f4c7f994bfc20564ba"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 11317942,
        "transactionHash": "0x8b6c9e99b592cb418a04ec0313473e8f76b3ec878ee05e53819d35e7a54075e0",
        "address": "0xE47C6dC8ccA497a2a9E3baa6A8aE56d24Bd5A168",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 375,
        "blockHash": "0x0fb98a12c6054876c5638260d0a8ac5b4bd6fa51ec39d6f4c7f994bfc20564ba"
      }
    ],
    "blockNumber": 11317942,
    "cumulativeGasUsed": "24891533",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "name": "Collection",
      "symbol": "COL",
      "contractURI": "ipfs://contractURI",
      "placeholderURI": "ipfs://placeholderURI",
      "tokenURIPrefix": "ipfs://tokenURIPrefix/",
      "maxSupply": 0,
      "defaultRoyaltyAddress": "0x0000000000000000000000000000000000000000",
      "defaultRoyaltyBps": 0,
      "trustedForwarder": "0x0000000000000000000000000000000000000000",
      "initialHolders": [],
      "initialAmounts": []
    }
  ],
  "numDeployments": 12,
  "solcInputHash": "7e8d96f5b19322abdd3676f90e4578c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"placeholderURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"initialHolders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initialAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"defaultRoyaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"internalType\":\"struct ERC721ManagedPrefixedCollection.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRoyaltyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_senderBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRoyaltiesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyaltyByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"placeholderURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"initialHolders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initialAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"defaultRoyaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"internalType\":\"struct ERC721ManagedPrefixedCollection.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementPowerRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeholderURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeManagementPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IEIP2981RoyaltyOverride.TokenRoyalty\",\"name\":\"royalty\",\"type\":\"tuple\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setPlaceholderURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig[]\",\"name\":\"royaltyConfigs\",\"type\":\"tuple[]\"}],\"name\":\"setTokenRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setTokenURISuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURISuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferFromBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"transferFromBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getTokenRoyaltiesCount()\":{\"details\":\"See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\"},\"getTokenRoyaltyByIndex(uint256)\":{\"details\":\"See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"See {IEIP2981RoyaltyOverride-royaltyInfo}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"transferFromBulk(address,address,uint256[])\":{\"notice\":\"Useful for when user wants to return tokens to get a refund, or when they want to transfer lots of tokens by paying gas fee only once.\"},\"transferFromBulk(address[],address[],uint256[])\":{\"notice\":\"Useful for transferring multiple tokens from/to multiple addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol\":\"ERC721ManagedPrefixedCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\ninterface IEIP2981RoyaltyOverride is IERC165 {\\n\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns(uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external view returns(TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n\\n}\\n\",\"keccak256\":\"0xb7f47d4711c6eb42dc5874ad916713ffb6e8754ad568cdb5e9b0c5fcb028c698\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/RoyaltyOverrideCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IRoyaltyOverride.sol\\\";\\nimport \\\"../specs/IEIP2981.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\nabstract contract EIP2981RoyaltyOverrideCore is IEIP2981, IEIP2981RoyaltyOverride, ERC165 {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    TokenRoyalty public defaultRoyalty;\\n    mapping(uint256 => TokenRoyalty) private _tokenRoyalties;\\n    EnumerableSet.UintSet private _tokensWithRoyalties;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IEIP2981).interfaceId || interfaceId == type(IEIP2981RoyaltyOverride).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Sets token royalties. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs) internal {\\n        for (uint i = 0; i < royaltyConfigs.length; i++) {\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\n            if (royaltyConfig.recipient == address(0)) {\\n                delete _tokenRoyalties[royaltyConfig.tokenId];\\n                _tokensWithRoyalties.remove(royaltyConfig.tokenId);\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\n            } else {\\n                _tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(royaltyConfig.recipient, royaltyConfig.bps);\\n                _tokensWithRoyalties.add(royaltyConfig.tokenId);\\n                emit TokenRoyaltySet(royaltyConfig.tokenId, royaltyConfig.recipient, royaltyConfig.bps);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets default royalty. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal {\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\n        defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\n     */\\n    function getTokenRoyaltiesCount() external override view returns(uint256) {\\n        return _tokensWithRoyalties.length();\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external override view returns(TokenRoyaltyConfig memory) {\\n        uint256 tokenId = _tokensWithRoyalties.at(index);\\n        TokenRoyalty memory royalty = _tokenRoyalties[tokenId];\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) public override view returns (address, uint256) {\\n        if (_tokenRoyalties[tokenId].recipient != address(0)) {\\n            return (_tokenRoyalties[tokenId].recipient, value*_tokenRoyalties[tokenId].bps/10000);\\n        }\\n        if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\\n            return (defaultRoyalty.recipient, value*defaultRoyalty.bps/10000);\\n        }\\n        return (address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0xfda6bb019fbae9b5a2fd0007e3b25b80dbc6abd78d121ced1dc6bb8935894491\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * EIP-2981\\n */\\ninterface IEIP2981 {\\n    /**\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n}\",\"keccak256\":\"0xa150218faf74c7d01e3d9aa712845a2bb519e7fc2ec854e2241c53e4cce163ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/collections/ERC721/extensions/ERC721AutoIdMinterExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721AutoIdMinterExtension {\\n    function setMaxSupply(uint256 newValue) external;\\n\\n    function freezeMaxSupply() external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\\n */\\nabstract contract ERC721AutoIdMinterExtension is\\n    IERC721AutoIdMinterExtension,\\n    ERC721CollectionMetadataExtension\\n{\\n    using SafeMath for uint256;\\n\\n    uint256 public maxSupply;\\n    bool public maxSupplyFrozen;\\n\\n    uint256 internal _currentTokenId = 0;\\n\\n    function __ERC721AutoIdMinterExtension_init(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721AutoIdMinterExtension_init_unchained(_maxSupply);\\n    }\\n\\n    function __ERC721AutoIdMinterExtension_init_unchained(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        maxSupply = _maxSupply;\\n\\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\\n        _registerInterface(type(IERC721).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMaxSupply(uint256 newValue) public virtual override onlyOwner {\\n        require(!maxSupplyFrozen, \\\"FROZEN\\\");\\n        require(newValue >= totalSupply(), \\\"LOWER_THAN_SUPPLY\\\");\\n        maxSupply = newValue;\\n    }\\n\\n    function freezeMaxSupply() external onlyOwner {\\n        maxSupplyFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _currentTokenId;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _mintTo(address to, uint256 count) internal {\\n        require(totalSupply() + count <= maxSupply, \\\"EXCEEDS_SUPPLY\\\");\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 newTokenId = _currentTokenId;\\n            _safeMint(to, newTokenId);\\n            _incrementTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Increments the value of _currentTokenId\\n     */\\n    function _incrementTokenId() internal {\\n        _currentTokenId++;\\n    }\\n}\\n\",\"keccak256\":\"0xdcca8ce9ab13e56e81d7f518dea3904a4f90f1931136babf460dd06e25cb0f5f\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721BulkifyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721BulkifyExtension {\\n    function transferFromBulk(\\n        address from,\\n        address to,\\n        uint256[] memory tokenIds\\n    ) external;\\n\\n    function transferFromBulk(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory tokenIds\\n    ) external;\\n}\\n\\n/**\\n * @dev Extension to add bulk operations to a standard ERC721 contract.\\n */\\nabstract contract ERC721BulkifyExtension is\\n    IERC721BulkifyExtension,\\n    Initializable,\\n    ERC165Storage\\n{\\n    function __ERC721BulkifyExtension_init() internal onlyInitializing {\\n        __ERC721BulkifyExtension_init_unchained();\\n    }\\n\\n    function __ERC721BulkifyExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721BulkifyExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Useful for when user wants to return tokens to get a refund,\\n     * or when they want to transfer lots of tokens by paying gas fee only once.\\n     */\\n    function transferFromBulk(\\n        address from,\\n        address to,\\n        uint256[] memory tokenIds\\n    ) public virtual {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            IERC721(address(this)).transferFrom(from, to, tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * Useful for transferring multiple tokens from/to multiple addresses.\\n     */\\n    function transferFromBulk(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory tokenIds\\n    ) public virtual {\\n        require(from.length == to.length, \\\"FROM_TO_LENGTH_MISMATCH\\\");\\n        require(from.length == tokenIds.length, \\\"FROM_TOKEN_LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            IERC721(address(this)).transferFrom(from[i], to[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9aebc621860abd37cef0c7f60fe74cc880d51e83a6769e6ec3de24ecb9aac8c2\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721CollectionMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface IERC721CollectionMetadataExtension {\\n    function setContractURI(string memory newValue) external;\\n\\n    function contractURI() external view returns (string memory);\\n}\\n\\n/**\\n * @dev Extension to allow configuring contract-level collection metadata URI.\\n */\\nabstract contract ERC721CollectionMetadataExtension is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721\\n{\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    string private _contractURI;\\n\\n    function __ERC721CollectionMetadataExtension_init(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        __ERC721CollectionMetadataExtension_init_unchained(\\n            name_,\\n            symbol_,\\n            contractURI_\\n        );\\n    }\\n\\n    function __ERC721CollectionMetadataExtension_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _contractURI = contractURI_;\\n\\n        _registerInterface(\\n            type(IERC721CollectionMetadataExtension).interfaceId\\n        );\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setContractURI(string memory newValue) external onlyOwner {\\n        _contractURI = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n}\\n\",\"keccak256\":\"0x0ea802166bd84401f48473d6ca94b2eedf1dda903efcd8e7a58765432786b31e\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721OwnerManagedExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721OwnerManagedExtension {\\n    function revokeManagementPower() external;\\n}\\n\\n/**\\n * @dev Extension to allow owner to transfer tokens on behalf of owners. Only useful for certain use-cases.\\n */\\nabstract contract ERC721OwnerManagedExtension is\\n    IERC721OwnerManagedExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension\\n{\\n    bool public managementPowerRevoked;\\n\\n    function __ERC721OwnerManagedExtension_init() internal onlyInitializing {\\n        __ERC721OwnerManagedExtension_init_unchained();\\n    }\\n\\n    function __ERC721OwnerManagedExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OwnerManagedExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function revokeManagementPower() external onlyOwner {\\n        managementPowerRevoked = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    /**\\n     * Override isApprovedForAll to allow owner to transfer tokens.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override(ERC721)\\n        returns (bool)\\n    {\\n        if (!managementPowerRevoked) {\\n            if (operator == super.owner()) {\\n                return true;\\n            }\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x367201c5677eaa7d8cb4ce9b0e7db1315c4cd5e98a88498e8675ec789b0c0a1e\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721OwnerMintExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721OwnerMintExtension {\\n    function mintByOwner(address to, uint256 count) external;\\n}\\n\\n/**\\n * @dev Extension to allow owner to mint directly without paying.\\n */\\nabstract contract ERC721OwnerMintExtension is\\n    IERC721OwnerMintExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension\\n{\\n    function __ERC721OwnerMintExtension_init() internal onlyInitializing {\\n        __ERC721OwnerMintExtension_init_unchained();\\n    }\\n\\n    function __ERC721OwnerMintExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OwnerMintExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintByOwner(address to, uint256 count) external onlyOwner {\\n        _mintTo(to, count);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xcdc99a3f59a902f9036be9c245d5502dd27be1b5ec8afbb1578bcc68f6ca70b9\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721PrefixedMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721PrefixedMetadataExtension {\\n    function setPlaceholderURI(string memory newValue) external;\\n\\n    function setTokenURIPrefix(string memory newValue) external;\\n\\n    function setTokenURISuffix(string memory newValue) external;\\n\\n    function placeholderURI() external view returns (string memory);\\n\\n    function tokenURIPrefix() external view returns (string memory);\\n\\n    function tokenURISuffix() external view returns (string memory);\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    function freezeTokenURI() external;\\n}\\n\\n/**\\n * @dev Extension to allow configuring tokens metadata URI.\\n *      In this extension tokens will have a shared token URI prefix,\\n *      therefore on tokenURI() token's ID will be appended to the base URI.\\n *      It also allows configuring a fallback \\\"placeholder\\\" URI when prefix is not set yet.\\n */\\nabstract contract ERC721PrefixedMetadataExtension is\\n    IERC721PrefixedMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721\\n{\\n    string internal _placeholderURI;\\n    string internal _tokenURIPrefix;\\n    string internal _tokenURISuffix;\\n\\n    bool public tokenURIFrozen;\\n\\n    function __ERC721PrefixedMetadataExtension_init(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        __ERC721PrefixedMetadataExtension_init_unchained(\\n            placeholderURI_,\\n            tokenURIPrefix_\\n        );\\n    }\\n\\n    function __ERC721PrefixedMetadataExtension_init_unchained(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        _placeholderURI = placeholderURI_;\\n        _tokenURIPrefix = tokenURIPrefix_;\\n        _tokenURISuffix = \\\".json\\\";\\n\\n        _registerInterface(type(IERC721PrefixedMetadataExtension).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPlaceholderURI(string memory newValue) external onlyOwner {\\n        _placeholderURI = newValue;\\n    }\\n\\n    function setTokenURIPrefix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"FROZEN\\\");\\n        _tokenURIPrefix = newValue;\\n    }\\n\\n    function setTokenURISuffix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"FROZEN\\\");\\n        _tokenURISuffix = newValue;\\n    }\\n\\n    function freezeTokenURI() external onlyOwner {\\n        tokenURIFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function placeholderURI() public view returns (string memory) {\\n        return _placeholderURI;\\n    }\\n\\n    function tokenURIPrefix() public view returns (string memory) {\\n        return _tokenURIPrefix;\\n    }\\n\\n    function tokenURISuffix() public view returns (string memory) {\\n        return _tokenURISuffix;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, IERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return\\n            bytes(_tokenURIPrefix).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        _tokenURIPrefix,\\n                        Strings.toString(_tokenId),\\n                        _tokenURISuffix\\n                    )\\n                )\\n                : _placeholderURI;\\n    }\\n}\\n\",\"keccak256\":\"0x2104086d29c04eaaef1bb9a52e8fb275411c20dacc916f0ce324c925508cfdca\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721RoyaltyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/RoyaltyOverrideCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"../../../misc/rarible/IRoyalties.sol\\\";\\nimport \\\"../../../misc/rarible/LibPart.sol\\\";\\nimport \\\"../../../misc/rarible/LibRoyaltiesV2.sol\\\";\\n\\ninterface IERC721RoyaltyExtension {\\n    function setTokenRoyalties(\\n        IEIP2981RoyaltyOverride.TokenRoyaltyConfig[] calldata royaltyConfigs\\n    ) external;\\n\\n    function setDefaultRoyalty(\\n        IEIP2981RoyaltyOverride.TokenRoyalty calldata royalty\\n    ) external;\\n\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (LibPart.Part[] memory result);\\n}\\n\\n/**\\n * @dev Extension to signal configured royalty to famous marketplaces as well as ERC2981.\\n *\\n * This extension currently supports Standard ERC2981, Rarible.\\n * Note that OpenSea is supported via Flair metadata feature.\\n */\\nabstract contract ERC721RoyaltyExtension is\\n    IERC721RoyaltyExtension,\\n    IRoyalties,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    EIP2981RoyaltyOverrideCore\\n{\\n    function __ERC721RoyaltyExtension_init(\\n        address defaultRoyaltyReceiver,\\n        uint16 defaultRoyaltyBps\\n    ) internal onlyInitializing {\\n        __ERC721RoyaltyExtension_init_unchained(\\n            defaultRoyaltyReceiver,\\n            defaultRoyaltyBps\\n        );\\n    }\\n\\n    function __ERC721RoyaltyExtension_init_unchained(\\n        address defaultRoyaltyReceiver,\\n        uint16 defaultRoyaltyBps\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721RoyaltyExtension).interfaceId);\\n        _registerInterface(type(IEIP2981).interfaceId);\\n        _registerInterface(type(IEIP2981RoyaltyOverride).interfaceId);\\n        _registerInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES);\\n\\n        TokenRoyalty memory royalty = TokenRoyalty(\\n            defaultRoyaltyReceiver,\\n            defaultRoyaltyBps\\n        );\\n\\n        _setDefaultRoyalty(royalty);\\n    }\\n\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royaltyConfigs)\\n        external\\n        override(IEIP2981RoyaltyOverride, IERC721RoyaltyExtension)\\n        onlyOwner\\n    {\\n        _setTokenRoyalties(royaltyConfigs);\\n    }\\n\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty)\\n        external\\n        override(IEIP2981RoyaltyOverride, IERC721RoyaltyExtension)\\n        onlyOwner\\n    {\\n        _setDefaultRoyalty(royalty);\\n    }\\n\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        override(IRoyalties, IERC721RoyaltyExtension)\\n        returns (LibPart.Part[] memory result)\\n    {\\n        result = new LibPart.Part[](1);\\n\\n        result[0].account = payable(defaultRoyalty.recipient);\\n        result[0].value = defaultRoyalty.bps;\\n\\n        id;\\n        // avoid unused param warning\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, EIP2981RoyaltyOverrideCore)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x9caa516c7a67a7897ea8a669a60068cccf82237c9e9afba39b7f4e4c1daa211d\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../../../common/meta-transactions/ERC2771ContextOwnable.sol\\\";\\nimport \\\"../extensions/ERC721CollectionMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721PrefixedMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721AutoIdMinterExtension.sol\\\";\\nimport \\\"../extensions/ERC721OwnerMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721OwnerManagedExtension.sol\\\";\\nimport \\\"../extensions/ERC721RoyaltyExtension.sol\\\";\\nimport \\\"../extensions/ERC721BulkifyExtension.sol\\\";\\n\\ncontract ERC721ManagedPrefixedCollection is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC2771ContextOwnable,\\n    ERC721CollectionMetadataExtension,\\n    ERC721PrefixedMetadataExtension,\\n    ERC721AutoIdMinterExtension,\\n    ERC721OwnerMintExtension,\\n    ERC721OwnerManagedExtension,\\n    ERC721RoyaltyExtension,\\n    ERC721BulkifyExtension\\n{\\n    struct Config {\\n        string name;\\n        string symbol;\\n        string contractURI;\\n        string placeholderURI;\\n        string tokenURIPrefix;\\n        address[] initialHolders;\\n        uint256[] initialAmounts;\\n        uint256 maxSupply;\\n        address defaultRoyaltyAddress;\\n        uint16 defaultRoyaltyBps;\\n        address trustedForwarder;\\n    }\\n\\n    constructor(Config memory config) ERC721(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        require(\\n            config.initialHolders.length == config.initialAmounts.length,\\n            \\\"ERC721/INVALID_INITIAL_ARGS\\\"\\n        );\\n\\n        _transferOwnership(deployer);\\n\\n        __ERC721CollectionMetadataExtension_init(\\n            config.name,\\n            config.symbol,\\n            config.contractURI\\n        );\\n        __ERC721PrefixedMetadataExtension_init(\\n            config.placeholderURI,\\n            config.tokenURIPrefix\\n        );\\n        __ERC721AutoIdMinterExtension_init(config.maxSupply);\\n        __ERC721OwnerMintExtension_init();\\n        __ERC721OwnerManagedExtension_init();\\n        __ERC721RoyaltyExtension_init(\\n            config.defaultRoyaltyAddress,\\n            config.defaultRoyaltyBps\\n        );\\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\\n        __ERC721BulkifyExtension_init();\\n\\n        maxSupply = config.maxSupply;\\n\\n        for (uint256 i = 0; i < config.initialHolders.length; i++) {\\n            _mintTo(config.initialHolders[i], config.initialAmounts[i]);\\n        }\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (address sender)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (bytes calldata)\\n    {\\n        return super._msgData();\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name()\\n        public\\n        view\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.symbol();\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721OwnerManagedExtension)\\n        returns (bool)\\n    {\\n        return ERC721OwnerManagedExtension.isApprovedForAll(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            ERC721CollectionMetadataExtension,\\n            ERC721OwnerMintExtension,\\n            ERC721OwnerManagedExtension,\\n            ERC721PrefixedMetadataExtension,\\n            ERC721RoyaltyExtension,\\n            ERC721BulkifyExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721PrefixedMetadataExtension.tokenURI(_tokenId);\\n    }\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            uint256 _maxSupply,\\n            uint256 _totalSupply,\\n            uint256 _senderBalance\\n        )\\n    {\\n        uint256 balance = 0;\\n\\n        if (_msgSender() != address(0)) {\\n            balance = this.balanceOf(_msgSender());\\n        }\\n\\n        return (maxSupply, this.totalSupply(), balance);\\n    }\\n}\\n\",\"keccak256\":\"0xed7602d64cfe6c83f237ca34b62d042af9ccaf802c9a2e41cdc4fad9b2f3caeb\",\"license\":\"AGPL-3.0\"},\"contracts/common/meta-transactions/ERC2771ContextOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextOwnable is Initializable, Context, Ownable {\\n    address public _trustedForwarder;\\n\\n    function __ERC2771ContextOwnable_init(address trustedForwarder)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC2771ContextOwnable_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771ContextOwnable_init_unchained(address trustedForwarder)\\n        internal\\n        onlyInitializing\\n    {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarder) public onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93a5946373b0a4310fa5b2a1ca18bf9764671de9d61af6af270b01a3d0a2421e\",\"license\":\"MIT\"},\"contracts/misc/rarible/IRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface IRoyalties {\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x7accda1dc806756d37c3146f33ad3f8cd896938c3f11ced81a065a0bde535318\",\"license\":\"MIT\"},\"contracts/misc/rarible/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH =\\n        keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xd10a57285b20362e8f05834d7407c1a757ddc8902ccb3c1041f94fd915703d60\",\"license\":\"MIT\"},\"contracts/misc/rarible/LibRoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\",\"keccak256\":\"0xe761771a2be4463b61a40a7b84be5fa77f2c7a3cb61789587af0ed2f534bcd0b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102405760003560e01c80637885fdc7116101375780637885fdc71461046f5780637e9803421461049d5780638da5cb5b146104a5578063938e3d7b146104ad578063948e2d53146104c057806395d89b41146104c857806399e0dd7c146104d0578063a22cb465146104e3578063a821d908146104f6578063a9852bfb14610503578063b88d4fde14610516578063ba4695fd14610529578063c0ac998314610531578063c29de63014610539578063c87b56dd14610546578063cad96cca14610559578063d5abeb0114610579578063da74222814610582578063dbbc853b14610595578063e8a3d4851461059d578063e985e9c5146105a5578063ef60ceaf146105b8578063f2fde38b146105cb578063f384702f146105de57600080fd5b806301ffc9a714610245578063059fb6f71461026d5780630653aca51461028257806306fdde03146102c4578063081812fc146102d9578063095ea7b3146102f9578063167446071461030c57806318160ddd1461031457806323b872dd146103265780632a55205a146103395780632fe388be1461036b5780633542aee21461037e5780633574a2dd1461039157806340c1d8a1146103a457806342842e0e146103b75780635136dcc7146103ca57806356c022bb146103dd578063572b6c05146103f05780635a9b0b89146104035780636352211e146104265780636f8b44b01461043957806370a082311461044c578063715018a61461045f5780637313cba914610467575b600080fd5b6102586102533660046126f5565b6105eb565b60405190151581526020015b60405180910390f35b61028061027b36600461282b565b6105fc565b005b610295610290366004612888565b61069c565b60408051825181526020808401516001600160a01b0316908201529181015161ffff1690820152606001610264565b6102cc610721565b60405161026491906128f1565b6102ec6102e7366004612888565b610730565b6040516102649190612904565b610280610307366004612918565b610757565b610280610883565b6012545b604051908152602001610264565b610280610334366004612942565b61089a565b61034c61034736600461297e565b6108d2565b604080516001600160a01b039093168352602083019190915201610264565b610280610379366004612a02565b610997565b61028061038c366004612918565b610afc565b61028061039f366004612af6565b610b12565b6102806103b2366004612b3c565b610b26565b6102806103c5366004612942565b610d76565b6102806103d8366004612cda565b610d91565b6002546102ec906001600160a01b031681565b6102586103fe366004612d4e565b610df4565b61040b610e08565b60408051938452602084019290925290820152606001610264565b6102ec610434366004612888565b610f03565b610280610447366004612888565b610f38565b61031861045a366004612d4e565b610fae565b610280611034565b6102cc611048565b60145461048f906001600160a01b03811690600160a01b900461ffff1682565b604051610264929190612d69565b6103186110da565b6102ec6110e6565b6102806104bb366004612af6565b6110fb565b61028061110f565b6102cc611126565b6102806104de366004612af6565b611130565b6102806104f1366004612d86565b611167565b6013546102589060ff1681565b610280610511366004612af6565b611179565b610280610524366004612dc2565b6111b0565b6102806111e9565b6102cc611200565b600f546102589060ff1681565b6102cc610554366004612888565b61120f565b61056c610567366004612888565b61121a565b6040516102649190612e3d565b61031860105481565b610280610590366004612d4e565b6112d5565b6102cc6112ff565b6102cc61130e565b6102586105b3366004612e9e565b61131d565b6102806105c6366004612ec8565b611330565b6102806105d9366004612d4e565b611352565b6011546102589060ff1681565b60006105f6826113fd565b92915050565b60005b815181101561069657306001600160a01b03166323b872dd858585858151811061062b5761062b612ee0565b60200260200101516040518463ffffffff1660e01b815260040161065193929190612ef6565b600060405180830381600087803b15801561066b57600080fd5b505af115801561067f573d6000803e3d6000fd5b50505050808061068e90612f30565b9150506105ff565b50505050565b60408051606081018252600080825260208201819052918101829052906106c4601684611439565b6000818152601560209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b606061072b611445565b905090565b600061073b82611454565b506000908152600760205260409020546001600160a01b031690565b600061076282610f03565b9050806001600160a01b0316836001600160a01b0316036107d45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b806001600160a01b03166107e6611479565b6001600160a01b031614806108025750610802816105b3611479565b6108745760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016107cb565b61087e8383611483565b505050565b61088b6114f1565b6011805460ff19166001179055565b6108ab6108a5611479565b82611560565b6108c75760405162461bcd60e51b81526004016107cb90612f49565b61087e8383836115bf565b60008281526015602052604081205481906001600160a01b031615610937576000848152601560205260409020546001600160a01b038116906127109061092490600160a01b900461ffff1686612f97565b61092e9190612fcc565b91509150610990565b6014546001600160a01b03161580159061095d5750601454600160a01b900461ffff1615155b15610989576014546001600160a01b038116906127109061092490600160a01b900461ffff1686612f97565b5060009050805b9250929050565b81518351146109e25760405162461bcd60e51b815260206004820152601760248201527608ca49e9abea89ebe988a9c8ea890be9a92a69a82a8869604b1b60448201526064016107cb565b8051835114610a305760405162461bcd60e51b815260206004820152601a60248201527908ca49e9abea89e968a9cbe988a9c8ea890be9a92a69a82a886960331b60448201526064016107cb565b60005b815181101561069657306001600160a01b03166323b872dd858381518110610a5d57610a5d612ee0565b6020026020010151858481518110610a7757610a77612ee0565b6020026020010151858581518110610a9157610a91612ee0565b60200260200101516040518463ffffffff1660e01b8152600401610ab793929190612ef6565b600060405180830381600087803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b505050508080610af490612f30565b915050610a33565b610b046114f1565b610b0e828261175b565b5050565b610b1a6114f1565b600c610b0e8282613062565b600054610100900460ff1615808015610b465750600054600160ff909116105b80610b675750610b55306113ea565b158015610b67575060005460ff166001145b610bca5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107cb565b6000805460ff191660011790558015610bed576000805461ff0019166101001790555b8260c00151518360a001515114610c445760405162461bcd60e51b815260206004820152601b60248201527a4552433732312f494e56414c49445f494e495449414c5f4152475360281b60448201526064016107cb565b610c4d826117e4565b610c6483600001518460200151856040015161183f565b610c7683606001518460800151611871565b610c838360e001516118a2565b610c8b6118d2565b610c93611901565b610ca7836101000151846101200151611930565b610cb5836101400151611961565b610cbd611991565b60e083015160105560005b8360a0015151811015610d2b57610d198460a001518281518110610cee57610cee612ee0565b60200260200101518560c001518381518110610d0c57610d0c612ee0565b602002602001015161175b565b80610d2381612f30565b915050610cc8565b50801561087e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b61087e838383604051806020016040528060008152506111b0565b610d996114f1565b610b0e8282808060200260200160405190810160405280939291908181526020016000905b82821015610dea57610ddb60608302860136819003810190613121565b81526020019060010190610dbe565b50505050506119c0565b6002546001600160a01b0391821691161490565b600080808080610e16611479565b6001600160a01b031614610e9257306370a08231610e32611479565b6040518263ffffffff1660e01b8152600401610e4e9190612904565b602060405180830381865afa158015610e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8f9190613185565b90505b601054306001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190613185565b90959094509092509050565b6000818152600560205260408120546001600160a01b0316806105f65760405162461bcd60e51b81526004016107cb9061319e565b610f406114f1565b60115460ff1615610f635760405162461bcd60e51b81526004016107cb906131d0565b601254811015610fa95760405162461bcd60e51b81526020600482015260116024820152704c4f5745525f5448414e5f535550504c5960781b60448201526064016107cb565b601055565b60006001600160a01b0382166110185760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107cb565b506001600160a01b031660009081526006602052604090205490565b61103c6114f1565b61104660006117e4565b565b6060600c805461105790612fe0565b80601f016020809104026020016040519081016040528092919081815260200182805461108390612fe0565b80156110d05780601f106110a5576101008083540402835291602001916110d0565b820191906000526020600020905b8154815290600101906020018083116110b357829003601f168201915b5050505050905090565b600061072b6016611b67565b6000546201000090046001600160a01b031690565b6111036114f1565b600b610b0e8282613062565b6111176114f1565b6013805460ff19166001179055565b606061072b611b71565b6111386114f1565b600f5460ff161561115b5760405162461bcd60e51b81526004016107cb906131d0565b600d610b0e8282613062565b610b0e611172611479565b8383611b80565b6111816114f1565b600f5460ff16156111a45760405162461bcd60e51b81526004016107cb906131d0565b600e610b0e8282613062565b6111c16111bb611479565b83611560565b6111dd5760405162461bcd60e51b81526004016107cb90612f49565b61069684848484611c4a565b6111f16114f1565b600f805460ff19166001179055565b6060600d805461105790612fe0565b60606105f682611c7d565b604080516001808252818301909252606091816020015b604080518082019091526000808252602082015281526020019060019003908161123157505060145481519192506001600160a01b031690829060009061127a5761127a612ee0565b60209081029190910101516001600160a01b039190911690526014548151600160a01b90910461ffff169082906000906112b6576112b6612ee0565b6020908102919091018101516001600160601b03909216910152919050565b6112dd6114f1565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600e805461105790612fe0565b6060600b805461105790612fe0565b60006113298383611d59565b9392505050565b6113386114f1565b61134f61134a368390038301836131f0565b611dbc565b50565b61135a6114f1565b6001600160a01b0381166113bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107cb565b61134f816117e4565b60006113d333610df4565b156113e5575060131936013560601c90565b503390565b6001600160a01b03163b151590565b3390565b60006301ffc9a760e01b6001600160e01b0319831614806105f65750506001600160e01b03191660009081526001602052604090205460ff1690565b60006113298383611e67565b60606009805461105790612fe0565b61145d81611e91565b61134f5760405162461bcd60e51b81526004016107cb9061319e565b600061072b6113c8565b600081815260076020526040902080546001600160a01b0319166001600160a01b03841690811790915581906114b882610f03565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6114f9611479565b6001600160a01b031661150a6110e6565b6001600160a01b0316146110465760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107cb565b60008061156c83610f03565b9050806001600160a01b0316846001600160a01b031614806115935750611593818561131d565b806115b75750836001600160a01b03166115ac84610730565b6001600160a01b0316145b949350505050565b826001600160a01b03166115d282610f03565b6001600160a01b0316146116365760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016107cb565b6001600160a01b0382166116985760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107cb565b6116a3600082611483565b6001600160a01b03831660009081526006602052604081208054600192906116cc90849061324a565b90915550506001600160a01b03821660009081526006602052604081208054600192906116fa90849061325d565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6010548161176860125490565b611772919061325d565b11156117b15760405162461bcd60e51b815260206004820152600e60248201526d455843454544535f535550504c5960901b60448201526064016107cb565b60005b8181101561087e576012546117c98482611eae565b6117d1611ec8565b50806117dc81612f30565b9150506117b4565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600054610100900460ff166118665760405162461bcd60e51b81526004016107cb90613270565b61087e838383611edf565b600054610100900460ff166118985760405162461bcd60e51b81526004016107cb90613270565b610b0e8282611f5d565b600054610100900460ff166118c95760405162461bcd60e51b81526004016107cb90613270565b61134f81611fe8565b600054610100900460ff166118f95760405162461bcd60e51b81526004016107cb90613270565b611046612034565b600054610100900460ff166119285760405162461bcd60e51b81526004016107cb90613270565b61104661206b565b600054610100900460ff166119575760405162461bcd60e51b81526004016107cb90613270565b610b0e82826120a2565b600054610100900460ff166119885760405162461bcd60e51b81526004016107cb90613270565b61134f81612132565b600054610100900460ff166119b85760405162461bcd60e51b81526004016107cb90613270565b611046612159565b60005b8151811015610b0e5760008282815181106119e0576119e0612ee0565b60200260200101519050612710816040015161ffff1610611a135760405162461bcd60e51b81526004016107cb906132bb565b60208101516001600160a01b0316611a8c578051600090815260156020526040902080546001600160b01b03191690558051611a5190601690612190565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611b54565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152601590945294909220925183549451909216600160a01b026001600160b01b03199094169116179190911790558051611afa9060169061219c565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080611b5f81612f30565b9150506119c3565b60006105f6825490565b6060600a805461105790612fe0565b816001600160a01b0316836001600160a01b031603611bdd5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016107cb565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611c558484846115bf565b611c61848484846121a8565b6106965760405162461bcd60e51b81526004016107cb906132e0565b60606000600d8054611c8e90612fe0565b905011611d2557600c8054611ca290612fe0565b80601f0160208091040260200160405190810160405280929190818152602001828054611cce90612fe0565b8015611d1b5780601f10611cf057610100808354040283529160200191611d1b565b820191906000526020600020905b815481529060010190602001808311611cfe57829003601f168201915b50505050506105f6565b600d611d30836122b7565b600e604051602001611d44939291906133a5565b60405160208183030381529060405292915050565b60135460009060ff16611d8e57611d6e6110e6565b6001600160a01b0316826001600160a01b031603611d8e575060016105f6565b6001600160a01b0380841660009081526008602090815260408083209386168352929052205460ff16611329565b612710816020015161ffff1610611de55760405162461bcd60e51b81526004016107cb906132bb565b60408051808201825282516001600160a01b03168082526020808501805161ffff1691909301819052601480546001600160b01b031916909217600160a01b9091021790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe4192611e5c9291612d69565b60405180910390a150565b6000826000018281548110611e7e57611e7e612ee0565b9060005260206000200154905092915050565b6000908152600560205260409020546001600160a01b0316151590565b610b0e8282604051806020016040528060008152506123b7565b60128054906000611ed883612f30565b9190505550565b600054610100900460ff16611f065760405162461bcd60e51b81526004016107cb90613270565b6009611f128482613062565b50600a611f1f8382613062565b50600b611f2c8282613062565b50611f3d633d96f4ff60e11b6123ea565b611f4d6380ac58cd60e01b6123ea565b61087e635b5e139f60e01b6123ea565b600054610100900460ff16611f845760405162461bcd60e51b81526004016107cb90613270565b600c611f908382613062565b50600d611f9d8282613062565b50604080518082019091526005815264173539b7b760d91b6020820152600e90611fc79082613062565b50611fd8631f2f406b60e01b6123ea565b610b0e635b5e139f60e01b6123ea565b600054610100900460ff1661200f5760405162461bcd60e51b81526004016107cb90613270565b60108190556120246330f487b560e11b6123ea565b61134f6380ac58cd60e01b6123ea565b600054610100900460ff1661205b5760405162461bcd60e51b81526004016107cb90613270565b611046631aa1577160e11b6123ea565b600054610100900460ff166120925760405162461bcd60e51b81526004016107cb90613270565b61104663948e2d5360e01b6123ea565b600054610100900460ff166120c95760405162461bcd60e51b81526004016107cb90613270565b6120d9633a47bf5160e11b6123ea565b6120e963152a902d60e11b6123ea565b6120f963c69dbd8f60e01b6123ea565b61210963656cb66560e11b6123ea565b604080518082019091526001600160a01b038316815261ffff8216602082015261087e81611dbc565b600054610100900460ff166112dd5760405162461bcd60e51b81526004016107cb90613270565b600054610100900460ff166121805760405162461bcd60e51b81526004016107cb90613270565b611046632a7c3e4960e01b6123ea565b6000611329838361246b565b6000611329838361255e565b60006121bc846001600160a01b03166113ea565b156122ac57836001600160a01b031663150b7a026121d8611479565b8786866040518563ffffffff1660e01b81526004016121fa94939291906133d8565b6020604051808303816000875af1925050508015612235575060408051601f3d908101601f1916820190925261223291810190613415565b60015b612292573d808015612263576040519150601f19603f3d011682016040523d82523d6000602084013e612268565b606091505b50805160000361228a5760405162461bcd60e51b81526004016107cb906132e0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506115b7565b506001949350505050565b6060816000036122de5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561230857806122f281612f30565b91506123019050600a83612fcc565b91506122e2565b6000816001600160401b038111156123225761232261272e565b6040519080825280601f01601f19166020018201604052801561234c576020820181803683370190505b5090505b84156115b75761236160018361324a565b915061236e600a86613432565b61237990603061325d565b60f81b81838151811061238e5761238e612ee0565b60200101906001600160f81b031916908160001a9053506123b0600a86612fcc565b9450612350565b6123c183836125ad565b6123ce60008484846121a8565b61087e5760405162461bcd60e51b81526004016107cb906132e0565b6001600160e01b031980821690036124435760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b60448201526064016107cb565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b6000818152600183016020526040812054801561255457600061248f60018361324a565b85549091506000906124a39060019061324a565b90508181146125085760008660000182815481106124c3576124c3612ee0565b90600052602060002001549050808760000184815481106124e6576124e6612ee0565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061251957612519613446565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f6565b60009150506105f6565b60008181526001830160205260408120546125a5575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f6565b5060006105f6565b6001600160a01b0382166126035760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107cb565b61260c81611e91565b156126585760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016107cb565b6001600160a01b038216600090815260066020526040812080546001929061268190849061325d565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461134f57600080fd5b60006020828403121561270757600080fd5b8135611329816126df565b80356001600160a01b038116811461272957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b03811182821017156127675761276761272e565b60405290565b604051601f8201601f191681016001600160401b03811182821017156127955761279561272e565b604052919050565b60006001600160401b038211156127b6576127b661272e565b5060051b60200190565b600082601f8301126127d157600080fd5b813560206127e66127e18361279d565b61276d565b82815260059290921b8401810191818101908684111561280557600080fd5b8286015b848110156128205780358352918301918301612809565b509695505050505050565b60008060006060848603121561284057600080fd5b61284984612712565b925061285760208501612712565b915060408401356001600160401b0381111561287257600080fd5b61287e868287016127c0565b9150509250925092565b60006020828403121561289a57600080fd5b5035919050565b60005b838110156128bc5781810151838201526020016128a4565b50506000910152565b600081518084526128dd8160208601602086016128a1565b601f01601f19169290920160200192915050565b60208152600061132960208301846128c5565b6001600160a01b0391909116815260200190565b6000806040838503121561292b57600080fd5b61293483612712565b946020939093013593505050565b60008060006060848603121561295757600080fd5b61296084612712565b925061296e60208501612712565b9150604084013590509250925092565b6000806040838503121561299157600080fd5b50508035926020909101359150565b600082601f8301126129b157600080fd5b813560206129c16127e18361279d565b82815260059290921b840181019181810190868411156129e057600080fd5b8286015b84811015612820576129f581612712565b83529183019183016129e4565b600080600060608486031215612a1757600080fd5b83356001600160401b0380821115612a2e57600080fd5b612a3a878388016129a0565b94506020860135915080821115612a5057600080fd5b612a5c878388016129a0565b93506040860135915080821115612a7257600080fd5b5061287e868287016127c0565b60006001600160401b03831115612a9857612a9861272e565b612aab601f8401601f191660200161276d565b9050828152838383011115612abf57600080fd5b828260208301376000602084830101529392505050565b600082601f830112612ae757600080fd5b61132983833560208501612a7f565b600060208284031215612b0857600080fd5b81356001600160401b03811115612b1e57600080fd5b6115b784828501612ad6565b803561ffff8116811461272957600080fd5b60008060408385031215612b4f57600080fd5b82356001600160401b0380821115612b6657600080fd5b908401906101608287031215612b7b57600080fd5b612b83612744565b823582811115612b9257600080fd5b612b9e88828601612ad6565b825250602083013582811115612bb357600080fd5b612bbf88828601612ad6565b602083015250604083013582811115612bd757600080fd5b612be388828601612ad6565b604083015250606083013582811115612bfb57600080fd5b612c0788828601612ad6565b606083015250608083013582811115612c1f57600080fd5b612c2b88828601612ad6565b60808301525060a083013582811115612c4357600080fd5b612c4f888286016129a0565b60a08301525060c083013582811115612c6757600080fd5b612c73888286016127c0565b60c08301525060e083013560e08201526101009150612c93828401612712565b828201526101209150612ca7828401612b2a565b828201526101409150612cbb828401612712565b82820152809450505050612cd160208401612712565b90509250929050565b60008060208385031215612ced57600080fd5b82356001600160401b0380821115612d0457600080fd5b818501915085601f830112612d1857600080fd5b813581811115612d2757600080fd5b866020606083028501011115612d3c57600080fd5b60209290920196919550909350505050565b600060208284031215612d6057600080fd5b61132982612712565b6001600160a01b0392909216825261ffff16602082015260400190565b60008060408385031215612d9957600080fd5b612da283612712565b915060208301358015158114612db757600080fd5b809150509250929050565b60008060008060808587031215612dd857600080fd5b612de185612712565b9350612def60208601612712565b92506040850135915060608501356001600160401b03811115612e1157600080fd5b8501601f81018713612e2257600080fd5b612e3187823560208401612a7f565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b82811015612e9157815180516001600160a01b031685528601516001600160601b0316868501529284019290850190600101612e5a565b5091979650505050505050565b60008060408385031215612eb157600080fd5b612eba83612712565b9150612cd160208401612712565b600060408284031215612eda57600080fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b600060018201612f4257612f42612f1a565b5060010190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6000816000190483118215151615612fb157612fb1612f1a565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612fdb57612fdb612fb6565b500490565b600181811c90821680612ff457607f821691505b602082108103612eda57634e487b7160e01b600052602260045260246000fd5b601f82111561087e57600081815260208120601f850160051c8101602086101561303b5750805b601f850160051c820191505b8181101561305a57828155600101613047565b505050505050565b81516001600160401b0381111561307b5761307b61272e565b61308f816130898454612fe0565b84613014565b602080601f8311600181146130c457600084156130ac5750858301515b600019600386901b1c1916600185901b17855561305a565b600085815260208120601f198616915b828110156130f3578886015182559484019460019091019084016130d4565b50858210156131115787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006060828403121561313357600080fd5b604051606081018181106001600160401b03821117156131555761315561272e565b6040528235815261316860208401612712565b602082015261317960408401612b2a565b60408201529392505050565b60006020828403121561319757600080fd5b5051919050565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b602080825260069082015265232927ad22a760d11b604082015260600190565b60006040828403121561320257600080fd5b604051604081018181106001600160401b03821117156132245761322461272e565b60405261323083612712565b815261323e60208401612b2a565b60208201529392505050565b818103818111156105f6576105f6612f1a565b808201808211156105f6576105f6612f1a565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600b908201526a496e76616c69642062707360a81b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000815461333f81612fe0565b60018281168015613357576001811461336c5761339b565b60ff198416875282151583028701945061339b565b8560005260208060002060005b858110156133925781548a820152908401908201613379565b50505082870194505b5050505092915050565b60006133b18286613332565b84516133c18183602089016128a1565b6133cd81830186613332565b979650505050505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061340b908301846128c5565b9695505050505050565b60006020828403121561342757600080fd5b8151611329816126df565b60008261344157613441612fb6565b500690565b634e487b7160e01b600052603160045260246000fdfea264697066735822122072ad70a6aa55ad6f57624cc6dec56f8c5ee5a79c71332ffee04c6d287225191464736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getTokenRoyaltiesCount()": {
        "details": "See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}."
      },
      "getTokenRoyaltyByIndex(uint256)": {
        "details": "See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "See {IEIP2981RoyaltyOverride-royaltyInfo}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "transferFromBulk(address,address,uint256[])": {
        "notice": "Useful for when user wants to return tokens to get a refund, or when they want to transfer lots of tokens by paying gas fee only once."
      },
      "transferFromBulk(address[],address[],uint256[])": {
        "notice": "Useful for transferring multiple tokens from/to multiple addresses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 974,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 977,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 782,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5217,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 14615,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2025,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2027,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2031,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_owners",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2035,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2039,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2045,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6694,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 6696,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 6698,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_contractURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 8002,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_placeholderURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 8004,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_tokenURIPrefix",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 8006,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_tokenURISuffix",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 8008,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "tokenURIFrozen",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 6350,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "maxSupply",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6352,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "maxSupplyFrozen",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 6355,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_currentTokenId",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 7393,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "managementPowerRevoked",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 86,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "defaultRoyalty",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(TokenRoyalty)28_storage"
      },
      {
        "astId": 91,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_tokenRoyalties",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_struct(TokenRoyalty)28_storage)"
      },
      {
        "astId": 94,
        "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
        "label": "_tokensWithRoyalties",
        "offset": 0,
        "slot": "22",
        "type": "t_struct(UintSet)6188_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenRoyalty)28_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEIP2981RoyaltyOverride.TokenRoyalty)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenRoyalty)28_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Set)5730_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5725,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5729,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenRoyalty)28_storage": {
        "encoding": "inplace",
        "label": "struct IEIP2981RoyaltyOverride.TokenRoyalty",
        "members": [
          {
            "astId": 25,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "bps",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)6188_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 6187,
            "contract": "contracts/collections/ERC721/presets/ERC721ManagedPrefixedCollection.sol:ERC721ManagedPrefixedCollection",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5730_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}