{
  "address": "0x4bc4eE07e009Cf89CE97A78fFc5Bed27eDE8F2a1",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contractURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "placeholderURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenURIPrefix",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preSalePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preSaleMaxMintPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSalePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSaleMaxMintPerTx",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "defaultRoyaltyAddress",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "defaultRoyaltyBps",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proceedsRecipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "openSeaProxyRegistryAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "openSeaExchangeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "trustedForwarder",
              "type": "address"
            }
          ],
          "internalType": "struct ERC721AFullFeaturedCollection.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRoyaltyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "TokenRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultRoyalty",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_senderBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_preSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_preSaleMaxMintPerWallet",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_preSaleAlreadyClaimed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preSaleActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_publicSalePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_publicSaleMaxMintPerTx",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_publicSaleActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRaribleV2Royalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenRoyaltiesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTokenRoyaltyByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasRoleBasedLockableExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contractURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "placeholderURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenURIPrefix",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preSalePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preSaleMaxMintPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSalePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSaleMaxMintPerTx",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "defaultRoyaltyAddress",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "defaultRoyaltyBps",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proceedsRecipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "openSeaProxyRegistryAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "openSeaExchangeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "trustedForwarder",
              "type": "address"
            }
          ],
          "internalType": "struct ERC721AFullFeaturedCollection.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockProceedsRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mintByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mintByRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintPreSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mintPublicSale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "onPreSaleAllowList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "placeholderURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleAllowlistMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleMaxMintPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proceedsRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proceedsRecipientLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleMaxMintPerTx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        }
      ],
      "name": "setAllowlistMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IEIP2981RoyaltyOverride.TokenRoyalty",
          "name": "royalty",
          "type": "tuple"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setOpenSeaExchangeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setOpenSeaProxyRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "setPlaceholderURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setPreSaleMaxMintPerWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setPreSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proceedsRecipient",
          "type": "address"
        }
      ],
      "name": "setProceedsRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleMaxMintPerTx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setPublicSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig[]",
          "name": "royaltyConfigs",
          "type": "tuple[]"
        }
      ],
      "name": "setTokenRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "setTokenURIPrefix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "setTokenURISuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "togglePreSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "togglePublicSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURIFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURIPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenURISuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6246bbe8e5e76bdcbd293e2522971d8b52e8895d7174466a855a84b4f3648f8b",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x4bc4eE07e009Cf89CE97A78fFc5Bed27eDE8F2a1",
    "transactionIndex": 6,
    "gasUsed": "5055816",
    "logsBloom": "0x
    "blockHash": "0x24362c7ce3d3ae700fe1a2af4ff18a0a1799ec1905ec402cd1902933316d8b4e",
    "transactionHash": "0x6246bbe8e5e76bdcbd293e2522971d8b52e8895d7174466a855a84b4f3648f8b",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 11039797,
        "transactionHash": "0x6246bbe8e5e76bdcbd293e2522971d8b52e8895d7174466a855a84b4f3648f8b",
        "address": "0x4bc4eE07e009Cf89CE97A78fFc5Bed27eDE8F2a1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x24362c7ce3d3ae700fe1a2af4ff18a0a1799ec1905ec402cd1902933316d8b4e"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11039797,
        "transactionHash": "0x6246bbe8e5e76bdcbd293e2522971d8b52e8895d7174466a855a84b4f3648f8b",
        "address": "0x4bc4eE07e009Cf89CE97A78fFc5Bed27eDE8F2a1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x24362c7ce3d3ae700fe1a2af4ff18a0a1799ec1905ec402cd1902933316d8b4e"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11039797,
        "transactionHash": "0x6246bbe8e5e76bdcbd293e2522971d8b52e8895d7174466a855a84b4f3648f8b",
        "address": "0x4bc4eE07e009Cf89CE97A78fFc5Bed27eDE8F2a1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x24362c7ce3d3ae700fe1a2af4ff18a0a1799ec1905ec402cd1902933316d8b4e"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11039797,
        "transactionHash": "0x6246bbe8e5e76bdcbd293e2522971d8b52e8895d7174466a855a84b4f3648f8b",
        "address": "0x4bc4eE07e009Cf89CE97A78fFc5Bed27eDE8F2a1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x24362c7ce3d3ae700fe1a2af4ff18a0a1799ec1905ec402cd1902933316d8b4e"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11039797,
        "transactionHash": "0x6246bbe8e5e76bdcbd293e2522971d8b52e8895d7174466a855a84b4f3648f8b",
        "address": "0x4bc4eE07e009Cf89CE97A78fFc5Bed27eDE8F2a1",
        "topics": [
          "0x2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe41"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 18,
        "blockHash": "0x24362c7ce3d3ae700fe1a2af4ff18a0a1799ec1905ec402cd1902933316d8b4e"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11039797,
        "transactionHash": "0x6246bbe8e5e76bdcbd293e2522971d8b52e8895d7174466a855a84b4f3648f8b",
        "address": "0x4bc4eE07e009Cf89CE97A78fFc5Bed27eDE8F2a1",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 19,
        "blockHash": "0x24362c7ce3d3ae700fe1a2af4ff18a0a1799ec1905ec402cd1902933316d8b4e"
      }
    ],
    "blockNumber": 11039797,
    "cumulativeGasUsed": "10552736",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "name": "Collection",
      "symbol": "COL",
      "contractURI": "ipfs://contractURI",
      "placeholderURI": "ipfs://placeholderURI",
      "tokenURIPrefix": "ipfs://tokenURIPrefix/",
      "maxSupply": 0,
      "preSalePrice": 0,
      "preSaleMaxMintPerWallet": 0,
      "publicSalePrice": 0,
      "publicSaleMaxMintPerTx": 10,
      "defaultRoyaltyAddress": "0x0000000000000000000000000000000000000000",
      "defaultRoyaltyBps": 0,
      "proceedsRecipient": "0x0000000000000000000000000000000000000000",
      "openSeaProxyRegistryAddress": "0x0000000000000000000000000000000000000000",
      "openSeaExchangeAddress": "0x0000000000000000000000000000000000000000",
      "trustedForwarder": "0x0000000000000000000000000000000000000000"
    }
  ],
  "numDeployments": 8,
  "solcInputHash": "a84f1fb15c0a559568857f55aefac1fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"placeholderURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preSaleMaxMintPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleMaxMintPerTx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"defaultRoyaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proceedsRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openSeaProxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openSeaExchangeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"internalType\":\"struct ERC721AFullFeaturedCollection.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRoyaltyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_senderBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preSaleMaxMintPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preSaleAlreadyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preSaleActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleMaxMintPerTx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_publicSaleActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRoyaltiesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyaltyByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasRoleBasedLockableExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"placeholderURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURIPrefix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preSaleMaxMintPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleMaxMintPerTx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"defaultRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"defaultRoyaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proceedsRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openSeaProxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openSeaExchangeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"internalType\":\"struct ERC721AFullFeaturedCollection.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockProceedsRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintByRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintPreSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintPublicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"onPreSaleAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeholderURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleAllowlistMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleMaxMintPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proceedsRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proceedsRecipientLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleMaxMintPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"setAllowlistMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IEIP2981RoyaltyOverride.TokenRoyalty\",\"name\":\"royalty\",\"type\":\"tuple\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setOpenSeaExchangeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setOpenSeaProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setPlaceholderURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setPreSaleMaxMintPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setPreSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proceedsRecipient\",\"type\":\"address\"}],\"name\":\"setProceedsRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleMaxMintPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setPublicSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IEIP2981RoyaltyOverride.TokenRoyaltyConfig[]\",\"name\":\"royaltyConfigs\",\"type\":\"tuple[]\"}],\"name\":\"setTokenRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setTokenURISuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"togglePreSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"togglePublicSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURISuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenRoyaltiesCount()\":{\"details\":\"See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\"},\"getTokenRoyaltyByIndex(uint256)\":{\"details\":\"See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"See {IEIP2981RoyaltyOverride-royaltyInfo}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see `_totalMinted`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\"},\"lock(uint256[])\":{\"notice\":\"Locks token(s) to effectively lock them, while keeping in the same wallet. This mechanism prevents them from being transferred, yet still will show correct owner.\"},\"locked(uint256)\":{\"notice\":\"Returns if a token is locked or not.\"},\"unlock(uint256[])\":{\"notice\":\"Unlocks locked token(s) to be able to transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol\":\"ERC721AFullFeaturedCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\ninterface IEIP2981RoyaltyOverride is IERC165 {\\n\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties) external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns(uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external view returns(TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n\\n}\\n\",\"keccak256\":\"0xb7f47d4711c6eb42dc5874ad916713ffb6e8754ad568cdb5e9b0c5fcb028c698\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/RoyaltyOverrideCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IRoyaltyOverride.sol\\\";\\nimport \\\"../specs/IEIP2981.sol\\\";\\n\\n/**\\n * Simple EIP2981 reference override implementation\\n */\\nabstract contract EIP2981RoyaltyOverrideCore is IEIP2981, IEIP2981RoyaltyOverride, ERC165 {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    TokenRoyalty public defaultRoyalty;\\n    mapping(uint256 => TokenRoyalty) private _tokenRoyalties;\\n    EnumerableSet.UintSet private _tokensWithRoyalties;\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IEIP2981).interfaceId || interfaceId == type(IEIP2981RoyaltyOverride).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Sets token royalties. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs) internal {\\n        for (uint i = 0; i < royaltyConfigs.length; i++) {\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\n            if (royaltyConfig.recipient == address(0)) {\\n                delete _tokenRoyalties[royaltyConfig.tokenId];\\n                _tokensWithRoyalties.remove(royaltyConfig.tokenId);\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\n            } else {\\n                _tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(royaltyConfig.recipient, royaltyConfig.bps);\\n                _tokensWithRoyalties.add(royaltyConfig.tokenId);\\n                emit TokenRoyaltySet(royaltyConfig.tokenId, royaltyConfig.recipient, royaltyConfig.bps);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets default royalty. When you override this in the implementation contract\\n     * ensure that you access restrict it to the contract owner or admin\\n     */\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal {\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\n        defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\n     */\\n    function getTokenRoyaltiesCount() external override view returns(uint256) {\\n        return _tokensWithRoyalties.length();\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index) external override view returns(TokenRoyaltyConfig memory) {\\n        uint256 tokenId = _tokensWithRoyalties.at(index);\\n        TokenRoyalty memory royalty = _tokenRoyalties[tokenId];\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\n    }\\n\\n    /**\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) public override view returns (address, uint256) {\\n        if (_tokenRoyalties[tokenId].recipient != address(0)) {\\n            return (_tokenRoyalties[tokenId].recipient, value*_tokenRoyalties[tokenId].bps/10000);\\n        }\\n        if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\\n            return (defaultRoyalty.recipient, value*defaultRoyalty.bps/10000);\\n        }\\n        return (address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0xfda6bb019fbae9b5a2fd0007e3b25b80dbc6abd78d121ced1dc6bb8935894491\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * EIP-2981\\n */\\ninterface IEIP2981 {\\n    /**\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n}\",\"keccak256\":\"0xa150218faf74c7d01e3d9aa712845a2bb519e7fc2ec854e2241c53e4cce163ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d14e1780f0ea212b19c07b83c8e51b9dc6903017df71e6de1fae364d724e0d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/collections/ERC721/extensions/ERC721AutoIdMinterExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721AutoIdMinterExtension {\\n    function setMaxSupply(uint256 newValue) external;\\n\\n    function freezeMaxSupply() external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\\n */\\nabstract contract ERC721AutoIdMinterExtension is\\n    IERC721AutoIdMinterExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721,\\n    ERC721CollectionMetadataExtension\\n{\\n    using SafeMath for uint256;\\n\\n    uint256 public maxSupply;\\n    bool public maxSupplyFrozen;\\n\\n    uint256 internal _currentTokenId = 0;\\n\\n    function __ERC721AutoIdMinterExtension_init(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721AutoIdMinterExtension_init_unchained(_maxSupply);\\n    }\\n\\n    function __ERC721AutoIdMinterExtension_init_unchained(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        maxSupply = _maxSupply;\\n\\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\\n        _registerInterface(type(IERC721).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMaxSupply(uint256 newValue) external onlyOwner {\\n        require(!maxSupplyFrozen, \\\"BASE_URI_FROZEN\\\");\\n        maxSupply = newValue;\\n    }\\n\\n    function freezeMaxSupply() external onlyOwner {\\n        maxSupplyFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name()\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.symbol();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _currentTokenId;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _mintTo(address to, uint256 count) internal {\\n        require(totalSupply() + count <= maxSupply, \\\"EXCEEDS_MAX_SUPPLY\\\");\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 newTokenId = _currentTokenId;\\n            _safeMint(to, newTokenId);\\n            _incrementTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Increments the value of _currentTokenId\\n     */\\n    function _incrementTokenId() internal {\\n        _currentTokenId++;\\n    }\\n}\\n\",\"keccak256\":\"0x8213ae7b55faaf9c09a5c1a23b306e264fae49dbd7a6b60ba52168d61acf1705\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721CollectionMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface IERC721CollectionMetadataExtension {\\n    function setContractURI(string memory newValue) external;\\n\\n    function contractURI() external view returns (string memory);\\n}\\n\\n/**\\n * @dev Extension to allow configuring contract-level collection metadata URI.\\n */\\nabstract contract ERC721CollectionMetadataExtension is\\n    IERC721CollectionMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    IERC721Metadata\\n{\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    string private _contractURI;\\n\\n    function __ERC721CollectionMetadataExtension_init(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        __ERC721CollectionMetadataExtension_init_unchained(\\n            name_,\\n            symbol_,\\n            contractURI_\\n        );\\n    }\\n\\n    function __ERC721CollectionMetadataExtension_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _contractURI = contractURI_;\\n\\n        _registerInterface(\\n            type(IERC721CollectionMetadataExtension).interfaceId\\n        );\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setContractURI(string memory newValue) external onlyOwner {\\n        _contractURI = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, IERC165)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n}\\n\",\"keccak256\":\"0xa7eabdf899e9deda65348af07b1ddf9d6f4436d43872d014105ea463477e387b\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721OpenSeaNoGasExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"../../../misc/opensea/ProxyRegistry.sol\\\";\\n\\ninterface IERC721OpenSeaNoGasExtension {\\n    function setOpenSeaProxyRegistryAddress(address addr) external;\\n\\n    function setOpenSeaExchangeAddress(address addr) external;\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\\n/**\\n * @dev Extension that automatically approves OpenSea to avoid having users to \\\"Approve\\\" your collection before trading.\\n */\\nabstract contract ERC721OpenSeaNoGasExtension is\\n    IERC721OpenSeaNoGasExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721\\n{\\n    address internal _openSeaProxyRegistryAddress;\\n    address private _openSeaExchangeAddress;\\n\\n    function __ERC721OpenSeaNoGasExtension_init(\\n        address openSeaProxyRegistryAddress,\\n        address openSeaExchangeAddress\\n    ) internal onlyInitializing {\\n        __ERC721OpenSeaNoGasExtension_init_unchained(\\n            openSeaProxyRegistryAddress,\\n            openSeaExchangeAddress\\n        );\\n    }\\n\\n    function __ERC721OpenSeaNoGasExtension_init_unchained(\\n        address openSeaProxyRegistryAddress,\\n        address openSeaExchangeAddress\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721OpenSeaNoGasExtension).interfaceId);\\n\\n        _openSeaProxyRegistryAddress = openSeaProxyRegistryAddress;\\n        _openSeaExchangeAddress = openSeaExchangeAddress;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setOpenSeaProxyRegistryAddress(address addr) external onlyOwner {\\n        _openSeaProxyRegistryAddress = addr;\\n    }\\n\\n    function setOpenSeaExchangeAddress(address addr) external onlyOwner {\\n        _openSeaExchangeAddress = addr;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override(ERC721, IERC721OpenSeaNoGasExtension)\\n        returns (bool)\\n    {\\n        if (_openSeaProxyRegistryAddress != address(0)) {\\n            // Whitelist OpenSea proxy contract for easy trading.\\n            ProxyRegistry proxyRegistry = ProxyRegistry(\\n                _openSeaProxyRegistryAddress\\n            );\\n\\n            if (address(proxyRegistry.proxies(owner)) == operator) {\\n                return true;\\n            }\\n        }\\n\\n        if (_openSeaExchangeAddress != address(0)) {\\n            // If OpenSea's ERC721 exchange address is detected, auto-approve\\n            if (operator == address(_openSeaExchangeAddress)) {\\n                return true;\\n            }\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n}\\n\",\"keccak256\":\"0x9692c3367594d4ee85051bb7aa628dcbd20799840332dd0a4dabb4b070917c9a\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721OwnerMintExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721OwnerMintExtension {\\n    function mintByOwner(address to, uint256 count) external;\\n}\\n\\n/**\\n * @dev Extension to allow owner to mint directly without paying.\\n */\\nabstract contract ERC721OwnerMintExtension is\\n    IERC721OwnerMintExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension\\n{\\n    function __ERC721OwnerMintExtension_init() internal onlyInitializing {\\n        __ERC721OwnerMintExtension_init_unchained();\\n    }\\n\\n    function __ERC721OwnerMintExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OwnerMintExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintByOwner(address to, uint256 count) external onlyOwner {\\n        _mintTo(to, count);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721AutoIdMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2a183ec335a95811f4e23abb37297e5044b28c8e4e131e43463fb5a97c576cac\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721PreSaleExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721PreSaleExtension {\\n    function setPreSalePrice(uint256 newValue) external;\\n\\n    function setPreSaleMaxMintPerWallet(uint256 newValue) external;\\n\\n    function setAllowlistMerkleRoot(bytes32 newRoot) external;\\n\\n    function togglePreSaleStatus(bool isActive) external;\\n\\n    function onPreSaleAllowList(address minter, bytes32[] calldata proof)\\n        external\\n        view\\n        returns (bool);\\n\\n    function mintPreSale(uint256 count, bytes32[] calldata proof)\\n        external\\n        payable;\\n}\\n\\n/**\\n * @dev Extension to provide pre-sale capabilities for certain collectors to mint for a specific price.\\n */\\nabstract contract ERC721PreSaleExtension is\\n    Initializable,\\n    IERC721PreSaleExtension,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension,\\n    ReentrancyGuard\\n{\\n    uint256 public preSalePrice;\\n    uint256 public preSaleMaxMintPerWallet;\\n    bytes32 public preSaleAllowlistMerkleRoot;\\n    bool public preSaleStatus;\\n\\n    mapping(address => uint256) internal preSaleAllowlistClaimed;\\n\\n    function __ERC721PreSaleExtension_init(\\n        uint256 _preSalePrice,\\n        uint256 _preSaleMaxMintPerWallet\\n    ) internal onlyInitializing {\\n        __ERC721PreSaleExtension_init_unchained(\\n            _preSalePrice,\\n            _preSaleMaxMintPerWallet\\n        );\\n    }\\n\\n    function __ERC721PreSaleExtension_init_unchained(\\n        uint256 _preSalePrice,\\n        uint256 _preSaleMaxMintPerWallet\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721PreSaleExtension).interfaceId);\\n\\n        preSalePrice = _preSalePrice;\\n        preSaleMaxMintPerWallet = _preSaleMaxMintPerWallet;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPreSalePrice(uint256 newValue) external onlyOwner {\\n        preSalePrice = newValue;\\n    }\\n\\n    function setPreSaleMaxMintPerWallet(uint256 newValue) external onlyOwner {\\n        preSaleMaxMintPerWallet = newValue;\\n    }\\n\\n    function setAllowlistMerkleRoot(bytes32 newRoot) external onlyOwner {\\n        preSaleAllowlistMerkleRoot = newRoot;\\n    }\\n\\n    function togglePreSaleStatus(bool isActive) external onlyOwner {\\n        preSaleStatus = isActive;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721AutoIdMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function onPreSaleAllowList(address minter, bytes32[] calldata proof)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            MerkleProof.verify(\\n                proof,\\n                preSaleAllowlistMerkleRoot,\\n                _generateMerkleLeaf(minter)\\n            );\\n    }\\n\\n    function mintPreSale(uint256 count, bytes32[] calldata proof)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(preSaleStatus, \\\"PRE_SALE_NOT_ACTIVE\\\");\\n\\n        address to = _msgSender();\\n\\n        require(\\n            MerkleProof.verify(\\n                proof,\\n                preSaleAllowlistMerkleRoot,\\n                _generateMerkleLeaf(to)\\n            ),\\n            \\\"PRE_SALE_WRONG_PROOF\\\"\\n        );\\n        require(\\n            preSaleAllowlistClaimed[to] + count <= preSaleMaxMintPerWallet,\\n            \\\"PRE_SALE_LIMIT\\\"\\n        );\\n        require(preSalePrice * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n\\n        preSaleAllowlistClaimed[to] += count;\\n\\n        _mintTo(to, count);\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _generateMerkleLeaf(address account)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(account));\\n    }\\n}\\n\",\"keccak256\":\"0x7a97dea562a635063bd55510abebeceef85c3e52668945e5ec0edf5f95d6134e\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721PrefixedMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721PrefixedMetadataExtension {\\n    function setPlaceholderURI(string memory newValue) external;\\n\\n    function setTokenURIPrefix(string memory newValue) external;\\n\\n    function setTokenURISuffix(string memory newValue) external;\\n\\n    function placeholderURI() external view returns (string memory);\\n\\n    function tokenURIPrefix() external view returns (string memory);\\n\\n    function tokenURISuffix() external view returns (string memory);\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n\\n    function freezeTokenURI() external;\\n}\\n\\n/**\\n * @dev Extension to allow configuring tokens metadata URI.\\n *      In this extension tokens will have a shared token URI prefix,\\n *      therefore on tokenURI() token's ID will be appended to the base URI.\\n *      It also allows configuring a fallback \\\"placeholder\\\" URI when prefix is not set yet.\\n */\\nabstract contract ERC721PrefixedMetadataExtension is\\n    IERC721PrefixedMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721\\n{\\n    string internal _placeholderURI;\\n    string internal _tokenURIPrefix;\\n    string internal _tokenURISuffix;\\n\\n    bool public tokenURIFrozen;\\n\\n    function __ERC721PrefixedMetadataExtension_init(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        __ERC721PrefixedMetadataExtension_init_unchained(\\n            placeholderURI_,\\n            tokenURIPrefix_\\n        );\\n    }\\n\\n    function __ERC721PrefixedMetadataExtension_init_unchained(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        _placeholderURI = placeholderURI_;\\n        _tokenURIPrefix = tokenURIPrefix_;\\n        _tokenURISuffix = \\\".json\\\";\\n\\n        _registerInterface(type(IERC721PrefixedMetadataExtension).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPlaceholderURI(string memory newValue) external onlyOwner {\\n        _placeholderURI = newValue;\\n    }\\n\\n    function setTokenURIPrefix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"TOKENS_URI_FROZEN\\\");\\n        _tokenURIPrefix = newValue;\\n    }\\n\\n    function setTokenURISuffix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"TOKENS_URI_FROZEN\\\");\\n        _tokenURISuffix = newValue;\\n    }\\n\\n    function freezeTokenURI() external onlyOwner {\\n        tokenURIFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function placeholderURI() public view returns (string memory) {\\n        return _placeholderURI;\\n    }\\n\\n    function tokenURIPrefix() public view returns (string memory) {\\n        return _tokenURIPrefix;\\n    }\\n\\n    function tokenURISuffix() public view returns (string memory) {\\n        return _tokenURISuffix;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, IERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return\\n            bytes(_tokenURIPrefix).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        _tokenURIPrefix,\\n                        Strings.toString(_tokenId),\\n                        _tokenURISuffix\\n                    )\\n                )\\n                : _placeholderURI;\\n    }\\n}\\n\",\"keccak256\":\"0x6e2c743d48b6a4c81bdb76c64468223fb6182e28880df61cdbdb0f9df748c03d\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721PublicSaleExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721PublicSaleExtension {\\n    function setPublicSalePrice(uint256 newValue) external;\\n\\n    function setPublicSaleMaxMintPerTx(uint256 newValue) external;\\n\\n    function togglePublicSaleStatus(bool isActive) external;\\n\\n    function mintPublicSale(address to, uint256 count) external payable;\\n}\\n\\n/**\\n * @dev Extension to provide pre-sale and public-sale capabilities for collectors to mint for a specific price.\\n */\\nabstract contract ERC721PublicSaleExtension is\\n    Initializable,\\n    IERC721PublicSaleExtension,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension,\\n    ReentrancyGuard\\n{\\n    uint256 public publicSalePrice;\\n    uint256 public publicSaleMaxMintPerTx;\\n    bool public publicSaleStatus;\\n\\n    function __ERC721PublicSaleExtension_init(\\n        uint256 _publicSalePrice,\\n        uint256 _publicSaleMaxMintPerTx\\n    ) internal onlyInitializing {\\n        __ERC721PublicSaleExtension_init_unchained(\\n            _publicSalePrice,\\n            _publicSaleMaxMintPerTx\\n        );\\n    }\\n\\n    function __ERC721PublicSaleExtension_init_unchained(\\n        uint256 _publicSalePrice,\\n        uint256 _publicSaleMaxMintPerTx\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721PublicSaleExtension).interfaceId);\\n\\n        publicSalePrice = _publicSalePrice;\\n        publicSaleMaxMintPerTx = _publicSaleMaxMintPerTx;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPublicSalePrice(uint256 newValue) external onlyOwner {\\n        publicSalePrice = newValue;\\n    }\\n\\n    function setPublicSaleMaxMintPerTx(uint256 newValue) external onlyOwner {\\n        publicSaleMaxMintPerTx = newValue;\\n    }\\n\\n    function togglePublicSaleStatus(bool isActive) external onlyOwner {\\n        publicSaleStatus = isActive;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721AutoIdMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function mintPublicSale(address to, uint256 count)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(publicSaleStatus, \\\"PUBLIC_SALE_NOT_ACTIVE\\\");\\n        require(count <= publicSaleMaxMintPerTx, \\\"PUBLIC_SALE_LIMIT\\\");\\n        require(publicSalePrice * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n\\n        _mintTo(to, count);\\n    }\\n}\\n\",\"keccak256\":\"0x30ec48de823ad12e035775ab659164c7794554dced92435058225f66a14c9cda\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721RoleBasedMintExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721RoleBasedMintExtension {\\n    function mintByRole(address to, uint256 count) external;\\n}\\n\\n/**\\n * @dev Extension to allow holders of a OpenZepplin-based role to mint directly.\\n */\\nabstract contract ERC721RoleBasedMintExtension is\\n    IERC721RoleBasedMintExtension,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension,\\n    AccessControl\\n{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    function __ERC721RoleBasedMintExtension_init(address minter)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721RoleBasedMintExtension_init_unchained(minter);\\n    }\\n\\n    function __ERC721RoleBasedMintExtension_init_unchained(address minter)\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721RoleBasedMintExtension).interfaceId);\\n\\n        _setupRole(MINTER_ROLE, minter);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintByRole(address to, uint256 count) external {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"NOT_MINTER_ROLE\\\");\\n\\n        _mintTo(to, count);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, AccessControl, ERC721AutoIdMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x0bdd28eadd94d63494506b516fe13988131a39b907b83cf391e183bfd8d0bcc3\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721RoyaltyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltyOverride.sol\\\";\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/RoyaltyOverrideCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"../../../misc/rarible/IRoyalties.sol\\\";\\nimport \\\"../../../misc/rarible/LibPart.sol\\\";\\nimport \\\"../../../misc/rarible/LibRoyaltiesV2.sol\\\";\\n\\ninterface IERC721RoyaltyExtension {\\n    function setTokenRoyalties(\\n        IEIP2981RoyaltyOverride.TokenRoyaltyConfig[] calldata royaltyConfigs\\n    ) external;\\n\\n    function setDefaultRoyalty(\\n        IEIP2981RoyaltyOverride.TokenRoyalty calldata royalty\\n    ) external;\\n\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (LibPart.Part[] memory result);\\n}\\n\\n/**\\n * @dev Extension to signal configured royalty to famous marketplaces as well as ERC2981.\\n *\\n * This extension currently supports Standard ERC2981, Rarible.\\n * Note that OpenSea is supported via Flair metadata feature.\\n */\\nabstract contract ERC721RoyaltyExtension is\\n    Initializable,\\n    IERC721RoyaltyExtension,\\n    IRoyalties,\\n    Ownable,\\n    ERC165Storage,\\n    EIP2981RoyaltyOverrideCore\\n{\\n    function __ERC721RoyaltyExtension_init(\\n        address defaultRoyaltyReceiver,\\n        uint16 defaultRoyaltyBps\\n    ) internal onlyInitializing {\\n        __ERC721RoyaltyExtension_init_unchained(\\n            defaultRoyaltyReceiver,\\n            defaultRoyaltyBps\\n        );\\n    }\\n\\n    function __ERC721RoyaltyExtension_init_unchained(\\n        address defaultRoyaltyReceiver,\\n        uint16 defaultRoyaltyBps\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721RoyaltyExtension).interfaceId);\\n        _registerInterface(type(IEIP2981).interfaceId);\\n        _registerInterface(type(IEIP2981RoyaltyOverride).interfaceId);\\n        _registerInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES);\\n\\n        TokenRoyalty memory royalty = TokenRoyalty(\\n            defaultRoyaltyReceiver,\\n            defaultRoyaltyBps\\n        );\\n\\n        _setDefaultRoyalty(royalty);\\n    }\\n\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royaltyConfigs)\\n        external\\n        override(IEIP2981RoyaltyOverride, IERC721RoyaltyExtension)\\n        onlyOwner\\n    {\\n        _setTokenRoyalties(royaltyConfigs);\\n    }\\n\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty)\\n        external\\n        override(IEIP2981RoyaltyOverride, IERC721RoyaltyExtension)\\n        onlyOwner\\n    {\\n        _setDefaultRoyalty(royalty);\\n    }\\n\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        override(IRoyalties, IERC721RoyaltyExtension)\\n        returns (LibPart.Part[] memory result)\\n    {\\n        result = new LibPart.Part[](1);\\n\\n        result[0].account = payable(defaultRoyalty.recipient);\\n        result[0].value = defaultRoyalty.bps;\\n\\n        id;\\n        // avoid unused param warning\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, EIP2981RoyaltyOverrideCore)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc1a0c61f4d8fbd5c69ac065c1a7bb3dcdc089ab7ed8caa8bc2bb9830a79dae39\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721SimpleProceedsExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\ninterface IERC721SimpleProceedsExtension {\\n    function setProceedsRecipient(address _proceedsRecipient) external;\\n\\n    function lockProceedsRecipient() external;\\n\\n    function withdraw() external;\\n}\\n\\n/**\\n * @dev Extension to allow contract owner to withdraw all the funds directly.\\n */\\nabstract contract ERC721SimpleProceedsExtension is\\n    Initializable,\\n    IERC721SimpleProceedsExtension,\\n    Ownable,\\n    ERC165Storage\\n{\\n    address public proceedsRecipient;\\n    bool public proceedsRecipientLocked;\\n\\n    function __ERC721SimpleProceedsExtension_init(address _proceedsRecipient)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721SimpleProceedsExtension_init_unchained(_proceedsRecipient);\\n    }\\n\\n    function __ERC721SimpleProceedsExtension_init_unchained(\\n        address _proceedsRecipient\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721SimpleProceedsExtension).interfaceId);\\n\\n        proceedsRecipient = _proceedsRecipient;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setProceedsRecipient(address _proceedsRecipient)\\n        external\\n        onlyOwner\\n    {\\n        require(!proceedsRecipientLocked, \\\"ERC721/RECIPIENT_LOCKED\\\");\\n        proceedsRecipient = _proceedsRecipient;\\n    }\\n\\n    function lockProceedsRecipient() external onlyOwner {\\n        require(!proceedsRecipientLocked, \\\"ERC721/RECIPIENT_LOCKED\\\");\\n        proceedsRecipientLocked = true;\\n    }\\n\\n    function withdraw() external {\\n        require(proceedsRecipient != address(0), \\\"ERC721/NO_RECIPIENT\\\");\\n\\n        uint256 balance = address(this).balance;\\n\\n        payable(proceedsRecipient).transfer(balance);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x77327a99ed33f6fa4dac6d3ea8286b9e6349b02800270c12dcbe1973751490e1\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/extensions/ERC721ACollectionMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {IERC721CollectionMetadataExtension} from \\\"../../ERC721/extensions/ERC721CollectionMetadataExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow configuring contract-level collection metadata URI.\\n */\\nabstract contract ERC721ACollectionMetadataExtension is\\n    IERC721CollectionMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage\\n{\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    string private _contractURI;\\n\\n    function __ERC721ACollectionMetadataExtension_init(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        __ERC721ACollectionMetadataExtension_init_unchained(\\n            name_,\\n            symbol_,\\n            contractURI_\\n        );\\n    }\\n\\n    function __ERC721ACollectionMetadataExtension_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _contractURI = contractURI_;\\n\\n        _registerInterface(\\n            type(IERC721CollectionMetadataExtension).interfaceId\\n        );\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setContractURI(string memory newValue) external onlyOwner {\\n        _contractURI = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n}\\n\",\"keccak256\":\"0x2d30323d8ec062ec0d1564782268a602a5c1aca9ed8faa4f38fd1b36f6933703\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/extensions/ERC721ALockableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\ninterface IERC721ALockableExtension {\\n    function locked(uint256 tokenId) external view returns (bool);\\n}\\n\\n/**\\n * @dev Extension to allow locking NFTs, for use-cases like staking, without leaving holders wallet.\\n */\\nabstract contract ERC721ALockableExtension is\\n    IERC721ALockableExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AMinterExtension,\\n    ReentrancyGuard\\n{\\n    using BitMaps for BitMaps.BitMap;\\n\\n    BitMaps.BitMap internal lockedTokens;\\n\\n    function __ERC721ALockableExtension_init() internal onlyInitializing {\\n        __ERC721ALockableExtension_init_unchained();\\n    }\\n\\n    function __ERC721ALockableExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721ALockableExtension).interfaceId);\\n    }\\n\\n    // PUBLIC\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721AMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * At this moment staking is only possible from a certain address (usually a smart contract).\\n     *\\n     * This is because in almost all cases you want another contract to perform custom logic on lock and unlock operations,\\n     * without allowing users to directly unlock their tokens and sell them, for example.\\n     */\\n    function _lock(uint256 tokenId) internal virtual {\\n        require(!lockedTokens.get(tokenId), \\\"ERC721/ALREADY_LOCKED\\\");\\n        lockedTokens.set(tokenId);\\n    }\\n\\n    function _unlock(uint256 tokenId) internal virtual {\\n        require(lockedTokens.get(tokenId), \\\"ERC721/NOT_LOCKED\\\");\\n        lockedTokens.unset(tokenId);\\n    }\\n\\n    /**\\n     * Returns if a token is locked or not.\\n     */\\n    function locked(uint256 tokenId) public view virtual returns (bool) {\\n        return lockedTokens.get(tokenId);\\n    }\\n\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual override(ERC721A) {\\n        require(\\n            // We are not checking the quantity because it is only used during mint where users cannot stake/unstake.\\n            !lockedTokens.get(startTokenId),\\n            \\\"ERC721/TOKEN_LOCKED\\\"\\n        );\\n        super._beforeTokenTransfers(from, to, startTokenId, quantity);\\n    }\\n}\\n\",\"keccak256\":\"0xb2172377b5af301734d9a0fac8c190291ca0a6d36af9d4c9daa42de6713b7da8\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/extensions/ERC721AMinterExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport {IERC721AutoIdMinterExtension} from \\\"../../ERC721/extensions/ERC721AutoIdMinterExtension.sol\\\";\\n\\n/**\\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\\n */\\nabstract contract ERC721AMinterExtension is\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721A\\n{\\n    using SafeMath for uint256;\\n\\n    uint256 public maxSupply;\\n    bool public maxSupplyFrozen;\\n\\n    function __ERC721AMinterExtension_init(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721AMinterExtension_init_unchained(_maxSupply);\\n    }\\n\\n    function __ERC721AMinterExtension_init_unchained(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        maxSupply = _maxSupply;\\n\\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721A).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMaxSupply(uint256 newValue) external onlyOwner {\\n        require(!maxSupplyFrozen, \\\"BASE_URI_FROZEN\\\");\\n        maxSupply = newValue;\\n    }\\n\\n    function freezeMaxSupply() external onlyOwner {\\n        maxSupplyFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721A)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _mintTo(address to, uint256 count) internal {\\n        require(totalSupply() + count <= maxSupply, \\\"EXCEEDS_MAX_SUPPLY\\\");\\n        _safeMint(to, count);\\n    }\\n}\\n\",\"keccak256\":\"0x0cc3c162ae035dbd2788bbce3738c67ec31ff9a05ec105cec1f1fabdbcfada4f\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/extensions/ERC721AOpenSeaNoGasExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport \\\"../../../misc/opensea/ProxyRegistry.sol\\\";\\n\\nimport {IERC721OpenSeaNoGasExtension} from \\\"../../ERC721/extensions/ERC721OpenSeaNoGasExtension.sol\\\";\\n\\n/**\\n * @dev Extension that automatically approves OpenSea to avoid having users to \\\"Approve\\\" your collection before trading.\\n */\\nabstract contract ERC721AOpenSeaNoGasExtension is\\n    IERC721OpenSeaNoGasExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721A\\n{\\n    address internal _openSeaProxyRegistryAddress;\\n    address private _openSeaExchangeAddress;\\n\\n    function __ERC721AOpenSeaNoGasExtension_init(\\n        address openSeaProxyRegistryAddress,\\n        address openSeaExchangeAddress\\n    ) internal onlyInitializing {\\n        __ERC721AOpenSeaNoGasExtension_init_unchained(\\n            openSeaProxyRegistryAddress,\\n            openSeaExchangeAddress\\n        );\\n    }\\n\\n    function __ERC721AOpenSeaNoGasExtension_init_unchained(\\n        address openSeaProxyRegistryAddress,\\n        address openSeaExchangeAddress\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721OpenSeaNoGasExtension).interfaceId);\\n\\n        _openSeaProxyRegistryAddress = openSeaProxyRegistryAddress;\\n        _openSeaExchangeAddress = openSeaExchangeAddress;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setOpenSeaProxyRegistryAddress(address addr) external onlyOwner {\\n        _openSeaProxyRegistryAddress = addr;\\n    }\\n\\n    function setOpenSeaExchangeAddress(address addr) external onlyOwner {\\n        _openSeaExchangeAddress = addr;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721A)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override(ERC721A, IERC721OpenSeaNoGasExtension)\\n        returns (bool)\\n    {\\n        if (_openSeaProxyRegistryAddress != address(0)) {\\n            // Whitelist OpenSea proxy contract for easy trading.\\n            ProxyRegistry proxyRegistry = ProxyRegistry(\\n                _openSeaProxyRegistryAddress\\n            );\\n\\n            if (address(proxyRegistry.proxies(owner)) == operator) {\\n                return true;\\n            }\\n        }\\n\\n        if (_openSeaExchangeAddress != address(0)) {\\n            // If OpenSea's ERC721 exchange address is detected, auto-approve\\n            if (operator == address(_openSeaExchangeAddress)) {\\n                return true;\\n            }\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n}\\n\",\"keccak256\":\"0x929dd109b56aa0072a6fe9d3f3cb116439cac30811cf104b75db204d200b90fb\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/extensions/ERC721AOwnerMintExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721OwnerMintExtension} from \\\"../../ERC721/extensions/ERC721OwnerMintExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow owner to mint directly without paying.\\n */\\nabstract contract ERC721AOwnerMintExtension is\\n    IERC721OwnerMintExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AMinterExtension\\n{\\n    function __ERC721AOwnerMintExtension_init() internal onlyInitializing {\\n        __ERC721AOwnerMintExtension_init_unchained();\\n    }\\n\\n    function __ERC721AOwnerMintExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721OwnerMintExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintByOwner(address to, uint256 count) external onlyOwner {\\n        _mintTo(to, count);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721AMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xa38184dc95e787b11bbb29007440c0a94e97eed59720d23888d0db6fbd6a268c\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/extensions/ERC721APreSaleExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721PreSaleExtension} from \\\"../../ERC721/extensions/ERC721PreSaleExtension.sol\\\";\\n\\n/**\\n * @dev Extension to provide pre-sale capabilities for certain collectors to mint for a specific price.\\n */\\nabstract contract ERC721APreSaleExtension is\\n    IERC721PreSaleExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AMinterExtension,\\n    ReentrancyGuard\\n{\\n    uint256 public preSalePrice;\\n    uint256 public preSaleMaxMintPerWallet;\\n    bytes32 public preSaleAllowlistMerkleRoot;\\n    bool public preSaleStatus;\\n\\n    mapping(address => uint256) internal preSaleAllowlistClaimed;\\n\\n    function __ERC721APreSaleExtension_init(\\n        uint256 _preSalePrice,\\n        uint256 _preSaleMaxMintPerWallet\\n    ) internal onlyInitializing {\\n        __ERC721APreSaleExtension_init_unchained(\\n            _preSalePrice,\\n            _preSaleMaxMintPerWallet\\n        );\\n    }\\n\\n    function __ERC721APreSaleExtension_init_unchained(\\n        uint256 _preSalePrice,\\n        uint256 _preSaleMaxMintPerWallet\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721PreSaleExtension).interfaceId);\\n\\n        preSalePrice = _preSalePrice;\\n        preSaleMaxMintPerWallet = _preSaleMaxMintPerWallet;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPreSalePrice(uint256 newValue) external onlyOwner {\\n        preSalePrice = newValue;\\n    }\\n\\n    function setPreSaleMaxMintPerWallet(uint256 newValue) external onlyOwner {\\n        preSaleMaxMintPerWallet = newValue;\\n    }\\n\\n    function setAllowlistMerkleRoot(bytes32 newRoot) external onlyOwner {\\n        preSaleAllowlistMerkleRoot = newRoot;\\n    }\\n\\n    function togglePreSaleStatus(bool isActive) external onlyOwner {\\n        preSaleStatus = isActive;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721AMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function onPreSaleAllowList(address minter, bytes32[] calldata proof)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            MerkleProof.verify(\\n                proof,\\n                preSaleAllowlistMerkleRoot,\\n                _generateMerkleLeaf(minter)\\n            );\\n    }\\n\\n    function mintPreSale(uint256 count, bytes32[] calldata proof)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(preSaleStatus, \\\"PRE_SALE_NOT_ACTIVE\\\");\\n\\n        address to = _msgSender();\\n\\n        require(\\n            MerkleProof.verify(\\n                proof,\\n                preSaleAllowlistMerkleRoot,\\n                _generateMerkleLeaf(to)\\n            ),\\n            \\\"PRE_SALE_WRONG_PROOF\\\"\\n        );\\n        require(\\n            preSaleAllowlistClaimed[to] + count <= preSaleMaxMintPerWallet,\\n            \\\"PRE_SALE_LIMIT\\\"\\n        );\\n        require(preSalePrice * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n\\n        preSaleAllowlistClaimed[to] += count;\\n\\n        _mintTo(to, count);\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _generateMerkleLeaf(address account)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(account));\\n    }\\n}\\n\",\"keccak256\":\"0xd46f9fca9d91ed91b519664c7136dfaf327878b3e3c1c6c7f5ad8435070e0d31\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/extensions/ERC721APrefixedMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport {IERC721PrefixedMetadataExtension} from \\\"../../ERC721/extensions/ERC721PrefixedMetadataExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow configuring tokens metadata URI.\\n *      In this extension tokens will have a shared token URI prefix,\\n *      therefore on tokenURI() token's ID will be appended to the base URI.\\n *      It also allows configuring a fallback \\\"placeholder\\\" URI when prefix is not set yet.\\n */\\nabstract contract ERC721APrefixedMetadataExtension is\\n    IERC721PrefixedMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721A\\n{\\n    string internal _placeholderURI;\\n    string internal _tokenURIPrefix;\\n    string internal _tokenURISuffix;\\n\\n    bool public tokenURIFrozen;\\n\\n    function __ERC721APrefixedMetadataExtension_init(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        __ERC721APrefixedMetadataExtension_init_unchained(\\n            placeholderURI_,\\n            tokenURIPrefix_\\n        );\\n    }\\n\\n    function __ERC721APrefixedMetadataExtension_init_unchained(\\n        string memory placeholderURI_,\\n        string memory tokenURIPrefix_\\n    ) internal onlyInitializing {\\n        _placeholderURI = placeholderURI_;\\n        _tokenURIPrefix = tokenURIPrefix_;\\n        _tokenURISuffix = \\\".json\\\";\\n\\n        _registerInterface(type(IERC721PrefixedMetadataExtension).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPlaceholderURI(string memory newValue) external onlyOwner {\\n        _placeholderURI = newValue;\\n    }\\n\\n    function setTokenURIPrefix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"TOKENS_URI_FROZEN\\\");\\n        _tokenURIPrefix = newValue;\\n    }\\n\\n    function setTokenURISuffix(string memory newValue) external onlyOwner {\\n        require(!tokenURIFrozen, \\\"TOKENS_URI_FROZEN\\\");\\n        _tokenURISuffix = newValue;\\n    }\\n\\n    function freezeTokenURI() external onlyOwner {\\n        tokenURIFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721A)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function placeholderURI() public view returns (string memory) {\\n        return _placeholderURI;\\n    }\\n\\n    function tokenURIPrefix() public view returns (string memory) {\\n        return _tokenURIPrefix;\\n    }\\n\\n    function tokenURISuffix() public view returns (string memory) {\\n        return _tokenURISuffix;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A, IERC721PrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return\\n            bytes(_tokenURIPrefix).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        _tokenURIPrefix,\\n                        Strings.toString(_tokenId),\\n                        _tokenURISuffix\\n                    )\\n                )\\n                : _placeholderURI;\\n    }\\n}\\n\",\"keccak256\":\"0xab394a305a1017506f47c4f9271fb2c7dc5f6f9b3496e1ad6344a4b3312de25b\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/extensions/ERC721APublicSaleExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721PublicSaleExtension} from \\\"../../ERC721/extensions/ERC721PublicSaleExtension.sol\\\";\\n\\n/**\\n * @dev Extension to provide pre-sale and public-sale capabilities for collectors to mint for a specific price.\\n */\\nabstract contract ERC721APublicSaleExtension is\\n    IERC721PublicSaleExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721AMinterExtension,\\n    ReentrancyGuard\\n{\\n    uint256 public publicSalePrice;\\n    uint256 public publicSaleMaxMintPerTx;\\n    bool public publicSaleStatus;\\n\\n    function __ERC721APublicSaleExtension_init(\\n        uint256 _publicSalePrice,\\n        uint256 _publicSaleMaxMintPerTx\\n    ) internal onlyInitializing {\\n        __ERC721APublicSaleExtension_init_unchained(\\n            _publicSalePrice,\\n            _publicSaleMaxMintPerTx\\n        );\\n    }\\n\\n    function __ERC721APublicSaleExtension_init_unchained(\\n        uint256 _publicSalePrice,\\n        uint256 _publicSaleMaxMintPerTx\\n    ) internal onlyInitializing {\\n        _registerInterface(type(IERC721PublicSaleExtension).interfaceId);\\n\\n        publicSalePrice = _publicSalePrice;\\n        publicSaleMaxMintPerTx = _publicSaleMaxMintPerTx;\\n    }\\n\\n    /* ADMIN */\\n\\n    function setPublicSalePrice(uint256 newValue) external onlyOwner {\\n        publicSalePrice = newValue;\\n    }\\n\\n    function setPublicSaleMaxMintPerTx(uint256 newValue) external onlyOwner {\\n        publicSaleMaxMintPerTx = newValue;\\n    }\\n\\n    function togglePublicSaleStatus(bool isActive) external onlyOwner {\\n        publicSaleStatus = isActive;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721AMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function mintPublicSale(address to, uint256 count)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(publicSaleStatus, \\\"PUBLIC_SALE_NOT_ACTIVE\\\");\\n        require(count <= publicSaleMaxMintPerTx, \\\"PUBLIC_SALE_LIMIT\\\");\\n        require(publicSalePrice * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n\\n        _mintTo(to, count);\\n    }\\n}\\n\",\"keccak256\":\"0x92154ee01242873d5c66bf2a2671b1f210c2153fbe02dce904d14a420098265e\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/extensions/ERC721ARoleBasedLockableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ERC721ALockableExtension.sol\\\";\\n\\ninterface IERC721ARoleBasedLockableExtension {\\n    function hasRoleBasedLockableExtension() external view returns (bool);\\n\\n    function lock(uint256[] calldata) external;\\n\\n    function unlock(uint256[] calldata) external;\\n}\\n\\n/**\\n * @dev Extension to allow locking NFTs, for use-cases like staking, without leaving holders wallet, using roles.\\n */\\nabstract contract ERC721ARoleBasedLockableExtension is\\n    IERC721ARoleBasedLockableExtension,\\n    ERC721ALockableExtension,\\n    AccessControl\\n{\\n    using BitMaps for BitMaps.BitMap;\\n\\n    bytes32 public constant LOCKER_ROLE = keccak256(\\\"LOCKER_ROLE\\\");\\n\\n    function __ERC721ARoleBasedLockableExtension_init()\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721ARoleBasedLockableExtension_init_unchained();\\n    }\\n\\n    function __ERC721ARoleBasedLockableExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(\\n            type(IERC721ARoleBasedLockableExtension).interfaceId\\n        );\\n    }\\n\\n    // ADMIN\\n\\n    /**\\n     * Locks token(s) to effectively lock them, while keeping in the same wallet.\\n     * This mechanism prevents them from being transferred, yet still will show correct owner.\\n     */\\n    function lock(uint256[] calldata tokenIds) public virtual nonReentrant {\\n        require(\\n            hasRole(LOCKER_ROLE, msg.sender),\\n            \\\"STAKABLE_ERC721/NOT_LOCKER_ROLE\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _lock(tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * Unlocks locked token(s) to be able to transfer.\\n     */\\n    function unlock(uint256[] calldata tokenIds) public virtual nonReentrant {\\n        require(\\n            hasRole(LOCKER_ROLE, msg.sender),\\n            \\\"STAKABLE_ERC721/NOT_LOCKER_ROLE\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _unlock(tokenIds[i]);\\n        }\\n    }\\n\\n    // PUBLIC\\n\\n    function hasRoleBasedLockableExtension()\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return true;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControl, ERC721ALockableExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xea9e47dad16b5f99428e006f20e81ddd30192573ac43908ed90460104f090b00\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/extensions/ERC721ARoleBasedMintExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721AMinterExtension.sol\\\";\\n\\nimport {IERC721RoleBasedMintExtension} from \\\"../../ERC721/extensions/ERC721RoleBasedMintExtension.sol\\\";\\n\\n/**\\n * @dev Extension to allow holders of a OpenZepplin-based role to mint directly.\\n */\\nabstract contract ERC721ARoleBasedMintExtension is\\n    IERC721RoleBasedMintExtension,\\n    ERC165Storage,\\n    ERC721AMinterExtension,\\n    AccessControl\\n{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    function __ERC721ARoleBasedMintExtension_init(address minter)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721ARoleBasedMintExtension_init_unchained(minter);\\n    }\\n\\n    function __ERC721ARoleBasedMintExtension_init_unchained(address minter)\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721RoleBasedMintExtension).interfaceId);\\n\\n        _setupRole(MINTER_ROLE, minter);\\n    }\\n\\n    /* ADMIN */\\n\\n    function mintByRole(address to, uint256 count) external {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"NOT_MINTER_ROLE\\\");\\n\\n        _mintTo(to, count);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, AccessControl, ERC721AMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xe4377ffb273d7c7e57f8c1addab757ceb0794cb39330644c9109a2d323f7b120\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../../common/meta-transactions/ERC2771ContextOwnable.sol\\\";\\nimport \\\"../../ERC721/extensions/ERC721SimpleProceedsExtension.sol\\\";\\nimport \\\"../../ERC721/extensions/ERC721RoyaltyExtension.sol\\\";\\nimport \\\"../extensions/ERC721ACollectionMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721APrefixedMetadataExtension.sol\\\";\\nimport \\\"../extensions/ERC721AMinterExtension.sol\\\";\\nimport \\\"../extensions/ERC721AOwnerMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721APreSaleExtension.sol\\\";\\nimport \\\"../extensions/ERC721APublicSaleExtension.sol\\\";\\nimport \\\"../extensions/ERC721ARoleBasedMintExtension.sol\\\";\\nimport \\\"../extensions/ERC721ARoleBasedLockableExtension.sol\\\";\\nimport \\\"../extensions/ERC721AOpenSeaNoGasExtension.sol\\\";\\n\\ncontract ERC721AFullFeaturedCollection is\\n    Ownable,\\n    ERC165Storage,\\n    ERC721A,\\n    ERC2771ContextOwnable,\\n    ERC721ACollectionMetadataExtension,\\n    ERC721APrefixedMetadataExtension,\\n    ERC721AMinterExtension,\\n    ERC721AOwnerMintExtension,\\n    ERC721APreSaleExtension,\\n    ERC721APublicSaleExtension,\\n    ERC721SimpleProceedsExtension,\\n    ERC721ARoleBasedMintExtension,\\n    ERC721ARoleBasedLockableExtension,\\n    ERC721RoyaltyExtension,\\n    ERC721AOpenSeaNoGasExtension\\n{\\n    struct Config {\\n        string name;\\n        string symbol;\\n        string contractURI;\\n        string placeholderURI;\\n        string tokenURIPrefix;\\n        uint256 maxSupply;\\n        uint256 preSalePrice;\\n        uint256 preSaleMaxMintPerWallet;\\n        uint256 publicSalePrice;\\n        uint256 publicSaleMaxMintPerTx;\\n        address defaultRoyaltyAddress;\\n        uint16 defaultRoyaltyBps;\\n        address proceedsRecipient;\\n        address openSeaProxyRegistryAddress;\\n        address openSeaExchangeAddress;\\n        address trustedForwarder;\\n    }\\n\\n    constructor(Config memory config) ERC721A(config.name, config.symbol) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, deployer);\\n\\n        _transferOwnership(deployer);\\n\\n        __ERC721ACollectionMetadataExtension_init(\\n            config.name,\\n            config.symbol,\\n            config.contractURI\\n        );\\n        __ERC721APrefixedMetadataExtension_init(\\n            config.placeholderURI,\\n            config.tokenURIPrefix\\n        );\\n        __ERC721AMinterExtension_init(config.maxSupply);\\n        __ERC721AOwnerMintExtension_init();\\n        __ERC721ARoleBasedMintExtension_init(deployer);\\n        __ERC721APreSaleExtension_init_unchained(\\n            config.preSalePrice,\\n            config.preSaleMaxMintPerWallet\\n        );\\n        __ERC721APublicSaleExtension_init(\\n            config.publicSalePrice,\\n            config.publicSaleMaxMintPerTx\\n        );\\n        __ERC721SimpleProceedsExtension_init(config.proceedsRecipient);\\n        __ERC721RoyaltyExtension_init(\\n            config.defaultRoyaltyAddress,\\n            config.defaultRoyaltyBps\\n        );\\n        __ERC721AOpenSeaNoGasExtension_init(\\n            config.openSeaProxyRegistryAddress,\\n            config.openSeaExchangeAddress\\n        );\\n        __ERC2771ContextOwnable_init(config.trustedForwarder);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (address sender)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771ContextOwnable, Context)\\n        returns (bytes calldata)\\n    {\\n        return super._msgData();\\n    }\\n\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual override(ERC721A, ERC721ALockableExtension) {\\n        ERC721ALockableExtension._beforeTokenTransfers(\\n            from,\\n            to,\\n            startTokenId,\\n            quantity\\n        );\\n    }\\n\\n    /* PUBLIC */\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(\\n            ERC165Storage,\\n            ERC721A,\\n            ERC721ACollectionMetadataExtension,\\n            ERC721APrefixedMetadataExtension,\\n            ERC721AMinterExtension,\\n            ERC721APreSaleExtension,\\n            ERC721APublicSaleExtension,\\n            ERC721SimpleProceedsExtension,\\n            ERC721AOwnerMintExtension,\\n            ERC721ARoleBasedMintExtension,\\n            ERC721ARoleBasedLockableExtension,\\n            ERC721RoyaltyExtension,\\n            ERC721AOpenSeaNoGasExtension\\n        )\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function name()\\n        public\\n        view\\n        override(ERC721A, ERC721ACollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721ACollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        override(ERC721A, ERC721ACollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721ACollectionMetadataExtension.symbol();\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override(ERC721A, ERC721AOpenSeaNoGasExtension)\\n        returns (bool)\\n    {\\n        return ERC721AOpenSeaNoGasExtension.isApprovedForAll(owner, operator);\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A, ERC721APrefixedMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721APrefixedMetadataExtension.tokenURI(_tokenId);\\n    }\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            uint256 _maxSupply,\\n            uint256 _totalSupply,\\n            uint256 _senderBalance,\\n            uint256 _preSalePrice,\\n            uint256 _preSaleMaxMintPerWallet,\\n            uint256 _preSaleAlreadyClaimed,\\n            bool _preSaleActive,\\n            uint256 _publicSalePrice,\\n            uint256 _publicSaleMaxMintPerTx,\\n            bool _publicSaleActive\\n        )\\n    {\\n        uint256 balance = 0;\\n\\n        if (_msgSender() != address(0)) {\\n            balance = this.balanceOf(_msgSender());\\n        }\\n\\n        return (\\n            maxSupply,\\n            this.totalSupply(),\\n            balance,\\n            preSalePrice,\\n            preSaleMaxMintPerWallet,\\n            preSaleAllowlistClaimed[_msgSender()],\\n            preSaleStatus,\\n            publicSalePrice,\\n            publicSaleMaxMintPerTx,\\n            publicSaleStatus\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcf5e47f317729e42bed5561a9cb6b17a3e259ffc66b809e0bdcf9fc32a678ba4\",\"license\":\"AGPL-3.0\"},\"contracts/common/meta-transactions/ERC2771ContextOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextOwnable is Initializable, Context, Ownable {\\n    address public _trustedForwarder;\\n\\n    function __ERC2771ContextOwnable_init(address trustedForwarder)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC2771ContextOwnable_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771ContextOwnable_init_unchained(address trustedForwarder)\\n        internal\\n        onlyInitializing\\n    {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarder) public onlyOwner {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3dedaac5900cf7b1a07fd58464c66da127cf2899962249dbc2117eb39b9d3a64\",\"license\":\"MIT\"},\"contracts/misc/opensea/ProxyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\",\"keccak256\":\"0x9039c735f73f8a5b2080072c52662daa30d7bdac71eda0b233032ac04b9e482e\",\"license\":\"MIT\"},\"contracts/misc/rarible/IRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface IRoyalties {\\n    function getRaribleV2Royalties(uint256 id)\\n        external\\n        view\\n        returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x958b8627e821a3e4fddd8b2792de5768e84a3d9b9857e9eb22528514b6623a65\",\"license\":\"MIT\"},\"contracts/misc/rarible/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH =\\n        keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xa664a77beb3c3efff76ac265b377e53d7156dcdec00eaa0678795c2622559a15\",\"license\":\"MIT\"},\"contracts/misc/rarible/LibRoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\",\"keccak256\":\"0x887598ce08f9dfc515b9b9e767d4410f469cf29be131dee12f552784e3b4819c\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.1.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev ERC721 token receiver interface.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\\n * including the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at `_startTokenId()`\\n * (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Mask of an entry in packed address data.\\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with `_mintERC2309`.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to `_mintERC2309`\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See `_packedOwnershipOf` implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see `_totalMinted`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to `_startTokenId()`\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an ownership that has an address and is not burned\\n                        // before an ownership that does not have an address and is not burned.\\n                        // Hence, curr will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed is zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << BITPOS_NEXT_INITIALIZED`.\\n            result := shl(BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 tokenId = startTokenId;\\n            uint256 end = startTokenId + quantity;\\n            do {\\n                emit Transfer(address(0), to, tokenId++);\\n            } while (tokenId < end);\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        mapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\\n        assembly {\\n            // Compute the slot.\\n            mstore(0x00, tokenId)\\n            mstore(0x20, tokenApprovalsPtr.slot)\\n            approvedAddressSlot := keccak256(0x00, 0x40)\\n            // Load the slot's value from storage.\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the `approvedAddress` is equals to `from` or `msgSender`.\\n     */\\n    function _isOwnerOrApproved(\\n        address approvedAddress,\\n        address from,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            from := and(from, BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, BITMASK_ADDRESS)\\n            // `msgSender == from || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, from), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << BITPOS_EXTRA_DATA;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred.\\n     * This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred.\\n     * This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\n            // We will need 1 32-byte word to store the length,\\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\n            ptr := add(mload(0x40), 128)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, ptr)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := ptr\\n\\n            // We write the string from the rightmost digit to the leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // Costs a bit more than early returning for the zero case,\\n            // but cheaper in terms of deployment and overall runtime costs.\\n            for {\\n                // Initialize and perform the first pass without check.\\n                let temp := value\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\n                ptr := sub(ptr, 1)\\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n            } temp {\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n            } {\\n                // Body of the for loop.\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n            }\\n\\n            let length := sub(end, ptr)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            ptr := sub(ptr, 32)\\n            // Store the length.\\n            mstore(ptr, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x53cbf7665c255e8eef7581b7b81baee6561880463969ba2bb1bfd475db79fc65\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.1.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\\n        uint24 extraData;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // ==============================\\n    //            IERC721\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // ==============================\\n    //        IERC721Metadata\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // ==============================\\n    //            IERC2309\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0x14469c33c8a3ba9a3627c02ec94dcd9f7f3d6d540f89ea37a358f625058eb309\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005da038038062005da0833981016040819052620000349162000e32565b805160208201516200004f620000496200009a565b620000b6565b81516200006490600490602085019062000c57565b5080516200007a90600590602084019062000c57565b5060006002555050600160145562000093813362000111565b50620010d3565b6000620000b16200028460201b620026d81760201c565b905090565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60006200011f6001620002bd565b9050801562000138576000805461ff0019166101001790555b620001456000836200036f565b6200015082620000b6565b825160208401516040850151620001699291906200037f565b6200018383606001518460800151620003b660201b60201c565b60a08301516200019390620003ec565b6200019d62000424565b620001a8826200045a565b620001c28360c001518460e001516200048f60201b60201c565b620001de836101000151846101200151620004d660201b60201c565b610180830151620001ef906200050c565b6200020b8361014001518461016001516200054160201b60201c565b62000227836101a00151846101c001516200057760201b60201c565b6101e08301516200023890620005ad565b80156200027f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600a546000906001600160a01b0316331415620002a8575060131936013560601c90565b620000b1620005e260201b620026fa1760201c565b60008054610100900460ff161562000326578160ff166001148015620002f65750620002f430620005e660201b620026fe1760201c565b155b6200031e5760405162461bcd60e51b8152600401620003159062000ffd565b60405180910390fd5b506000919050565b60005460ff808416911610620003505760405162461bcd60e51b8152600401620003159062000ffd565b506000805460ff191660ff92909216919091179055600190565b919050565b6200037b8282620005f5565b5050565b600054610100900460ff16620003a95760405162461bcd60e51b815260040162000315906200104b565b6200027f8383836200069b565b600054610100900460ff16620003e05760405162461bcd60e51b815260040162000315906200104b565b6200037b82826200073d565b600054610100900460ff16620004165760405162461bcd60e51b815260040162000315906200104b565b6200042181620007e6565b50565b600054610100900460ff166200044e5760405162461bcd60e51b815260040162000315906200104b565b620004586200084b565b565b600054610100900460ff16620004845760405162461bcd60e51b815260040162000315906200104b565b620004218162000887565b600054610100900460ff16620004b95760405162461bcd60e51b815260040162000315906200104b565b620004cb63209680f760e11b620008ef565b601591909155601655565b600054610100900460ff16620005005760405162461bcd60e51b815260040162000315906200104b565b6200037b828262000973565b600054610100900460ff16620005365760405162461bcd60e51b815260040162000315906200104b565b6200042181620009ba565b600054610100900460ff166200056b5760405162461bcd60e51b815260040162000315906200104b565b6200037b828262000a1e565b600054610100900460ff16620005a15760405162461bcd60e51b815260040162000315906200104b565b6200037b828262000abb565b600054610100900460ff16620005d75760405162461bcd60e51b815260040162000315906200104b565b620004218162000b25565b3390565b6001600160a01b03163b151590565b6000828152601e602090815260408083206001600160a01b038516845290915290205460ff166200037b576000828152601e602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620006576200009a565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600054610100900460ff16620006c55760405162461bcd60e51b815260040162000315906200104b565b8251620006da90600b90602086019062000c57565b508151620006f090600c90602085019062000c57565b5080516200070690600d90602084019062000c57565b5062000719633d96f4ff60e11b620008ef565b6200072b6380ac58cd60e01b620008ef565b6200027f635b5e139f60e01b620008ef565b600054610100900460ff16620007675760405162461bcd60e51b815260040162000315906200104b565b81516200077c90600e90602085019062000c57565b5080516200079290600f90602084019062000c57565b5060408051808201909152600580825264173539b7b760d91b6020909201918252620007c19160109162000c57565b50620007d4631f2f406b60e01b620008ef565b6200037b635b5e139f60e01b620008ef565b600054610100900460ff16620008105760405162461bcd60e51b815260040162000315906200104b565b6012819055620008276330f487b560e11b620008ef565b620008396380ac58cd60e01b620008ef565b6200042163184371e560e31b620008ef565b600054610100900460ff16620008755760405162461bcd60e51b815260040162000315906200104b565b62000458631aa1577160e11b620008ef565b600054610100900460ff16620008b15760405162461bcd60e51b815260040162000315906200104b565b620008c3631a056e7160e01b620008ef565b620004217f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6826200036f565b6001600160e01b031980821614156200094b5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640162000315565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600054610100900460ff166200099d5760405162461bcd60e51b815260040162000315906200104b565b620009af6317e0bac360e31b620008ef565b601a91909155601b55565b600054610100900460ff16620009e45760405162461bcd60e51b815260040162000315906200104b565b620009f663e2b3173560e01b620008ef565b601c80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600054610100900460ff1662000a485760405162461bcd60e51b815260040162000315906200104b565b62000a5a633a47bf5160e11b620008ef565b62000a6c63152a902d60e11b620008ef565b62000a7e63c69dbd8f60e01b620008ef565b62000a9063656cb66560e11b620008ef565b604080518082019091526001600160a01b038316815261ffff821660208201526200027f8162000b71565b600054610100900460ff1662000ae55760405162461bcd60e51b815260040162000315906200104b565b62000af7638d29851f60e01b620008ef565b602380546001600160a01b039384166001600160a01b03199182161790915560248054929093169116179055565b600054610100900460ff1662000b4f5760405162461bcd60e51b815260040162000315906200104b565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b612710816020015161ffff161062000bba5760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b604482015260640162000315565b60408051808201825282516001600160a01b03168082526020808501805161ffff1691909301819052601f8054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419262000c4c92916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b82805462000c659062001096565b90600052602060002090601f01602090048101928262000c89576000855562000cd4565b82601f1062000ca457805160ff191683800117855562000cd4565b8280016001018555821562000cd4579182015b8281111562000cd457825182559160200191906001019062000cb7565b5062000ce292915062000ce6565b5090565b5b8082111562000ce2576000815560010162000ce7565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b038111828210171562000d395762000d3962000cfd565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000d6a5762000d6a62000cfd565b604052919050565b600082601f83011262000d8457600080fd5b81516001600160401b0381111562000da05762000da062000cfd565b602062000db6601f8301601f1916820162000d3f565b828152858284870101111562000dcb57600080fd5b60005b8381101562000deb57858101830151828201840152820162000dce565b8381111562000dfd5760008385840101525b5095945050505050565b80516001600160a01b03811681146200036a57600080fd5b805161ffff811681146200036a57600080fd5b60006020828403121562000e4557600080fd5b81516001600160401b038082111562000e5d57600080fd5b90830190610200828603121562000e7357600080fd5b62000e7d62000d13565b82518281111562000e8d57600080fd5b62000e9b8782860162000d72565b82525060208301518281111562000eb157600080fd5b62000ebf8782860162000d72565b60208301525060408301518281111562000ed857600080fd5b62000ee68782860162000d72565b60408301525060608301518281111562000eff57600080fd5b62000f0d8782860162000d72565b60608301525060808301518281111562000f2657600080fd5b62000f348782860162000d72565b60808301525060a0838101519082015260c0808401519082015260e0808401519082015261010080840151908201526101208084015190820152610140915062000f8082840162000e07565b82820152610160915062000f9682840162000e1f565b82820152610180915062000fac82840162000e07565b828201526101a0915062000fc282840162000e07565b828201526101c0915062000fd882840162000e07565b828201526101e0915062000fee82840162000e07565b91810191909152949350505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600181811c90821680620010ab57607f821691505b60208210811415620010cd57634e487b7160e01b600052602260045260246000fd5b50919050565b614cbd80620010e36000396000f3fe60806040526004361061038e5760003560e01c806301ffc9a7146103935780630653aca5146103c857806306fdde0314610417578063081812fc1461043957806308abf02614610466578063095ea7b31461048857806316744607146104a857806318160ddd146104bd5780631a056e71146104e057806323b872dd14610500578063248a9ca3146105205780632a55205a146105405780632d8e85b01461057f5780632f2ff15d1461059f57806331db3832146105bf5780633542aee2146105d45780633574a2dd146105f457806336568abe146106145780633acf404d146106345780633c0e8f2c1461064a5780633ccfd60b1461066a57806342842e0e1461067f578063464bd6401461069f5780634972471c146106b95780634f972f5f146106da5780635136dcc7146106fa57806356c022bb1461071a578063572b6c051461073a5780635a9b0b891461075a5780635d36598f146107bd5780636352211e146107dd5780636c079cfc146107fd5780636f8b44b01461081d57806370a082311461083d578063714ad8e71461085d578063715018a6146108715780637313cba9146108865780637885fdc71461089b578063791a2519146108d65780637d7eee42146108f65780637e98034214610916578063859610c61461092b5780638a4278ab1461094b5780638da5cb5b1461096b57806391d1485414610980578063938e3d7b146109a057806395d89b41146109c057806399e0dd7c146109d55780639b6860c8146109f55780639e6b2c5b14610a0b578063a217fddf14610a1e578063a22cb46514610a33578063a304ee7614610a53578063a9852bfb14610a78578063aaeaca4814610a98578063b27c6f2d14610aae578063b45a3c0e14610ac4578063b6c693e514610ae4578063b88d4fde14610afe578063ba4695fd14610b1e578063c0ac998314610b33578063c29de63014610b48578063c87b56dd14610b62578063cad96cca14610b82578063d539139314610baf578063d547741f14610bd1578063d5abeb0114610bf1578063d79ff99d14610c07578063da74222814610c1a578063dbbc853b14610c3a578063e3b9a7e514610c4f578063e757c17d14610c6f578063e8a3d48514610c85578063e985e9c514610c9a578063ef60ceaf14610cba578063efa7f90c14610cda578063f2fde38b14610cfa578063f362136714610d1a578063f384702f14610d3c578063f74bbf5914610d56578063f95df41414610d76575b600080fd5b34801561039f57600080fd5b506103b36103ae366004613eda565b610d96565b60405190151581526020015b60405180910390f35b3480156103d457600080fd5b506103e86103e3366004613ef7565b610da7565b60408051825181526020808401516001600160a01b0316908201529181015161ffff16908201526060016103bf565b34801561042357600080fd5b5061042c610e2a565b6040516103bf9190613f68565b34801561044557600080fd5b50610459610454366004613ef7565b610e39565b6040516103bf9190613f7b565b34801561047257600080fd5b50610486610481366004613faf565b610e7d565b005b34801561049457600080fd5b506104866104a3366004613fcc565b610ee7565b3480156104b457600080fd5b50610486610f87565b3480156104c957600080fd5b50600354600254035b6040519081526020016103bf565b3480156104ec57600080fd5b506104866104fb366004613fcc565b610fd5565b34801561050c57600080fd5b5061048661051b366004613ff8565b61103b565b34801561052c57600080fd5b506104d261053b366004613ef7565b6111c7565b34801561054c57600080fd5b5061056061055b366004614039565b6111dc565b604080516001600160a01b0390931683526020830191909152016103bf565b34801561058b57600080fd5b5061048661059a36600461406b565b61129f565b3480156105ab57600080fd5b506104866105ba366004614086565b6112f1565b3480156105cb57600080fd5b50610486611312565b3480156105e057600080fd5b506104866105ef366004613fcc565b611390565b34801561060057600080fd5b5061048661060f36600461418a565b6113cf565b34801561062057600080fd5b5061048661062f366004614086565b611421565b34801561064057600080fd5b506104d260175481565b34801561065657600080fd5b50610486610665366004613ef7565b6114ab565b34801561067657600080fd5b506104866114ef565b34801561068b57600080fd5b5061048661069a366004613ff8565b611581565b3480156106ab57600080fd5b506018546103b39060ff1681565b3480156106c557600080fd5b50601c546103b390600160a81b900460ff1681565b3480156106e657600080fd5b506104866106f536600461406b565b61159c565b34801561070657600080fd5b506104866107153660046141be565b6115ee565b34801561072657600080fd5b50600a54610459906001600160a01b031681565b34801561074657600080fd5b506103b3610755366004613faf565b611688565b34801561076657600080fd5b5061076f61169c565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a0860152151560c085015260e08401526101008301521515610120820152610140016103bf565b3480156107c957600080fd5b506104866107d8366004614276565b61182b565b3480156107e957600080fd5b506104596107f8366004613ef7565b6118cf565b34801561080957600080fd5b50610486610818366004613faf565b6118da565b34801561082957600080fd5b50610486610838366004613ef7565b61193b565b34801561084957600080fd5b506104d2610858366004613faf565b6119c4565b34801561086957600080fd5b5060016103b3565b34801561087d57600080fd5b50610486611a12565b34801561089257600080fd5b5061042c611a5d565b3480156108a757600080fd5b50601f546108c8906001600160a01b03811690600160a01b900461ffff1682565b6040516103bf9291906142b7565b3480156108e257600080fd5b506104866108f1366004613ef7565b611aef565b34801561090257600080fd5b50610486610911366004613ef7565b611b33565b34801561092257600080fd5b506104d2611b77565b34801561093757600080fd5b50610486610946366004614276565b611b83565b34801561095757600080fd5b506104866109663660046142e6565b611c1d565b34801561097757600080fd5b50610459611d50565b34801561098c57600080fd5b506103b361099b366004614086565b611d65565b3480156109ac57600080fd5b506104866109bb36600461418a565b611d90565b3480156109cc57600080fd5b5061042c611de2565b3480156109e157600080fd5b506104866109f036600461418a565b611dec565b348015610a0157600080fd5b506104d2601a5481565b610486610a193660046144a2565b611e61565b348015610a2a57600080fd5b506104d2600081565b348015610a3f57600080fd5b50610486610a4e3660046144ed565b61203f565b348015610a5f57600080fd5b50601c546104599061010090046001600160a01b031681565b348015610a8457600080fd5b50610486610a9336600461418a565b6120d5565b348015610aa457600080fd5b506104d260165481565b348015610aba57600080fd5b506104d2601b5481565b348015610ad057600080fd5b506103b3610adf366004613ef7565b61214a565b348015610af057600080fd5b50601c546103b39060ff1681565b348015610b0a57600080fd5b50610486610b19366004614519565b612157565b348015610b2a57600080fd5b506104866121a1565b348015610b3f57600080fd5b5061042c6121ef565b348015610b5457600080fd5b506011546103b39060ff1681565b348015610b6e57600080fd5b5061042c610b7d366004613ef7565b6121fe565b348015610b8e57600080fd5b50610ba2610b9d366004613ef7565b612209565b6040516103bf9190614598565b348015610bbb57600080fd5b506104d2600080516020614c2883398151915281565b348015610bdd57600080fd5b50610486610bec366004614086565b6122c4565b348015610bfd57600080fd5b506104d260125481565b610486610c15366004613fcc565b6122e0565b348015610c2657600080fd5b50610486610c35366004613faf565b6123d9565b348015610c4657600080fd5b5061042c61243a565b348015610c5b57600080fd5b506103b3610c6a3660046145f9565b612449565b348015610c7b57600080fd5b506104d260155481565b348015610c9157600080fd5b5061042c612497565b348015610ca657600080fd5b506103b3610cb5366004614634565b6124a6565b348015610cc657600080fd5b50610486610cd5366004614662565b6124b9565b348015610ce657600080fd5b50610486610cf5366004613faf565b612512565b348015610d0657600080fd5b50610486610d15366004613faf565b6125a3565b348015610d2657600080fd5b506104d2600080516020614c6883398151915281565b348015610d4857600080fd5b506013546103b39060ff1681565b348015610d6257600080fd5b50610486610d71366004613ef7565b612650565b348015610d8257600080fd5b50610486610d91366004613ef7565b612694565b6000610da18261270d565b92915050565b6040805160608101825260008082526020820181905291810182905290610dcf602184612749565b600081815260208080526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b6060610e34612755565b905090565b6000610e4482612764565b610e61576040516333d1c03960e21b815260040160405180910390fd5b506000908152600860205260409020546001600160a01b031690565b610e8561278c565b6001600160a01b0316610e96611d50565b6001600160a01b031614610ec55760405162461bcd60e51b8152600401610ebc9061467a565b60405180910390fd5b602380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610ef2826118cf565b9050336001600160a01b03821614610f2b57610f0e81336124a6565b610f2b576040516367d9dca160e11b815260040160405180910390fd5b60008281526008602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610f8f61278c565b6001600160a01b0316610fa0611d50565b6001600160a01b031614610fc65760405162461bcd60e51b8152600401610ebc9061467a565b6013805460ff19166001179055565b610fef600080516020614c2883398151915261099b61278c565b61102d5760405162461bcd60e51b815260206004820152600f60248201526e4e4f545f4d494e5445525f524f4c4560881b6044820152606401610ebc565b6110378282612796565b5050565b6000611046826127fe565b9050836001600160a01b0316816001600160a01b0316146110795760405162a1148160e81b815260040160405180910390fd5b60008281526008602052604090208054338082146001600160a01b038816909114176110c6576110a986336124a6565b6110c657604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166110ed57604051633a954ecd60e21b815260040160405180910390fd5b6110fa868686600161285f565b801561110557600082555b6001600160a01b0386811660009081526007602052604080822080546000190190559187168152208054600101905561114285600160e11b61286b565b600085815260066020526040902055600160e11b8316611190576001840160008181526006602052604090205461118e57600254811461118e5760008181526006602052604090208490555b505b83856001600160a01b0316876001600160a01b0316600080516020614c4883398151915260405160405180910390a4505050505050565b6000908152601e602052604090206001015490565b600082815260208052604081205481906001600160a01b03161561123f5760008481526020805260409020546001600160a01b038116906127109061122c90600160a01b900461ffff16866146c5565b61123691906146fa565b91509150611298565b601f546001600160a01b0316158015906112655750601f54600160a01b900461ffff1615155b1561129157601f546001600160a01b038116906127109061122c90600160a01b900461ffff16866146c5565b5060009050805b9250929050565b6112a761278c565b6001600160a01b03166112b8611d50565b6001600160a01b0316146112de5760405162461bcd60e51b8152600401610ebc9061467a565b601c805460ff1916911515919091179055565b6112fa826111c7565b61130381612880565b61130d8383612891565b505050565b61131a61278c565b6001600160a01b031661132b611d50565b6001600160a01b0316146113515760405162461bcd60e51b8152600401610ebc9061467a565b601c54600160a81b900460ff161561137b5760405162461bcd60e51b8152600401610ebc9061470e565b601c805460ff60a81b1916600160a81b179055565b61139861278c565b6001600160a01b03166113a9611d50565b6001600160a01b03161461102d5760405162461bcd60e51b8152600401610ebc9061467a565b6113d761278c565b6001600160a01b03166113e8611d50565b6001600160a01b03161461140e5760405162461bcd60e51b8152600401610ebc9061467a565b805161103790600e906020840190613e2b565b61142961278c565b6001600160a01b0316816001600160a01b0316146114a15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610ebc565b6110378282612918565b6114b361278c565b6001600160a01b03166114c4611d50565b6001600160a01b0316146114ea5760405162461bcd60e51b8152600401610ebc9061467a565b601b55565b601c5461010090046001600160a01b03166115425760405162461bcd60e51b8152602060048201526013602482015272115490cdcc8c4bd393d7d49150d25412515395606a1b6044820152606401610ebc565b601c54604051479161010090046001600160a01b0316906108fc8315029083906000818181858888f19350505050158015611037573d6000803e3d6000fd5b61130d83838360405180602001604052806000815250612157565b6115a461278c565b6001600160a01b03166115b5611d50565b6001600160a01b0316146115db5760405162461bcd60e51b8152600401610ebc9061467a565b6018805460ff1916911515919091179055565b6115f661278c565b6001600160a01b0316611607611d50565b6001600160a01b03161461162d5760405162461bcd60e51b8152600401610ebc9061467a565b6110378282808060200260200160405190810160405280939291908181526020016000905b8282101561167e5761166f6060830286013681900381019061473f565b81526020019060010190611652565b505050505061299d565b600a546001600160a01b0391821691161490565b600080808080808080808080806116b161278c565b6001600160a01b03161461173c57306370a082316116cd61278c565b6040518263ffffffff1660e01b81526004016116e99190613f7b565b60206040518083038186803b15801561170157600080fd5b505afa158015611715573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173991906147a5565b90505b601254306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561177857600080fd5b505afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b091906147a5565b82601554601654601960006117c361278c565b6001600160a01b03166001600160a01b0316815260200190815260200160002054601860009054906101000a900460ff16601a54601b54601c60009054906101000a900460ff169a509a509a509a509a509a509a509a509a509a505090919293949596979899565b6002601454141561184e5760405162461bcd60e51b8152600401610ebc906147be565b600260145561186b600080516020614c6883398151915233611d65565b6118875760405162461bcd60e51b8152600401610ebc906147f5565b60005b818110156118c5576118b38383838181106118a7576118a761482c565b90506020020135612b41565b806118bd81614842565b91505061188a565b5050600160145550565b6000610da1826127fe565b6118e261278c565b6001600160a01b03166118f3611d50565b6001600160a01b0316146119195760405162461bcd60e51b8152600401610ebc9061467a565b602480546001600160a01b0319166001600160a01b0392909216919091179055565b61194361278c565b6001600160a01b0316611954611d50565b6001600160a01b03161461197a5760405162461bcd60e51b8152600401610ebc9061467a565b60135460ff16156119bf5760405162461bcd60e51b815260206004820152600f60248201526e2120a9a2afaaa924afa32927ad22a760891b6044820152606401610ebc565b601255565b60006001600160a01b0382166119ed576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600760205260409020546001600160401b031690565b611a1a61278c565b6001600160a01b0316611a2b611d50565b6001600160a01b031614611a515760405162461bcd60e51b8152600401610ebc9061467a565b611a5b6000612baf565b565b6060600e8054611a6c9061485d565b80601f0160208091040260200160405190810160405280929190818152602001828054611a989061485d565b8015611ae55780601f10611aba57610100808354040283529160200191611ae5565b820191906000526020600020905b815481529060010190602001808311611ac857829003601f168201915b5050505050905090565b611af761278c565b6001600160a01b0316611b08611d50565b6001600160a01b031614611b2e5760405162461bcd60e51b8152600401610ebc9061467a565b601a55565b611b3b61278c565b6001600160a01b0316611b4c611d50565b6001600160a01b031614611b725760405162461bcd60e51b8152600401610ebc9061467a565b601555565b6000610e346021612c0a565b60026014541415611ba65760405162461bcd60e51b8152600401610ebc906147be565b6002601455611bc3600080516020614c6883398151915233611d65565b611bdf5760405162461bcd60e51b8152600401610ebc906147f5565b60005b818110156118c557611c0b838383818110611bff57611bff61482c565b90506020020135612c14565b80611c1581614842565b915050611be2565b6000611c296001612c86565b90508015611c41576000805461ff0019166101001790555b611c4c600083612d1a565b611c5582612baf565b611c6c836000015184602001518560400151612d24565b611c7e83606001518460800151612d56565b611c8b8360a00151612d87565b611c93612db7565b611c9c82612de6565b611cae8360c001518460e00151612e16565b611cc2836101000151846101200151612e58565b611cd0836101800151612e89565b611ce4836101400151846101600151612eb9565b611cf8836101a00151846101c00151612eea565b611d06836101e00151612f1b565b801561130d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6000546201000090046001600160a01b031690565b6000918252601e602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611d9861278c565b6001600160a01b0316611da9611d50565b6001600160a01b031614611dcf5760405162461bcd60e51b8152600401610ebc9061467a565b805161103790600d906020840190613e2b565b6060610e34612f4b565b611df461278c565b6001600160a01b0316611e05611d50565b6001600160a01b031614611e2b5760405162461bcd60e51b8152600401610ebc9061467a565b60115460ff1615611e4e5760405162461bcd60e51b8152600401610ebc90614892565b805161103790600f906020840190613e2b565b60026014541415611e845760405162461bcd60e51b8152600401610ebc906147be565b600260145560185460ff16611ed15760405162461bcd60e51b81526020600482015260136024820152725052455f53414c455f4e4f545f41435449564560681b6044820152606401610ebc565b6000611edb61278c565b9050611f26838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506017549150611f21905084612f5a565b612f94565b611f695760405162461bcd60e51b8152602060048201526014602482015273282922afa9a0a622afaba927a723afa82927a7a360611b6044820152606401610ebc565b6016546001600160a01b038216600090815260196020526040902054611f909086906148bd565b1115611fcf5760405162461bcd60e51b815260206004820152600e60248201526d14149157d4d0531157d31253525560921b6044820152606401610ebc565b3484601554611fde91906146c5565b1115611ffc5760405162461bcd60e51b8152600401610ebc906148d5565b6001600160a01b038116600090815260196020526040812080548692906120249084906148bd565b9091555061203490508185612796565b505060016014555050565b6001600160a01b0382163314156120695760405163b06307db60e01b815260040160405180910390fd5b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6120dd61278c565b6001600160a01b03166120ee611d50565b6001600160a01b0316146121145760405162461bcd60e51b8152600401610ebc9061467a565b60115460ff16156121375760405162461bcd60e51b8152600401610ebc90614892565b8051611037906010906020840190613e2b565b6000610da1601d83612faa565b61216284848461103b565b6001600160a01b0383163b1561219b5761217e84848484612fce565b61219b576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6121a961278c565b6001600160a01b03166121ba611d50565b6001600160a01b0316146121e05760405162461bcd60e51b8152600401610ebc9061467a565b6011805460ff19166001179055565b6060600f8054611a6c9061485d565b6060610da1826130c5565b604080516001808252818301909252606091816020015b6040805180820190915260008082526020820152815260200190600190039081612220575050601f5481519192506001600160a01b03169082906000906122695761226961482c565b60209081029190910101516001600160a01b03919091169052601f548151600160a01b90910461ffff169082906000906122a5576122a561482c565b6020908102919091018101516001600160601b03909216910152919050565b6122cd826111c7565b6122d681612880565b61130d8383612918565b600260145414156123035760405162461bcd60e51b8152600401610ebc906147be565b6002601455601c5460ff166123535760405162461bcd60e51b81526020600482015260166024820152755055424c49435f53414c455f4e4f545f41435449564560501b6044820152606401610ebc565b601b548111156123995760405162461bcd60e51b8152602060048201526011602482015270141550931250d7d4d0531157d312535255607a1b6044820152606401610ebc565b3481601a546123a891906146c5565b11156123c65760405162461bcd60e51b8152600401610ebc906148d5565b6123d08282612796565b50506001601455565b6123e161278c565b6001600160a01b03166123f2611d50565b6001600160a01b0316146124185760405162461bcd60e51b8152600401610ebc9061467a565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b606060108054611a6c9061485d565b600061248f838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506017549150611f21905087612f5a565b949350505050565b6060600d8054611a6c9061485d565b60006124b283836131a1565b9392505050565b6124c161278c565b6001600160a01b03166124d2611d50565b6001600160a01b0316146124f85760405162461bcd60e51b8152600401610ebc9061467a565b61250f61250a36839003830183614902565b6132b2565b50565b61251a61278c565b6001600160a01b031661252b611d50565b6001600160a01b0316146125515760405162461bcd60e51b8152600401610ebc9061467a565b601c54600160a81b900460ff161561257b5760405162461bcd60e51b8152600401610ebc9061470e565b601c80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6125ab61278c565b6001600160a01b03166125bc611d50565b6001600160a01b0316146125e25760405162461bcd60e51b8152600401610ebc9061467a565b6001600160a01b0381166126475760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ebc565b61250f81612baf565b61265861278c565b6001600160a01b0316612669611d50565b6001600160a01b03161461268f5760405162461bcd60e51b8152600401610ebc9061467a565b601655565b61269c61278c565b6001600160a01b03166126ad611d50565b6001600160a01b0316146126d35760405162461bcd60e51b8152600401610ebc9061467a565b601755565b60006126e333611688565b156126f5575060131936013560601c90565b503390565b3390565b6001600160a01b03163b151590565b60006301ffc9a760e01b6001600160e01b031983161480610da15750506001600160e01b03191660009081526001602052604090205460ff1690565b60006124b2838361335d565b6060600b8054611a6c9061485d565b600060025482108015610da1575050600090815260066020526040902054600160e01b161590565b6000610e346126d8565b601254816127a76003546002540390565b6127b191906148bd565b11156127f45760405162461bcd60e51b8152602060048201526012602482015271455843454544535f4d41585f535550504c5960701b6044820152606401610ebc565b6110378282613387565b60008160025481101561284657600081815260066020526040902054600160e01b8116612844575b806124b2575060001901600081815260066020526040902054612826565b505b604051636f96cda160e11b815260040160405180910390fd5b61219b848484846133a1565b4260a01b176001600160a01b03919091161790565b61250f8161288c61278c565b6133f4565b61289b8282611d65565b611037576000828152601e602090815260408083206001600160a01b03851684529091529020805460ff191660011790556128d461278c565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6129228282611d65565b15611037576000828152601e602090815260408083206001600160a01b03851684529091529020805460ff1916905561295961278c565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60005b81518110156110375760008282815181106129bd576129bd61482c565b60200260200101519050612710816040015161ffff16106129f05760405162461bcd60e51b8152600401610ebc9061495e565b60208101516001600160a01b0316612a685780516000908152602080526040902080546001600160b01b03191690558051612a2d90602190613458565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1612b2e565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff9081168385019081528651600090815293805294909220925183549451909216600160a01b026001600160b01b03199094169116179190911790558051612ad490602190613464565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080612b3981614842565b9150506129a0565b612b4c601d82612faa565b612b8c5760405162461bcd60e51b8152602060048201526011602482015270115490cdcc8c4bd393d517d313d0d2d151607a1b6044820152606401610ebc565b600881901c6000908152601d602052604090208054600160ff84161b1916905550565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6000610da1825490565b612c1f601d82612faa565b15612c645760405162461bcd60e51b8152602060048201526015602482015274115490cdcc8c4bd053149150511657d313d0d2d151605a1b6044820152606401610ebc565b600881901c6000908152601d602052604090208054600160ff84161b17905550565b60008054610100900460ff1615612cd4578160ff166001148015612cb05750612cae306126fe565b155b612ccc5760405162461bcd60e51b8152600401610ebc90614983565b506000919050565b60005460ff808416911610612cfb5760405162461bcd60e51b8152600401610ebc90614983565b506000805460ff191660ff92909216919091179055600190565b919050565b6110378282612891565b600054610100900460ff16612d4b5760405162461bcd60e51b8152600401610ebc906149d1565b61130d838383613470565b600054610100900460ff16612d7d5760405162461bcd60e51b8152600401610ebc906149d1565b6110378282613503565b600054610100900460ff16612dae5760405162461bcd60e51b8152600401610ebc906149d1565b61250f8161359f565b600054610100900460ff16612dde5760405162461bcd60e51b8152600401610ebc906149d1565b611a5b6135fb565b600054610100900460ff16612e0d5760405162461bcd60e51b8152600401610ebc906149d1565b61250f81613632565b600054610100900460ff16612e3d5760405162461bcd60e51b8152600401610ebc906149d1565b612e4d63209680f760e11b613681565b601591909155601655565b600054610100900460ff16612e7f5760405162461bcd60e51b8152600401610ebc906149d1565b6110378282613702565b600054610100900460ff16612eb05760405162461bcd60e51b8152600401610ebc906149d1565b61250f81613744565b600054610100900460ff16612ee05760405162461bcd60e51b8152600401610ebc906149d1565b611037828261377b565b600054610100900460ff16612f115760405162461bcd60e51b8152600401610ebc906149d1565b611037828261380b565b600054610100900460ff16612f425760405162461bcd60e51b8152600401610ebc906149d1565b61250f81613870565b6060600c8054611a6c9061485d565b6040516001600160601b0319606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b600082612fa18584613897565b14949350505050565b600881901c600090815260208390526040902054600160ff83161b16151592915050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290613003903390899088908890600401614a1c565b602060405180830381600087803b15801561301d57600080fd5b505af192505050801561304d575060408051601f3d908101601f1916820190925261304a91810190614a59565b60015b6130a8573d80801561307b576040519150601f19603f3d011682016040523d82523d6000602084013e613080565b606091505b5080516130a0576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b60606000600f80546130d69061485d565b90501161316d57600e80546130ea9061485d565b80601f01602080910402602001604051908101604052809291908181526020018280546131169061485d565b80156131635780601f1061313857610100808354040283529160200191613163565b820191906000526020600020905b81548152906001019060200180831161314657829003601f168201915b5050505050610da1565b600f6131788361390b565b601060405160200161318c93929190614b10565b60405160208183030381529060405292915050565b6023546000906001600160a01b0316156132555760235460405163c455279160e01b81526001600160a01b0391821691841690829063c4552791906131ea908890600401613f7b565b60206040518083038186803b15801561320257600080fd5b505afa158015613216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323a9190614b43565b6001600160a01b03161415613253576001915050610da1565b505b6024546001600160a01b031615613284576024546001600160a01b038381169116141561328457506001610da1565b6001600160a01b0380841660009081526009602090815260408083209386168352929052205460ff166124b2565b612710816020015161ffff16106132db5760405162461bcd60e51b8152600401610ebc9061495e565b60408051808201825282516001600160a01b03168082526020808501805161ffff1691909301819052601f80546001600160b01b031916909217600160a01b9091021790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419261335292916142b7565b60405180910390a150565b60008260000182815481106133745761337461482c565b9060005260206000200154905092915050565b611037828260405180602001604052806000815250613a08565b6133ac601d83612faa565b156133ef5760405162461bcd60e51b8152602060048201526013602482015272115490cdcc8c4bd513d2d15397d313d0d2d151606a1b6044820152606401610ebc565b61219b565b6133fe8282611d65565b61103757613416816001600160a01b03166014613a75565b613421836020613a75565b604051602001613432929190614b60565b60408051601f198184030181529082905262461bcd60e51b8252610ebc91600401613f68565b60006124b28383613c10565b60006124b28383613d03565b600054610100900460ff166134975760405162461bcd60e51b8152600401610ebc906149d1565b82516134aa90600b906020860190613e2b565b5081516134be90600c906020850190613e2b565b5080516134d290600d906020840190613e2b565b506134e3633d96f4ff60e11b613681565b6134f36380ac58cd60e01b613681565b61130d635b5e139f60e01b613681565b600054610100900460ff1661352a5760405162461bcd60e51b8152600401610ebc906149d1565b815161353d90600e906020850190613e2b565b50805161355190600f906020840190613e2b565b5060408051808201909152600580825264173539b7b760d91b602090920191825261357e91601091613e2b565b5061358f631f2f406b60e01b613681565b611037635b5e139f60e01b613681565b600054610100900460ff166135c65760405162461bcd60e51b8152600401610ebc906149d1565b60128190556135db6330f487b560e11b613681565b6135eb6380ac58cd60e01b613681565b61250f63184371e560e31b613681565b600054610100900460ff166136225760405162461bcd60e51b8152600401610ebc906149d1565b611a5b631aa1577160e11b613681565b600054610100900460ff166136595760405162461bcd60e51b8152600401610ebc906149d1565b613669631a056e7160e01b613681565b61250f600080516020614c2883398151915282612d1a565b6001600160e01b031980821614156136da5760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610ebc565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600054610100900460ff166137295760405162461bcd60e51b8152600401610ebc906149d1565b6137396317e0bac360e31b613681565b601a91909155601b55565b600054610100900460ff1661376b5760405162461bcd60e51b8152600401610ebc906149d1565b61257b63e2b3173560e01b613681565b600054610100900460ff166137a25760405162461bcd60e51b8152600401610ebc906149d1565b6137b2633a47bf5160e11b613681565b6137c263152a902d60e11b613681565b6137d263c69dbd8f60e01b613681565b6137e263656cb66560e11b613681565b604080518082019091526001600160a01b038316815261ffff8216602082015261130d816132b2565b600054610100900460ff166138325760405162461bcd60e51b8152600401610ebc906149d1565b613842638d29851f60e01b613681565b602380546001600160a01b039384166001600160a01b03199182161790915560248054929093169116179055565b600054610100900460ff166124185760405162461bcd60e51b8152600401610ebc906149d1565b600081815b84518110156139035760008582815181106138b9576138b961482c565b602002602001015190508083116138df57600083815260208290526040902092506138f0565b600081815260208490526040902092505b50806138fb81614842565b91505061389c565b509392505050565b60608161392f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613959578061394381614842565b91506139529050600a836146fa565b9150613933565b6000816001600160401b03811115613973576139736140b6565b6040519080825280601f01601f19166020018201604052801561399d576020820181803683370190505b5090505b841561248f576139b2600183614bcf565b91506139bf600a86614be6565b6139ca9060306148bd565b60f81b8183815181106139df576139df61482c565b60200101906001600160f81b031916908160001a905350613a01600a866146fa565b94506139a1565b613a128383613d52565b6001600160a01b0383163b1561130d576002548281035b613a3c6000868380600101945086612fce565b613a59576040516368d2bf6b60e11b815260040160405180910390fd5b818110613a29578160025414613a6e57600080fd5b5050505050565b60606000613a848360026146c5565b613a8f9060026148bd565b6001600160401b03811115613aa657613aa66140b6565b6040519080825280601f01601f191660200182016040528015613ad0576020820181803683370190505b509050600360fc1b81600081518110613aeb57613aeb61482c565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b1a57613b1a61482c565b60200101906001600160f81b031916908160001a9053506000613b3e8460026146c5565b613b499060016148bd565b90505b6001811115613bc1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b7d57613b7d61482c565b1a60f81b828281518110613b9357613b9361482c565b60200101906001600160f81b031916908160001a90535060049490941c93613bba81614bfa565b9050613b4c565b5083156124b25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ebc565b60008181526001830160205260408120548015613cf9576000613c34600183614bcf565b8554909150600090613c4890600190614bcf565b9050818114613cad576000866000018281548110613c6857613c6861482c565b9060005260206000200154905080876000018481548110613c8b57613c8b61482c565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613cbe57613cbe614c11565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610da1565b6000915050610da1565b6000818152600183016020526040812054613d4a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610da1565b506000610da1565b6002546001600160a01b038316613d7b57604051622e076360e81b815260040160405180910390fd5b81613d995760405163b562e8dd60e01b815260040160405180910390fd5b613da6600084838561285f565b6001600160a01b038316600090815260076020526040902080546001600160401b018402019055613ddd836001841460e11b61286b565b600082815260066020526040902055808281015b6040516001830192906001600160a01b03871690600090600080516020614c48833981519152908290a4808210613df15760025550505050565b828054613e379061485d565b90600052602060002090601f016020900481019282613e595760008555613e9f565b82601f10613e7257805160ff1916838001178555613e9f565b82800160010185558215613e9f579182015b82811115613e9f578251825591602001919060010190613e84565b50613eab929150613eaf565b5090565b5b80821115613eab5760008155600101613eb0565b6001600160e01b03198116811461250f57600080fd5b600060208284031215613eec57600080fd5b81356124b281613ec4565b600060208284031215613f0957600080fd5b5035919050565b60005b83811015613f2b578181015183820152602001613f13565b8381111561219b5750506000910152565b60008151808452613f54816020860160208601613f10565b601f01601f19169290920160200192915050565b6020815260006124b26020830184613f3c565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461250f57600080fd5b8035612d1581613f8f565b600060208284031215613fc157600080fd5b81356124b281613f8f565b60008060408385031215613fdf57600080fd5b8235613fea81613f8f565b946020939093013593505050565b60008060006060848603121561400d57600080fd5b833561401881613f8f565b9250602084013561402881613f8f565b929592945050506040919091013590565b6000806040838503121561404c57600080fd5b50508035926020909101359150565b80358015158114612d1557600080fd5b60006020828403121561407d57600080fd5b6124b28261405b565b6000806040838503121561409957600080fd5b8235915060208301356140ab81613f8f565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b03811182821017156140ef576140ef6140b6565b60405290565b60006001600160401b038084111561410f5761410f6140b6565b604051601f8501601f19908116603f01168101908282118183101715614137576141376140b6565b8160405280935085815286868601111561415057600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261417b57600080fd5b6124b2838335602085016140f5565b60006020828403121561419c57600080fd5b81356001600160401b038111156141b257600080fd5b61248f8482850161416a565b600080602083850312156141d157600080fd5b82356001600160401b03808211156141e857600080fd5b818501915085601f8301126141fc57600080fd5b81358181111561420b57600080fd5b86602060608302850101111561422057600080fd5b60209290920196919550909350505050565b60008083601f84011261424457600080fd5b5081356001600160401b0381111561425b57600080fd5b6020830191508360208260051b850101111561129857600080fd5b6000806020838503121561428957600080fd5b82356001600160401b0381111561429f57600080fd5b6142ab85828601614232565b90969095509350505050565b6001600160a01b0392909216825261ffff16602082015260400190565b803561ffff81168114612d1557600080fd5b600080604083850312156142f957600080fd5b82356001600160401b038082111561431057600080fd5b90840190610200828703121561432557600080fd5b61432d6140cc565b82358281111561433c57600080fd5b6143488882860161416a565b82525060208301358281111561435d57600080fd5b6143698882860161416a565b60208301525060408301358281111561438157600080fd5b61438d8882860161416a565b6040830152506060830135828111156143a557600080fd5b6143b18882860161416a565b6060830152506080830135828111156143c957600080fd5b6143d58882860161416a565b60808301525060a0838101359082015260c0808401359082015260e0808401359082015261010080840135908201526101208084013590820152610140915061441f828401613fa4565b8282015261016091506144338284016142d4565b828201526101809150614447828401613fa4565b828201526101a0915061445b828401613fa4565b828201526101c0915061446f828401613fa4565b828201526101e09150614483828401613fa4565b8282015280945050505061449960208401613fa4565b90509250929050565b6000806000604084860312156144b757600080fd5b8335925060208401356001600160401b038111156144d457600080fd5b6144e086828701614232565b9497909650939450505050565b6000806040838503121561450057600080fd5b823561450b81613f8f565b91506144996020840161405b565b6000806000806080858703121561452f57600080fd5b843561453a81613f8f565b9350602085013561454a81613f8f565b92506040850135915060608501356001600160401b0381111561456c57600080fd5b8501601f8101871361457d57600080fd5b61458c878235602084016140f5565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b828110156145ec57815180516001600160a01b031685528601516001600160601b03168685015292840192908501906001016145b5565b5091979650505050505050565b60008060006040848603121561460e57600080fd5b833561461981613f8f565b925060208401356001600160401b038111156144d457600080fd5b6000806040838503121561464757600080fd5b823561465281613f8f565b915060208301356140ab81613f8f565b60006040828403121561467457600080fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156146df576146df6146af565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614709576147096146e4565b500490565b602080825260179082015276115490cdcc8c4bd49150d2541251539517d313d0d2d151604a1b604082015260600190565b60006060828403121561475157600080fd5b604051606081016001600160401b0381118282101715614773576147736140b6565b60405282358152602083013561478881613f8f565b6020820152614799604084016142d4565b60408201529392505050565b6000602082840312156147b757600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601f908201527f5354414b41424c455f4552433732312f4e4f545f4c4f434b45525f524f4c4500604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614856576148566146af565b5060010190565b600181811c9082168061487157607f821691505b6020821081141561467457634e487b7160e01b600052602260045260246000fd5b6020808252601190820152702a27a5a2a729afaaa924afa32927ad22a760791b604082015260600190565b600082198211156148d0576148d06146af565b500190565b602080825260139082015272125394d551919250d251539517d05353d55395606a1b604082015260600190565b60006040828403121561491457600080fd5b604080519081016001600160401b0381118282101715614936576149366140b6565b604052823561494481613f8f565b8152614952602084016142d4565b60208201529392505050565b6020808252600b908201526a496e76616c69642062707360a81b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614a4f90830184613f3c565b9695505050505050565b600060208284031215614a6b57600080fd5b81516124b281613ec4565b8054600090600181811c9080831680614a9057607f831692505b6020808410821415614ab257634e487b7160e01b600052602260045260246000fd5b818015614ac65760018114614ad757614b04565b60ff19861689528489019650614b04565b60008881526020902060005b86811015614afc5781548b820152908501908301614ae3565b505084890196505b50505050505092915050565b6000614b1c8286614a76565b8451614b2c818360208901613f10565b614b3881830186614a76565b979650505050505050565b600060208284031215614b5557600080fd5b81516124b281613f8f565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351614b92816017850160208801613f10565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614bc3816028840160208801613f10565b01602801949350505050565b600082821015614be157614be16146af565b500390565b600082614bf557614bf56146e4565b500690565b600081614c0957614c096146af565b506000190190565b634e487b7160e01b600052603160045260246000fdfe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efaf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a90279a26469706673582212209e939787fe73cf3f1278910f61e926af21f95ebd3b1ef4765bf6c6b317a20c9564736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061038e5760003560e01c806301ffc9a7146103935780630653aca5146103c857806306fdde0314610417578063081812fc1461043957806308abf02614610466578063095ea7b31461048857806316744607146104a857806318160ddd146104bd5780631a056e71146104e057806323b872dd14610500578063248a9ca3146105205780632a55205a146105405780632d8e85b01461057f5780632f2ff15d1461059f57806331db3832146105bf5780633542aee2146105d45780633574a2dd146105f457806336568abe146106145780633acf404d146106345780633c0e8f2c1461064a5780633ccfd60b1461066a57806342842e0e1461067f578063464bd6401461069f5780634972471c146106b95780634f972f5f146106da5780635136dcc7146106fa57806356c022bb1461071a578063572b6c051461073a5780635a9b0b891461075a5780635d36598f146107bd5780636352211e146107dd5780636c079cfc146107fd5780636f8b44b01461081d57806370a082311461083d578063714ad8e71461085d578063715018a6146108715780637313cba9146108865780637885fdc71461089b578063791a2519146108d65780637d7eee42146108f65780637e98034214610916578063859610c61461092b5780638a4278ab1461094b5780638da5cb5b1461096b57806391d1485414610980578063938e3d7b146109a057806395d89b41146109c057806399e0dd7c146109d55780639b6860c8146109f55780639e6b2c5b14610a0b578063a217fddf14610a1e578063a22cb46514610a33578063a304ee7614610a53578063a9852bfb14610a78578063aaeaca4814610a98578063b27c6f2d14610aae578063b45a3c0e14610ac4578063b6c693e514610ae4578063b88d4fde14610afe578063ba4695fd14610b1e578063c0ac998314610b33578063c29de63014610b48578063c87b56dd14610b62578063cad96cca14610b82578063d539139314610baf578063d547741f14610bd1578063d5abeb0114610bf1578063d79ff99d14610c07578063da74222814610c1a578063dbbc853b14610c3a578063e3b9a7e514610c4f578063e757c17d14610c6f578063e8a3d48514610c85578063e985e9c514610c9a578063ef60ceaf14610cba578063efa7f90c14610cda578063f2fde38b14610cfa578063f362136714610d1a578063f384702f14610d3c578063f74bbf5914610d56578063f95df41414610d76575b600080fd5b34801561039f57600080fd5b506103b36103ae366004613eda565b610d96565b60405190151581526020015b60405180910390f35b3480156103d457600080fd5b506103e86103e3366004613ef7565b610da7565b60408051825181526020808401516001600160a01b0316908201529181015161ffff16908201526060016103bf565b34801561042357600080fd5b5061042c610e2a565b6040516103bf9190613f68565b34801561044557600080fd5b50610459610454366004613ef7565b610e39565b6040516103bf9190613f7b565b34801561047257600080fd5b50610486610481366004613faf565b610e7d565b005b34801561049457600080fd5b506104866104a3366004613fcc565b610ee7565b3480156104b457600080fd5b50610486610f87565b3480156104c957600080fd5b50600354600254035b6040519081526020016103bf565b3480156104ec57600080fd5b506104866104fb366004613fcc565b610fd5565b34801561050c57600080fd5b5061048661051b366004613ff8565b61103b565b34801561052c57600080fd5b506104d261053b366004613ef7565b6111c7565b34801561054c57600080fd5b5061056061055b366004614039565b6111dc565b604080516001600160a01b0390931683526020830191909152016103bf565b34801561058b57600080fd5b5061048661059a36600461406b565b61129f565b3480156105ab57600080fd5b506104866105ba366004614086565b6112f1565b3480156105cb57600080fd5b50610486611312565b3480156105e057600080fd5b506104866105ef366004613fcc565b611390565b34801561060057600080fd5b5061048661060f36600461418a565b6113cf565b34801561062057600080fd5b5061048661062f366004614086565b611421565b34801561064057600080fd5b506104d260175481565b34801561065657600080fd5b50610486610665366004613ef7565b6114ab565b34801561067657600080fd5b506104866114ef565b34801561068b57600080fd5b5061048661069a366004613ff8565b611581565b3480156106ab57600080fd5b506018546103b39060ff1681565b3480156106c557600080fd5b50601c546103b390600160a81b900460ff1681565b3480156106e657600080fd5b506104866106f536600461406b565b61159c565b34801561070657600080fd5b506104866107153660046141be565b6115ee565b34801561072657600080fd5b50600a54610459906001600160a01b031681565b34801561074657600080fd5b506103b3610755366004613faf565b611688565b34801561076657600080fd5b5061076f61169c565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a0860152151560c085015260e08401526101008301521515610120820152610140016103bf565b3480156107c957600080fd5b506104866107d8366004614276565b61182b565b3480156107e957600080fd5b506104596107f8366004613ef7565b6118cf565b34801561080957600080fd5b50610486610818366004613faf565b6118da565b34801561082957600080fd5b50610486610838366004613ef7565b61193b565b34801561084957600080fd5b506104d2610858366004613faf565b6119c4565b34801561086957600080fd5b5060016103b3565b34801561087d57600080fd5b50610486611a12565b34801561089257600080fd5b5061042c611a5d565b3480156108a757600080fd5b50601f546108c8906001600160a01b03811690600160a01b900461ffff1682565b6040516103bf9291906142b7565b3480156108e257600080fd5b506104866108f1366004613ef7565b611aef565b34801561090257600080fd5b50610486610911366004613ef7565b611b33565b34801561092257600080fd5b506104d2611b77565b34801561093757600080fd5b50610486610946366004614276565b611b83565b34801561095757600080fd5b506104866109663660046142e6565b611c1d565b34801561097757600080fd5b50610459611d50565b34801561098c57600080fd5b506103b361099b366004614086565b611d65565b3480156109ac57600080fd5b506104866109bb36600461418a565b611d90565b3480156109cc57600080fd5b5061042c611de2565b3480156109e157600080fd5b506104866109f036600461418a565b611dec565b348015610a0157600080fd5b506104d2601a5481565b610486610a193660046144a2565b611e61565b348015610a2a57600080fd5b506104d2600081565b348015610a3f57600080fd5b50610486610a4e3660046144ed565b61203f565b348015610a5f57600080fd5b50601c546104599061010090046001600160a01b031681565b348015610a8457600080fd5b50610486610a9336600461418a565b6120d5565b348015610aa457600080fd5b506104d260165481565b348015610aba57600080fd5b506104d2601b5481565b348015610ad057600080fd5b506103b3610adf366004613ef7565b61214a565b348015610af057600080fd5b50601c546103b39060ff1681565b348015610b0a57600080fd5b50610486610b19366004614519565b612157565b348015610b2a57600080fd5b506104866121a1565b348015610b3f57600080fd5b5061042c6121ef565b348015610b5457600080fd5b506011546103b39060ff1681565b348015610b6e57600080fd5b5061042c610b7d366004613ef7565b6121fe565b348015610b8e57600080fd5b50610ba2610b9d366004613ef7565b612209565b6040516103bf9190614598565b348015610bbb57600080fd5b506104d2600080516020614c2883398151915281565b348015610bdd57600080fd5b50610486610bec366004614086565b6122c4565b348015610bfd57600080fd5b506104d260125481565b610486610c15366004613fcc565b6122e0565b348015610c2657600080fd5b50610486610c35366004613faf565b6123d9565b348015610c4657600080fd5b5061042c61243a565b348015610c5b57600080fd5b506103b3610c6a3660046145f9565b612449565b348015610c7b57600080fd5b506104d260155481565b348015610c9157600080fd5b5061042c612497565b348015610ca657600080fd5b506103b3610cb5366004614634565b6124a6565b348015610cc657600080fd5b50610486610cd5366004614662565b6124b9565b348015610ce657600080fd5b50610486610cf5366004613faf565b612512565b348015610d0657600080fd5b50610486610d15366004613faf565b6125a3565b348015610d2657600080fd5b506104d2600080516020614c6883398151915281565b348015610d4857600080fd5b506013546103b39060ff1681565b348015610d6257600080fd5b50610486610d71366004613ef7565b612650565b348015610d8257600080fd5b50610486610d91366004613ef7565b612694565b6000610da18261270d565b92915050565b6040805160608101825260008082526020820181905291810182905290610dcf602184612749565b600081815260208080526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b6060610e34612755565b905090565b6000610e4482612764565b610e61576040516333d1c03960e21b815260040160405180910390fd5b506000908152600860205260409020546001600160a01b031690565b610e8561278c565b6001600160a01b0316610e96611d50565b6001600160a01b031614610ec55760405162461bcd60e51b8152600401610ebc9061467a565b60405180910390fd5b602380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610ef2826118cf565b9050336001600160a01b03821614610f2b57610f0e81336124a6565b610f2b576040516367d9dca160e11b815260040160405180910390fd5b60008281526008602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610f8f61278c565b6001600160a01b0316610fa0611d50565b6001600160a01b031614610fc65760405162461bcd60e51b8152600401610ebc9061467a565b6013805460ff19166001179055565b610fef600080516020614c2883398151915261099b61278c565b61102d5760405162461bcd60e51b815260206004820152600f60248201526e4e4f545f4d494e5445525f524f4c4560881b6044820152606401610ebc565b6110378282612796565b5050565b6000611046826127fe565b9050836001600160a01b0316816001600160a01b0316146110795760405162a1148160e81b815260040160405180910390fd5b60008281526008602052604090208054338082146001600160a01b038816909114176110c6576110a986336124a6565b6110c657604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166110ed57604051633a954ecd60e21b815260040160405180910390fd5b6110fa868686600161285f565b801561110557600082555b6001600160a01b0386811660009081526007602052604080822080546000190190559187168152208054600101905561114285600160e11b61286b565b600085815260066020526040902055600160e11b8316611190576001840160008181526006602052604090205461118e57600254811461118e5760008181526006602052604090208490555b505b83856001600160a01b0316876001600160a01b0316600080516020614c4883398151915260405160405180910390a4505050505050565b6000908152601e602052604090206001015490565b600082815260208052604081205481906001600160a01b03161561123f5760008481526020805260409020546001600160a01b038116906127109061122c90600160a01b900461ffff16866146c5565b61123691906146fa565b91509150611298565b601f546001600160a01b0316158015906112655750601f54600160a01b900461ffff1615155b1561129157601f546001600160a01b038116906127109061122c90600160a01b900461ffff16866146c5565b5060009050805b9250929050565b6112a761278c565b6001600160a01b03166112b8611d50565b6001600160a01b0316146112de5760405162461bcd60e51b8152600401610ebc9061467a565b601c805460ff1916911515919091179055565b6112fa826111c7565b61130381612880565b61130d8383612891565b505050565b61131a61278c565b6001600160a01b031661132b611d50565b6001600160a01b0316146113515760405162461bcd60e51b8152600401610ebc9061467a565b601c54600160a81b900460ff161561137b5760405162461bcd60e51b8152600401610ebc9061470e565b601c805460ff60a81b1916600160a81b179055565b61139861278c565b6001600160a01b03166113a9611d50565b6001600160a01b03161461102d5760405162461bcd60e51b8152600401610ebc9061467a565b6113d761278c565b6001600160a01b03166113e8611d50565b6001600160a01b03161461140e5760405162461bcd60e51b8152600401610ebc9061467a565b805161103790600e906020840190613e2b565b61142961278c565b6001600160a01b0316816001600160a01b0316146114a15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610ebc565b6110378282612918565b6114b361278c565b6001600160a01b03166114c4611d50565b6001600160a01b0316146114ea5760405162461bcd60e51b8152600401610ebc9061467a565b601b55565b601c5461010090046001600160a01b03166115425760405162461bcd60e51b8152602060048201526013602482015272115490cdcc8c4bd393d7d49150d25412515395606a1b6044820152606401610ebc565b601c54604051479161010090046001600160a01b0316906108fc8315029083906000818181858888f19350505050158015611037573d6000803e3d6000fd5b61130d83838360405180602001604052806000815250612157565b6115a461278c565b6001600160a01b03166115b5611d50565b6001600160a01b0316146115db5760405162461bcd60e51b8152600401610ebc9061467a565b6018805460ff1916911515919091179055565b6115f661278c565b6001600160a01b0316611607611d50565b6001600160a01b03161461162d5760405162461bcd60e51b8152600401610ebc9061467a565b6110378282808060200260200160405190810160405280939291908181526020016000905b8282101561167e5761166f6060830286013681900381019061473f565b81526020019060010190611652565b505050505061299d565b600a546001600160a01b0391821691161490565b600080808080808080808080806116b161278c565b6001600160a01b03161461173c57306370a082316116cd61278c565b6040518263ffffffff1660e01b81526004016116e99190613f7b565b60206040518083038186803b15801561170157600080fd5b505afa158015611715573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173991906147a5565b90505b601254306001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561177857600080fd5b505afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b091906147a5565b82601554601654601960006117c361278c565b6001600160a01b03166001600160a01b0316815260200190815260200160002054601860009054906101000a900460ff16601a54601b54601c60009054906101000a900460ff169a509a509a509a509a509a509a509a509a509a505090919293949596979899565b6002601454141561184e5760405162461bcd60e51b8152600401610ebc906147be565b600260145561186b600080516020614c6883398151915233611d65565b6118875760405162461bcd60e51b8152600401610ebc906147f5565b60005b818110156118c5576118b38383838181106118a7576118a761482c565b90506020020135612b41565b806118bd81614842565b91505061188a565b5050600160145550565b6000610da1826127fe565b6118e261278c565b6001600160a01b03166118f3611d50565b6001600160a01b0316146119195760405162461bcd60e51b8152600401610ebc9061467a565b602480546001600160a01b0319166001600160a01b0392909216919091179055565b61194361278c565b6001600160a01b0316611954611d50565b6001600160a01b03161461197a5760405162461bcd60e51b8152600401610ebc9061467a565b60135460ff16156119bf5760405162461bcd60e51b815260206004820152600f60248201526e2120a9a2afaaa924afa32927ad22a760891b6044820152606401610ebc565b601255565b60006001600160a01b0382166119ed576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600760205260409020546001600160401b031690565b611a1a61278c565b6001600160a01b0316611a2b611d50565b6001600160a01b031614611a515760405162461bcd60e51b8152600401610ebc9061467a565b611a5b6000612baf565b565b6060600e8054611a6c9061485d565b80601f0160208091040260200160405190810160405280929190818152602001828054611a989061485d565b8015611ae55780601f10611aba57610100808354040283529160200191611ae5565b820191906000526020600020905b815481529060010190602001808311611ac857829003601f168201915b5050505050905090565b611af761278c565b6001600160a01b0316611b08611d50565b6001600160a01b031614611b2e5760405162461bcd60e51b8152600401610ebc9061467a565b601a55565b611b3b61278c565b6001600160a01b0316611b4c611d50565b6001600160a01b031614611b725760405162461bcd60e51b8152600401610ebc9061467a565b601555565b6000610e346021612c0a565b60026014541415611ba65760405162461bcd60e51b8152600401610ebc906147be565b6002601455611bc3600080516020614c6883398151915233611d65565b611bdf5760405162461bcd60e51b8152600401610ebc906147f5565b60005b818110156118c557611c0b838383818110611bff57611bff61482c565b90506020020135612c14565b80611c1581614842565b915050611be2565b6000611c296001612c86565b90508015611c41576000805461ff0019166101001790555b611c4c600083612d1a565b611c5582612baf565b611c6c836000015184602001518560400151612d24565b611c7e83606001518460800151612d56565b611c8b8360a00151612d87565b611c93612db7565b611c9c82612de6565b611cae8360c001518460e00151612e16565b611cc2836101000151846101200151612e58565b611cd0836101800151612e89565b611ce4836101400151846101600151612eb9565b611cf8836101a00151846101c00151612eea565b611d06836101e00151612f1b565b801561130d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6000546201000090046001600160a01b031690565b6000918252601e602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611d9861278c565b6001600160a01b0316611da9611d50565b6001600160a01b031614611dcf5760405162461bcd60e51b8152600401610ebc9061467a565b805161103790600d906020840190613e2b565b6060610e34612f4b565b611df461278c565b6001600160a01b0316611e05611d50565b6001600160a01b031614611e2b5760405162461bcd60e51b8152600401610ebc9061467a565b60115460ff1615611e4e5760405162461bcd60e51b8152600401610ebc90614892565b805161103790600f906020840190613e2b565b60026014541415611e845760405162461bcd60e51b8152600401610ebc906147be565b600260145560185460ff16611ed15760405162461bcd60e51b81526020600482015260136024820152725052455f53414c455f4e4f545f41435449564560681b6044820152606401610ebc565b6000611edb61278c565b9050611f26838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506017549150611f21905084612f5a565b612f94565b611f695760405162461bcd60e51b8152602060048201526014602482015273282922afa9a0a622afaba927a723afa82927a7a360611b6044820152606401610ebc565b6016546001600160a01b038216600090815260196020526040902054611f909086906148bd565b1115611fcf5760405162461bcd60e51b815260206004820152600e60248201526d14149157d4d0531157d31253525560921b6044820152606401610ebc565b3484601554611fde91906146c5565b1115611ffc5760405162461bcd60e51b8152600401610ebc906148d5565b6001600160a01b038116600090815260196020526040812080548692906120249084906148bd565b9091555061203490508185612796565b505060016014555050565b6001600160a01b0382163314156120695760405163b06307db60e01b815260040160405180910390fd5b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6120dd61278c565b6001600160a01b03166120ee611d50565b6001600160a01b0316146121145760405162461bcd60e51b8152600401610ebc9061467a565b60115460ff16156121375760405162461bcd60e51b8152600401610ebc90614892565b8051611037906010906020840190613e2b565b6000610da1601d83612faa565b61216284848461103b565b6001600160a01b0383163b1561219b5761217e84848484612fce565b61219b576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6121a961278c565b6001600160a01b03166121ba611d50565b6001600160a01b0316146121e05760405162461bcd60e51b8152600401610ebc9061467a565b6011805460ff19166001179055565b6060600f8054611a6c9061485d565b6060610da1826130c5565b604080516001808252818301909252606091816020015b6040805180820190915260008082526020820152815260200190600190039081612220575050601f5481519192506001600160a01b03169082906000906122695761226961482c565b60209081029190910101516001600160a01b03919091169052601f548151600160a01b90910461ffff169082906000906122a5576122a561482c565b6020908102919091018101516001600160601b03909216910152919050565b6122cd826111c7565b6122d681612880565b61130d8383612918565b600260145414156123035760405162461bcd60e51b8152600401610ebc906147be565b6002601455601c5460ff166123535760405162461bcd60e51b81526020600482015260166024820152755055424c49435f53414c455f4e4f545f41435449564560501b6044820152606401610ebc565b601b548111156123995760405162461bcd60e51b8152602060048201526011602482015270141550931250d7d4d0531157d312535255607a1b6044820152606401610ebc565b3481601a546123a891906146c5565b11156123c65760405162461bcd60e51b8152600401610ebc906148d5565b6123d08282612796565b50506001601455565b6123e161278c565b6001600160a01b03166123f2611d50565b6001600160a01b0316146124185760405162461bcd60e51b8152600401610ebc9061467a565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b606060108054611a6c9061485d565b600061248f838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506017549150611f21905087612f5a565b949350505050565b6060600d8054611a6c9061485d565b60006124b283836131a1565b9392505050565b6124c161278c565b6001600160a01b03166124d2611d50565b6001600160a01b0316146124f85760405162461bcd60e51b8152600401610ebc9061467a565b61250f61250a36839003830183614902565b6132b2565b50565b61251a61278c565b6001600160a01b031661252b611d50565b6001600160a01b0316146125515760405162461bcd60e51b8152600401610ebc9061467a565b601c54600160a81b900460ff161561257b5760405162461bcd60e51b8152600401610ebc9061470e565b601c80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6125ab61278c565b6001600160a01b03166125bc611d50565b6001600160a01b0316146125e25760405162461bcd60e51b8152600401610ebc9061467a565b6001600160a01b0381166126475760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ebc565b61250f81612baf565b61265861278c565b6001600160a01b0316612669611d50565b6001600160a01b03161461268f5760405162461bcd60e51b8152600401610ebc9061467a565b601655565b61269c61278c565b6001600160a01b03166126ad611d50565b6001600160a01b0316146126d35760405162461bcd60e51b8152600401610ebc9061467a565b601755565b60006126e333611688565b156126f5575060131936013560601c90565b503390565b3390565b6001600160a01b03163b151590565b60006301ffc9a760e01b6001600160e01b031983161480610da15750506001600160e01b03191660009081526001602052604090205460ff1690565b60006124b2838361335d565b6060600b8054611a6c9061485d565b600060025482108015610da1575050600090815260066020526040902054600160e01b161590565b6000610e346126d8565b601254816127a76003546002540390565b6127b191906148bd565b11156127f45760405162461bcd60e51b8152602060048201526012602482015271455843454544535f4d41585f535550504c5960701b6044820152606401610ebc565b6110378282613387565b60008160025481101561284657600081815260066020526040902054600160e01b8116612844575b806124b2575060001901600081815260066020526040902054612826565b505b604051636f96cda160e11b815260040160405180910390fd5b61219b848484846133a1565b4260a01b176001600160a01b03919091161790565b61250f8161288c61278c565b6133f4565b61289b8282611d65565b611037576000828152601e602090815260408083206001600160a01b03851684529091529020805460ff191660011790556128d461278c565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6129228282611d65565b15611037576000828152601e602090815260408083206001600160a01b03851684529091529020805460ff1916905561295961278c565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60005b81518110156110375760008282815181106129bd576129bd61482c565b60200260200101519050612710816040015161ffff16106129f05760405162461bcd60e51b8152600401610ebc9061495e565b60208101516001600160a01b0316612a685780516000908152602080526040902080546001600160b01b03191690558051612a2d90602190613458565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1612b2e565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff9081168385019081528651600090815293805294909220925183549451909216600160a01b026001600160b01b03199094169116179190911790558051612ad490602190613464565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080612b3981614842565b9150506129a0565b612b4c601d82612faa565b612b8c5760405162461bcd60e51b8152602060048201526011602482015270115490cdcc8c4bd393d517d313d0d2d151607a1b6044820152606401610ebc565b600881901c6000908152601d602052604090208054600160ff84161b1916905550565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6000610da1825490565b612c1f601d82612faa565b15612c645760405162461bcd60e51b8152602060048201526015602482015274115490cdcc8c4bd053149150511657d313d0d2d151605a1b6044820152606401610ebc565b600881901c6000908152601d602052604090208054600160ff84161b17905550565b60008054610100900460ff1615612cd4578160ff166001148015612cb05750612cae306126fe565b155b612ccc5760405162461bcd60e51b8152600401610ebc90614983565b506000919050565b60005460ff808416911610612cfb5760405162461bcd60e51b8152600401610ebc90614983565b506000805460ff191660ff92909216919091179055600190565b919050565b6110378282612891565b600054610100900460ff16612d4b5760405162461bcd60e51b8152600401610ebc906149d1565b61130d838383613470565b600054610100900460ff16612d7d5760405162461bcd60e51b8152600401610ebc906149d1565b6110378282613503565b600054610100900460ff16612dae5760405162461bcd60e51b8152600401610ebc906149d1565b61250f8161359f565b600054610100900460ff16612dde5760405162461bcd60e51b8152600401610ebc906149d1565b611a5b6135fb565b600054610100900460ff16612e0d5760405162461bcd60e51b8152600401610ebc906149d1565b61250f81613632565b600054610100900460ff16612e3d5760405162461bcd60e51b8152600401610ebc906149d1565b612e4d63209680f760e11b613681565b601591909155601655565b600054610100900460ff16612e7f5760405162461bcd60e51b8152600401610ebc906149d1565b6110378282613702565b600054610100900460ff16612eb05760405162461bcd60e51b8152600401610ebc906149d1565b61250f81613744565b600054610100900460ff16612ee05760405162461bcd60e51b8152600401610ebc906149d1565b611037828261377b565b600054610100900460ff16612f115760405162461bcd60e51b8152600401610ebc906149d1565b611037828261380b565b600054610100900460ff16612f425760405162461bcd60e51b8152600401610ebc906149d1565b61250f81613870565b6060600c8054611a6c9061485d565b6040516001600160601b0319606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b600082612fa18584613897565b14949350505050565b600881901c600090815260208390526040902054600160ff83161b16151592915050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290613003903390899088908890600401614a1c565b602060405180830381600087803b15801561301d57600080fd5b505af192505050801561304d575060408051601f3d908101601f1916820190925261304a91810190614a59565b60015b6130a8573d80801561307b576040519150601f19603f3d011682016040523d82523d6000602084013e613080565b606091505b5080516130a0576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b60606000600f80546130d69061485d565b90501161316d57600e80546130ea9061485d565b80601f01602080910402602001604051908101604052809291908181526020018280546131169061485d565b80156131635780601f1061313857610100808354040283529160200191613163565b820191906000526020600020905b81548152906001019060200180831161314657829003601f168201915b5050505050610da1565b600f6131788361390b565b601060405160200161318c93929190614b10565b60405160208183030381529060405292915050565b6023546000906001600160a01b0316156132555760235460405163c455279160e01b81526001600160a01b0391821691841690829063c4552791906131ea908890600401613f7b565b60206040518083038186803b15801561320257600080fd5b505afa158015613216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323a9190614b43565b6001600160a01b03161415613253576001915050610da1565b505b6024546001600160a01b031615613284576024546001600160a01b038381169116141561328457506001610da1565b6001600160a01b0380841660009081526009602090815260408083209386168352929052205460ff166124b2565b612710816020015161ffff16106132db5760405162461bcd60e51b8152600401610ebc9061495e565b60408051808201825282516001600160a01b03168082526020808501805161ffff1691909301819052601f80546001600160b01b031916909217600160a01b9091021790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe419261335292916142b7565b60405180910390a150565b60008260000182815481106133745761337461482c565b9060005260206000200154905092915050565b611037828260405180602001604052806000815250613a08565b6133ac601d83612faa565b156133ef5760405162461bcd60e51b8152602060048201526013602482015272115490cdcc8c4bd513d2d15397d313d0d2d151606a1b6044820152606401610ebc565b61219b565b6133fe8282611d65565b61103757613416816001600160a01b03166014613a75565b613421836020613a75565b604051602001613432929190614b60565b60408051601f198184030181529082905262461bcd60e51b8252610ebc91600401613f68565b60006124b28383613c10565b60006124b28383613d03565b600054610100900460ff166134975760405162461bcd60e51b8152600401610ebc906149d1565b82516134aa90600b906020860190613e2b565b5081516134be90600c906020850190613e2b565b5080516134d290600d906020840190613e2b565b506134e3633d96f4ff60e11b613681565b6134f36380ac58cd60e01b613681565b61130d635b5e139f60e01b613681565b600054610100900460ff1661352a5760405162461bcd60e51b8152600401610ebc906149d1565b815161353d90600e906020850190613e2b565b50805161355190600f906020840190613e2b565b5060408051808201909152600580825264173539b7b760d91b602090920191825261357e91601091613e2b565b5061358f631f2f406b60e01b613681565b611037635b5e139f60e01b613681565b600054610100900460ff166135c65760405162461bcd60e51b8152600401610ebc906149d1565b60128190556135db6330f487b560e11b613681565b6135eb6380ac58cd60e01b613681565b61250f63184371e560e31b613681565b600054610100900460ff166136225760405162461bcd60e51b8152600401610ebc906149d1565b611a5b631aa1577160e11b613681565b600054610100900460ff166136595760405162461bcd60e51b8152600401610ebc906149d1565b613669631a056e7160e01b613681565b61250f600080516020614c2883398151915282612d1a565b6001600160e01b031980821614156136da5760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610ebc565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600054610100900460ff166137295760405162461bcd60e51b8152600401610ebc906149d1565b6137396317e0bac360e31b613681565b601a91909155601b55565b600054610100900460ff1661376b5760405162461bcd60e51b8152600401610ebc906149d1565b61257b63e2b3173560e01b613681565b600054610100900460ff166137a25760405162461bcd60e51b8152600401610ebc906149d1565b6137b2633a47bf5160e11b613681565b6137c263152a902d60e11b613681565b6137d263c69dbd8f60e01b613681565b6137e263656cb66560e11b613681565b604080518082019091526001600160a01b038316815261ffff8216602082015261130d816132b2565b600054610100900460ff166138325760405162461bcd60e51b8152600401610ebc906149d1565b613842638d29851f60e01b613681565b602380546001600160a01b039384166001600160a01b03199182161790915560248054929093169116179055565b600054610100900460ff166124185760405162461bcd60e51b8152600401610ebc906149d1565b600081815b84518110156139035760008582815181106138b9576138b961482c565b602002602001015190508083116138df57600083815260208290526040902092506138f0565b600081815260208490526040902092505b50806138fb81614842565b91505061389c565b509392505050565b60608161392f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613959578061394381614842565b91506139529050600a836146fa565b9150613933565b6000816001600160401b03811115613973576139736140b6565b6040519080825280601f01601f19166020018201604052801561399d576020820181803683370190505b5090505b841561248f576139b2600183614bcf565b91506139bf600a86614be6565b6139ca9060306148bd565b60f81b8183815181106139df576139df61482c565b60200101906001600160f81b031916908160001a905350613a01600a866146fa565b94506139a1565b613a128383613d52565b6001600160a01b0383163b1561130d576002548281035b613a3c6000868380600101945086612fce565b613a59576040516368d2bf6b60e11b815260040160405180910390fd5b818110613a29578160025414613a6e57600080fd5b5050505050565b60606000613a848360026146c5565b613a8f9060026148bd565b6001600160401b03811115613aa657613aa66140b6565b6040519080825280601f01601f191660200182016040528015613ad0576020820181803683370190505b509050600360fc1b81600081518110613aeb57613aeb61482c565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613b1a57613b1a61482c565b60200101906001600160f81b031916908160001a9053506000613b3e8460026146c5565b613b499060016148bd565b90505b6001811115613bc1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613b7d57613b7d61482c565b1a60f81b828281518110613b9357613b9361482c565b60200101906001600160f81b031916908160001a90535060049490941c93613bba81614bfa565b9050613b4c565b5083156124b25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ebc565b60008181526001830160205260408120548015613cf9576000613c34600183614bcf565b8554909150600090613c4890600190614bcf565b9050818114613cad576000866000018281548110613c6857613c6861482c565b9060005260206000200154905080876000018481548110613c8b57613c8b61482c565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613cbe57613cbe614c11565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610da1565b6000915050610da1565b6000818152600183016020526040812054613d4a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610da1565b506000610da1565b6002546001600160a01b038316613d7b57604051622e076360e81b815260040160405180910390fd5b81613d995760405163b562e8dd60e01b815260040160405180910390fd5b613da6600084838561285f565b6001600160a01b038316600090815260076020526040902080546001600160401b018402019055613ddd836001841460e11b61286b565b600082815260066020526040902055808281015b6040516001830192906001600160a01b03871690600090600080516020614c48833981519152908290a4808210613df15760025550505050565b828054613e379061485d565b90600052602060002090601f016020900481019282613e595760008555613e9f565b82601f10613e7257805160ff1916838001178555613e9f565b82800160010185558215613e9f579182015b82811115613e9f578251825591602001919060010190613e84565b50613eab929150613eaf565b5090565b5b80821115613eab5760008155600101613eb0565b6001600160e01b03198116811461250f57600080fd5b600060208284031215613eec57600080fd5b81356124b281613ec4565b600060208284031215613f0957600080fd5b5035919050565b60005b83811015613f2b578181015183820152602001613f13565b8381111561219b5750506000910152565b60008151808452613f54816020860160208601613f10565b601f01601f19169290920160200192915050565b6020815260006124b26020830184613f3c565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461250f57600080fd5b8035612d1581613f8f565b600060208284031215613fc157600080fd5b81356124b281613f8f565b60008060408385031215613fdf57600080fd5b8235613fea81613f8f565b946020939093013593505050565b60008060006060848603121561400d57600080fd5b833561401881613f8f565b9250602084013561402881613f8f565b929592945050506040919091013590565b6000806040838503121561404c57600080fd5b50508035926020909101359150565b80358015158114612d1557600080fd5b60006020828403121561407d57600080fd5b6124b28261405b565b6000806040838503121561409957600080fd5b8235915060208301356140ab81613f8f565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405161020081016001600160401b03811182821017156140ef576140ef6140b6565b60405290565b60006001600160401b038084111561410f5761410f6140b6565b604051601f8501601f19908116603f01168101908282118183101715614137576141376140b6565b8160405280935085815286868601111561415057600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261417b57600080fd5b6124b2838335602085016140f5565b60006020828403121561419c57600080fd5b81356001600160401b038111156141b257600080fd5b61248f8482850161416a565b600080602083850312156141d157600080fd5b82356001600160401b03808211156141e857600080fd5b818501915085601f8301126141fc57600080fd5b81358181111561420b57600080fd5b86602060608302850101111561422057600080fd5b60209290920196919550909350505050565b60008083601f84011261424457600080fd5b5081356001600160401b0381111561425b57600080fd5b6020830191508360208260051b850101111561129857600080fd5b6000806020838503121561428957600080fd5b82356001600160401b0381111561429f57600080fd5b6142ab85828601614232565b90969095509350505050565b6001600160a01b0392909216825261ffff16602082015260400190565b803561ffff81168114612d1557600080fd5b600080604083850312156142f957600080fd5b82356001600160401b038082111561431057600080fd5b90840190610200828703121561432557600080fd5b61432d6140cc565b82358281111561433c57600080fd5b6143488882860161416a565b82525060208301358281111561435d57600080fd5b6143698882860161416a565b60208301525060408301358281111561438157600080fd5b61438d8882860161416a565b6040830152506060830135828111156143a557600080fd5b6143b18882860161416a565b6060830152506080830135828111156143c957600080fd5b6143d58882860161416a565b60808301525060a0838101359082015260c0808401359082015260e0808401359082015261010080840135908201526101208084013590820152610140915061441f828401613fa4565b8282015261016091506144338284016142d4565b828201526101809150614447828401613fa4565b828201526101a0915061445b828401613fa4565b828201526101c0915061446f828401613fa4565b828201526101e09150614483828401613fa4565b8282015280945050505061449960208401613fa4565b90509250929050565b6000806000604084860312156144b757600080fd5b8335925060208401356001600160401b038111156144d457600080fd5b6144e086828701614232565b9497909650939450505050565b6000806040838503121561450057600080fd5b823561450b81613f8f565b91506144996020840161405b565b6000806000806080858703121561452f57600080fd5b843561453a81613f8f565b9350602085013561454a81613f8f565b92506040850135915060608501356001600160401b0381111561456c57600080fd5b8501601f8101871361457d57600080fd5b61458c878235602084016140f5565b91505092959194509250565b602080825282518282018190526000919060409081850190868401855b828110156145ec57815180516001600160a01b031685528601516001600160601b03168685015292840192908501906001016145b5565b5091979650505050505050565b60008060006040848603121561460e57600080fd5b833561461981613f8f565b925060208401356001600160401b038111156144d457600080fd5b6000806040838503121561464757600080fd5b823561465281613f8f565b915060208301356140ab81613f8f565b60006040828403121561467457600080fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156146df576146df6146af565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614709576147096146e4565b500490565b602080825260179082015276115490cdcc8c4bd49150d2541251539517d313d0d2d151604a1b604082015260600190565b60006060828403121561475157600080fd5b604051606081016001600160401b0381118282101715614773576147736140b6565b60405282358152602083013561478881613f8f565b6020820152614799604084016142d4565b60408201529392505050565b6000602082840312156147b757600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601f908201527f5354414b41424c455f4552433732312f4e4f545f4c4f434b45525f524f4c4500604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614856576148566146af565b5060010190565b600181811c9082168061487157607f821691505b6020821081141561467457634e487b7160e01b600052602260045260246000fd5b6020808252601190820152702a27a5a2a729afaaa924afa32927ad22a760791b604082015260600190565b600082198211156148d0576148d06146af565b500190565b602080825260139082015272125394d551919250d251539517d05353d55395606a1b604082015260600190565b60006040828403121561491457600080fd5b604080519081016001600160401b0381118282101715614936576149366140b6565b604052823561494481613f8f565b8152614952602084016142d4565b60208201529392505050565b6020808252600b908201526a496e76616c69642062707360a81b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614a4f90830184613f3c565b9695505050505050565b600060208284031215614a6b57600080fd5b81516124b281613ec4565b8054600090600181811c9080831680614a9057607f831692505b6020808410821415614ab257634e487b7160e01b600052602260045260246000fd5b818015614ac65760018114614ad757614b04565b60ff19861689528489019650614b04565b60008881526020902060005b86811015614afc5781548b820152908501908301614ae3565b505084890196505b50505050505092915050565b6000614b1c8286614a76565b8451614b2c818360208901613f10565b614b3881830186614a76565b979650505050505050565b600060208284031215614b5557600080fd5b81516124b281613f8f565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351614b92816017850160208801613f10565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614bc3816028840160208801613f10565b01602801949350505050565b600082821015614be157614be16146af565b500390565b600082614bf557614bf56146e4565b500690565b600081614c0957614c096146af565b506000190190565b634e487b7160e01b600052603160045260246000fdfe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efaf9a8bb3cbd6b84fbccefa71ff73e26e798553c6914585a84886212a46a90279a26469706673582212209e939787fe73cf3f1278910f61e926af21f95ebd3b1ef4765bf6c6b317a20c9564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenRoyaltiesCount()": {
        "details": "See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}."
      },
      "getTokenRoyaltyByIndex(uint256)": {
        "details": "See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "See {IEIP2981RoyaltyOverride-royaltyInfo}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see `_totalMinted`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "ApproveToCaller()": [
        {
          "notice": "The caller cannot approve to their own address."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings."
      },
      "lock(uint256[])": {
        "notice": "Locks token(s) to effectively lock them, while keeping in the same wallet. This mechanism prevents them from being transferred, yet still will show correct owner."
      },
      "locked(uint256)": {
        "notice": "Returns if a token is locked or not."
      },
      "unlock(uint256[])": {
        "notice": "Unlocks locked token(s) to be able to transfer."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 886,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 889,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 782,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4693,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 16667,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16669,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 16671,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 16673,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 16677,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16681,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16685,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16691,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 12629,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9658,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_name",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 9660,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_symbol",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 9662,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_contractURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 11172,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_placeholderURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 11174,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_tokenURIPrefix",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 11176,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_tokenURISuffix",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 11178,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "tokenURIFrozen",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 10030,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "maxSupply",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 10032,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "maxSupplyFrozen",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 1124,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_status",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 10934,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "preSalePrice",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 10936,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "preSaleMaxMintPerWallet",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 10938,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "preSaleAllowlistMerkleRoot",
        "offset": 0,
        "slot": "23",
        "type": "t_bytes32"
      },
      {
        "astId": 10940,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "preSaleStatus",
        "offset": 0,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 10944,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "preSaleAllowlistClaimed",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11385,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "publicSalePrice",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 11387,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "publicSaleMaxMintPerTx",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 11389,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "publicSaleStatus",
        "offset": 0,
        "slot": "28",
        "type": "t_bool"
      },
      {
        "astId": 8499,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "proceedsRecipient",
        "offset": 1,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 8501,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "proceedsRecipientLocked",
        "offset": 21,
        "slot": "28",
        "type": "t_bool"
      },
      {
        "astId": 9879,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "lockedTokens",
        "offset": 0,
        "slot": "29",
        "type": "t_struct(BitMap)5065_storage"
      },
      {
        "astId": 406,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_roles",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)401_storage)"
      },
      {
        "astId": 86,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "defaultRoyalty",
        "offset": 0,
        "slot": "31",
        "type": "t_struct(TokenRoyalty)28_storage"
      },
      {
        "astId": 91,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_tokenRoyalties",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint256,t_struct(TokenRoyalty)28_storage)"
      },
      {
        "astId": 94,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_tokensWithRoyalties",
        "offset": 0,
        "slot": "33",
        "type": "t_struct(UintSet)5664_storage"
      },
      {
        "astId": 10364,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_openSeaProxyRegistryAddress",
        "offset": 0,
        "slot": "35",
        "type": "t_address"
      },
      {
        "astId": 10366,
        "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
        "label": "_openSeaExchangeAddress",
        "offset": 0,
        "slot": "36",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)401_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)401_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenRoyalty)28_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEIP2981RoyaltyOverride.TokenRoyalty)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenRoyalty)28_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BitMap)5065_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "members": [
          {
            "astId": 5064,
            "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)401_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 398,
            "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 400,
            "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5206_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5201,
            "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5205,
            "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenRoyalty)28_storage": {
        "encoding": "inplace",
        "label": "struct IEIP2981RoyaltyOverride.TokenRoyalty",
        "members": [
          {
            "astId": 25,
            "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27,
            "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
            "label": "bps",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)5664_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 5663,
            "contract": "contracts/collections/ERC721A/presets/ERC721AFullFeaturedCollection.sol:ERC721AFullFeaturedCollection",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5206_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}