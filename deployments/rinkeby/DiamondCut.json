{
  "address": "0x8d4e0b2f7e483cF1ea91efb3109EB2C0EFca84Ba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "DiamondFacetAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "DiamondFacetSameFunction",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a0a9c13e7458bb876053ec5d839d250b4f9712448a857f480f9bb6a20b29956",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x8d4e0b2f7e483cF1ea91efb3109EB2C0EFca84Ba",
    "transactionIndex": 4,
    "gasUsed": "1022127",
    "logsBloom": "0x
    "blockHash": "0x5d2a6862cb27ab39991104d0484e8c5cd9b3f27286395c2ac4704ccdcd48ee30",
    "transactionHash": "0x7a0a9c13e7458bb876053ec5d839d250b4f9712448a857f480f9bb6a20b29956",
    "logs": [],
    "blockNumber": 11362529,
    "cumulativeGasUsed": "3016964",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "ffc6e07a79fa964cefe1c357bb110a4e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"DiamondFacetAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"DiamondFacetSameFunction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/features/diamond/DiamondCut.sol\":\"DiamondCut\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/core/DiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../features/diamond/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror DiamondFacetAlreadyExists(address facet, bytes4 selector);\\nerror DiamondFacetSameFunction(address facet, bytes4 selector);\\n\\nlibrary DiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct Layout {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            l.slot := position\\n        }\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        // require(\\n        //     _functionSelectors.length > 0,\\n        //     \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        // );\\n        Layout storage l = layout();\\n        // require(\\n        //     _facetAddress != address(0),\\n        //     \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        // );\\n        uint96 selectorPosition = uint96(\\n            l.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(l, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n\\n            if (oldFacetAddress != address(0)) {\\n                revert DiamondFacetAlreadyExists(oldFacetAddress, selector);\\n            }\\n\\n            addFunction(l, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        // require(\\n        //     _functionSelectors.length > 0,\\n        //     \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        // );\\n        Layout storage l = layout();\\n        // require(\\n        //     _facetAddress != address(0),\\n        //     \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        // );\\n        uint96 selectorPosition = uint96(\\n            l.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(l, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n\\n            if (oldFacetAddress == _facetAddress) {\\n                revert DiamondFacetSameFunction(oldFacetAddress, selector);\\n            }\\n\\n            removeFunction(l, oldFacetAddress, selector);\\n            addFunction(l, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        // require(\\n        //     _functionSelectors.length > 0,\\n        //     \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        // );\\n        Layout storage l = layout();\\n        // if function does not exist then do nothing and return\\n        // require(\\n        //     _facetAddress == address(0),\\n        //     \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        // );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(l, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(Layout storage l, address _facetAddress) internal {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        l.facetFunctionSelectors[_facetAddress].facetAddressPosition = l\\n            .facetAddresses\\n            .length;\\n        l.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        Layout storage l,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        l\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        l.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        l.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        Layout storage l,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        // require(\\n        //     _facetAddress != address(0),\\n        //     \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        // );\\n        // an immutable function is a function defined directly in a diamond\\n        // require(\\n        //     _facetAddress != address(this),\\n        //     \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        // );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = l\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = l\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = l\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            l.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            l\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        l.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete l.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = l.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = l\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = l.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                l.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                l\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            l.facetAddresses.pop();\\n            delete l.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x3b1da314ca1ef3b4e00e924d30379b9e565431d1d7a777ac41cc226977bce2a4\",\"license\":\"MIT\"},\"contracts/features/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0xaa69cf8eab7188097d9aa84c92692ec30614ee2f6bf8d2255482162611255db4\",\"license\":\"MIT\"},\"contracts/features/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {OwnableStorage} from \\\"./OwnableStorage.sol\\\";\\nimport {IERC173Events} from \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(msg.sender, account);\\n    }\\n}\\n\",\"keccak256\":\"0x8789cacff1b43be2f20333233dc5f70aed9311cc8b4abaf70d20c979146a5404\",\"license\":\"MIT\"},\"contracts/features/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x26eea1f665c393b0046c3dcb9421f3caa1322ca996689fa0aa941eff5a1dcda2\",\"license\":\"MIT\"},\"contracts/features/diamond/DiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"./IDiamondCut.sol\\\";\\nimport {DiamondStorage} from \\\"../../core/DiamondStorage.sol\\\";\\nimport {OwnableInternal} from \\\"../access/ownable/OwnableInternal.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\ncontract DiamondCut is IDiamondCut, OwnableInternal {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override onlyOwner {\\n        DiamondStorage.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x756c4a98482646fa9b73934d4eae08112d834703ce1c9c38ff91c354efcab12d\",\"license\":\"MIT\"},\"contracts/features/diamond/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xb85e6227a1c576c2ecca3d896f95b298ec7a918b74700d6e4999a1cd8fc89b95\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611187806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610c19565b610045565b005b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146100c35760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b61010d6100d08587610d5b565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061011492505050565b5050505050565b60005b83518110156102da57600084828151811061013457610134610e9e565b60200260200101516020015190506000600281111561015557610155610eb4565b81600281111561016757610167610eb4565b036101b5576101b085838151811061018157610181610e9e565b60200260200101516000015186848151811061019f5761019f610e9e565b602002602001015160400151610325565b6102c7565b60018160028111156101c9576101c9610eb4565b03610212576101b08583815181106101e3576101e3610e9e565b60200260200101516000015186848151811061020157610201610e9e565b60200260200101516040015161040a565b600281600281111561022657610226610eb4565b0361026f576101b085838151811061024057610240610e9e565b60200260200101516000015186848151811061025e5761025e610e9e565b6020026020010151604001516104fe565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b60648201526084016100ba565b50806102d281610ee0565b915050610117565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161030e93929190610f51565b60405180910390a16103208282610582565b505050565b600061032f61078e565b6001600160a01b03841660009081526001820160205260408120549192506001600160601b03821690036103675761036782856107b2565b60005b835181101561010d57600084828151811061038757610387610e9e565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156103dc57808260405163752eb76d60e01b81526004016100ba929190611051565b6103e88583868a61081c565b836103f281611074565b9450505050808061040290610ee0565b91505061036a565b600061041461078e565b6001600160a01b03841660009081526001820160205260408120549192506001600160601b038216900361044c5761044c82856107b2565b60005b835181101561010d57600084828151811061046c5761046c610e9e565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681036104c5578082604051623d8f0960e61b81526004016100ba929190611051565b6104d08582846108bc565b6104dc8583868a61081c565b836104e681611074565b945050505080806104f690610ee0565b91505061044f565b600061050861078e565b905060005b825181101561057c57600083828151811061052a5761052a610e9e565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b03166105678482846108bc565b5050808061057490610ee0565b91505061050d565b50505050565b6001600160a01b038216610608578051156106045760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527b3029206275745f63616c6c64617461206973206e6f7420656d70747960201b60648201526084016100ba565b5050565b600081511161067f5760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f74206164647265737328302900000060648201526084016100ba565b6001600160a01b03821630146106b1576106b18260405180606001604052806028815260200161110660289139610b94565b600080836001600160a01b0316836040516106cc91906110a2565b600060405180830381855af49150503d8060008114610707576040519150601f19603f3d011682016040523d82523d6000602084013e61070c565b606091505b50915091508161057c57805115610737578060405162461bcd60e51b81526004016100ba91906110be565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b60648201526084016100ba565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6107d48160405180606001604052806024815260200161112e60249139610b94565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b0316929161090b916110d8565b90508082146109fd576001600160a01b0384166000908152600186016020526040812080548390811061094057610940610e9e565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811061099157610991610e9e565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b03841660009081526001860160205260409020805480610a2657610a266110ef565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319851682528690526040812081905581900361010d576002850154600090610a89906001906110d8565b6001600160a01b0386166000908152600180890160205260409091200154909150808214610b38576000876002018381548110610ac857610ac8610e9e565b6000918252602090912001546002890180546001600160a01b039092169250829184908110610af957610af9610e9e565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b86600201805480610b4b57610b4b6110ef565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b818161057c5760405162461bcd60e51b81526004016100ba91906110be565b80356001600160a01b0381168114610bcc57600080fd5b919050565b60008083601f840112610be357600080fd5b5081356001600160401b03811115610bfa57600080fd5b602083019150836020828501011115610c1257600080fd5b9250929050565b600080600080600060608688031215610c3157600080fd5b85356001600160401b0380821115610c4857600080fd5b818801915088601f830112610c5c57600080fd5b813581811115610c6b57600080fd5b8960208260051b8501011115610c8057600080fd5b60208301975080965050610c9660208901610bb5565b94506040880135915080821115610cac57600080fd5b50610cb988828901610bd1565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715610d0257610d02610cca565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610d3057610d30610cca565b604052919050565b60006001600160401b03821115610d5157610d51610cca565b5060051b60200190565b6000610d6e610d6984610d38565b610d08565b83815260208082019190600586811b860136811115610d8c57600080fd5b865b81811015610e915780356001600160401b0380821115610dae5760008081fd5b818a01915060608236031215610dc45760008081fd5b610dcc610ce0565b610dd583610bb5565b81528683013560038110610de95760008081fd5b8188015260408381013583811115610e015760008081fd5b939093019236601f850112610e1857600092508283fd5b83359250610e28610d6984610d38565b83815292871b84018801928881019036851115610e455760008081fd5b948901945b84861015610e7a5785356001600160e01b031981168114610e6b5760008081fd5b82529489019490890190610e4a565b918301919091525088525050948301948301610d8e565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610ef257610ef2610eca565b5060010190565b60005b83811015610f14578181015183820152602001610efc565b8381111561057c5750506000910152565b60008151808452610f3d816020860160208601610ef9565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b8481101561102157898403607f19018652815180516001600160a01b03168552838101518986019060038110610fc057634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b8083101561100c5783516001600160e01b0319168252928601926001929092019190860190610fe2565b50978501979550505090820190600101610f7a565b50506001600160a01b038a169088015286810360408801526110438189610f25565b9a9950505050505050505050565b6001600160a01b039290921682526001600160e01b031916602082015260400190565b60006001600160601b038281166002600160601b0319810161109857611098610eca565b6001019392505050565b600082516110b4818460208701610ef9565b9190910192915050565b6020815260006110d16020830184610f25565b9392505050565b6000828210156110ea576110ea610eca565b500390565b634e487b7160e01b600052603160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220927ba2706c585a1f50c460bbedbf8960387758eda75b0deeb7d0b21ac83a67ba64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610c19565b610045565b005b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146100c35760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b61010d6100d08587610d5b565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061011492505050565b5050505050565b60005b83518110156102da57600084828151811061013457610134610e9e565b60200260200101516020015190506000600281111561015557610155610eb4565b81600281111561016757610167610eb4565b036101b5576101b085838151811061018157610181610e9e565b60200260200101516000015186848151811061019f5761019f610e9e565b602002602001015160400151610325565b6102c7565b60018160028111156101c9576101c9610eb4565b03610212576101b08583815181106101e3576101e3610e9e565b60200260200101516000015186848151811061020157610201610e9e565b60200260200101516040015161040a565b600281600281111561022657610226610eb4565b0361026f576101b085838151811061024057610240610e9e565b60200260200101516000015186848151811061025e5761025e610e9e565b6020026020010151604001516104fe565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b60648201526084016100ba565b50806102d281610ee0565b915050610117565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161030e93929190610f51565b60405180910390a16103208282610582565b505050565b600061032f61078e565b6001600160a01b03841660009081526001820160205260408120549192506001600160601b03821690036103675761036782856107b2565b60005b835181101561010d57600084828151811061038757610387610e9e565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156103dc57808260405163752eb76d60e01b81526004016100ba929190611051565b6103e88583868a61081c565b836103f281611074565b9450505050808061040290610ee0565b91505061036a565b600061041461078e565b6001600160a01b03841660009081526001820160205260408120549192506001600160601b038216900361044c5761044c82856107b2565b60005b835181101561010d57600084828151811061046c5761046c610e9e565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681036104c5578082604051623d8f0960e61b81526004016100ba929190611051565b6104d08582846108bc565b6104dc8583868a61081c565b836104e681611074565b945050505080806104f690610ee0565b91505061044f565b600061050861078e565b905060005b825181101561057c57600083828151811061052a5761052a610e9e565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b03166105678482846108bc565b5050808061057490610ee0565b91505061050d565b50505050565b6001600160a01b038216610608578051156106045760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527b3029206275745f63616c6c64617461206973206e6f7420656d70747960201b60648201526084016100ba565b5050565b600081511161067f5760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f74206164647265737328302900000060648201526084016100ba565b6001600160a01b03821630146106b1576106b18260405180606001604052806028815260200161110660289139610b94565b600080836001600160a01b0316836040516106cc91906110a2565b600060405180830381855af49150503d8060008114610707576040519150601f19603f3d011682016040523d82523d6000602084013e61070c565b606091505b50915091508161057c57805115610737578060405162461bcd60e51b81526004016100ba91906110be565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b60648201526084016100ba565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6107d48160405180606001604052806024815260200161112e60249139610b94565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b0316929161090b916110d8565b90508082146109fd576001600160a01b0384166000908152600186016020526040812080548390811061094057610940610e9e565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b92508291908590811061099157610991610e9e565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b03841660009081526001860160205260409020805480610a2657610a266110ef565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319851682528690526040812081905581900361010d576002850154600090610a89906001906110d8565b6001600160a01b0386166000908152600180890160205260409091200154909150808214610b38576000876002018381548110610ac857610ac8610e9e565b6000918252602090912001546002890180546001600160a01b039092169250829184908110610af957610af9610e9e565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b86600201805480610b4b57610b4b6110ef565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b818161057c5760405162461bcd60e51b81526004016100ba91906110be565b80356001600160a01b0381168114610bcc57600080fd5b919050565b60008083601f840112610be357600080fd5b5081356001600160401b03811115610bfa57600080fd5b602083019150836020828501011115610c1257600080fd5b9250929050565b600080600080600060608688031215610c3157600080fd5b85356001600160401b0380821115610c4857600080fd5b818801915088601f830112610c5c57600080fd5b813581811115610c6b57600080fd5b8960208260051b8501011115610c8057600080fd5b60208301975080965050610c9660208901610bb5565b94506040880135915080821115610cac57600080fd5b50610cb988828901610bd1565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715610d0257610d02610cca565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610d3057610d30610cca565b604052919050565b60006001600160401b03821115610d5157610d51610cca565b5060051b60200190565b6000610d6e610d6984610d38565b610d08565b83815260208082019190600586811b860136811115610d8c57600080fd5b865b81811015610e915780356001600160401b0380821115610dae5760008081fd5b818a01915060608236031215610dc45760008081fd5b610dcc610ce0565b610dd583610bb5565b81528683013560038110610de95760008081fd5b8188015260408381013583811115610e015760008081fd5b939093019236601f850112610e1857600092508283fd5b83359250610e28610d6984610d38565b83815292871b84018801928881019036851115610e455760008081fd5b948901945b84861015610e7a5785356001600160e01b031981168114610e6b5760008081fd5b82529489019490890190610e4a565b918301919091525088525050948301948301610d8e565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610ef257610ef2610eca565b5060010190565b60005b83811015610f14578181015183820152602001610efc565b8381111561057c5750506000910152565b60008151808452610f3d816020860160208601610ef9565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b8481101561102157898403607f19018652815180516001600160a01b03168552838101518986019060038110610fc057634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b8083101561100c5783516001600160e01b0319168252928601926001929092019190860190610fe2565b50978501979550505090820190600101610f7a565b50506001600160a01b038a169088015286810360408801526110438189610f25565b9a9950505050505050505050565b6001600160a01b039290921682526001600160e01b031916602082015260400190565b60006001600160601b038281166002600160601b0319810161109857611098610eca565b6001019392505050565b600082516110b4818460208701610ef9565b9190910192915050565b6020815260006110d16020830184610f25565b9392505050565b6000828210156110ea576110ea610eca565b500390565b634e487b7160e01b600052603160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220927ba2706c585a1f50c460bbedbf8960387758eda75b0deeb7d0b21ac83a67ba64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}