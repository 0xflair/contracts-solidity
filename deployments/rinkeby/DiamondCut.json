{
  "address": "0xD2B534da4cdB37A1BaEAb467E5a0596bb5d480B5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd77062c71a4ce7034b213797fbdf7147aeb70e23d74fcdbe2b21c867c38b6be",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xD2B534da4cdB37A1BaEAb467E5a0596bb5d480B5",
    "transactionIndex": 8,
    "gasUsed": "1192350",
    "logsBloom": "0x
    "blockHash": "0x82378579a50ecb2bf68e4673b7061b6469cde1078d357564cbd6e8ae9bef0568",
    "transactionHash": "0xbd77062c71a4ce7034b213797fbdf7147aeb70e23d74fcdbe2b21c867c38b6be",
    "logs": [],
    "blockNumber": 11355757,
    "cumulativeGasUsed": "3090770",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "87eb926eb364a50df675f52093495652",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/diamond/DiamondCut.sol\":\"DiamondCut\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"contracts/core/DiamondStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../facets/diamond/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct Layout {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            l.slot := position\\n        }\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        Layout storage l = layout();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            l.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(l, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            addFunction(l, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        Layout storage l = layout();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            l.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(l, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(l, oldFacetAddress, selector);\\n            addFunction(l, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        Layout storage l = layout();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = l\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(l, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(Layout storage l, address _facetAddress) internal {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        l.facetFunctionSelectors[_facetAddress].facetAddressPosition = l\\n            .facetAddresses\\n            .length;\\n        l.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        Layout storage l,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        l\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        l.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        l.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        Layout storage l,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = l\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = l\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = l\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            l.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            l\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        l.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete l.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = l.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = l\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = l.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                l.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                l\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            l.facetAddresses.pop();\\n            delete l.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x4b307d9624f68dea049b4afc1b546f0f92e93f1db1f2876245547ee008bf6e21\",\"license\":\"MIT\"},\"contracts/facets/access/ownable/IERC173Event.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Event {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0xb9306908ca1d13e6acb543bff1a8999cd1cbff979e2eda29793aaa67b6925467\",\"license\":\"MIT\"},\"contracts/facets/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport {OwnableStorage} from \\\"./OwnableStorage.sol\\\";\\nimport {IERC173Event} from \\\"./IERC173Event.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Event {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(msg.sender, account);\\n    }\\n}\\n\",\"keccak256\":\"0xd06576bfdd6b65237d9e3e602e7c35d3a6aa6e1d24bf91685d33264cd2bb4422\",\"license\":\"MIT\"},\"contracts/facets/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0x26eea1f665c393b0046c3dcb9421f3caa1322ca996689fa0aa941eff5a1dcda2\",\"license\":\"MIT\"},\"contracts/facets/diamond/DiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"./IDiamondCut.sol\\\";\\nimport {DiamondStorage} from \\\"../../core/DiamondStorage.sol\\\";\\nimport {OwnableInternal} from \\\"../access/ownable/OwnableInternal.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\ncontract DiamondCut is IDiamondCut, OwnableInternal {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override onlyOwner {\\n        DiamondStorage.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x756c4a98482646fa9b73934d4eae08112d834703ce1c9c38ff91c354efcab12d\",\"license\":\"MIT\"},\"contracts/facets/diamond/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xb85e6227a1c576c2ecca3d896f95b298ec7a918b74700d6e4999a1cd8fc89b95\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061149b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610eb9565b610045565b005b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146100c35760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b61010d6100d08587610ffb565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061011492505050565b5050505050565b60005b83518110156102da5760008482815181106101345761013461113e565b60200260200101516020015190506000600281111561015557610155611154565b81600281111561016757610167611154565b036101b5576101b08583815181106101815761018161113e565b60200260200101516000015186848151811061019f5761019f61113e565b602002602001015160400151610325565b6102c7565b60018160028111156101c9576101c9611154565b03610212576101b08583815181106101e3576101e361113e565b6020026020010151600001518684815181106102015761020161113e565b60200260200101516040015161049a565b600281600281111561022657610226611154565b0361026f576101b08583815181106102405761024061113e565b60200260200101516000015186848151811061025e5761025e61113e565b602002602001015160400151610622565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b60648201526084016100ba565b50806102d281611180565b915050610117565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161030e939291906111f1565b60405180910390a1610320828261073d565b505050565b60008151116103465760405162461bcd60e51b81526004016100ba906112f1565b6000610350610949565b90506001600160a01b0383166103785760405162461bcd60e51b81526004016100ba9061133c565b6001600160a01b0383166000908152600182016020526040812054906001600160601b03821690036103ae576103ae828561096d565b60005b835181101561010d5760008482815181106103ce576103ce61113e565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0316801561046c5760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b60648201526084016100ba565b6104788583868a6109d7565b8361048281611388565b9450505050808061049290611180565b9150506103b1565b60008151116104bb5760405162461bcd60e51b81526004016100ba906112f1565b60006104c5610949565b90506001600160a01b0383166104ed5760405162461bcd60e51b81526004016100ba9061133c565b6001600160a01b0383166000908152600182016020526040812054906001600160601b038216900361052357610523828561096d565b60005b835181101561010d5760008482815181106105435761054361113e565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681036105e95760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527731ba34b7b7103bb4ba341039b0b6b290333ab731ba34b7b760411b60648201526084016100ba565b6105f4858284610a77565b6106008583868a6109d7565b8361060a81611388565b9450505050808061061a90611180565b915050610526565b60008151116106435760405162461bcd60e51b81526004016100ba906112f1565b600061064d610949565b90506001600160a01b038316156106c55760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b60648201526084016100ba565b60005b82518110156107375760008382815181106106e5576106e561113e565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b0316610722848284610a77565b5050808061072f90611180565b9150506106c8565b50505050565b6001600160a01b0382166107c3578051156107bf5760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527b3029206275745f63616c6c64617461206973206e6f7420656d70747960201b60648201526084016100ba565b5050565b600081511161083a5760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f74206164647265737328302900000060648201526084016100ba565b6001600160a01b038216301461086c5761086c8260405180606001604052806028815260200161141a60289139610e34565b600080836001600160a01b03168360405161088791906113b6565b600060405180830381855af49150503d80600081146108c2576040519150601f19603f3d011682016040523d82523d6000602084013e6108c7565b606091505b509150915081610737578051156108f2578060405162461bcd60e51b81526004016100ba91906113d2565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b60648201526084016100ba565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b61098f8160405180606001604052806024815260200161144260249139610e34565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b038216610aed5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e636044820152761d1a5bdb881d1a185d08191bd95cdb89dd08195e1a5cdd604a1b60648201526084016100ba565b306001600160a01b03831603610b5c5760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b60648201526084016100ba565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b03169291610bab916113ec565b9050808214610c9d576001600160a01b03841660009081526001860160205260408120805483908110610be057610be061113e565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b925082919085908110610c3157610c3161113e565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b03841660009081526001860160205260409020805480610cc657610cc6611403565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319851682528690526040812081905581900361010d576002850154600090610d29906001906113ec565b6001600160a01b0386166000908152600180890160205260409091200154909150808214610dd8576000876002018381548110610d6857610d6861113e565b6000918252602090912001546002890180546001600160a01b039092169250829184908110610d9957610d9961113e565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b86600201805480610deb57610deb611403565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b81816107375760405162461bcd60e51b81526004016100ba91906113d2565b80356001600160a01b0381168114610e6c57600080fd5b919050565b60008083601f840112610e8357600080fd5b5081356001600160401b03811115610e9a57600080fd5b602083019150836020828501011115610eb257600080fd5b9250929050565b600080600080600060608688031215610ed157600080fd5b85356001600160401b0380821115610ee857600080fd5b818801915088601f830112610efc57600080fd5b813581811115610f0b57600080fd5b8960208260051b8501011115610f2057600080fd5b60208301975080965050610f3660208901610e55565b94506040880135915080821115610f4c57600080fd5b50610f5988828901610e71565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715610fa257610fa2610f6a565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610fd057610fd0610f6a565b604052919050565b60006001600160401b03821115610ff157610ff1610f6a565b5060051b60200190565b600061100e61100984610fd8565b610fa8565b83815260208082019190600586811b86013681111561102c57600080fd5b865b818110156111315780356001600160401b038082111561104e5760008081fd5b818a019150606082360312156110645760008081fd5b61106c610f80565b61107583610e55565b815286830135600381106110895760008081fd5b81880152604083810135838111156110a15760008081fd5b939093019236601f8501126110b857600092508283fd5b833592506110c861100984610fd8565b83815292871b840188019288810190368511156110e55760008081fd5b948901945b8486101561111a5785356001600160e01b03198116811461110b5760008081fd5b825294890194908901906110ea565b91830191909152508852505094830194830161102e565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016111925761119261116a565b5060010190565b60005b838110156111b457818101518382015260200161119c565b838111156107375750506000910152565b600081518084526111dd816020860160208601611199565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156112c157898403607f19018652815180516001600160a01b0316855283810151898601906003811061126057634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b808310156112ac5783516001600160e01b0319168252928601926001929092019190860190611282565b5097850197955050509082019060010161121a565b50506001600160a01b038a169088015286810360408801526112e381896111c5565b9a9950505050505050505050565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b60006001600160601b038281166002600160601b031981016113ac576113ac61116a565b6001019392505050565b600082516113c8818460208701611199565b9190910192915050565b6020815260006113e560208301846111c5565b9392505050565b6000828210156113fe576113fe61116a565b500390565b634e487b7160e01b600052603160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220a44bd0b9bce78f964b9257df7b194168e2569c1fb9d878b063424fdd66be39de64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610eb9565b610045565b005b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146100c35760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b61010d6100d08587610ffb565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061011492505050565b5050505050565b60005b83518110156102da5760008482815181106101345761013461113e565b60200260200101516020015190506000600281111561015557610155611154565b81600281111561016757610167611154565b036101b5576101b08583815181106101815761018161113e565b60200260200101516000015186848151811061019f5761019f61113e565b602002602001015160400151610325565b6102c7565b60018160028111156101c9576101c9611154565b03610212576101b08583815181106101e3576101e361113e565b6020026020010151600001518684815181106102015761020161113e565b60200260200101516040015161049a565b600281600281111561022657610226611154565b0361026f576101b08583815181106102405761024061113e565b60200260200101516000015186848151811061025e5761025e61113e565b602002602001015160400151610622565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b60648201526084016100ba565b50806102d281611180565b915050610117565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161030e939291906111f1565b60405180910390a1610320828261073d565b505050565b60008151116103465760405162461bcd60e51b81526004016100ba906112f1565b6000610350610949565b90506001600160a01b0383166103785760405162461bcd60e51b81526004016100ba9061133c565b6001600160a01b0383166000908152600182016020526040812054906001600160601b03821690036103ae576103ae828561096d565b60005b835181101561010d5760008482815181106103ce576103ce61113e565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0316801561046c5760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b60648201526084016100ba565b6104788583868a6109d7565b8361048281611388565b9450505050808061049290611180565b9150506103b1565b60008151116104bb5760405162461bcd60e51b81526004016100ba906112f1565b60006104c5610949565b90506001600160a01b0383166104ed5760405162461bcd60e51b81526004016100ba9061133c565b6001600160a01b0383166000908152600182016020526040812054906001600160601b038216900361052357610523828561096d565b60005b835181101561010d5760008482815181106105435761054361113e565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b0390811690871681036105e95760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527731ba34b7b7103bb4ba341039b0b6b290333ab731ba34b7b760411b60648201526084016100ba565b6105f4858284610a77565b6106008583868a6109d7565b8361060a81611388565b9450505050808061061a90611180565b915050610526565b60008151116106435760405162461bcd60e51b81526004016100ba906112f1565b600061064d610949565b90506001600160a01b038316156106c55760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b60648201526084016100ba565b60005b82518110156107375760008382815181106106e5576106e561113e565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b0316610722848284610a77565b5050808061072f90611180565b9150506106c8565b50505050565b6001600160a01b0382166107c3578051156107bf5760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527b3029206275745f63616c6c64617461206973206e6f7420656d70747960201b60648201526084016100ba565b5050565b600081511161083a5760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f74206164647265737328302900000060648201526084016100ba565b6001600160a01b038216301461086c5761086c8260405180606001604052806028815260200161141a60289139610e34565b600080836001600160a01b03168360405161088791906113b6565b600060405180830381855af49150503d80600081146108c2576040519150601f19603f3d011682016040523d82523d6000602084013e6108c7565b606091505b509150915081610737578051156108f2578060405162461bcd60e51b81526004016100ba91906113d2565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b60648201526084016100ba565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b61098f8160405180606001604052806024815260200161144260249139610e34565b6002820180546001600160a01b0390921660008181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160e01b0319831660008181526020868152604080832080546001600160601b03909716600160a01b026001600160a01b0397881617815594909516808352600180890183529583208054968701815583528183206008870401805460e09890981c60046007909816979097026101000a96870263ffffffff9097021990971695909517909555529290915281546001600160a01b031916179055565b6001600160a01b038216610aed5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e636044820152761d1a5bdb881d1a185d08191bd95cdb89dd08195e1a5cdd604a1b60648201526084016100ba565b306001600160a01b03831603610b5c5760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b60648201526084016100ba565b6001600160e01b03198116600090815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b03169291610bab916113ec565b9050808214610c9d576001600160a01b03841660009081526001860160205260408120805483908110610be057610be061113e565b600091825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b925082919085908110610c3157610c3161113e565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b03841660009081526001860160205260409020805480610cc657610cc6611403565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319851682528690526040812081905581900361010d576002850154600090610d29906001906113ec565b6001600160a01b0386166000908152600180890160205260409091200154909150808214610dd8576000876002018381548110610d6857610d6861113e565b6000918252602090912001546002890180546001600160a01b039092169250829184908110610d9957610d9961113e565b600091825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b86600201805480610deb57610deb611403565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b813b81816107375760405162461bcd60e51b81526004016100ba91906113d2565b80356001600160a01b0381168114610e6c57600080fd5b919050565b60008083601f840112610e8357600080fd5b5081356001600160401b03811115610e9a57600080fd5b602083019150836020828501011115610eb257600080fd5b9250929050565b600080600080600060608688031215610ed157600080fd5b85356001600160401b0380821115610ee857600080fd5b818801915088601f830112610efc57600080fd5b813581811115610f0b57600080fd5b8960208260051b8501011115610f2057600080fd5b60208301975080965050610f3660208901610e55565b94506040880135915080821115610f4c57600080fd5b50610f5988828901610e71565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715610fa257610fa2610f6a565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610fd057610fd0610f6a565b604052919050565b60006001600160401b03821115610ff157610ff1610f6a565b5060051b60200190565b600061100e61100984610fd8565b610fa8565b83815260208082019190600586811b86013681111561102c57600080fd5b865b818110156111315780356001600160401b038082111561104e5760008081fd5b818a019150606082360312156110645760008081fd5b61106c610f80565b61107583610e55565b815286830135600381106110895760008081fd5b81880152604083810135838111156110a15760008081fd5b939093019236601f8501126110b857600092508283fd5b833592506110c861100984610fd8565b83815292871b840188019288810190368511156110e55760008081fd5b948901945b8486101561111a5785356001600160e01b03198116811461110b5760008081fd5b825294890194908901906110ea565b91830191909152508852505094830194830161102e565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016111925761119261116a565b5060010190565b60005b838110156111b457818101518382015260200161119c565b838111156107375750506000910152565b600081518084526111dd816020860160208601611199565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156112c157898403607f19018652815180516001600160a01b0316855283810151898601906003811061126057634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b808310156112ac5783516001600160e01b0319168252928601926001929092019190860190611282565b5097850197955050509082019060010161121a565b50506001600160a01b038a169088015286810360408801526112e381896111c5565b9a9950505050505050505050565b6020808252602b908201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660408201526a1858d95d081d1bc818dd5d60aa1b606082015260800190565b6020808252602c908201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260408201526b65206164647265737328302960a01b606082015260800190565b60006001600160601b038281166002600160601b031981016113ac576113ac61116a565b6001019392505050565b600082516113c8818460208701611199565b9190910192915050565b6020815260006113e560208301846111c5565b9392505050565b6000828210156113fe576113fe61116a565b500390565b634e487b7160e01b600052603160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220a44bd0b9bce78f964b9257df7b194168e2569c1fb9d878b063424fdd66be39de64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}