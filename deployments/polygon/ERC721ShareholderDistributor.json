{
  "address": "0xe42d26060444F42b9BB28818295a3F68526A0e39",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntilTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC721ShareholderDistributor.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimBulk",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        }
      ],
      "name": "SharesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "calculateClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "calculateClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "claimBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "entitlements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "getTotalClaimableBulk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTotalClaimedBulk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "getTotalClaimedBulk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntilTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC721ShareholderDistributor.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "lockUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shares",
          "type": "uint256[]"
        }
      ],
      "name": "setShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5923866a1f899ccbd2c16cf78fee78cd8f0b36309f86f3857a50ba24e996ae30",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xe42d26060444F42b9BB28818295a3F68526A0e39",
    "transactionIndex": 46,
    "gasUsed": "1643364",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000020000000008000000000000000000000000000000000000000000000000000000000810001000000000400000100000000000000008000020000000000000000000800000000000000000080000000000000c00000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000400000000000000000000000000000000004000800000000000000001000000048000000000000000000000100000000020000000020000000000001000000000000000000000000000000000000000100000",
    "blockHash": "0x00ae9c3669bae3891e76617055827c1357e2ebdb15c0c4ca8a9c82eaf3475d16",
    "transactionHash": "0x5923866a1f899ccbd2c16cf78fee78cd8f0b36309f86f3857a50ba24e996ae30",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 29786528,
        "transactionHash": "0x5923866a1f899ccbd2c16cf78fee78cd8f0b36309f86f3857a50ba24e996ae30",
        "address": "0xe42d26060444F42b9BB28818295a3F68526A0e39",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 319,
        "blockHash": "0x00ae9c3669bae3891e76617055827c1357e2ebdb15c0c4ca8a9c82eaf3475d16"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 29786528,
        "transactionHash": "0x5923866a1f899ccbd2c16cf78fee78cd8f0b36309f86f3857a50ba24e996ae30",
        "address": "0xe42d26060444F42b9BB28818295a3F68526A0e39",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 320,
        "blockHash": "0x00ae9c3669bae3891e76617055827c1357e2ebdb15c0c4ca8a9c82eaf3475d16"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 29786528,
        "transactionHash": "0x5923866a1f899ccbd2c16cf78fee78cd8f0b36309f86f3857a50ba24e996ae30",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000048c3346fb87b6400000000000000000000000000000000000000000000000044a84b4d035ce9bfc0000000000000000000000000000000000000000000022307ce100b62678afef00000000000000000000000000000000000000000000000445f881893a46e5bc000000000000000000000000000000000000000000002230816d33fd2200662f",
        "logIndex": 321,
        "blockHash": "0x00ae9c3669bae3891e76617055827c1357e2ebdb15c0c4ca8a9c82eaf3475d16"
      }
    ],
    "blockNumber": 29786528,
    "cumulativeGasUsed": "14932584",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "ticketToken": "0x0000000000000000000000000000000000000000",
      "tokenIds": [],
      "shares": [],
      "lockedUntilTimestamp": 0
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "d382c887de211b00e8025674569bca65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC721ShareholderDistributor.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimBulk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"}],\"name\":\"SharesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"calculateClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"calculateClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"claimBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entitlements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"getTotalClaimableBulk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getTotalClaimedBulk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"getTotalClaimedBulk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC721ShareholderDistributor.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"lockUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"setShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol\":\"ERC721ShareholderDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/streams/ERC721/core/ERC721MultiTokenDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ERC721MultiTokenDistributorInterface {\\n    function claim(uint256 ticketTokenId) external;\\n\\n    function claim(uint256 ticketTokenId, address claimToken) external;\\n\\n    function claimBulk(uint256[] calldata ticketTokenIds) external;\\n\\n    function claimBulk(uint256[] calldata ticketTokenIds, address claimToken)\\n        external;\\n\\n    function streamTotalSupply() external view returns (uint256);\\n\\n    function streamTotalSupply(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalClaimedBulk(uint256[] calldata ticketTokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalClaimedBulk(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) external view returns (uint256);\\n\\n    function calculateClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        external\\n        view\\n        returns (uint256 claimableAmount);\\n}\\n\\nabstract contract ERC721MultiTokenDistributor is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuard,\\n    ERC721MultiTokenDistributorInterface\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    struct Entitlement {\\n        uint256 totalClaimed;\\n        uint256 lastClaimedAt;\\n    }\\n\\n    // Config\\n    address public ticketToken;\\n\\n    // Map of ticket token ID -> claim token address -> entitlement\\n    mapping(uint256 => mapping(address => Entitlement)) public entitlements;\\n\\n    // Map of claim token address -> Total amount claimed by all holders\\n    mapping(address => uint256) public streamTotalClaimed;\\n\\n    /* EVENTS */\\n\\n    event Claim(\\n        address claimer,\\n        uint256 ticketTokenId,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    event ClaimBulk(\\n        address claimer,\\n        uint256[] ticketTokenIds,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    function __ERC721MultiTokenDistributor_init(address _ticketToken)\\n        internal\\n        onlyInitializing\\n    {\\n        __Context_init();\\n        __ERC721MultiTokenDistributor_init_unchained(_ticketToken);\\n    }\\n\\n    function __ERC721MultiTokenDistributor_init_unchained(address _ticketToken)\\n        internal\\n        onlyInitializing\\n    {\\n        ticketToken = _ticketToken;\\n    }\\n\\n    /* PUBLIC */\\n\\n    receive() external payable {\\n        require(msg.value > 0);\\n    }\\n\\n    function claim(uint256 ticketTokenId) public {\\n        claim(ticketTokenId, address(0));\\n    }\\n\\n    function claim(uint256 ticketTokenId, address claimToken)\\n        public\\n        nonReentrant\\n    {\\n        /* CHECKS */\\n\\n        _beforeClaim(ticketTokenId, claimToken);\\n\\n        require(\\n            IERC721(ticketToken).ownerOf(ticketTokenId) == _msgSender(),\\n            \\\"DISTRIBUTOR/NOT_NFT_OWNER\\\"\\n        );\\n\\n        uint256 claimableAmount = calculateClaimableAmount(\\n            ticketTokenId,\\n            claimToken\\n        );\\n        require(claimableAmount > 0, \\\"DISTRIBUTOR/NOTHING_TO_CLAIM\\\");\\n\\n        /* EFFECTS */\\n\\n        entitlements[ticketTokenId][claimToken].totalClaimed += claimableAmount;\\n        entitlements[ticketTokenId][claimToken].lastClaimedAt = block.timestamp;\\n\\n        streamTotalClaimed[claimToken] += claimableAmount;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(_msgSender())).sendValue(claimableAmount);\\n        } else {\\n            IERC20(claimToken).transfer(_msgSender(), claimableAmount);\\n        }\\n\\n        /* LOGS */\\n\\n        emit Claim(_msgSender(), ticketTokenId, claimToken, claimableAmount);\\n    }\\n\\n    function claimBulk(uint256[] calldata ticketTokenIds) public nonReentrant {\\n        claimBulk(ticketTokenIds, address(0));\\n    }\\n\\n    function claimBulk(uint256[] calldata ticketTokenIds, address claimToken)\\n        public\\n        nonReentrant\\n    {\\n        uint256 totalClaimableAmount;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            _beforeClaim(ticketTokenIds[i], claimToken);\\n\\n            /* CHECKS */\\n            require(\\n                IERC721(ticketToken).ownerOf(ticketTokenIds[i]) == _msgSender(),\\n                \\\"DISTRIBUTOR/NOT_NFT_OWNER\\\"\\n            );\\n\\n            /* EFFECTS */\\n            uint256 claimableAmount = calculateClaimableAmount(\\n                ticketTokenIds[i],\\n                claimToken\\n            );\\n\\n            if (claimableAmount > 0) {\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .totalClaimed += claimableAmount;\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .lastClaimedAt = block.timestamp;\\n\\n                totalClaimableAmount += claimableAmount;\\n            }\\n        }\\n\\n        streamTotalClaimed[claimToken] += totalClaimableAmount;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(_msgSender())).sendValue(totalClaimableAmount);\\n        } else {\\n            IERC20(claimToken).transfer(_msgSender(), totalClaimableAmount);\\n        }\\n\\n        /* LOGS */\\n\\n        emit ClaimBulk(\\n            _msgSender(),\\n            ticketTokenIds,\\n            claimToken,\\n            totalClaimableAmount\\n        );\\n    }\\n\\n    /* READ ONLY */\\n\\n    function streamTotalSupply() public view returns (uint256) {\\n        return streamTotalSupply(address(0));\\n    }\\n\\n    function streamTotalSupply(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (claimToken == address(0)) {\\n            return streamTotalClaimed[claimToken] + address(this).balance;\\n        }\\n\\n        return\\n            streamTotalClaimed[claimToken] +\\n            IERC20(claimToken).balanceOf(address(this));\\n    }\\n\\n    function getTotalClaimedBulk(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getTotalClaimedBulk(ticketTokenIds, address(0));\\n    }\\n\\n    function getTotalClaimedBulk(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 totalClaimed = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            totalClaimed += entitlements[ticketTokenIds[i]][claimToken]\\n                .totalClaimed;\\n        }\\n\\n        return totalClaimed;\\n    }\\n\\n    function getTotalClaimableBulk(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 totalClaimable = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            totalClaimable += calculateClaimableAmount(\\n                ticketTokenIds[i],\\n                claimToken\\n            );\\n        }\\n\\n        return totalClaimable;\\n    }\\n\\n    function calculateClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        virtual\\n        returns (uint256 claimableAmount);\\n\\n    // INTERNAL\\n\\n    function _beforeClaim(uint256 ticketTokenId, address claimToken)\\n        internal\\n        virtual;\\n}\\n\",\"keccak256\":\"0x078bb667b53efd23db24a20ac9eab41f6909a829745853566d4af153864132bd\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../core/ERC721MultiTokenDistributor.sol\\\";\\n\\ncontract ERC721ShareholderDistributor is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ERC721MultiTokenDistributor\\n{\\n    event SharesUpdated(uint256 tokenId, uint256 prevShares, uint256 newShares);\\n\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Shareholder Distributor\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        address ticketToken;\\n        uint256[] tokenIds;\\n        uint256[] shares;\\n        uint256 lockedUntilTimestamp;\\n    }\\n\\n    // Sum of all the share units ever configured\\n    uint256 public totalShares;\\n\\n    // Map of ticket token ID -> share of the stream\\n    mapping(uint256 => uint256) public shares;\\n\\n    // Locks changing the shareholder table until this timestamp is reached\\n    uint256 lockedUntilTimestamp;\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config);\\n    }\\n\\n    function initialize(Config memory config) public initializer {\\n        __Context_init();\\n        __Ownable_init();\\n        __ERC721MultiTokenDistributor_init(config.ticketToken);\\n\\n        setShares(config.tokenIds, config.shares);\\n        lockedUntilTimestamp = config.lockedUntilTimestamp;\\n    }\\n\\n    // ADMIN\\n\\n    function lockUntil(uint256 newValue) public onlyOwner {\\n        require(newValue > lockedUntilTimestamp, \\\"DISTRIBUTOR/CANNOT_REWIND\\\");\\n        lockedUntilTimestamp = newValue;\\n    }\\n\\n    function setShares(uint256[] memory _tokenIds, uint256[] memory _shares)\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            _shares.length == _tokenIds.length,\\n            \\\"DISTRIBUTOR/ARGS_MISMATCH\\\"\\n        );\\n        require(\\n            lockedUntilTimestamp < block.timestamp,\\n            \\\"DISTRIBUTOR/CONFIG_LOCKED\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _shares.length; i++) {\\n            _updateShares(_tokenIds[i], _shares[i]);\\n        }\\n    }\\n\\n    // PUBLIC\\n\\n    function calculateClaimableAmount(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return calculateClaimableAmount(ticketTokenId, address(0));\\n    }\\n\\n    function calculateClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        override\\n        returns (uint256 claimableAmount)\\n    {\\n        claimableAmount =\\n            (streamTotalSupply(claimToken) * shares[ticketTokenId]) /\\n            totalShares -\\n            entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    // INTERNAL\\n\\n    function _updateShares(uint256 tokenId, uint256 newShares) private {\\n        uint256 prevShares = shares[tokenId];\\n\\n        shares[tokenId] = newShares;\\n        totalShares = totalShares + newShares - prevShares;\\n\\n        require(totalShares >= 0, \\\"DISTRIBUTOR/TOTAL_SHARES_NEGATIVE\\\");\\n\\n        emit SharesUpdated(tokenId, prevShares, newShares);\\n    }\\n\\n    function _beforeClaim(uint256 ticketTokenId, address claimToken)\\n        internal\\n        view\\n        override\\n    {\\n        claimToken;\\n        require(shares[ticketTokenId] > 0, \\\"DISTRIBUTOR/NO_SHARES\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd01f7fd8440f15a5e3b5fb0f06ffc13e8e6d26bef75254c710cd75596da596b2\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620022c6380380620022c6833981016040819052620000349162000604565b600160655562000044816200004b565b50620007e4565b600062000059600162000100565b9050801562000072576000805461ff0019166101001790555b6200007c620001ad565b62000086620001d9565b815162000093906200020d565b620000ad826020015183604001516200024f60201b60201c565b6060820151606b558015620000fc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60008054610100900460ff161562000169578160ff1660011480156200013957506200013730620003c260201b620010591760201c565b155b620001615760405162461bcd60e51b81526004016200015890620006cc565b60405180910390fd5b506000919050565b60005460ff808416911610620001935760405162461bcd60e51b81526004016200015890620006cc565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16620001d75760405162461bcd60e51b815260040162000158906200071a565b565b600054610100900460ff16620002035760405162461bcd60e51b815260040162000158906200071a565b620001d7620003d1565b600054610100900460ff16620002375760405162461bcd60e51b815260040162000158906200071a565b62000241620001ad565b6200024c8162000406565b50565b6033546001600160a01b03163314620002ab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000158565b8151815114620002fe5760405162461bcd60e51b815260206004820152601960248201527f4449535452494255544f522f415247535f4d49534d4154434800000000000000604482015260640162000158565b42606b5410620003515760405162461bcd60e51b815260206004820152601960248201527f4449535452494255544f522f434f4e4649475f4c4f434b454400000000000000604482015260640162000158565b60005b8151811015620003bd57620003a883828151811062000377576200037762000765565b602002602001015183838151811062000394576200039462000765565b60200260200101516200045260201b60201c565b80620003b48162000791565b91505062000354565b505050565b6001600160a01b03163b151590565b600054610100900460ff16620003fb5760405162461bcd60e51b815260040162000158906200071a565b620001d733620004cd565b600054610100900460ff16620004305760405162461bcd60e51b815260040162000158906200071a565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152606a60205260409020805490829055606954819062000478908490620007af565b620004849190620007ca565b60695560408051848152602081018390529081018390527ff81b1f9d8b5d36a5a67d13006a8b091a9b63e2a38b331d315d99c6daefd2ddcc9060600160405180910390a1505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156200055a576200055a6200051f565b60405290565b600082601f8301126200057257600080fd5b815160206001600160401b03808311156200059157620005916200051f565b8260051b604051601f19603f83011681018181108482111715620005b957620005b96200051f565b604052938452858101830193838101925087851115620005d857600080fd5b83870191505b84821015620005f957815183529183019190830190620005de565b979650505050505050565b6000602082840312156200061757600080fd5b81516001600160401b03808211156200062f57600080fd5b90830190608082860312156200064457600080fd5b6200064e62000535565b82516001600160a01b03811681146200066657600080fd5b81526020830151828111156200067b57600080fd5b620006898782860162000560565b602083015250604083015182811115620006a257600080fd5b620006b08782860162000560565b6040830152506060830151606082015280935050505092915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620007a857620007a86200077b565b5060010190565b60008219821115620007c557620007c56200077b565b500190565b600082821015620007df57620007df6200077b565b500390565b611ad280620007f46000396000f3fe60806040526004361061011f5760003560e01c806306fdde03146101385780630927829e146101975780630ceea305146101b75780632890d033146101d7578063371a4e71146101fa578063379607f51461021a5780633a98ef391461023a57806346be42fa14610250578063496ef217146102705780634fcddd151461029057806354fd4d50146102b057806357a858fc146102df57806357dc48c81461030c57806367048f43146103605780636efdd69114610380578063715018a6146103a0578063790c0c73146103b55780638da5cb5b146103d5578063b91e5bc5146103f7578063c088184914610417578063d5ed4d5a14610444578063dcfab28014610464578063ddd5e1b214610484578063f2fde38b146104a457600080fd5b36610133576000341161013157600080fd5b005b600080fd5b34801561014457600080fd5b506101816040518060400160405280601e81526020017f455243373231205368617265686f6c646572204469737472696275746f72000081525081565b60405161018e9190611430565b60405180910390f35b3480156101a357600080fd5b506101316101b236600461155d565b6104c4565b3480156101c357600080fd5b506101316101d23660046115c0565b6105f5565b3480156101e357600080fd5b506101ec610676565b60405190815260200161018e565b34801561020657600080fd5b506101ec610215366004611639565b610687565b34801561022657600080fd5b506101316102353660046115c0565b6106dd565b34801561024657600080fd5b506101ec60695481565b34801561025c57600080fd5b506101ec61026b3660046115c0565b6106eb565b34801561027c57600080fd5b5061013161028b36600461168f565b6106fe565b34801561029c57600080fd5b506101ec6102ab36600461168f565b61073b565b3480156102bc57600080fd5b5061018160405180604001604052806003815260200162302e3160e81b81525081565b3480156102eb57600080fd5b506101ec6102fa3660046115c0565b606a6020526000908152604090205481565b34801561031857600080fd5b5061034b6103273660046116d0565b60676020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161018e565b34801561036c57600080fd5b506101ec61037b3660046116d0565b610750565b34801561038c57600080fd5b5061013161039b366004611700565b6107ac565b3480156103ac57600080fd5b5061013161084f565b3480156103c157600080fd5b506101ec6103d03660046117b0565b61088a565b3480156103e157600080fd5b506103ea61095d565b60405161018e91906117cd565b34801561040357600080fd5b506101ec610412366004611639565b61096c565b34801561042357600080fd5b506101ec6104323660046117b0565b60686020526000908152604090205481565b34801561045057600080fd5b506066546103ea906001600160a01b031681565b34801561047057600080fd5b5061013161047f366004611639565b6109ea565b34801561049057600080fd5b5061013161049f3660046116d0565b610d12565b3480156104b057600080fd5b506101316104bf3660046117b0565b610fbc565b336104cd61095d565b6001600160a01b0316146104fc5760405162461bcd60e51b81526004016104f3906117e1565b60405180910390fd5b81518151146105495760405162461bcd60e51b815260206004820152601960248201527808892a6a8a49284aaa89ea45e82a48ea6be9a92a69a82a8869603b1b60448201526064016104f3565b42606b54106105965760405162461bcd60e51b8152602060048201526019602482015278111254d5149250955513d48bd0d3d3919251d7d313d0d2d151603a1b60448201526064016104f3565b60005b81518110156105f0576105de8382815181106105b7576105b7611816565b60200260200101518383815181106105d1576105d1611816565b6020026020010151611068565b806105e881611842565b915050610599565b505050565b336105fe61095d565b6001600160a01b0316146106245760405162461bcd60e51b81526004016104f3906117e1565b606b5481116106715760405162461bcd60e51b8152602060048201526019602482015278111254d5149250955513d48bd0d0539393d517d49155d25391603a1b60448201526064016104f3565b606b55565b6000610682600061088a565b905090565b600080805b848110156106d4576106b68686838181106106a9576106a9611816565b9050602002013585610750565b6106c0908361185d565b9150806106cc81611842565b91505061068c565b50949350505050565b6106e8816000610d12565b50565b60006106f8826000610750565b92915050565b600260655414156107215760405162461bcd60e51b81526004016104f390611875565b6002606555610732828260006109ea565b50506001606555565b60006107498383600061096c565b9392505050565b60008281526067602090815260408083206001600160a01b0385168452825280832054606954868552606a9093529083205490919061078e8561088a565b61079891906118ac565b6107a291906118cb565b61074991906118ed565b60006107b860016110df565b905080156107d0576000805461ff0019166101001790555b6107d861116e565b6107e0611195565b81516107eb906111c4565b6107fd826020015183604001516104c4565b6060820151606b55801561084b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b3361085861095d565b6001600160a01b03161461087e5760405162461bcd60e51b81526004016104f3906117e1565b61088860006111fc565b565b60006001600160a01b0382166108be576001600160a01b0382166000908152606860205260409020546106f890479061185d565b6040516370a0823160e01b81526001600160a01b038316906370a08231906108ea9030906004016117cd565b60206040518083038186803b15801561090257600080fd5b505afa158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a9190611904565b6001600160a01b0383166000908152606860205260409020546106f8919061185d565b6033546001600160a01b031690565b600080805b848110156106d4576067600087878481811061098f5761098f611816565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826109d6919061185d565b9150806109e281611842565b915050610971565b60026065541415610a0d5760405162461bcd60e51b81526004016104f390611875565b60026065556000805b83811015610bf057610a40858583818110610a3357610a33611816565b905060200201358461124e565b60665433906001600160a01b0316636352211e878785818110610a6557610a65611816565b905060200201356040518263ffffffff1660e01b8152600401610a8a91815260200190565b60206040518083038186803b158015610aa257600080fd5b505afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada919061191d565b6001600160a01b031614610b005760405162461bcd60e51b81526004016104f39061193a565b6000610b178686848181106106a9576106a9611816565b90508015610bdd578060676000888886818110610b3657610b36611816565b9050602002013581526020019081526020016000206000866001600160a01b03166001600160a01b031681526020019081526020016000206000016000828254610b80919061185d565b9091555042905060676000888886818110610b9d57610b9d611816565b6020908102929092013583525081810192909252604090810160009081206001600160a01b0389168252909252902060010155610bda818461185d565b92505b5080610be881611842565b915050610a16565b506001600160a01b03821660009081526068602052604081208054839290610c1990849061185d565b90915550506001600160a01b038216610c4657610c4181335b6001600160a01b0316906112a1565b610cc8565b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610c74903390859060040161196d565b602060405180830381600087803b158015610c8e57600080fd5b505af1158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190611986565b505b7fb134ef4136615d1aef30f456395437fb4a5b053c84520d85ec1d4079df80fb953385858585604051610cff9594939291906119a8565b60405180910390a1505060016065555050565b60026065541415610d355760405162461bcd60e51b81526004016104f390611875565b6002606555610d44828261124e565b336066546040516331a9108f60e11b8152600481018590526001600160a01b039283169290911690636352211e9060240160206040518083038186803b158015610d8d57600080fd5b505afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc5919061191d565b6001600160a01b031614610deb5760405162461bcd60e51b81526004016104f39061193a565b6000610df78383610750565b905060008111610e485760405162461bcd60e51b815260206004820152601c60248201527b4449535452494255544f522f4e4f5448494e475f544f5f434c41494d60201b60448201526064016104f3565b60008381526067602090815260408083206001600160a01b038616845290915281208054839290610e7a90849061185d565b909155505060008381526067602090815260408083206001600160a01b0386168452825280832042600190910155606890915281208054839290610ebf90849061185d565b90915550506001600160a01b038216610ee157610edc8133610c32565b610f63565b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610f0f903390859060040161196d565b602060405180830381600087803b158015610f2957600080fd5b505af1158015610f3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f619190611986565b505b60408051338152602081018590526001600160a01b038416818301526060810183905290517fad03f837a9207e368d73ec028e1f54428184da8cfea258cc116da2225f3ac5eb9181900360800190a15050600160655550565b33610fc561095d565b6001600160a01b031614610feb5760405162461bcd60e51b81526004016104f3906117e1565b6001600160a01b0381166110505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f3565b6106e8816111fc565b6001600160a01b03163b151590565b6000828152606a60205260409020805490829055606954819061108c90849061185d565b61109691906118ed565b60695560408051848152602081018390529081018390527ff81b1f9d8b5d36a5a67d13006a8b091a9b63e2a38b331d315d99c6daefd2ddcc9060600160405180910390a1505050565b60008054610100900460ff161561112d578160ff166001148015611109575061110730611059565b155b6111255760405162461bcd60e51b81526004016104f390611a03565b506000919050565b60005460ff8084169116106111545760405162461bcd60e51b81526004016104f390611a03565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166108885760405162461bcd60e51b81526004016104f390611a51565b600054610100900460ff166111bc5760405162461bcd60e51b81526004016104f390611a51565b6108886113b7565b600054610100900460ff166111eb5760405162461bcd60e51b81526004016104f390611a51565b6111f361116e565b6106e8816113e7565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000828152606a602052604090205461084b5760405162461bcd60e51b81526020600482015260156024820152744449535452494255544f522f4e4f5f53484152455360581b60448201526064016104f3565b804710156112f15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016104f3565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461133e576040519150601f19603f3d011682016040523d82523d6000602084013e611343565b606091505b50509050806105f05760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b60648201526084016104f3565b600054610100900460ff166113de5760405162461bcd60e51b81526004016104f390611a51565b610888336111fc565b600054610100900460ff1661140e5760405162461bcd60e51b81526004016104f390611a51565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b600060208083528351808285015260005b8181101561145d57858101830151858201604001528201611441565b8181111561146f576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156114bd576114bd611485565b60405290565b600082601f8301126114d457600080fd5b813560206001600160401b03808311156114f0576114f0611485565b8260051b604051601f19603f8301168101818110848211171561151557611515611485565b60405293845285810183019383810192508785111561153357600080fd5b83870191505b8482101561155257813583529183019190830190611539565b979650505050505050565b6000806040838503121561157057600080fd5b82356001600160401b038082111561158757600080fd5b611593868387016114c3565b935060208501359150808211156115a957600080fd5b506115b6858286016114c3565b9150509250929050565b6000602082840312156115d257600080fd5b5035919050565b60008083601f8401126115eb57600080fd5b5081356001600160401b0381111561160257600080fd5b6020830191508360208260051b850101111561161d57600080fd5b9250929050565b6001600160a01b03811681146106e857600080fd5b60008060006040848603121561164e57600080fd5b83356001600160401b0381111561166457600080fd5b611670868287016115d9565b909450925050602084013561168481611624565b809150509250925092565b600080602083850312156116a257600080fd5b82356001600160401b038111156116b857600080fd5b6116c4858286016115d9565b90969095509350505050565b600080604083850312156116e357600080fd5b8235915060208301356116f581611624565b809150509250929050565b60006020828403121561171257600080fd5b81356001600160401b038082111561172957600080fd5b908301906080828603121561173d57600080fd5b61174561149b565b823561175081611624565b815260208301358281111561176457600080fd5b611770878286016114c3565b60208301525060408301358281111561178857600080fd5b611794878286016114c3565b6040830152506060830135606082015280935050505092915050565b6000602082840312156117c257600080fd5b813561074981611624565b6001600160a01b0391909116815260200190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156118565761185661182c565b5060010190565b600082198211156118705761187061182c565b500190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008160001904831182151516156118c6576118c661182c565b500290565b6000826118e857634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156118ff576118ff61182c565b500390565b60006020828403121561191657600080fd5b5051919050565b60006020828403121561192f57600080fd5b815161074981611624565b6020808252601990820152782224a9aa2924a12aaa27a917a727aa2fa7232a2fa7aba722a960391b604082015260600190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561199857600080fd5b8151801515811461074957600080fd5b6001600160a01b03868116825260806020830181905282018590526000906001600160fb1b038611156119da57600080fd5b8560051b808860a0860137600090840160a0019081529416604083015250606001529392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122043735dfaa240315b3e13cbaf0efaab1cb3f250e62a467ad50346607b8471c4e964736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c806306fdde03146101385780630927829e146101975780630ceea305146101b75780632890d033146101d7578063371a4e71146101fa578063379607f51461021a5780633a98ef391461023a57806346be42fa14610250578063496ef217146102705780634fcddd151461029057806354fd4d50146102b057806357a858fc146102df57806357dc48c81461030c57806367048f43146103605780636efdd69114610380578063715018a6146103a0578063790c0c73146103b55780638da5cb5b146103d5578063b91e5bc5146103f7578063c088184914610417578063d5ed4d5a14610444578063dcfab28014610464578063ddd5e1b214610484578063f2fde38b146104a457600080fd5b36610133576000341161013157600080fd5b005b600080fd5b34801561014457600080fd5b506101816040518060400160405280601e81526020017f455243373231205368617265686f6c646572204469737472696275746f72000081525081565b60405161018e9190611430565b60405180910390f35b3480156101a357600080fd5b506101316101b236600461155d565b6104c4565b3480156101c357600080fd5b506101316101d23660046115c0565b6105f5565b3480156101e357600080fd5b506101ec610676565b60405190815260200161018e565b34801561020657600080fd5b506101ec610215366004611639565b610687565b34801561022657600080fd5b506101316102353660046115c0565b6106dd565b34801561024657600080fd5b506101ec60695481565b34801561025c57600080fd5b506101ec61026b3660046115c0565b6106eb565b34801561027c57600080fd5b5061013161028b36600461168f565b6106fe565b34801561029c57600080fd5b506101ec6102ab36600461168f565b61073b565b3480156102bc57600080fd5b5061018160405180604001604052806003815260200162302e3160e81b81525081565b3480156102eb57600080fd5b506101ec6102fa3660046115c0565b606a6020526000908152604090205481565b34801561031857600080fd5b5061034b6103273660046116d0565b60676020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161018e565b34801561036c57600080fd5b506101ec61037b3660046116d0565b610750565b34801561038c57600080fd5b5061013161039b366004611700565b6107ac565b3480156103ac57600080fd5b5061013161084f565b3480156103c157600080fd5b506101ec6103d03660046117b0565b61088a565b3480156103e157600080fd5b506103ea61095d565b60405161018e91906117cd565b34801561040357600080fd5b506101ec610412366004611639565b61096c565b34801561042357600080fd5b506101ec6104323660046117b0565b60686020526000908152604090205481565b34801561045057600080fd5b506066546103ea906001600160a01b031681565b34801561047057600080fd5b5061013161047f366004611639565b6109ea565b34801561049057600080fd5b5061013161049f3660046116d0565b610d12565b3480156104b057600080fd5b506101316104bf3660046117b0565b610fbc565b336104cd61095d565b6001600160a01b0316146104fc5760405162461bcd60e51b81526004016104f3906117e1565b60405180910390fd5b81518151146105495760405162461bcd60e51b815260206004820152601960248201527808892a6a8a49284aaa89ea45e82a48ea6be9a92a69a82a8869603b1b60448201526064016104f3565b42606b54106105965760405162461bcd60e51b8152602060048201526019602482015278111254d5149250955513d48bd0d3d3919251d7d313d0d2d151603a1b60448201526064016104f3565b60005b81518110156105f0576105de8382815181106105b7576105b7611816565b60200260200101518383815181106105d1576105d1611816565b6020026020010151611068565b806105e881611842565b915050610599565b505050565b336105fe61095d565b6001600160a01b0316146106245760405162461bcd60e51b81526004016104f3906117e1565b606b5481116106715760405162461bcd60e51b8152602060048201526019602482015278111254d5149250955513d48bd0d0539393d517d49155d25391603a1b60448201526064016104f3565b606b55565b6000610682600061088a565b905090565b600080805b848110156106d4576106b68686838181106106a9576106a9611816565b9050602002013585610750565b6106c0908361185d565b9150806106cc81611842565b91505061068c565b50949350505050565b6106e8816000610d12565b50565b60006106f8826000610750565b92915050565b600260655414156107215760405162461bcd60e51b81526004016104f390611875565b6002606555610732828260006109ea565b50506001606555565b60006107498383600061096c565b9392505050565b60008281526067602090815260408083206001600160a01b0385168452825280832054606954868552606a9093529083205490919061078e8561088a565b61079891906118ac565b6107a291906118cb565b61074991906118ed565b60006107b860016110df565b905080156107d0576000805461ff0019166101001790555b6107d861116e565b6107e0611195565b81516107eb906111c4565b6107fd826020015183604001516104c4565b6060820151606b55801561084b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b3361085861095d565b6001600160a01b03161461087e5760405162461bcd60e51b81526004016104f3906117e1565b61088860006111fc565b565b60006001600160a01b0382166108be576001600160a01b0382166000908152606860205260409020546106f890479061185d565b6040516370a0823160e01b81526001600160a01b038316906370a08231906108ea9030906004016117cd565b60206040518083038186803b15801561090257600080fd5b505afa158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a9190611904565b6001600160a01b0383166000908152606860205260409020546106f8919061185d565b6033546001600160a01b031690565b600080805b848110156106d4576067600087878481811061098f5761098f611816565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826109d6919061185d565b9150806109e281611842565b915050610971565b60026065541415610a0d5760405162461bcd60e51b81526004016104f390611875565b60026065556000805b83811015610bf057610a40858583818110610a3357610a33611816565b905060200201358461124e565b60665433906001600160a01b0316636352211e878785818110610a6557610a65611816565b905060200201356040518263ffffffff1660e01b8152600401610a8a91815260200190565b60206040518083038186803b158015610aa257600080fd5b505afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada919061191d565b6001600160a01b031614610b005760405162461bcd60e51b81526004016104f39061193a565b6000610b178686848181106106a9576106a9611816565b90508015610bdd578060676000888886818110610b3657610b36611816565b9050602002013581526020019081526020016000206000866001600160a01b03166001600160a01b031681526020019081526020016000206000016000828254610b80919061185d565b9091555042905060676000888886818110610b9d57610b9d611816565b6020908102929092013583525081810192909252604090810160009081206001600160a01b0389168252909252902060010155610bda818461185d565b92505b5080610be881611842565b915050610a16565b506001600160a01b03821660009081526068602052604081208054839290610c1990849061185d565b90915550506001600160a01b038216610c4657610c4181335b6001600160a01b0316906112a1565b610cc8565b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610c74903390859060040161196d565b602060405180830381600087803b158015610c8e57600080fd5b505af1158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190611986565b505b7fb134ef4136615d1aef30f456395437fb4a5b053c84520d85ec1d4079df80fb953385858585604051610cff9594939291906119a8565b60405180910390a1505060016065555050565b60026065541415610d355760405162461bcd60e51b81526004016104f390611875565b6002606555610d44828261124e565b336066546040516331a9108f60e11b8152600481018590526001600160a01b039283169290911690636352211e9060240160206040518083038186803b158015610d8d57600080fd5b505afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc5919061191d565b6001600160a01b031614610deb5760405162461bcd60e51b81526004016104f39061193a565b6000610df78383610750565b905060008111610e485760405162461bcd60e51b815260206004820152601c60248201527b4449535452494255544f522f4e4f5448494e475f544f5f434c41494d60201b60448201526064016104f3565b60008381526067602090815260408083206001600160a01b038616845290915281208054839290610e7a90849061185d565b909155505060008381526067602090815260408083206001600160a01b0386168452825280832042600190910155606890915281208054839290610ebf90849061185d565b90915550506001600160a01b038216610ee157610edc8133610c32565b610f63565b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610f0f903390859060040161196d565b602060405180830381600087803b158015610f2957600080fd5b505af1158015610f3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f619190611986565b505b60408051338152602081018590526001600160a01b038416818301526060810183905290517fad03f837a9207e368d73ec028e1f54428184da8cfea258cc116da2225f3ac5eb9181900360800190a15050600160655550565b33610fc561095d565b6001600160a01b031614610feb5760405162461bcd60e51b81526004016104f3906117e1565b6001600160a01b0381166110505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f3565b6106e8816111fc565b6001600160a01b03163b151590565b6000828152606a60205260409020805490829055606954819061108c90849061185d565b61109691906118ed565b60695560408051848152602081018390529081018390527ff81b1f9d8b5d36a5a67d13006a8b091a9b63e2a38b331d315d99c6daefd2ddcc9060600160405180910390a1505050565b60008054610100900460ff161561112d578160ff166001148015611109575061110730611059565b155b6111255760405162461bcd60e51b81526004016104f390611a03565b506000919050565b60005460ff8084169116106111545760405162461bcd60e51b81526004016104f390611a03565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166108885760405162461bcd60e51b81526004016104f390611a51565b600054610100900460ff166111bc5760405162461bcd60e51b81526004016104f390611a51565b6108886113b7565b600054610100900460ff166111eb5760405162461bcd60e51b81526004016104f390611a51565b6111f361116e565b6106e8816113e7565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000828152606a602052604090205461084b5760405162461bcd60e51b81526020600482015260156024820152744449535452494255544f522f4e4f5f53484152455360581b60448201526064016104f3565b804710156112f15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016104f3565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461133e576040519150601f19603f3d011682016040523d82523d6000602084013e611343565b606091505b50509050806105f05760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b60648201526084016104f3565b600054610100900460ff166113de5760405162461bcd60e51b81526004016104f390611a51565b610888336111fc565b600054610100900460ff1661140e5760405162461bcd60e51b81526004016104f390611a51565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b600060208083528351808285015260005b8181101561145d57858101830151858201604001528201611441565b8181111561146f576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156114bd576114bd611485565b60405290565b600082601f8301126114d457600080fd5b813560206001600160401b03808311156114f0576114f0611485565b8260051b604051601f19603f8301168101818110848211171561151557611515611485565b60405293845285810183019383810192508785111561153357600080fd5b83870191505b8482101561155257813583529183019190830190611539565b979650505050505050565b6000806040838503121561157057600080fd5b82356001600160401b038082111561158757600080fd5b611593868387016114c3565b935060208501359150808211156115a957600080fd5b506115b6858286016114c3565b9150509250929050565b6000602082840312156115d257600080fd5b5035919050565b60008083601f8401126115eb57600080fd5b5081356001600160401b0381111561160257600080fd5b6020830191508360208260051b850101111561161d57600080fd5b9250929050565b6001600160a01b03811681146106e857600080fd5b60008060006040848603121561164e57600080fd5b83356001600160401b0381111561166457600080fd5b611670868287016115d9565b909450925050602084013561168481611624565b809150509250925092565b600080602083850312156116a257600080fd5b82356001600160401b038111156116b857600080fd5b6116c4858286016115d9565b90969095509350505050565b600080604083850312156116e357600080fd5b8235915060208301356116f581611624565b809150509250929050565b60006020828403121561171257600080fd5b81356001600160401b038082111561172957600080fd5b908301906080828603121561173d57600080fd5b61174561149b565b823561175081611624565b815260208301358281111561176457600080fd5b611770878286016114c3565b60208301525060408301358281111561178857600080fd5b611794878286016114c3565b6040830152506060830135606082015280935050505092915050565b6000602082840312156117c257600080fd5b813561074981611624565b6001600160a01b0391909116815260200190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156118565761185661182c565b5060010190565b600082198211156118705761187061182c565b500190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008160001904831182151516156118c6576118c661182c565b500290565b6000826118e857634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156118ff576118ff61182c565b500390565b60006020828403121561191657600080fd5b5051919050565b60006020828403121561192f57600080fd5b815161074981611624565b6020808252601990820152782224a9aa2924a12aaa27a917a727aa2fa7232a2fa7aba722a960391b604082015260600190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561199857600080fd5b8151801515811461074957600080fd5b6001600160a01b03868116825260806020830181905282018590526000906001600160fb1b038611156119da57600080fd5b8560051b808860a0860137600090840160a0019081529416604083015250606001529392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122043735dfaa240315b3e13cbaf0efaab1cb3f250e62a467ad50346607b8471c4e964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 512,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 515,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 931,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 392,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 504,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1533,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 9644,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "ticketToken",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 9651,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "entitlements",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)9642_storage))"
      },
      {
        "astId": 9655,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "streamTotalClaimed",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10983,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "totalShares",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 10987,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "shares",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10989,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
        "label": "lockedUntilTimestamp",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Entitlement)9642_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721MultiTokenDistributor.Entitlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Entitlement)9642_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)9642_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ERC721MultiTokenDistributor.Entitlement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Entitlement)9642_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Entitlement)9642_storage": {
        "encoding": "inplace",
        "label": "struct ERC721MultiTokenDistributor.Entitlement",
        "members": [
          {
            "astId": 9639,
            "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9641,
            "contract": "contracts/streams/ERC721/presets/ERC721ShareholderDistributor.sol:ERC721ShareholderDistributor",
            "label": "lastClaimedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}