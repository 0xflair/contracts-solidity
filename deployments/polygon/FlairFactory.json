{
  "address": "0xb3a572b57b116b2c0520b798F7E91486dc378f90",
  "abi": [
    {
      "inputs": [],
      "name": "Create2Error",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "ProxyCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "cloneDeterministicSimple",
      "outputs": [
        {
          "internalType": "address",
          "name": "deployedProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "predictDeterministicSimple",
      "outputs": [
        {
          "internalType": "address",
          "name": "deployedProxy",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xea567f85d9e74604b17bf360b3ecb02eaa4b0b822e1b5f1a2041d1345988b175",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xb3a572b57b116b2c0520b798F7E91486dc378f90",
    "transactionIndex": 45,
    "gasUsed": "301821",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000020000000008000000000000000000000000000000000000000000000000000000000800000000000400400000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000001000000000000000000000000000000000000000100000",
    "blockHash": "0xa21dd8240a6df1c0e0fffcdf667f73324487cbb23e8fa1eb12a79a6ab7ef64af",
    "transactionHash": "0xea567f85d9e74604b17bf360b3ecb02eaa4b0b822e1b5f1a2041d1345988b175",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 30188737,
        "transactionHash": "0xea567f85d9e74604b17bf360b3ecb02eaa4b0b822e1b5f1a2041d1345988b175",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003040b33d4816010000000000000000000000000000000000000000000000021341b3d4d9129a280000000000000000000000000000000000000000000130a7e332ca84b7fbe319000000000000000000000000000000000000000000000002131173219bca84270000000000000000000000000000000000000000000130a7e3630b37f543f91a",
        "logIndex": 227,
        "blockHash": "0xa21dd8240a6df1c0e0fffcdf667f73324487cbb23e8fa1eb12a79a6ab7ef64af"
      }
    ],
    "blockNumber": 30188737,
    "cumulativeGasUsed": "7994431",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f36bbd2d58b66b037af1b3d3cb8d4e33",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Create2Error\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cloneDeterministicSimple\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployedProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictDeterministicSimple\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployedProxy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"Create2Error()\":[{\"notice\":\"create2 opcode failed\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factory/FlairFactory.sol\":\"FlairFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/factory/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\n/// @notice create opcode failed\\nerror CreateError();\\n/// @notice create2 opcode failed\\nerror Create2Error();\\n\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`\\n     * except when someone calls `receive()` and then it emits an event matching\\n     * `SplitWallet.ReceiveETH(indexed address, amount)`\\n     * Inspired by OZ & 0age's minimal clone implementations based on eip 1167 found at\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.3.0/contracts/proxy/Clones.sol\\n     * and https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     *\\n     * init: 0x3d605d80600a3d3981f3\\n     * 3d   returndatasize  0\\n     * 605d push1 0x5d      0x5d 0\\n     * 80   dup1            0x5d 0x5d 0\\n     * 600a push1 0x0a      0x0a 0x5d 0x5d 0\\n     * 3d   returndatasize  0 0x0a 0x5d 0x5d 0\\n     * 39   codecopy        0x5d 0                      destOffset offset length     memory[destOffset:destOffset+length] = address(this).code[offset:offset+length]       copy executing contracts bytecode\\n     * 81   dup2            0 0x5d 0\\n     * f3   return          0                           offset length                return memory[offset:offset+length]                                                   returns from this contract call\\n     *\\n     * contract: 0x36603057343d52307f830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b160203da23d3df35b3d3d3d3d363d3d37363d73bebebebebebebebebebebebebebebebebebebebe5af43d3d93803e605b57fd5bf3\\n     *     0x000     36       calldatasize      cds\\n     *     0x001     6030     push1 0x30        0x30 cds\\n     * ,=< 0x003     57       jumpi\\n     * |   0x004     34       callvalue         cv\\n     * |   0x005     3d       returndatasize    0 cv\\n     * |   0x006     52       mstore\\n     * |   0x007     30       address           addr\\n     * |   0x008     7f830d.. push32 0x830d..   id addr\\n     * |   0x029     6020     push1 0x20        0x20 id addr\\n     * |   0x02b     3d       returndatasize    0 0x20 id addr\\n     * |   0x02c     a2       log2\\n     * |   0x02d     3d       returndatasize    0\\n     * |   0x02e     3d       returndatasize    0 0\\n     * |   0x02f     f3       return\\n     * `-> 0x030     5b       jumpdest\\n     *     0x031     3d       returndatasize    0\\n     *     0x032     3d       returndatasize    0 0\\n     *     0x033     3d       returndatasize    0 0 0\\n     *     0x034     3d       returndatasize    0 0 0 0\\n     *     0x035     36       calldatasize      cds 0 0 0 0\\n     *     0x036     3d       returndatasize    0 cds 0 0 0 0\\n     *     0x037     3d       returndatasize    0 0 cds 0 0 0 0\\n     *     0x038     37       calldatacopy      0 0 0 0\\n     *     0x039     36       calldatasize      cds 0 0 0 0\\n     *     0x03a     3d       returndatasize    0 cds 0 0 0 0\\n     *     0x03b     73bebe.. push20 0xbebe..   0xbebe 0 cds 0 0 0 0\\n     *     0x050     5a       gas               gas 0xbebe 0 cds 0 0 0 0\\n     *     0x051     f4       delegatecall      suc 0 0\\n     *     0x052     3d       returndatasize    rds suc 0 0\\n     *     0x053     3d       returndatasize    rds rds suc 0 0\\n     *     0x054     93       swap4             0 rds suc 0 rds\\n     *     0x055     80       dup1              0 0 rds suc 0 rds\\n     *     0x056     3e       returndatacopy    suc 0 rds\\n     *     0x057     605b     push1 0x5b        0x5b suc 0 rds\\n     * ,=< 0x059     57       jumpi             0 rds\\n     * |   0x05a     fd       revert\\n     * `-> 0x05b     5b       jumpdest          0 rds\\n     *     0x05c     f3       return\\n     *\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d605d80600a3d3981f336603057343d52307f00000000000000000000000000\\n            )\\n            mstore(\\n                add(ptr, 0x13),\\n                0x830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1\\n            )\\n            mstore(\\n                add(ptr, 0x33),\\n                0x60203da23d3df35b3d3d3d3d363d3d37363d7300000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x46), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x5a),\\n                0x5af43d3d93803e605b57fd5bf300000000000000000000000000000000000000\\n            )\\n            instance := create(0, ptr, 0x67)\\n        }\\n        if (instance == address(0)) revert CreateError();\\n    }\\n\\n    function cloneDeterministic(address implementation, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d605d80600a3d3981f336603057343d52307f00000000000000000000000000\\n            )\\n            mstore(\\n                add(ptr, 0x13),\\n                0x830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1\\n            )\\n            mstore(\\n                add(ptr, 0x33),\\n                0x60203da23d3df35b3d3d3d3d363d3d37363d7300000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x46), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x5a),\\n                0x5af43d3d93803e605b57fd5bf300000000000000000000000000000000000000\\n            )\\n            instance := create2(0, ptr, 0x67, salt)\\n        }\\n        if (instance == address(0)) revert Create2Error();\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(\\n                ptr,\\n                0x3d605d80600a3d3981f336603057343d52307f00000000000000000000000000\\n            )\\n            mstore(\\n                add(ptr, 0x13),\\n                0x830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1\\n            )\\n            mstore(\\n                add(ptr, 0x33),\\n                0x60203da23d3df35b3d3d3d3d363d3d37363d7300000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x46), shl(0x60, implementation))\\n            mstore(\\n                add(ptr, 0x5a),\\n                0x5af43d3d93803e605b57fd5bf3ff000000000000000000000000000000000000\\n            )\\n            mstore(add(ptr, 0x68), shl(0x60, deployer))\\n            mstore(add(ptr, 0x7c), salt)\\n            mstore(add(ptr, 0x9c), keccak256(ptr, 0x67))\\n            predicted := keccak256(add(ptr, 0x67), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x84e2cd2ed3d55ffa994727331907fe5fe5f87af13a631c506fd8c08d52ed18c1\",\"license\":\"AGPL-3.0\"},\"contracts/factory/FlairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./Clones.sol\\\";\\n\\ncontract FlairFactory {\\n    event ProxyCreated(address indexed deployer, address indexed proxyAddress);\\n\\n    function cloneDeterministicSimple(\\n        address implementation,\\n        bytes32 salt,\\n        bytes calldata data\\n    ) external returns (address deployedProxy) {\\n        bytes32 _salt = keccak256(abi.encodePacked(msg.sender, salt));\\n        deployedProxy = Clones.cloneDeterministic(implementation, _salt);\\n\\n        if (data.length > 0) {\\n            (bool success, bytes memory returndata) = deployedProxy.call(data);\\n\\n            if (!success) {\\n                // Look for revert reason and bubble it up if present\\n                if (returndata.length > 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n                    assembly {\\n                        let returndata_size := mload(returndata)\\n                        revert(add(32, returndata), returndata_size)\\n                    }\\n                } else {\\n                    revert(\\\"FAILED_TO_CLONE\\\");\\n                }\\n            }\\n        }\\n\\n        emit ProxyCreated(msg.sender, deployedProxy);\\n    }\\n\\n    function predictDeterministicSimple(address implementation, bytes32 salt)\\n        external\\n        view\\n        returns (address deployedProxy)\\n    {\\n        bytes32 _salt = keccak256(abi.encodePacked(msg.sender, salt));\\n        deployedProxy = Clones.predictDeterministicAddress(\\n            implementation,\\n            _salt\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2da9a852433106f7bf798699610a8b8f98733e98bf72a8f22cd6490fb2f311f7\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061047f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806310db94b91461003b57806347791ece1461006a575b600080fd5b61004e61004936600461034c565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610376565b6100bd565b60008033836040516020016100939291906103fc565b6040516020818303038152906040528051906020012090506100b584826101f6565b949350505050565b60008033856040516020016100d39291906103fc565b6040516020818303038152906040528051906020012090506100f58682610292565b915082156101b757600080836001600160a01b0316868660405161011a929190610419565b6000604051808303816000865af19150503d8060008114610157576040519150601f19603f3d011682016040523d82523d6000602084013e61015c565b606091505b5091509150816101b4578051156101765780518082602001fd5b60405162461bcd60e51b815260206004820152600f60248201526e4641494c45445f544f5f434c4f4e4560881b604482015260640160405180910390fd5b50505b6040516001600160a01b0383169033907f9678a1e87ca9f1a37dc659a97b39d812d98cd236947e1b53b3d0d6fd346acb6e90600090a350949350505050565b6000610289838330604051723d605d80600a3d3981f336603057343d52307f60681b815260008051602061042a83398151915260138201527260203da23d3df35b3d3d3d3d363d3d37363d7360681b6033820152606093841b60468201526d5af43d3d93803e605b57fd5bf3ff60901b605a820152921b6068830152607c8201526067808220609c830152605591012090565b90505b92915050565b6000604051723d605d80600a3d3981f336603057343d52307f60681b815260008051602061042a83398151915260138201527260203da23d3df35b3d3d3d3d363d3d37363d7360681b60338201528360601b60468201526c5af43d3d93803e605b57fd5bf360981b605a820152826067826000f59150506001600160a01b03811661028c5760405163380bbe1360e01b815260040160405180910390fd5b80356001600160a01b038116811461034757600080fd5b919050565b6000806040838503121561035f57600080fd5b61036883610330565b946020939093013593505050565b6000806000806060858703121561038c57600080fd5b61039585610330565b93506020850135925060408501356001600160401b03808211156103b857600080fd5b818701915087601f8301126103cc57600080fd5b8135818111156103db57600080fd5b8860208285010111156103ed57600080fd5b95989497505060200194505050565b60609290921b6001600160601b0319168252601482015260340190565b818382376000910190815291905056fe830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1a2646970667358221220dd837a6d72d265e1186fd431cf456356b3ced3a1fffc26ff141cfbbbc43bbe8f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806310db94b91461003b57806347791ece1461006a575b600080fd5b61004e61004936600461034c565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610376565b6100bd565b60008033836040516020016100939291906103fc565b6040516020818303038152906040528051906020012090506100b584826101f6565b949350505050565b60008033856040516020016100d39291906103fc565b6040516020818303038152906040528051906020012090506100f58682610292565b915082156101b757600080836001600160a01b0316868660405161011a929190610419565b6000604051808303816000865af19150503d8060008114610157576040519150601f19603f3d011682016040523d82523d6000602084013e61015c565b606091505b5091509150816101b4578051156101765780518082602001fd5b60405162461bcd60e51b815260206004820152600f60248201526e4641494c45445f544f5f434c4f4e4560881b604482015260640160405180910390fd5b50505b6040516001600160a01b0383169033907f9678a1e87ca9f1a37dc659a97b39d812d98cd236947e1b53b3d0d6fd346acb6e90600090a350949350505050565b6000610289838330604051723d605d80600a3d3981f336603057343d52307f60681b815260008051602061042a83398151915260138201527260203da23d3df35b3d3d3d3d363d3d37363d7360681b6033820152606093841b60468201526d5af43d3d93803e605b57fd5bf3ff60901b605a820152921b6068830152607c8201526067808220609c830152605591012090565b90505b92915050565b6000604051723d605d80600a3d3981f336603057343d52307f60681b815260008051602061042a83398151915260138201527260203da23d3df35b3d3d3d3d363d3d37363d7360681b60338201528360601b60468201526c5af43d3d93803e605b57fd5bf360981b605a820152826067826000f59150506001600160a01b03811661028c5760405163380bbe1360e01b815260040160405180910390fd5b80356001600160a01b038116811461034757600080fd5b919050565b6000806040838503121561035f57600080fd5b61036883610330565b946020939093013593505050565b6000806000806060858703121561038c57600080fd5b61039585610330565b93506020850135925060408501356001600160401b03808211156103b857600080fd5b818701915087601f8301126103cc57600080fd5b8135818111156103db57600080fd5b8860208285010111156103ed57600080fd5b95989497505060200194505050565b60609290921b6001600160601b0319168252601482015260340190565b818382376000910190815291905056fe830d2d700a97af574b186c80d40429385d24241565b08a7c559ba283a964d9b1a2646970667358221220dd837a6d72d265e1186fd431cf456356b3ced3a1fffc26ff141cfbbbc43bbe8f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Create2Error()": [
        {
          "notice": "create2 opcode failed"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}