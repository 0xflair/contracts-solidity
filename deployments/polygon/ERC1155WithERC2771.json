{
  "address": "0x76e43De9addA1cDCe8d946e93531C46E9D1147d9",
  "abi": [
    {
      "inputs": [],
      "name": "ErrSenderIsNotSelf",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatchByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "lockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "mintByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "unlockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlockByFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x91e0ad66e9dcbe1f245bf8dbb166b3ef5ca8c41cb111e0977110bca98fe4ef4b",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x76e43De9addA1cDCe8d946e93531C46E9D1147d9",
    "transactionIndex": 3,
    "gasUsed": "2813527",
    "logsBloom": "0x
    "blockHash": "0x7211a17a88c8cdc6ab8d372be410ff002bb02ed448fa8fff730c3bdb31e2441e",
    "transactionHash": "0x91e0ad66e9dcbe1f245bf8dbb166b3ef5ca8c41cb111e0977110bca98fe4ef4b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 36184313,
        "transactionHash": "0x91e0ad66e9dcbe1f245bf8dbb166b3ef5ca8c41cb111e0977110bca98fe4ef4b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x00000000000000000000000046a3a41bd932244dd08186e4c19f1a7e48cbcdf4"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000398173e7340a77d000000000000000000000000000000000000000000000000837de12727657279000000000000000000000000000000000000000000003edf6c52a6623abe5ed80000000000000000000000000000000000000000000000007fe5c9e8b424cafc000000000000000000000000000000000000000000003edf6feabda0adff0655",
        "logIndex": 29,
        "blockHash": "0x7211a17a88c8cdc6ab8d372be410ff002bb02ed448fa8fff730c3bdb31e2441e"
      }
    ],
    "blockNumber": 36184313,
    "cumulativeGasUsed": "3422014",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "6d7305346279fbc69886e86585c3525d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrSenderIsNotSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatchByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"lockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"mintByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"unlockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockByFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:provides-interfaces\":\"IERC1155 IERC1155SupplyExtension IERC1155MintableExtension IERC1155BurnableExtension IERC1155LockableExtension IRoyaltyEnforcement\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"lockByFacet(address,uint256,uint256)\":{\"details\":\"Locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets).\"},\"maxSupply(uint256)\":{\"details\":\"Maximum amount of tokens possible to exist for a given id.\"},\"mintByFacet(address,uint256,uint256,bytes)\":{\"details\":\"Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must be diamond itself (other facets).\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"unlockByFacet(address,uint256,uint256)\":{\"details\":\"Un-locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets).\"}},\"title\":\"ERC1155 - with meta-transactions\",\"version\":1},\"userdoc\":{\"errors\":{\"ErrSenderIsNotSelf()\":[{\"notice\":\"The caller must be the current contract itself.\"}]},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"}},\"notice\":\"Standard EIP-1155 with ability to accept meta transactions (mainly transfer or burn methods).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC1155/ERC1155WithERC2771.sol\":\"ERC1155WithERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"operator-filter-registry/src/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba\",\"license\":\"MIT\"},\"src/common/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * The caller must be the current contract itself.\\n */\\nerror ErrSenderIsNotSelf();\\n\",\"keccak256\":\"0xd1592cdff5defdc5c2eabccce2fcd663d930338b99dad69567c7054c81711bc9\",\"license\":\"MIT\"},\"src/finance/royalty/IRoyaltyEnforcementInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Manages where on-chain royalties must be enforced by blocklisting marketplaces with optional royalty.\\n * @dev Derived from 'operator-filter-registry' NPM repository by OpenSea.\\n */\\ninterface IRoyaltyEnforcementInternal {\\n    error OperatorNotAllowed(address operator);\\n}\\n\",\"keccak256\":\"0x836183f44a4c4da24ef14bd40ed25d9da2dd7d2bbe167942c0de5bba53c6aa64\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyEnforcementInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"operator-filter-registry/src/IOperatorFilterRegistry.sol\\\";\\n\\nimport \\\"./IRoyaltyEnforcementInternal.sol\\\";\\nimport \\\"./RoyaltyEnforcementStorage.sol\\\";\\n\\n/**\\n * @dev Manages and shows if royalties are enforced by blocklisting marketplaces with optional royalty.\\n * @dev Derived from 'operator-filter-registry' NPM repository by OpenSea.\\n */\\nabstract contract RoyaltyEnforcementInternal is IRoyaltyEnforcementInternal {\\n    // address private constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    IOperatorFilterRegistry private constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    function _hasRoyaltyEnforcement() internal view virtual returns (bool) {\\n        return RoyaltyEnforcementStorage.layout().enforceRoyalties;\\n    }\\n\\n    function _toggleRoyaltyEnforcement(bool enforce) internal virtual {\\n        RoyaltyEnforcementStorage.layout().enforceRoyalties = enforce;\\n    }\\n\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal virtual {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        OPERATOR_FILTER_REGISTRY.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (RoyaltyEnforcementStorage.layout().enforceRoyalties) {\\n            if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n                // Allow spending tokens from addresses with balance\\n                // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n                // from an EOA.\\n                if (from == msg.sender) {\\n                    _;\\n                    return;\\n                }\\n                if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), msg.sender)) {\\n                    revert OperatorNotAllowed(msg.sender);\\n                }\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (RoyaltyEnforcementStorage.layout().enforceRoyalties) {\\n            if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n                if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                    revert OperatorNotAllowed(operator);\\n                }\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x78a5e9470725042f2a9d20860a09b27d5cd99dc4cd22920e3ee2643434159761\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyEnforcementStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary RoyaltyEnforcementStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.RoyaltyEnforcement\\\");\\n\\n    struct Layout {\\n        bool enforceRoyalties;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae08fcf816a425c667b25c3a0f37b3a39c7584a857bdbce3912a12ae86e7bb99\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./ERC2771ContextStorage.sol\\\";\\n\\nabstract contract ERC2771ContextInternal is Context {\\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78f51039de18500ce56634bfa72f8d8a0510c97dd94f175e1cbd2385d4ae37\",\"license\":\"MIT\"},\"src/metatx/ERC2771ContextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC2771ContextStorage {\\n    struct Layout {\\n        address trustedForwarder;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC2771Context\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb2e9e2c6145ecf4aae84a602ff668269869da26b25924e9b486b5e94936740e\",\"license\":\"MIT\"},\"src/token/ERC1155/ERC1155WithERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./base/ERC1155BaseERC2771.sol\\\";\\nimport \\\"./extensions/supply/ERC1155SupplyExtension.sol\\\";\\nimport \\\"./extensions/lockable/ERC1155LockableExtension.sol\\\";\\nimport \\\"./extensions/mintable/ERC1155MintableExtension.sol\\\";\\nimport \\\"./extensions/burnable/ERC1155BurnableExtension.sol\\\";\\nimport \\\"./extensions/royalty/ERC1155RoyaltyEnforcementExtension.sol\\\";\\n\\n/**\\n * @title ERC1155 - with meta-transactions\\n * @notice Standard EIP-1155 with ability to accept meta transactions (mainly transfer or burn methods).\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:provides-interfaces IERC1155 IERC1155SupplyExtension IERC1155MintableExtension IERC1155BurnableExtension IERC1155LockableExtension IRoyaltyEnforcement\\n */\\ncontract ERC1155WithERC2771 is\\n    ERC1155BaseERC2771,\\n    ERC1155SupplyExtension,\\n    ERC1155MintableExtension,\\n    ERC1155BurnableExtension,\\n    ERC1155LockableExtension,\\n    ERC1155RoyaltyEnforcementExtension\\n{\\n    function _msgSender() internal view virtual override(Context, ERC1155BaseERC2771) returns (address) {\\n        return ERC1155BaseERC2771._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC1155BaseERC2771) returns (bytes calldata) {\\n        return ERC1155BaseERC2771._msgData();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155SupplyInternal, ERC1155LockableInternal) {\\n        ERC1155BaseInternal._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override(ERC1155Base, ERC1155RoyaltyEnforcementExtension)\\n    {\\n        ERC1155RoyaltyEnforcementExtension.setApprovalForAll(operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual override(ERC1155Base, ERC1155RoyaltyEnforcementExtension) {\\n        ERC1155RoyaltyEnforcementExtension.safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual override(ERC1155Base, ERC1155RoyaltyEnforcementExtension) {\\n        ERC1155RoyaltyEnforcementExtension.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xe3fb58863642398ab4a5872f956b541c59196a1a9c33a76410dfca850c4cb4f1\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IERC1155Events.sol\\\";\\n\\n/**\\n * @title ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Events {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd7823c96d06961b243406851d6a264dbb96c34eef1f52d43607c03fa536716e1\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Events {\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0x53842532ee754121be3d0de5a774fa2c70cc3df5aecd9d7075e4069a81054e01\",\"license\":\"MIT\"},\"src/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf13e407bd8e987a634f9161afe4f6f8d6ae3741ce408b7166f0a8c10b30e0f49\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../IERC1155.sol\\\";\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"./ERC1155BaseInternal.sol\\\";\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\ncontract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                require(accounts[i] != address(0), \\\"ERC1155: batch balance query for the zero address\\\");\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status) public virtual {\\n        super._setApprovalForAll(operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        require(from == sender || isApprovedForAll(from, sender), \\\"ERC1155: caller is not owner nor approved\\\");\\n        _safeTransfer(sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        require(from == sender || isApprovedForAll(from, sender), \\\"ERC1155: caller is not owner nor approved\\\");\\n        _safeTransferBatch(sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x63d08a971366b239f3acc947d2f74f0b7484f701985daea4364f4f646a1e7122\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../metatx/ERC2771ContextInternal.sol\\\";\\n\\nimport \\\"./ERC1155Base.sol\\\";\\n\\n/**\\n * @title Base ERC1155 contract with meta-transactions support (via ERC2771).\\n */\\nabstract contract ERC1155BaseERC2771 is ERC1155Base, ERC2771ContextInternal {\\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\\n        return ERC2771ContextInternal._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\\n        return ERC2771ContextInternal._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x1497dd2af15760739ccc8dff84cab6a7c79311e3d5e0a29d9df464fe4ad67917\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"../IERC1155Events.sol\\\";\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"./ERC1155BaseStorage.sol\\\";\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is Context, IERC1155Events {\\n    using Address for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account, uint256 id) internal view virtual returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        address operator = _msgSender();\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        ERC1155BaseStorage.layout().balances[id][account] += amount;\\n\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(_msgSender(), address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, address(0), account, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            balances[ids[i]][account] += amounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(sender, address(0), account, ids, amounts);\\n    }\\n\\n    function _mintBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(accounts.length == amounts.length, \\\"ERC1155: accounts and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            _beforeTokenTransfer(\\n                operator,\\n                address(0),\\n                accounts[i],\\n                _asSingletonArray(ids[i]),\\n                _asSingletonArray(amounts[i]),\\n                datas[i]\\n            );\\n\\n            balances[ids[i]][accounts[i]] += amounts[i];\\n\\n            emit TransferSingle(operator, address(0), accounts[i], ids[i], amounts[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(_msgSender(), address(0), account, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage.layout().balances[id];\\n\\n        unchecked {\\n            require(balances[account] >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address sender = _msgSender();\\n\\n        _beforeTokenTransfer(sender, account, address(0), ids, amounts, \\\"\\\");\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                require(balances[id][account] >= amounts[i], \\\"ERC1155: burn amount exceeds balance\\\");\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(sender, account, address(0), ids, amounts);\\n    }\\n\\n    function _setApprovalForAll(address operator, bool status) internal virtual {\\n        address sender = _msgSender();\\n        require(sender != operator, \\\"ERC1155: setting approval status for self\\\");\\n        ERC1155BaseStorage.layout().operatorApprovals[sender][operator] = status;\\n        emit ApprovalForAll(sender, operator, status);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        require(recipient != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(operator, sender, recipient, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            require(senderBalance >= amount, \\\"ERC1155: insufficient balances for transfer\\\");\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, sender, recipient, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(recipient != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; ) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n\\n                require(senderBalance >= amount, \\\"ERC1155: insufficient balances for transfer\\\");\\n\\n                balances[token][sender] = senderBalance - amount;\\n\\n                i++;\\n            }\\n\\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, sender, recipient, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155Received.selector,\\n                    \\\"ERC1155: ERC1155Receiver rejected tokens\\\"\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155BatchReceived.selector,\\n                    \\\"ERC1155: ERC1155Receiver rejected tokens\\\"\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3807d893f1a4b9e2b6d0510c8c7be1b3bfa67677da760cb377cff34e61376cd8\",\"license\":\"MIT\"},\"src/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC1155Base\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1e39bdc616bb8aa1419ede864883573a18b8f691aab155f35f99fa6bf240564\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/burnable/ERC1155BurnableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../IERC1155.sol\\\";\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./IERC1155BurnableExtension.sol\\\";\\n\\n/**\\n * @title Extension of {ERC1155} that allows users or approved operators to burn tokens.\\n */\\nabstract contract ERC1155BurnableExtension is IERC1155BurnableExtension, ERC1155BaseInternal {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || IERC1155(address(this)).isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || IERC1155(address(this)).isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    function burnByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _burn(account, id, amount);\\n    }\\n\\n    function burnBatchByFacet(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata values\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x560df02df6e7d9399d5885d32e08792789d04f758a949e12057e4bda6124241c\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/burnable/IERC1155BurnableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows holders or approved operators to burn tokens.\\n */\\ninterface IERC1155BurnableExtension {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) external;\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n\\n    function burnByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function burnBatchByFacet(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3960975e95c3b8bbe5c9bf453adec136826121b5f1f54a94beaa90a7e624f41c\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155LockableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"./ERC1155LockableInternal.sol\\\";\\nimport \\\"./IERC1155LockableExtension.sol\\\";\\n\\nabstract contract ERC1155LockableExtension is IERC1155LockableExtension, ERC1155LockableInternal {\\n    function locked(address account, uint256 tokenId) public view virtual returns (uint256) {\\n        return super._locked(account, tokenId);\\n    }\\n\\n    function locked(address account, uint256[] calldata ticketTokenIds) public view virtual returns (uint256[] memory) {\\n        uint256[] memory amounts = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            amounts[i] = _locked(account, ticketTokenIds[i]);\\n        }\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155LockableExtension\\n     */\\n    function lockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _lock(account, id, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155LockableExtension\\n     */\\n    function lockByFacet(\\n        address[] memory accounts,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        require(accounts.length == ids.length && accounts.length == amounts.length, \\\"INVALID_ARRAY_LENGTH\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _lock(accounts[i], ids[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155LockableExtension\\n     */\\n    function unlockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _unlock(account, id, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155LockableExtension\\n     */\\n    function unlockByFacet(\\n        address[] memory accounts,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) public virtual override {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        require(accounts.length == ids.length && accounts.length == amounts.length, \\\"INVALID_ARRAY_LENGTH\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _unlock(accounts[i], ids[i], amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd479ac782849e1dec4ba94170bb91d662faecbef6f21403db024666dc14b5935\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155LockableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./ERC1155LockableStorage.sol\\\";\\n\\nabstract contract ERC1155LockableInternal is ERC1155BaseInternal {\\n    using ERC1155LockableStorage for ERC1155LockableStorage.Layout;\\n\\n    function _locked(address account, uint256 tokenId) internal view virtual returns (uint256) {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        return locks[tokenId];\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _lock(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        require(_balanceOf(account, tokenId) - locks[tokenId] >= amount, \\\"NOT_ENOUGH_BALANCE\\\");\\n\\n        locks[tokenId] += amount;\\n    }\\n\\n    function _unlock(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        mapping(uint256 => uint256) storage locks = ERC1155LockableStorage.layout().lockedAmount[account];\\n\\n        require(locks[tokenId] >= amount, \\\"NOT_ENOUGH_LOCKED\\\");\\n\\n        locks[tokenId] -= amount;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        if (from != address(0)) {\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                require(\\n                    _balanceOf(from, ids[i]) - ERC1155LockableStorage.layout().lockedAmount[from][ids[i]] >= amounts[i],\\n                    \\\"LOCKED\\\"\\n                );\\n            }\\n        }\\n\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x4b821995d1661c7b4e13c493e24e837568e9939dfee7219c020aa96d843841f4\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/ERC1155LockableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC1155LockableStorage {\\n    struct Layout {\\n        mapping(address => mapping(uint256 => uint256)) lockedAmount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Lockable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x762618f56c6891690c17f6c96fcd134630947e585ae23e188789aeb701429379\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/lockable/IERC1155LockableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to lock the tokens.\\n */\\ninterface IERC1155LockableExtension {\\n    /**\\n     * @dev Locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function lockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function lockByFacet(\\n        address[] memory accounts,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /**\\n     * @dev Un-locks `amount` of tokens of `account`, of token type `id`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function unlockByFacet(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function unlockByFacet(\\n        address[] memory accounts,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x06d57ca47ff52ff7076372e5c193849f5bae368d0163a0063ed7d7663ae6e46b\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/mintable/ERC1155MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./IERC1155MintableExtension.sol\\\";\\n\\n/**\\n * @title Extension of {ERC1155} that allows other facets of the diamond to mint based on arbitrary logic.\\n */\\nabstract contract ERC1155MintableExtension is IERC1155MintableExtension, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155MintableExtension\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155MintableExtension\\n     */\\n    function mintByFacet(\\n        address[] calldata tos,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) public virtual {\\n        if (address(this) != msg.sender) {\\n            revert ErrSenderIsNotSelf();\\n        }\\n\\n        _mintBatch(tos, ids, amounts, datas);\\n    }\\n}\\n\",\"keccak256\":\"0x993140feea932d14a10e01d4137f2ec5ac971528de8be7276a50e71336bf5ab2\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/mintable/IERC1155MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC1155MintableExtension {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintByFacet(\\n        address[] calldata tos,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) external;\\n}\\n\",\"keccak256\":\"0x36a66ac7363491121de86a844df3da8d25195bab00cba74b6fa67ae020715d65\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/royalty/ERC1155RoyaltyEnforcementExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../common/Errors.sol\\\";\\nimport \\\"../../../../finance/royalty/RoyaltyEnforcementInternal.sol\\\";\\nimport \\\"../../base/ERC1155Base.sol\\\";\\n\\nabstract contract ERC1155RoyaltyEnforcementExtension is RoyaltyEnforcementInternal, ERC1155Base {\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual override onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual override onlyAllowedOperator(from) {\\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x19ff1bae8862735e7595b2422a4eb2111a2a5c29a7c91315b3615469fda297c6\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./ERC1155SupplyInternal.sol\\\";\\nimport \\\"./IERC1155SupplyExtension.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n */\\nabstract contract ERC1155SupplyExtension is IERC1155SupplyExtension, ERC1155SupplyInternal {\\n    /**\\n     * @inheritdoc IERC1155SupplyExtension\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155SupplyExtension\\n     */\\n    function maxSupply(uint256 id) public view virtual returns (uint256) {\\n        return _maxSupply(id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155SupplyExtension\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return _exists(id);\\n    }\\n}\\n\",\"keccak256\":\"0x27d5f0b0ccbeb407346e2a4fb587e7de6166171d3761f97abf76afc5e676b3dd\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../base/ERC1155BaseInternal.sol\\\";\\nimport \\\"./ERC1155SupplyStorage.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n */\\nabstract contract ERC1155SupplyInternal is ERC1155BaseInternal {\\n    using ERC1155SupplyStorage for ERC1155SupplyStorage.Layout;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function _totalSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155SupplyStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function _maxSupply(uint256 id) internal view virtual returns (uint256) {\\n        return ERC1155SupplyStorage.layout().maxSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function _exists(uint256 id) internal view virtual returns (bool) {\\n        return ERC1155SupplyStorage.layout().totalSupply[id] > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            mapping(uint256 => uint256) storage totalSupply = ERC1155SupplyStorage.layout().totalSupply;\\n            mapping(uint256 => uint256) storage maxSupply = ERC1155SupplyStorage.layout().maxSupply;\\n\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                totalSupply[ids[i]] += amounts[i];\\n\\n                require(totalSupply[ids[i]] <= maxSupply[ids[i]], \\\"SUPPLY_EXCEED_MAX\\\");\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            mapping(uint256 => uint256) storage totalSupply = ERC1155SupplyStorage.layout().totalSupply;\\n\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b86ed3a5fe8decf85f7eea7ef5a9fd8dade572f2e3d00b43c749e388e8716b8\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/ERC1155SupplyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC1155SupplyStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => uint256) maxSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC1155Supply\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc914234f2b860ff31a51b08e0cbae0ea110b59425f892c98090f4bbd8ea0330a\",\"license\":\"MIT\"},\"src/token/ERC1155/extensions/supply/IERC1155SupplyExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that tracks supply and defines a max supply cap per token ID.\\n */\\ninterface IERC1155SupplyExtension {\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Maximum amount of tokens possible to exist for a given id.\\n     */\\n    function maxSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe3770f06c4abd9378f182c4ca003c54dd3ab5932989707b210674ec8d5d169c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506131f7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101765760003560e01c8063869f7594116100d8578063bd85b0391161008c578063f242432a11610066578063f242432a1461034b578063f5298aca1461035e578063f7794bae1461037157600080fd5b8063bd85b039146102ca578063bf7bab73146102dd578063e985e9c5146102f057600080fd5b8063a22cb465116100bd578063a22cb46514610291578063a91a988a146102a4578063b164884b146102b757600080fd5b8063869f75941461026b578063983da1561461027e57600080fd5b806348f2f5361161012f5780634f558e79116101145780634f558e79146102225780636708a990146102455780636b20c4541461025857600080fd5b806348f2f536146101ef5780634e1273f41461020257600080fd5b80630ad2bbac116101605780630ad2bbac146101b65780632eb2c2d6146101c95780633f3b797e146101dc57600080fd5b8062fdd58e1461017b5780630a13c503146101a1575b600080fd5b61018e61018936600461274e565b610384565b6040519081526020015b60405180910390f35b6101b46101af3660046127c4565b610397565b005b6101b46101c4366004612888565b6103d1565b6101b46101d736600461294b565b610405565b6101b46101ea366004612b37565b610415565b6101b46101fd366004612bbf565b610512565b610215610210366004612bf2565b610542565b6040516101989190612c91565b610235610230366004612ca4565b610769565b6040519015158152602001610198565b6101b4610253366004612bbf565b6107a0565b6101b4610266366004612888565b6107cb565b61018e610279366004612ca4565b6108c9565b6101b461028c366004612bbf565b6108fc565b6101b461029f366004612cce565b610927565b6102156102b2366004612d05565b610935565b6101b46102c5366004612d58565b610a1c565b61018e6102d8366004612ca4565b610a49565b61018e6102eb36600461274e565b610a7c565b6102356102fe366004612daf565b6001600160a01b0391821660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832093909416825291909152205460ff1690565b6101b4610359366004612de2565b610ac4565b6101b461036c366004612bbf565b610ada565b6101b461037f366004612b37565b610bd8565b60006103908383610cca565b9392505050565b3033146103b75760405163fd570b5160e01b815260040160405180910390fd5b6103c78888888888888888610d8f565b5050505050505050565b3033146103f15760405163fd570b5160e01b815260040160405180910390fd5b6103fe85858585856110ca565b5050505050565b6103c788888888888888886113ba565b3033146104355760405163fd570b5160e01b815260040160405180910390fd5b81518351148015610447575080518351145b6104985760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f41525241595f4c454e47544800000000000000000000000060448201526064015b60405180910390fd5b60005b835181101561050c576104fa8482815181106104b9576104b9612e5a565b60200260200101518483815181106104d3576104d3612e5a565b60200260200101518484815181106104ed576104ed612e5a565b60200260200101516114cc565b8061050481612e86565b91505061049b565b50505050565b3033146105325760405163fd570b5160e01b815260040160405180910390fd5b61053d838383611589565b505050565b606081518351146105bb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161048f565b82517ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a79060009067ffffffffffffffff8111156105fa576105fa6129f2565b604051908082528060200260200182016040528015610623578160200160208202803683370190505b50905060005b85518110156107605760006001600160a01b031686828151811061064f5761064f612e5a565b60200260200101516001600160a01b0316036106d35760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527f20746865207a65726f2061646472657373000000000000000000000000000000606482015260840161048f565b8260008683815181106106e8576106e8612e5a565b60200260200101518152602001908152602001600020600087838151811061071257610712612e5a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061074d5761074d612e5a565b6020908102919091010152600101610629565b50949350505050565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604081205415155b92915050565b3033146107c05760405163fd570b5160e01b815260040160405180910390fd5b61053d8383836114cc565b6107d3611727565b6001600160a01b0316856001600160a01b0316148061086b57503063e985e9c5866107fc611727565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190612e9f565b6103f15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161048f565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea6602052604081205461079a565b30331461091c5760405163fd570b5160e01b815260040160405180910390fd5b61053d838383611736565b61093182826117fd565b5050565b606060008267ffffffffffffffff811115610952576109526129f2565b60405190808252806020026020018201604052801561097b578160200160208202803683370190505b50905060005b83811015610760576109ed8686868481811061099f5761099f612e5a565b905060200201356001600160a01b039190911660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320938352929052205490565b8282815181106109ff576109ff612e5a565b602090810291909101015280610a1481612e86565b915050610981565b303314610a3c5760405163fd570b5160e01b815260040160405180910390fd5b6103fe85858585856118eb565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604081205461079a565b6001600160a01b03821660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320848452909152812054610390565b610ad2868686868686611a72565b505050505050565b610ae2611727565b6001600160a01b0316836001600160a01b03161480610b7a57503063e985e9c584610b0b611727565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a9190612e9f565b6105325760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161048f565b303314610bf85760405163fd570b5160e01b815260040160405180910390fd5b81518351148015610c0a575080518351145b610c565760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f41525241595f4c454e475448000000000000000000000000604482015260640161048f565b60005b835181101561050c57610cb8848281518110610c7757610c77612e5a565b6020026020010151848381518110610c9157610c91612e5a565b6020026020010151848481518110610cab57610cab612e5a565b6020026020010151611736565b80610cc281612e86565b915050610c59565b60006001600160a01b038316610d485760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f2061646472657373000000000000000000000000000000000000000000606482015260840161048f565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a76000928352602090815260408084206001600160a01b0395909516845293905250205490565b848314610def5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161048f565b868314610e645760405162461bcd60e51b815260206004820152602d60248201527f455243313135353a206163636f756e747320616e6420616d6f756e7473206c6560448201527f6e677468206d69736d6174636800000000000000000000000000000000000000606482015260840161048f565b6000610e6e611727565b90507ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b878110156110bd57610f5d8360008d8d85818110610eb457610eb4612e5a565b9050602002016020810190610ec99190612ebc565b610eea8d8d87818110610ede57610ede612e5a565b90506020020135611b7e565b610eff8c8c88818110610ede57610ede612e5a565b8a8a88818110610f1157610f11612e5a565b9050602002810190610f239190612ed7565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bc992505050565b868682818110610f6f57610f6f612e5a565b905060200201358260008b8b85818110610f8b57610f8b612e5a565b90506020020135815260200190815260200160002060008d8d85818110610fb457610fb4612e5a565b9050602002016020810190610fc99190612ebc565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ff89190612f1e565b909155508b90508a8281811061101057611010612e5a565b90506020020160208101906110259190612ebc565b6001600160a01b031660006001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628c8c8681811061107657611076612e5a565b905060200201358b8b8781811061108f5761108f612e5a565b905060200201356040516110ad929190918252602082015260400190565b60405180910390a4600101610e94565b5050505050505050505050565b6001600160a01b03851661112c5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161048f565b82811461118c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161048f565b6000611196611727565b90506112178187600088888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092018290525060408051602081019091529081529250611bc9915050565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b8581101561135457600087878381811061125757611257612e5a565b90506020020135905085858381811061127257611272612e5a565b9050602002013583600083815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000205410156113095760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161048f565b85858381811061131b5761131b612e5a565b6000938452602086815260408086206001600160a01b038f1687528252909420805494909102929092013590920390555060010161123b565b5060006001600160a01b0316876001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040516113a99493929190612f85565b60405180910390a450505050505050565b877f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb2197905460ff16156114b1576daaeb6d7670e522a718067333cd4e3b156114b157336001600160a01b0382160361141f5761141a8989898989898989611bce565b6114c1565b604051633185c44d60e21b81523060048201523360248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa15801561146e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114929190612e9f565b6114b157604051633b79c77360e21b815233600482015260240161048f565b6114c18989898989898989611bce565b505050505050505050565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b2875278206020908152604080832085845291829052909120548211156115605760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f4c4f434b4544000000000000000000000000000000604482015260640161048f565b6000838152602082905260408120805484929061157e908490612fb7565b909155505050505050565b6001600160a01b0383166115eb5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161048f565b60006115f5611727565b90506116258185600061160787611b7e565b61161087611b7e565b60405180602001604052806000815250611bc9565b60008381527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038816845291829052909120548311156116c45760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161048f565b6001600160a01b0385811660008181526020848152604080832080548990039055805189815291820188905291938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6000611731611d40565b905090565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320858452918290529091205482906117878686610cca565b6117919190612fb7565b10156117df5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f454e4f5547485f42414c414e43450000000000000000000000000000604482015260640161048f565b6000838152602082905260408120805484929061157e908490612f1e565b817f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb2197905460ff16156118e1576daaeb6d7670e522a718067333cd4e3b156118e157604051633185c44d60e21b81523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa158015611895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b99190612e9f565b6118e157604051633b79c77360e21b81526001600160a01b038216600482015260240161048f565b61053d8383611d4a565b60006118f5611727565b90506001600160a01b0386166119735760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161048f565b6119c88160008861198389611b7e565b61198c89611b7e565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bc992505050565b60008581527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038a16845290915281208054869290611a19908490612f1e565b909155505060408051868152602081018690526001600160a01b0380891692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050505050565b857f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb2197905460ff1615611b67576daaeb6d7670e522a718067333cd4e3b15611b6757336001600160a01b03821603611ad557611ad0878787878787611d54565b611b75565b604051633185c44d60e21b81523060048201523360248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa158015611b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b489190612e9f565b611b6757604051633b79c77360e21b815233600482015260240161048f565b611b75878787878787611d54565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611bb857611bb8612e5a565b602090810291909101015292915050565b610ad2565b6000611bd8611727565b9050806001600160a01b0316896001600160a01b03161480611c3e57506001600160a01b03808a1660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b611c9c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161048f565b6114c1818a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600092019190915250611e3192505050565b6000611731611e4d565b6109318282611e96565b6000611d5e611727565b9050806001600160a01b0316876001600160a01b03161480611dc457506001600160a01b0380881660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b611e225760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161048f565b611b7581888888888888611fb6565b611e3f868686868686612009565b610ad2868686868686612285565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f420546000906001600160a01b03163303611e8e575060131936013560601c90565b503390565b90565b6000611ea0611727565b9050826001600160a01b0316816001600160a01b031603611f295760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161048f565b6001600160a01b0381811660008181527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832094881680845294825291829020805460ff1916871515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b611fc58787878787878761242a565b611b75878787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061263692505050565b6001600160a01b03841661206d5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161048f565b81518351146120cf5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161048f565b6120dd868686868686611bc9565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b845181101561223557600085828151811061211e5761211e612e5a565b60200260200101519050600085838151811061213c5761213c612e5a565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150818110156121e25760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e73666572000000000000000000000000000000000000000000606482015260840161048f565b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a168152908120805460019590950194839290612228908490612f1e565b9091555061210192505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113a9929190612fce565b6001600160a01b0384163b15610ad25760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122c99089908990889088908890600401613049565b6020604051808303816000875af1925050508015612304575060408051601f3d908101601f19168201909252612301918101906130a7565b60015b6123b9576123106130d1565b806308c379a00361234957506123246130ec565b8061232f575061234b565b8060405162461bcd60e51b815260040161048f9190613176565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161048f565b6001600160e01b0319811663bc197c8160e01b14611b755760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161048f565b6001600160a01b03851661248e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161048f565b6124e287878761249d88611b7e565b6124a688611b7e565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bc992505050565b60008481527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602081815260408084206001600160a01b038b168552909152909120548481101561259b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e73666572000000000000000000000000000000000000000000606482015260840161048f565b6000868152602083815260408083206001600160a01b038c811685529252808320938890039093558816815290812080548692906125da908490612f1e565b909155505060408051868152602081018690526001600160a01b03808916928a821692918c16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050565b6001600160a01b0384163b15610ad25760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061267a9089908990889088908890600401613189565b6020604051808303816000875af19250505080156126b5575060408051601f3d908101601f191682019092526126b2918101906130a7565b60015b6126c1576123106130d1565b6001600160e01b0319811663f23a6e6160e01b14611b755760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161048f565b80356001600160a01b038116811461274957600080fd5b919050565b6000806040838503121561276157600080fd5b61276a83612732565b946020939093013593505050565b60008083601f84011261278a57600080fd5b50813567ffffffffffffffff8111156127a257600080fd5b6020830191508360208260051b85010111156127bd57600080fd5b9250929050565b6000806000806000806000806080898b0312156127e057600080fd5b883567ffffffffffffffff808211156127f857600080fd5b6128048c838d01612778565b909a50985060208b013591508082111561281d57600080fd5b6128298c838d01612778565b909850965060408b013591508082111561284257600080fd5b61284e8c838d01612778565b909650945060608b013591508082111561286757600080fd5b506128748b828c01612778565b999c989b5096995094979396929594505050565b6000806000806000606086880312156128a057600080fd5b6128a986612732565b9450602086013567ffffffffffffffff808211156128c657600080fd5b6128d289838a01612778565b909650945060408801359150808211156128eb57600080fd5b506128f888828901612778565b969995985093965092949392505050565b60008083601f84011261291b57600080fd5b50813567ffffffffffffffff81111561293357600080fd5b6020830191508360208285010111156127bd57600080fd5b60008060008060008060008060a0898b03121561296757600080fd5b61297089612732565b975061297e60208a01612732565b9650604089013567ffffffffffffffff8082111561299b57600080fd5b6129a78c838d01612778565b909850965060608b01359150808211156129c057600080fd5b6129cc8c838d01612778565b909650945060808b01359150808211156129e557600080fd5b506128748b828c01612909565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612a2e57612a2e6129f2565b6040525050565b600067ffffffffffffffff821115612a4f57612a4f6129f2565b5060051b60200190565b600082601f830112612a6a57600080fd5b81356020612a7782612a35565b604051612a848282612a08565b83815260059390931b8501820192828101915086841115612aa457600080fd5b8286015b84811015612ac657612ab981612732565b8352918301918301612aa8565b509695505050505050565b600082601f830112612ae257600080fd5b81356020612aef82612a35565b604051612afc8282612a08565b83815260059390931b8501820192828101915086841115612b1c57600080fd5b8286015b84811015612ac65780358352918301918301612b20565b600080600060608486031215612b4c57600080fd5b833567ffffffffffffffff80821115612b6457600080fd5b612b7087838801612a59565b94506020860135915080821115612b8657600080fd5b612b9287838801612ad1565b93506040860135915080821115612ba857600080fd5b50612bb586828701612ad1565b9150509250925092565b600080600060608486031215612bd457600080fd5b612bdd84612732565b95602085013595506040909401359392505050565b60008060408385031215612c0557600080fd5b823567ffffffffffffffff80821115612c1d57600080fd5b612c2986838701612a59565b93506020850135915080821115612c3f57600080fd5b50612c4c85828601612ad1565b9150509250929050565b600081518084526020808501945080840160005b83811015612c8657815187529582019590820190600101612c6a565b509495945050505050565b6020815260006103906020830184612c56565b600060208284031215612cb657600080fd5b5035919050565b8015158114612ccb57600080fd5b50565b60008060408385031215612ce157600080fd5b612cea83612732565b91506020830135612cfa81612cbd565b809150509250929050565b600080600060408486031215612d1a57600080fd5b612d2384612732565b9250602084013567ffffffffffffffff811115612d3f57600080fd5b612d4b86828701612778565b9497909650939450505050565b600080600080600060808688031215612d7057600080fd5b612d7986612732565b94506020860135935060408601359250606086013567ffffffffffffffff811115612da357600080fd5b6128f888828901612909565b60008060408385031215612dc257600080fd5b612dcb83612732565b9150612dd960208401612732565b90509250929050565b60008060008060008060a08789031215612dfb57600080fd5b612e0487612732565b9550612e1260208801612732565b94506040870135935060608701359250608087013567ffffffffffffffff811115612e3c57600080fd5b612e4889828a01612909565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612e9857612e98612e70565b5060010190565b600060208284031215612eb157600080fd5b815161039081612cbd565b600060208284031215612ece57600080fd5b61039082612732565b6000808335601e19843603018112612eee57600080fd5b83018035915067ffffffffffffffff821115612f0957600080fd5b6020019150368190038213156127bd57600080fd5b60008219821115612f3157612f31612e70565b500190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612f6857600080fd5b8260051b8083602087013760009401602001938452509192915050565b604081526000612f99604083018688612f36565b8281036020840152612fac818587612f36565b979650505050505050565b600082821015612fc957612fc9612e70565b500390565b604081526000612fe16040830185612c56565b8281036020840152612ff38185612c56565b95945050505050565b6000815180845260005b8181101561302257602081850181015186830182015201613006565b81811115613034576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a0604083015261307560a0830186612c56565b82810360608401526130878186612c56565b9050828103608084015261309b8185612ffc565b98975050505050505050565b6000602082840312156130b957600080fd5b81516001600160e01b03198116811461039057600080fd5b600060033d1115611e935760046000803e5060005160e01c90565b600060443d10156130fa5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561312a57505050505090565b82850191508151818111156131425750505050505090565b843d870101602082850101111561315c5750505050505090565b61316b60208286010187612a08565b509095945050505050565b6020815260006103906020830184612ffc565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612fac60a0830184612ffc56fea26469706673582212205bc37011b8f811eea5234e76c5b21e761af489d62f4592360e0746e6414f6c9064736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101765760003560e01c8063869f7594116100d8578063bd85b0391161008c578063f242432a11610066578063f242432a1461034b578063f5298aca1461035e578063f7794bae1461037157600080fd5b8063bd85b039146102ca578063bf7bab73146102dd578063e985e9c5146102f057600080fd5b8063a22cb465116100bd578063a22cb46514610291578063a91a988a146102a4578063b164884b146102b757600080fd5b8063869f75941461026b578063983da1561461027e57600080fd5b806348f2f5361161012f5780634f558e79116101145780634f558e79146102225780636708a990146102455780636b20c4541461025857600080fd5b806348f2f536146101ef5780634e1273f41461020257600080fd5b80630ad2bbac116101605780630ad2bbac146101b65780632eb2c2d6146101c95780633f3b797e146101dc57600080fd5b8062fdd58e1461017b5780630a13c503146101a1575b600080fd5b61018e61018936600461274e565b610384565b6040519081526020015b60405180910390f35b6101b46101af3660046127c4565b610397565b005b6101b46101c4366004612888565b6103d1565b6101b46101d736600461294b565b610405565b6101b46101ea366004612b37565b610415565b6101b46101fd366004612bbf565b610512565b610215610210366004612bf2565b610542565b6040516101989190612c91565b610235610230366004612ca4565b610769565b6040519015158152602001610198565b6101b4610253366004612bbf565b6107a0565b6101b4610266366004612888565b6107cb565b61018e610279366004612ca4565b6108c9565b6101b461028c366004612bbf565b6108fc565b6101b461029f366004612cce565b610927565b6102156102b2366004612d05565b610935565b6101b46102c5366004612d58565b610a1c565b61018e6102d8366004612ca4565b610a49565b61018e6102eb36600461274e565b610a7c565b6102356102fe366004612daf565b6001600160a01b0391821660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832093909416825291909152205460ff1690565b6101b4610359366004612de2565b610ac4565b6101b461036c366004612bbf565b610ada565b6101b461037f366004612b37565b610bd8565b60006103908383610cca565b9392505050565b3033146103b75760405163fd570b5160e01b815260040160405180910390fd5b6103c78888888888888888610d8f565b5050505050505050565b3033146103f15760405163fd570b5160e01b815260040160405180910390fd5b6103fe85858585856110ca565b5050505050565b6103c788888888888888886113ba565b3033146104355760405163fd570b5160e01b815260040160405180910390fd5b81518351148015610447575080518351145b6104985760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f41525241595f4c454e47544800000000000000000000000060448201526064015b60405180910390fd5b60005b835181101561050c576104fa8482815181106104b9576104b9612e5a565b60200260200101518483815181106104d3576104d3612e5a565b60200260200101518484815181106104ed576104ed612e5a565b60200260200101516114cc565b8061050481612e86565b91505061049b565b50505050565b3033146105325760405163fd570b5160e01b815260040160405180910390fd5b61053d838383611589565b505050565b606081518351146105bb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161048f565b82517ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a79060009067ffffffffffffffff8111156105fa576105fa6129f2565b604051908082528060200260200182016040528015610623578160200160208202803683370190505b50905060005b85518110156107605760006001600160a01b031686828151811061064f5761064f612e5a565b60200260200101516001600160a01b0316036106d35760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527f20746865207a65726f2061646472657373000000000000000000000000000000606482015260840161048f565b8260008683815181106106e8576106e8612e5a565b60200260200101518152602001908152602001600020600087838151811061071257610712612e5a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205482828151811061074d5761074d612e5a565b6020908102919091010152600101610629565b50949350505050565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604081205415155b92915050565b3033146107c05760405163fd570b5160e01b815260040160405180910390fd5b61053d8383836114cc565b6107d3611727565b6001600160a01b0316856001600160a01b0316148061086b57503063e985e9c5866107fc611727565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190612e9f565b6103f15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161048f565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea6602052604081205461079a565b30331461091c5760405163fd570b5160e01b815260040160405180910390fd5b61053d838383611736565b61093182826117fd565b5050565b606060008267ffffffffffffffff811115610952576109526129f2565b60405190808252806020026020018201604052801561097b578160200160208202803683370190505b50905060005b83811015610760576109ed8686868481811061099f5761099f612e5a565b905060200201356001600160a01b039190911660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320938352929052205490565b8282815181106109ff576109ff612e5a565b602090810291909101015280610a1481612e86565b915050610981565b303314610a3c5760405163fd570b5160e01b815260040160405180910390fd5b6103fe85858585856118eb565b60008181527f7056dcda885936c7a9d7c6385902b4ab5fb09024caea98652b7189a5f7a28ea5602052604081205461079a565b6001600160a01b03821660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320848452909152812054610390565b610ad2868686868686611a72565b505050505050565b610ae2611727565b6001600160a01b0316836001600160a01b03161480610b7a57503063e985e9c584610b0b611727565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a9190612e9f565b6105325760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161048f565b303314610bf85760405163fd570b5160e01b815260040160405180910390fd5b81518351148015610c0a575080518351145b610c565760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f41525241595f4c454e475448000000000000000000000000604482015260640161048f565b60005b835181101561050c57610cb8848281518110610c7757610c77612e5a565b6020026020010151848381518110610c9157610c91612e5a565b6020026020010151848481518110610cab57610cab612e5a565b6020026020010151611736565b80610cc281612e86565b915050610c59565b60006001600160a01b038316610d485760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f2061646472657373000000000000000000000000000000000000000000606482015260840161048f565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a76000928352602090815260408084206001600160a01b0395909516845293905250205490565b848314610def5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161048f565b868314610e645760405162461bcd60e51b815260206004820152602d60248201527f455243313135353a206163636f756e747320616e6420616d6f756e7473206c6560448201527f6e677468206d69736d6174636800000000000000000000000000000000000000606482015260840161048f565b6000610e6e611727565b90507ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b878110156110bd57610f5d8360008d8d85818110610eb457610eb4612e5a565b9050602002016020810190610ec99190612ebc565b610eea8d8d87818110610ede57610ede612e5a565b90506020020135611b7e565b610eff8c8c88818110610ede57610ede612e5a565b8a8a88818110610f1157610f11612e5a565b9050602002810190610f239190612ed7565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bc992505050565b868682818110610f6f57610f6f612e5a565b905060200201358260008b8b85818110610f8b57610f8b612e5a565b90506020020135815260200190815260200160002060008d8d85818110610fb457610fb4612e5a565b9050602002016020810190610fc99190612ebc565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610ff89190612f1e565b909155508b90508a8281811061101057611010612e5a565b90506020020160208101906110259190612ebc565b6001600160a01b031660006001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628c8c8681811061107657611076612e5a565b905060200201358b8b8781811061108f5761108f612e5a565b905060200201356040516110ad929190918252602082015260400190565b60405180910390a4600101610e94565b5050505050505050505050565b6001600160a01b03851661112c5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161048f565b82811461118c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161048f565b6000611196611727565b90506112178187600088888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092018290525060408051602081019091529081529250611bc9915050565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b8581101561135457600087878381811061125757611257612e5a565b90506020020135905085858381811061127257611272612e5a565b9050602002013583600083815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000205410156113095760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161048f565b85858381811061131b5761131b612e5a565b6000938452602086815260408086206001600160a01b038f1687528252909420805494909102929092013590920390555060010161123b565b5060006001600160a01b0316876001600160a01b0316836001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040516113a99493929190612f85565b60405180910390a450505050505050565b877f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb2197905460ff16156114b1576daaeb6d7670e522a718067333cd4e3b156114b157336001600160a01b0382160361141f5761141a8989898989898989611bce565b6114c1565b604051633185c44d60e21b81523060048201523360248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa15801561146e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114929190612e9f565b6114b157604051633b79c77360e21b815233600482015260240161048f565b6114c18989898989898989611bce565b505050505050505050565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b2875278206020908152604080832085845291829052909120548211156115605760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f4c4f434b4544000000000000000000000000000000604482015260640161048f565b6000838152602082905260408120805484929061157e908490612fb7565b909155505050505050565b6001600160a01b0383166115eb5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161048f565b60006115f5611727565b90506116258185600061160787611b7e565b61161087611b7e565b60405180602001604052806000815250611bc9565b60008381527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038816845291829052909120548311156116c45760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161048f565b6001600160a01b0385811660008181526020848152604080832080548990039055805189815291820188905291938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6000611731611d40565b905090565b6001600160a01b03831660009081527f349768cb3869818ef8452552d8520ac7355b35c10a0ff9320e2975b28752782060209081526040808320858452918290529091205482906117878686610cca565b6117919190612fb7565b10156117df5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f454e4f5547485f42414c414e43450000000000000000000000000000604482015260640161048f565b6000838152602082905260408120805484929061157e908490612f1e565b817f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb2197905460ff16156118e1576daaeb6d7670e522a718067333cd4e3b156118e157604051633185c44d60e21b81523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa158015611895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b99190612e9f565b6118e157604051633b79c77360e21b81526001600160a01b038216600482015260240161048f565b61053d8383611d4a565b60006118f5611727565b90506001600160a01b0386166119735760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161048f565b6119c88160008861198389611b7e565b61198c89611b7e565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bc992505050565b60008581527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602090815260408083206001600160a01b038a16845290915281208054869290611a19908490612f1e565b909155505060408051868152602081018690526001600160a01b0380891692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050505050565b857f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb2197905460ff1615611b67576daaeb6d7670e522a718067333cd4e3b15611b6757336001600160a01b03821603611ad557611ad0878787878787611d54565b611b75565b604051633185c44d60e21b81523060048201523360248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa158015611b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b489190612e9f565b611b6757604051633b79c77360e21b815233600482015260240161048f565b611b75878787878787611d54565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611bb857611bb8612e5a565b602090810291909101015292915050565b610ad2565b6000611bd8611727565b9050806001600160a01b0316896001600160a01b03161480611c3e57506001600160a01b03808a1660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b611c9c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161048f565b6114c1818a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a9081908401838280828437600092019190915250611e3192505050565b6000611731611e4d565b6109318282611e96565b6000611d5e611727565b9050806001600160a01b0316876001600160a01b03161480611dc457506001600160a01b0380881660009081527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a8602090815260408083209385168352929052205460ff165b611e225760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161048f565b611b7581888888888888611fb6565b611e3f868686868686612009565b610ad2868686868686612285565b7fdb1d5e345c4903e9a32b6674ecc8b1deaddbbb2551474fb34c9d34becbe7f420546000906001600160a01b03163303611e8e575060131936013560601c90565b503390565b90565b6000611ea0611727565b9050826001600160a01b0316816001600160a01b031603611f295760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161048f565b6001600160a01b0381811660008181527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a86020908152604080832094881680845294825291829020805460ff1916871515908117909155825190815291517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319281900390910190a3505050565b611fc58787878787878761242a565b611b75878787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061263692505050565b6001600160a01b03841661206d5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161048f565b81518351146120cf5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161048f565b6120dd868686868686611bc9565b7ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a760005b845181101561223557600085828151811061211e5761211e612e5a565b60200260200101519050600085838151811061213c5761213c612e5a565b602090810291909101810151600084815286835260408082206001600160a01b038e1683529093529190912054909150818110156121e25760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e73666572000000000000000000000000000000000000000000606482015260840161048f565b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a168152908120805460019590950194839290612228908490612f1e565b9091555061210192505050565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113a9929190612fce565b6001600160a01b0384163b15610ad25760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122c99089908990889088908890600401613049565b6020604051808303816000875af1925050508015612304575060408051601f3d908101601f19168201909252612301918101906130a7565b60015b6123b9576123106130d1565b806308c379a00361234957506123246130ec565b8061232f575061234b565b8060405162461bcd60e51b815260040161048f9190613176565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161048f565b6001600160e01b0319811663bc197c8160e01b14611b755760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161048f565b6001600160a01b03851661248e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161048f565b6124e287878761249d88611b7e565b6124a688611b7e565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bc992505050565b60008481527ff9ecf3cb86ac553c70621e3e662b4036163ca34fffb329385fafa0e130cfc1a7602081815260408084206001600160a01b038b168552909152909120548481101561259b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201527f6f72207472616e73666572000000000000000000000000000000000000000000606482015260840161048f565b6000868152602083815260408083206001600160a01b038c811685529252808320938890039093558816815290812080548692906125da908490612f1e565b909155505060408051868152602081018690526001600160a01b03808916928a821692918c16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050565b6001600160a01b0384163b15610ad25760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061267a9089908990889088908890600401613189565b6020604051808303816000875af19250505080156126b5575060408051601f3d908101601f191682019092526126b2918101906130a7565b60015b6126c1576123106130d1565b6001600160e01b0319811663f23a6e6160e01b14611b755760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161048f565b80356001600160a01b038116811461274957600080fd5b919050565b6000806040838503121561276157600080fd5b61276a83612732565b946020939093013593505050565b60008083601f84011261278a57600080fd5b50813567ffffffffffffffff8111156127a257600080fd5b6020830191508360208260051b85010111156127bd57600080fd5b9250929050565b6000806000806000806000806080898b0312156127e057600080fd5b883567ffffffffffffffff808211156127f857600080fd5b6128048c838d01612778565b909a50985060208b013591508082111561281d57600080fd5b6128298c838d01612778565b909850965060408b013591508082111561284257600080fd5b61284e8c838d01612778565b909650945060608b013591508082111561286757600080fd5b506128748b828c01612778565b999c989b5096995094979396929594505050565b6000806000806000606086880312156128a057600080fd5b6128a986612732565b9450602086013567ffffffffffffffff808211156128c657600080fd5b6128d289838a01612778565b909650945060408801359150808211156128eb57600080fd5b506128f888828901612778565b969995985093965092949392505050565b60008083601f84011261291b57600080fd5b50813567ffffffffffffffff81111561293357600080fd5b6020830191508360208285010111156127bd57600080fd5b60008060008060008060008060a0898b03121561296757600080fd5b61297089612732565b975061297e60208a01612732565b9650604089013567ffffffffffffffff8082111561299b57600080fd5b6129a78c838d01612778565b909850965060608b01359150808211156129c057600080fd5b6129cc8c838d01612778565b909650945060808b01359150808211156129e557600080fd5b506128748b828c01612909565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612a2e57612a2e6129f2565b6040525050565b600067ffffffffffffffff821115612a4f57612a4f6129f2565b5060051b60200190565b600082601f830112612a6a57600080fd5b81356020612a7782612a35565b604051612a848282612a08565b83815260059390931b8501820192828101915086841115612aa457600080fd5b8286015b84811015612ac657612ab981612732565b8352918301918301612aa8565b509695505050505050565b600082601f830112612ae257600080fd5b81356020612aef82612a35565b604051612afc8282612a08565b83815260059390931b8501820192828101915086841115612b1c57600080fd5b8286015b84811015612ac65780358352918301918301612b20565b600080600060608486031215612b4c57600080fd5b833567ffffffffffffffff80821115612b6457600080fd5b612b7087838801612a59565b94506020860135915080821115612b8657600080fd5b612b9287838801612ad1565b93506040860135915080821115612ba857600080fd5b50612bb586828701612ad1565b9150509250925092565b600080600060608486031215612bd457600080fd5b612bdd84612732565b95602085013595506040909401359392505050565b60008060408385031215612c0557600080fd5b823567ffffffffffffffff80821115612c1d57600080fd5b612c2986838701612a59565b93506020850135915080821115612c3f57600080fd5b50612c4c85828601612ad1565b9150509250929050565b600081518084526020808501945080840160005b83811015612c8657815187529582019590820190600101612c6a565b509495945050505050565b6020815260006103906020830184612c56565b600060208284031215612cb657600080fd5b5035919050565b8015158114612ccb57600080fd5b50565b60008060408385031215612ce157600080fd5b612cea83612732565b91506020830135612cfa81612cbd565b809150509250929050565b600080600060408486031215612d1a57600080fd5b612d2384612732565b9250602084013567ffffffffffffffff811115612d3f57600080fd5b612d4b86828701612778565b9497909650939450505050565b600080600080600060808688031215612d7057600080fd5b612d7986612732565b94506020860135935060408601359250606086013567ffffffffffffffff811115612da357600080fd5b6128f888828901612909565b60008060408385031215612dc257600080fd5b612dcb83612732565b9150612dd960208401612732565b90509250929050565b60008060008060008060a08789031215612dfb57600080fd5b612e0487612732565b9550612e1260208801612732565b94506040870135935060608701359250608087013567ffffffffffffffff811115612e3c57600080fd5b612e4889828a01612909565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612e9857612e98612e70565b5060010190565b600060208284031215612eb157600080fd5b815161039081612cbd565b600060208284031215612ece57600080fd5b61039082612732565b6000808335601e19843603018112612eee57600080fd5b83018035915067ffffffffffffffff821115612f0957600080fd5b6020019150368190038213156127bd57600080fd5b60008219821115612f3157612f31612e70565b500190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612f6857600080fd5b8260051b8083602087013760009401602001938452509192915050565b604081526000612f99604083018688612f36565b8281036020840152612fac818587612f36565b979650505050505050565b600082821015612fc957612fc9612e70565b500390565b604081526000612fe16040830185612c56565b8281036020840152612ff38185612c56565b95945050505050565b6000815180845260005b8181101561302257602081850181015186830182015201613006565b81811115613034576000602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a0604083015261307560a0830186612c56565b82810360608401526130878186612c56565b9050828103608084015261309b8185612ffc565b98975050505050505050565b6000602082840312156130b957600080fd5b81516001600160e01b03198116811461039057600080fd5b600060033d1115611e935760046000803e5060005160e01c90565b600060443d10156130fa5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561312a57505050505090565b82850191508151818111156131425750505050505090565b843d870101602082850101111561315c5750505050505090565b61316b60208286010187612a08565b509095945050505050565b6020815260006103906020830184612ffc565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612fac60a0830184612ffc56fea26469706673582212205bc37011b8f811eea5234e76c5b21e761af489d62f4592360e0746e6414f6c9064736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:provides-interfaces": "IERC1155 IERC1155SupplyExtension IERC1155MintableExtension IERC1155BurnableExtension IERC1155LockableExtension IRoyaltyEnforcement",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "lockByFacet(address,uint256,uint256)": {
        "details": "Locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets)."
      },
      "maxSupply(uint256)": {
        "details": "Maximum amount of tokens possible to exist for a given id."
      },
      "mintByFacet(address,uint256,uint256,bytes)": {
        "details": "Creates `amount` new tokens for `to`, of token type `id`. See {ERC1155-_mint}. Requirements: - the caller must be diamond itself (other facets)."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "unlockByFacet(address,uint256,uint256)": {
        "details": "Un-locks `amount` of tokens of `account`, of token type `id`. Requirements: - the caller must be diamond itself (other facets)."
      }
    },
    "title": "ERC1155 - with meta-transactions",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ErrSenderIsNotSelf()": [
        {
          "notice": "The caller must be the current contract itself."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      }
    },
    "notice": "Standard EIP-1155 with ability to accept meta transactions (mainly transfer or burn methods).",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}