{
  "address": "0x89e46AFFf387E0d4eFCADFff73CB4615a69ae47B",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockedUntilTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ERC721ShareInstantStream.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimMany",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        }
      ],
      "name": "SharesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "entitlements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "getSharesByTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721InstantReleaseExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721ShareSplitExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockedUntilTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ERC721ShareInstantStream.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "lockUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedUntilTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shares",
          "type": "uint256[]"
        }
      ],
      "name": "setSharesForTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5740f99b7f6ef27a576c45b802b84387cbc00dc3b10af25c9586ceef36dca4eb",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x89e46AFFf387E0d4eFCADFff73CB4615a69ae47B",
    "transactionIndex": 28,
    "gasUsed": "1992831",
    "logsBloom": "0x
    "blockHash": "0x501a75919e45baa904687f33fb0884cbde382b12544c7d66c5172290b4df8744",
    "transactionHash": "0x5740f99b7f6ef27a576c45b802b84387cbc00dc3b10af25c9586ceef36dca4eb",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 30188741,
        "transactionHash": "0x5740f99b7f6ef27a576c45b802b84387cbc00dc3b10af25c9586ceef36dca4eb",
        "address": "0x89e46AFFf387E0d4eFCADFff73CB4615a69ae47B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 142,
        "blockHash": "0x501a75919e45baa904687f33fb0884cbde382b12544c7d66c5172290b4df8744"
      },
      {
        "transactionIndex": 28,
        "blockNumber": 30188741,
        "transactionHash": "0x5740f99b7f6ef27a576c45b802b84387cbc00dc3b10af25c9586ceef36dca4eb",
        "address": "0x89e46AFFf387E0d4eFCADFff73CB4615a69ae47B",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 143,
        "blockHash": "0x501a75919e45baa904687f33fb0884cbde382b12544c7d66c5172290b4df8744"
      },
      {
        "transactionIndex": 28,
        "blockNumber": 30188741,
        "transactionHash": "0x5740f99b7f6ef27a576c45b802b84387cbc00dc3b10af25c9586ceef36dca4eb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000153d678e4ecf11a0000000000000000000000000000000000000000000000021311731f8f7040b80000000000000000000000000000000000000000000130a87b34a0a9638eda5200000000000000000000000000000000000000000000000211bd9ca6aa834f9e0000000000000000000000000000000000000000000130a87c887722487bcb6c",
        "logIndex": 144,
        "blockHash": "0x501a75919e45baa904687f33fb0884cbde382b12544c7d66c5172290b4df8744"
      }
    ],
    "blockNumber": 30188741,
    "cumulativeGasUsed": "6596129",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "ticketToken": "0x0000000000000000000000000000000000000000",
      "lockedUntilTimestamp": 0,
      "tokenIds": [],
      "shares": []
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "f36bbd2d58b66b037af1b3d3cb8d4e33",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ERC721ShareInstantStream.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimMany\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"}],\"name\":\"SharesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entitlements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getSharesByTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721InstantReleaseExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721ShareSplitExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ERC721ShareInstantStream.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"lockUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntilTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"setSharesForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol\":\"ERC721ShareInstantStream\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/streams/ERC721/base/ERC721MultiTokenStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721MultiTokenStream {\\n    // Claim native currency for a single ticket token\\n    function claim(uint256 ticketTokenId) external;\\n\\n    // Claim an erc20 claim token for a single ticket token\\n    function claim(uint256 ticketTokenId, address claimToken) external;\\n\\n    // Claim native currency for multiple ticket tokens (only if all owned by sender)\\n    function claim(uint256[] calldata ticketTokenIds) external;\\n\\n    // Claim native or erc20 tokens for multiple ticket tokens (only if all owned by `owner`)\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address owner\\n    ) external;\\n\\n    // Total native currency ever supplied to this stream\\n    function streamTotalSupply() external view returns (uint256);\\n\\n    // Total erc20 token ever supplied to this stream by claim token address\\n    function streamTotalSupply(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed from this stream\\n    function streamTotalClaimed() external view returns (uint256);\\n\\n    // Total erc20 token ever claimed from this stream by claim token address\\n    function streamTotalClaimed(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for a single ticket token\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for multiple token IDs\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total erc20 token ever claimed for multiple token IDs\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) external view returns (uint256);\\n\\n    // Calculate currently claimable amount for a specific ticket token ID and a specific claim token address\\n    // Pass 0x0000000000000000000000000000000000000000 as claim token to represent native currency\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        external\\n        view\\n        returns (uint256 claimableAmount);\\n}\\n\\nabstract contract ERC721MultiTokenStream is\\n    IERC721MultiTokenStream,\\n    Initializable,\\n    ERC165Storage,\\n    OwnableUpgradeable,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    struct Entitlement {\\n        uint256 totalClaimed;\\n        uint256 lastClaimedAt;\\n    }\\n\\n    // Config\\n    address public ticketToken;\\n\\n    // Locks changing the config until this timestamp is reached\\n    uint64 public lockedUntilTimestamp;\\n\\n    // Map of ticket token ID -> claim token address -> entitlement\\n    mapping(uint256 => mapping(address => Entitlement)) public entitlements;\\n\\n    // Map of claim token address -> Total amount claimed by all holders\\n    mapping(address => uint256) internal _streamTotalClaimed;\\n\\n    /* EVENTS */\\n\\n    event Claim(\\n        address operator,\\n        address beneficiary,\\n        uint256 ticketTokenId,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    event ClaimMany(\\n        address operator,\\n        address beneficiary,\\n        uint256[] ticketTokenIds,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    function __ERC721MultiTokenStream_init(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        __Context_init();\\n        __ERC721MultiTokenStream_init_unchained(\\n            _ticketToken,\\n            _lockedUntilTimestamp\\n        );\\n    }\\n\\n    function __ERC721MultiTokenStream_init_unchained(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        ticketToken = _ticketToken;\\n        lockedUntilTimestamp = _lockedUntilTimestamp;\\n\\n        _registerInterface(type(IERC721MultiTokenStream).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function lockUntil(uint64 newValue) public onlyOwner {\\n        require(newValue > lockedUntilTimestamp, \\\"STREAM/CANNOT_REWIND\\\");\\n        lockedUntilTimestamp = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    receive() external payable {\\n        require(msg.value > 0);\\n    }\\n\\n    function claim(uint256 ticketTokenId) public {\\n        claim(ticketTokenId, address(0));\\n    }\\n\\n    function claim(uint256 ticketTokenId, address claimToken)\\n        public\\n        nonReentrant\\n    {\\n        /* CHECKS */\\n\\n        _beforeClaim(ticketTokenId, claimToken);\\n\\n        address owner = IERC721(ticketToken).ownerOf(ticketTokenId);\\n        uint256 claimable = streamClaimableAmount(ticketTokenId, claimToken);\\n        require(claimable > 0, \\\"STREAM/NOTHING_TO_CLAIM\\\");\\n\\n        /* EFFECTS */\\n\\n        entitlements[ticketTokenId][claimToken].totalClaimed += claimable;\\n        entitlements[ticketTokenId][claimToken].lastClaimedAt = block.timestamp;\\n\\n        _streamTotalClaimed[claimToken] += claimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(owner)).sendValue(claimable);\\n        } else {\\n            IERC20(claimToken).transfer(owner, claimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit Claim(_msgSender(), owner, ticketTokenId, claimToken, claimable);\\n    }\\n\\n    function claim(uint256[] calldata ticketTokenIds) public {\\n        claim(ticketTokenIds, address(0), _msgSender());\\n    }\\n\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address owner\\n    ) public nonReentrant {\\n        uint256 totalClaimable;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            _beforeClaim(ticketTokenIds[i], claimToken);\\n\\n            /* CHECKS */\\n            require(\\n                IERC721(ticketToken).ownerOf(ticketTokenIds[i]) == owner,\\n                \\\"STREAM/NOT_NFT_OWNER\\\"\\n            );\\n\\n            /* EFFECTS */\\n            uint256 claimable = streamClaimableAmount(\\n                ticketTokenIds[i],\\n                claimToken\\n            );\\n\\n            if (claimable > 0) {\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .totalClaimed += claimable;\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .lastClaimedAt = block.timestamp;\\n\\n                totalClaimable += claimable;\\n            }\\n        }\\n\\n        _streamTotalClaimed[claimToken] += totalClaimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(owner)).sendValue(totalClaimable);\\n        } else {\\n            IERC20(claimToken).transfer(owner, totalClaimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit ClaimMany(\\n            _msgSender(),\\n            owner,\\n            ticketTokenIds,\\n            claimToken,\\n            totalClaimable\\n        );\\n    }\\n\\n    /* READ ONLY */\\n\\n    function streamTotalSupply() public view returns (uint256) {\\n        return streamTotalSupply(address(0));\\n    }\\n\\n    function streamTotalSupply(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (claimToken == address(0)) {\\n            return _streamTotalClaimed[claimToken] + address(this).balance;\\n        }\\n\\n        return\\n            _streamTotalClaimed[claimToken] +\\n            IERC20(claimToken).balanceOf(address(this));\\n    }\\n\\n    function streamTotalClaimed() public view returns (uint256) {\\n        return _streamTotalClaimed[address(0)];\\n    }\\n\\n    function streamTotalClaimed(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _streamTotalClaimed[claimToken];\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][address(0)].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamTotalClaimed(ticketTokenIds, address(0));\\n    }\\n\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimed = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimed += entitlements[ticketTokenIds[i]][claimToken].totalClaimed;\\n        }\\n\\n        return claimed;\\n    }\\n\\n    function streamClaimableAmount(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimable = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimable += streamClaimableAmount(ticketTokenIds[i], claimToken);\\n        }\\n\\n        return claimable;\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamClaimableAmount(ticketTokenId, address(0));\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 totalReleased = _totalTokenShare(\\n            _totalReleasedAmount(\\n                streamTotalSupply(claimToken),\\n                ticketTokenId,\\n                claimToken\\n            ),\\n            ticketTokenId,\\n            claimToken\\n        );\\n\\n        return\\n            totalReleased -\\n            entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function _totalReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    function _totalTokenShare(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    /* INTERNAL */\\n\\n    function _beforeClaim(uint256 ticketTokenId_, address claimToken_)\\n        internal\\n        view\\n        virtual\\n    {}\\n}\\n\",\"keccak256\":\"0x93c875c1556135b7f1059566e6bcf42c460483af8db503c679e31b9421d19af3\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721InstantReleaseExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721InstantReleaseExtension {\\n    function hasERC721InstantReleaseExtension() external view returns (bool);\\n}\\n\\nabstract contract ERC721InstantReleaseExtension is\\n    IERC721InstantReleaseExtension,\\n    Initializable,\\n    ERC165Storage,\\n    OwnableUpgradeable,\\n    ERC721MultiTokenStream\\n{\\n    /* INIT */\\n\\n    function __ERC721InstantReleaseExtension_init() internal onlyInitializing {\\n        __Context_init();\\n        __ERC721InstantReleaseExtension_init_unchained();\\n    }\\n\\n    function __ERC721InstantReleaseExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721InstantReleaseExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721InstantReleaseExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _totalReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal pure override returns (uint256) {\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        return streamTotalSupply_;\\n    }\\n}\\n\",\"keccak256\":\"0xd89b08c269ca78e1086bc4a2c6914502d41e68ff54a2422bbf14c3c8f3abe9fe\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721ShareSplitExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721ShareSplitExtension {\\n    function hasERC721ShareSplitExtension() external view returns (bool);\\n\\n    function setSharesForTokens(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _shares\\n    ) external;\\n\\n    function getSharesByTokens(uint256[] calldata _tokenIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\\nabstract contract ERC721ShareSplitExtension is\\n    IERC721ShareSplitExtension,\\n    Initializable,\\n    ERC165Storage,\\n    OwnableUpgradeable,\\n    ERC721MultiTokenStream\\n{\\n    event SharesUpdated(uint256 tokenId, uint256 prevShares, uint256 newShares);\\n\\n    // Sum of all the share units ever configured\\n    uint256 public totalShares;\\n\\n    // Map of ticket token ID -> share of the stream\\n    mapping(uint256 => uint256) public shares;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721ShareSplitExtension_init(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _shares\\n    ) internal onlyInitializing {\\n        __Context_init();\\n        __ERC721ShareSplitExtension_init_unchained(_tokenIds, _shares);\\n    }\\n\\n    function __ERC721ShareSplitExtension_init_unchained(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _shares\\n    ) internal onlyInitializing {\\n        setSharesForTokens(_tokenIds, _shares);\\n\\n        _registerInterface(type(IERC721ShareSplitExtension).interfaceId);\\n    }\\n\\n    function setSharesForTokens(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _shares\\n    ) public onlyOwner {\\n        require(_shares.length == _tokenIds.length, \\\"STREAM/ARGS_MISMATCH\\\");\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n\\n        for (uint256 i = 0; i < _shares.length; i++) {\\n            _updateShares(_tokenIds[i], _shares[i]);\\n        }\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721ShareSplitExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function getSharesByTokens(uint256[] calldata _tokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _shares = new uint256[](_tokenIds.length);\\n\\n        for (uint256 i = 0; i < _shares.length; i++) {\\n            _shares[i] = shares[_tokenIds[i]];\\n        }\\n\\n        return _shares;\\n    }\\n\\n    function _totalTokenShare(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view override returns (uint256) {\\n        claimToken_;\\n\\n        return (totalReleasedAmount_ * shares[ticketTokenId_]) / totalShares;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _updateShares(uint256 tokenId, uint256 newShares) private {\\n        uint256 prevShares = shares[tokenId];\\n\\n        shares[tokenId] = newShares;\\n        totalShares = totalShares + newShares - prevShares;\\n\\n        require(totalShares >= 0, \\\"STREAM/NEGATIVE_SHARES\\\");\\n\\n        emit SharesUpdated(tokenId, prevShares, newShares);\\n    }\\n}\\n\",\"keccak256\":\"0x146569f8e2777b736f4d8740fceeed2c0ffda2fb8f89ff11711d71b4f1631f05\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../extensions/ERC721InstantReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721ShareSplitExtension.sol\\\";\\n\\ncontract ERC721ShareInstantStream is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ERC721InstantReleaseExtension,\\n    ERC721ShareSplitExtension\\n{\\n    string public constant name = \\\"ERC721 Share Instant Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Share split extension\\n        uint256[] tokenIds;\\n        uint256[] shares;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config);\\n    }\\n\\n    function initialize(Config memory config) public initializer {\\n        __Context_init();\\n        __Ownable_init();\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721InstantReleaseExtension_init();\\n        __ERC721ShareSplitExtension_init(config.tokenIds, config.shares);\\n    }\\n}\\n\",\"keccak256\":\"0x275d2f434dde7d5818b8cb71fb3f07ace96961fdc06ea72f6c14488f2cce39c7\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002990380380620029908339810160408190526200003491620007bf565b600160665562000044816200004b565b50620009ab565b600062000059600162000108565b9050801562000072576000805461ff0019166101001790555b6200007c620001b5565b62000086620001e1565b8151602083015162000099919062000215565b620000a362000255565b620000bd826040015183606001516200029360201b60201c565b801562000104576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60008054610100900460ff161562000171578160ff1660011480156200014157506200013f30620002d360201b6200131e1760201c565b155b620001695760405162461bcd60e51b8152600401620001609062000893565b60405180910390fd5b506000919050565b60005460ff8084169116106200019b5760405162461bcd60e51b8152600401620001609062000893565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16620001df5760405162461bcd60e51b81526004016200016090620008e1565b565b600054610100900460ff166200020b5760405162461bcd60e51b81526004016200016090620008e1565b620001df620002e2565b600054610100900460ff166200023f5760405162461bcd60e51b81526004016200016090620008e1565b62000249620001b5565b62000104828262000317565b600054610100900460ff166200027f5760405162461bcd60e51b81526004016200016090620008e1565b62000289620001b5565b620001df62000381565b600054610100900460ff16620002bd5760405162461bcd60e51b81526004016200016090620008e1565b620002c7620001b5565b620001048282620003bd565b6001600160a01b03163b151590565b600054610100900460ff166200030c5760405162461bcd60e51b81526004016200016090620008e1565b620001df3362000405565b600054610100900460ff16620003415760405162461bcd60e51b81526004016200016090620008e1565b606780546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b0385161717905562000104631ba050e960e21b62000457565b600054610100900460ff16620003ab5760405162461bcd60e51b81526004016200016090620008e1565b620001df631259990960e01b62000457565b600054610100900460ff16620003e75760405162461bcd60e51b81526004016200016090620008e1565b620003f38282620004db565b620001046333c7a33f60e11b62000457565b603480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160e01b03198082161415620004b35760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640162000160565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b6034546001600160a01b03163314620005375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000160565b81518151146200058a5760405162461bcd60e51b815260206004820152601460248201527f53545245414d2f415247535f4d49534d41544348000000000000000000000000604482015260640162000160565b60675442600160a01b9091046001600160401b031610620005ee5760405162461bcd60e51b815260206004820152601460248201527f53545245414d2f434f4e4649475f4c4f434b4544000000000000000000000000604482015260640162000160565b60005b81518110156200065a57620006458382815181106200061457620006146200092c565b60200260200101518383815181106200063157620006316200092c565b60200260200101516200065f60201b60201c565b80620006518162000958565b915050620005f1565b505050565b6000828152606b60205260409020805490829055606a5481906200068590849062000976565b62000691919062000991565b606a5560408051848152602081018390529081018390527ff81b1f9d8b5d36a5a67d13006a8b091a9b63e2a38b331d315d99c6daefd2ddcc9060600160405180910390a1505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715620007155762000715620006da565b60405290565b600082601f8301126200072d57600080fd5b815160206001600160401b03808311156200074c576200074c620006da565b8260051b604051601f19603f83011681018181108482111715620007745762000774620006da565b6040529384528581018301938381019250878511156200079357600080fd5b83870191505b84821015620007b45781518352918301919083019062000799565b979650505050505050565b600060208284031215620007d257600080fd5b81516001600160401b0380821115620007ea57600080fd5b9083019060808286031215620007ff57600080fd5b62000809620006f0565b82516001600160a01b03811681146200082157600080fd5b8152602083015182811681146200083757600080fd5b60208201526040830151828111156200084f57600080fd5b6200085d878286016200071b565b6040830152506060830151828111156200087657600080fd5b62000884878286016200071b565b60608301525095945050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156200096f576200096f62000942565b5060010190565b600082198211156200098c576200098c62000942565b500190565b600082821015620009a657620009a662000942565b500390565b611fd580620009bb6000396000f3fe6080604052600436106101775760003560e01c80630191c0af1461019057806301ffc9a7146101c357806306fdde03146101f357806312599909146102475780631c725fdc1461025b57806325289bad1461027b5780632890d033146102ba578063379607f5146102cf5780633a98ef39146102ef5780633b3f12e2146103055780633d2dded51461032557806340f379481461036257806354fd4d501461038f57806357a858fc146103be57806357dc48c8146103eb578063676e6c9b1461043f5780636ba4c1381461045f578063715018a61461047f578063790c0c731461049457806389c6b815146104b45780638da5cb5b146104d45780638fc852b1146104f6578063968d9b2c14610516578063a1cf649314610536578063a8b46d8714610247578063c088184914610579578063d5ed4d5a146105af578063ddd5e1b2146105cf578063f2fde38b146105ef578063f389b6e41461060f578063f4415ad61461062f578063f66e38c21461066757600080fd5b3661018b576000341161018957600080fd5b005b600080fd5b34801561019c57600080fd5b506101b06101ab3660046118b2565b610687565b6040519081526020015b60405180910390f35b3480156101cf57600080fd5b506101e36101de366004611908565b6106dd565b60405190151581526020016101ba565b3480156101ff57600080fd5b5061023a6040518060400160405280601b81526020017a45524337323120536861726520496e7374616e742053747265616d60281b81525081565b6040516101ba9190611932565b34801561025357600080fd5b5060016101e3565b34801561026757600080fd5b5061018961027636600461199e565b61071d565b34801561028757600080fd5b506067546102a290600160a01b90046001600160401b031681565b6040516001600160401b0390911681526020016101ba565b3480156102c657600080fd5b506101b06107dd565b3480156102db57600080fd5b506101896102ea3660046119b9565b6107ee565b3480156102fb57600080fd5b506101b0606a5481565b34801561031157600080fd5b506101b06103203660046118b2565b6107fc565b34801561033157600080fd5b506000805260696020527f5843af22e99e7c98370145a5056245c244ce8ee852f4ef5e6d6a8e410a18cf41546101b0565b34801561036e57600080fd5b5061038261037d3660046119d2565b61087a565b6040516101ba9190611a13565b34801561039b57600080fd5b5061023a60405180604001604052806003815260200162302e3160e81b81525081565b3480156103ca57600080fd5b506101b06103d93660046119b9565b606b6020526000908152604090205481565b3480156103f757600080fd5b5061042a610406366004611a57565b60686020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101ba565b34801561044b57600080fd5b5061018961045a366004611b5f565b610931565b34801561046b57600080fd5b5061018961047a3660046119d2565b6109db565b34801561048b57600080fd5b506101896109e8565b3480156104a057600080fd5b506101b06104af366004611c13565b610a23565b3480156104c057600080fd5b506101b06104cf3660046119d2565b610af6565b3480156104e057600080fd5b506104e9610b0b565b6040516101ba9190611c30565b34801561050257600080fd5b50610189610511366004611c44565b610b1a565b34801561052257600080fd5b506101b06105313660046119b9565b610c49565b34801561054257600080fd5b506101b0610551366004611a57565b60009182526068602090815260408084206001600160a01b0393909316845291905290205490565b34801561058557600080fd5b506101b0610594366004611c13565b6001600160a01b031660009081526069602052604090205490565b3480156105bb57600080fd5b506067546104e9906001600160a01b031681565b3480156105db57600080fd5b506101896105ea366004611a57565b610c56565b3480156105fb57600080fd5b5061018961060a366004611c13565b610edb565b34801561061b57600080fd5b5061018961062a366004611ca7565b610f78565b34801561063b57600080fd5b506101b061064a3660046119b9565b600090815260686020908152604080832083805290915290205490565b34801561067357600080fd5b506101b0610682366004611a57565b6112ca565b600080805b848110156106d4576106b68686838181106106a9576106a9611d0e565b90506020020135856112ca565b6106c09083611d3a565b9150806106cc81611d52565b91505061068c565b50949350505050565b60006301ffc9a760e01b6001600160e01b03198316148061071757506001600160e01b0319821660009081526001602052604090205460ff165b92915050565b33610726610b0b565b6001600160a01b0316146107555760405162461bcd60e51b815260040161074c90611d6d565b60405180910390fd5b6067546001600160401b03600160a01b9091048116908216116107b15760405162461bcd60e51b815260206004820152601460248201527314d5149150534bd0d0539393d517d49155d2539160621b604482015260640161074c565b606780546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b60006107e96000610a23565b905090565b6107f9816000610c56565b50565b600080805b848110156106d4576068600087878481811061081f5761081f611d0e565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826108669190611d3a565b91508061087281611d52565b915050610801565b60606000826001600160401b0381111561089657610896611a87565b6040519080825280602002602001820160405280156108bf578160200160208202803683370190505b50905060005b815181101561092957606b60008686848181106108e4576108e4611d0e565b9050602002013581526020019081526020016000205482828151811061090c5761090c611d0e565b60209081029190910101528061092181611d52565b9150506108c5565b509392505050565b600061093d600161132d565b90508015610955576000805461ff0019166101001790555b61095d6113c1565b6109656113e8565b61097782600001518360200151611417565b61097f611450565b61099182604001518360600151611487565b80156109d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6109d78282600033610f78565b336109f1610b0b565b6001600160a01b031614610a175760405162461bcd60e51b815260040161074c90611d6d565b610a2160006114c0565b565b60006001600160a01b038216610a57576001600160a01b038216600090815260696020526040902054610717904790611d3a565b6040516370a0823160e01b81526001600160a01b038316906370a0823190610a83903090600401611c30565b60206040518083038186803b158015610a9b57600080fd5b505afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190611da2565b6001600160a01b0383166000908152606960205260409020546107179190611d3a565b6000610b04838360006107fc565b9392505050565b6034546001600160a01b031690565b33610b23610b0b565b6001600160a01b031614610b495760405162461bcd60e51b815260040161074c90611d6d565b8151815114610b915760405162461bcd60e51b81526020600482015260146024820152730a6a8a48a829a5e82a48ea6be9a92a69a82a886960631b604482015260640161074c565b60675442600160a01b9091046001600160401b031610610bea5760405162461bcd60e51b815260206004820152601460248201527314d5149150534bd0d3d3919251d7d313d0d2d15160621b604482015260640161074c565b60005b8151811015610c4457610c32838281518110610c0b57610c0b611d0e565b6020026020010151838381518110610c2557610c25611d0e565b6020026020010151611512565b80610c3c81611d52565b915050610bed565b505050565b60006107178260006112ca565b60026066541415610c795760405162461bcd60e51b815260040161074c90611dbb565b60026066556067546040516331a9108f60e11b8152600481018490526000916001600160a01b031690636352211e9060240160206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb9190611df2565b90506000610d0984846112ca565b905060008111610d555760405162461bcd60e51b815260206004820152601760248201527653545245414d2f4e4f5448494e475f544f5f434c41494d60481b604482015260640161074c565b60008481526068602090815260408083206001600160a01b038716845290915281208054839290610d87908490611d3a565b909155505060008481526068602090815260408083206001600160a01b0387168452825280832042600190910155606990915281208054839290610dcc908490611d3a565b90915550506001600160a01b038316610df757610df26001600160a01b03831682611589565b610e79565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90610e259085908590600401611e0f565b602060405180830381600087803b158015610e3f57600080fd5b505af1158015610e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e779190611e28565b505b604080513381526001600160a01b038481166020830152818301879052851660608201526080810183905290517fa2d3c4c1fc934d6d2d8f9e862df90c01ae4eb0e920cd8957d242ba26b8dc40789181900360a00190a1505060016066555050565b33610ee4610b0b565b6001600160a01b031614610f0a5760405162461bcd60e51b815260040161074c90611d6d565b6001600160a01b038116610f6f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161074c565b6107f9816114c0565b60026066541415610f9b5760405162461bcd60e51b815260040161074c90611dbb565b60026066556000805b848110156111a757610fc1868683818110610c4457610c44611d0e565b6067546001600160a01b038085169116636352211e888885818110610fe857610fe8611d0e565b905060200201356040518263ffffffff1660e01b815260040161100d91815260200190565b60206040518083038186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d9190611df2565b6001600160a01b0316146110aa5760405162461bcd60e51b815260206004820152601460248201527329aa2922a0a697a727aa2fa7232a2fa7aba722a960611b604482015260640161074c565b60006110ce8787848181106110c1576110c1611d0e565b90506020020135866112ca565b905080156111945780606860008989868181106110ed576110ed611d0e565b9050602002013581526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060000160008282546111379190611d3a565b909155504290506068600089898681811061115457611154611d0e565b6020908102929092013583525081810192909252604090810160009081206001600160a01b038a1682529092529020600101556111918184611d3a565b92505b508061119f81611d52565b915050610fa4565b506001600160a01b038316600090815260696020526040812080548392906111d0908490611d3a565b90915550506001600160a01b0383166111fb576111f66001600160a01b03831682611589565b61127d565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906112299085908590600401611e0f565b602060405180830381600087803b15801561124357600080fd5b505af1158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b9190611e28565b505b7fd84a5c424a4f777bcf4f645712b8e5ebfc550f42bde444fa822fe98ee1b132b13383878787866040516112b696959493929190611e4a565b60405180910390a150506001606655505050565b6000806112e66112df6112dc85610a23565b90565b858561169f565b60008581526068602090815260408083206001600160a01b03881684529091529020549091506113169082611eae565b949350505050565b6001600160a01b03163b151590565b60008054610100900460ff161561137b578160ff16600114801561135757506113553061131e565b155b6113735760405162461bcd60e51b815260040161074c90611ec5565b506000919050565b60005460ff8084169116106113a25760405162461bcd60e51b815260040161074c90611ec5565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610a215760405162461bcd60e51b815260040161074c90611f13565b600054610100900460ff1661140f5760405162461bcd60e51b815260040161074c90611f13565b610a216116c8565b600054610100900460ff1661143e5760405162461bcd60e51b815260040161074c90611f13565b6114466113c1565b6109d782826116f8565b600054610100900460ff166114775760405162461bcd60e51b815260040161074c90611f13565b61147f6113c1565b610a2161175d565b600054610100900460ff166114ae5760405162461bcd60e51b815260040161074c90611f13565b6114b66113c1565b6109d78282611794565b603480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000828152606b60205260409020805490829055606a548190611536908490611d3a565b6115409190611eae565b606a5560408051848152602081018390529081018390527ff81b1f9d8b5d36a5a67d13006a8b091a9b63e2a38b331d315d99c6daefd2ddcc9060600160405180910390a1505050565b804710156115d95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161074c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611626576040519150601f19603f3d011682016040523d82523d6000602084013e61162b565b606091505b5050905080610c445760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606482015260840161074c565b606a546000838152606b60205260408120549091906116be9086611f5e565b6113169190611f7d565b600054610100900460ff166116ef5760405162461bcd60e51b815260040161074c90611f13565b610a21336114c0565b600054610100900460ff1661171f5760405162461bcd60e51b815260040161074c90611f13565b606780546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b038516171790556109d7631ba050e960e21b6117d1565b600054610100900460ff166117845760405162461bcd60e51b815260040161074c90611f13565b610a21631259990960e01b6117d1565b600054610100900460ff166117bb5760405162461bcd60e51b815260040161074c90611f13565b6117c58282610b1a565b6109d76333c7a33f60e11b5b6001600160e01b0319808216141561182a5760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b604482015260640161074c565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60008083601f84011261186457600080fd5b5081356001600160401b0381111561187b57600080fd5b6020830191508360208260051b850101111561189657600080fd5b9250929050565b6001600160a01b03811681146107f957600080fd5b6000806000604084860312156118c757600080fd5b83356001600160401b038111156118dd57600080fd5b6118e986828701611852565b90945092505060208401356118fd8161189d565b809150509250925092565b60006020828403121561191a57600080fd5b81356001600160e01b031981168114610b0457600080fd5b600060208083528351808285015260005b8181101561195f57858101830151858201604001528201611943565b81811115611971576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160401b03811681146113bc57600080fd5b6000602082840312156119b057600080fd5b610b0482611987565b6000602082840312156119cb57600080fd5b5035919050565b600080602083850312156119e557600080fd5b82356001600160401b038111156119fb57600080fd5b611a0785828601611852565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611a4b57835183529284019291840191600101611a2f565b50909695505050505050565b60008060408385031215611a6a57600080fd5b823591506020830135611a7c8161189d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715611abf57611abf611a87565b60405290565b600082601f830112611ad657600080fd5b813560206001600160401b0380831115611af257611af2611a87565b8260051b604051601f19603f83011681018181108482111715611b1757611b17611a87565b604052938452858101830193838101925087851115611b3557600080fd5b83870191505b84821015611b5457813583529183019190830190611b3b565b979650505050505050565b600060208284031215611b7157600080fd5b81356001600160401b0380821115611b8857600080fd5b9083019060808286031215611b9c57600080fd5b611ba4611a9d565b8235611baf8161189d565b8152611bbd60208401611987565b6020820152604083013582811115611bd457600080fd5b611be087828601611ac5565b604083015250606083013582811115611bf857600080fd5b611c0487828601611ac5565b60608301525095945050505050565b600060208284031215611c2557600080fd5b8135610b048161189d565b6001600160a01b0391909116815260200190565b60008060408385031215611c5757600080fd5b82356001600160401b0380821115611c6e57600080fd5b611c7a86838701611ac5565b93506020850135915080821115611c9057600080fd5b50611c9d85828601611ac5565b9150509250929050565b60008060008060608587031215611cbd57600080fd5b84356001600160401b03811115611cd357600080fd5b611cdf87828801611852565b9095509350506020850135611cf38161189d565b91506040850135611d038161189d565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611d4d57611d4d611d24565b500190565b6000600019821415611d6657611d66611d24565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611db457600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215611e0457600080fd5b8151610b048161189d565b6001600160a01b03929092168252602082015260400190565b600060208284031215611e3a57600080fd5b81518015158114610b0457600080fd5b6001600160a01b038781168252868116602083015260a06040830181905282018590526000906001600160fb1b03861115611e8457600080fd5b8560051b808860c0860137600090840160c001908152941660608301525060800152949350505050565b600082821015611ec057611ec0611d24565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615611f7857611f78611d24565b500290565b600082611f9a57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220f652808cb957f3a485f0e6606d43cdd3b7b8349fdc4410632476bdd48af8b87764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101775760003560e01c80630191c0af1461019057806301ffc9a7146101c357806306fdde03146101f357806312599909146102475780631c725fdc1461025b57806325289bad1461027b5780632890d033146102ba578063379607f5146102cf5780633a98ef39146102ef5780633b3f12e2146103055780633d2dded51461032557806340f379481461036257806354fd4d501461038f57806357a858fc146103be57806357dc48c8146103eb578063676e6c9b1461043f5780636ba4c1381461045f578063715018a61461047f578063790c0c731461049457806389c6b815146104b45780638da5cb5b146104d45780638fc852b1146104f6578063968d9b2c14610516578063a1cf649314610536578063a8b46d8714610247578063c088184914610579578063d5ed4d5a146105af578063ddd5e1b2146105cf578063f2fde38b146105ef578063f389b6e41461060f578063f4415ad61461062f578063f66e38c21461066757600080fd5b3661018b576000341161018957600080fd5b005b600080fd5b34801561019c57600080fd5b506101b06101ab3660046118b2565b610687565b6040519081526020015b60405180910390f35b3480156101cf57600080fd5b506101e36101de366004611908565b6106dd565b60405190151581526020016101ba565b3480156101ff57600080fd5b5061023a6040518060400160405280601b81526020017a45524337323120536861726520496e7374616e742053747265616d60281b81525081565b6040516101ba9190611932565b34801561025357600080fd5b5060016101e3565b34801561026757600080fd5b5061018961027636600461199e565b61071d565b34801561028757600080fd5b506067546102a290600160a01b90046001600160401b031681565b6040516001600160401b0390911681526020016101ba565b3480156102c657600080fd5b506101b06107dd565b3480156102db57600080fd5b506101896102ea3660046119b9565b6107ee565b3480156102fb57600080fd5b506101b0606a5481565b34801561031157600080fd5b506101b06103203660046118b2565b6107fc565b34801561033157600080fd5b506000805260696020527f5843af22e99e7c98370145a5056245c244ce8ee852f4ef5e6d6a8e410a18cf41546101b0565b34801561036e57600080fd5b5061038261037d3660046119d2565b61087a565b6040516101ba9190611a13565b34801561039b57600080fd5b5061023a60405180604001604052806003815260200162302e3160e81b81525081565b3480156103ca57600080fd5b506101b06103d93660046119b9565b606b6020526000908152604090205481565b3480156103f757600080fd5b5061042a610406366004611a57565b60686020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101ba565b34801561044b57600080fd5b5061018961045a366004611b5f565b610931565b34801561046b57600080fd5b5061018961047a3660046119d2565b6109db565b34801561048b57600080fd5b506101896109e8565b3480156104a057600080fd5b506101b06104af366004611c13565b610a23565b3480156104c057600080fd5b506101b06104cf3660046119d2565b610af6565b3480156104e057600080fd5b506104e9610b0b565b6040516101ba9190611c30565b34801561050257600080fd5b50610189610511366004611c44565b610b1a565b34801561052257600080fd5b506101b06105313660046119b9565b610c49565b34801561054257600080fd5b506101b0610551366004611a57565b60009182526068602090815260408084206001600160a01b0393909316845291905290205490565b34801561058557600080fd5b506101b0610594366004611c13565b6001600160a01b031660009081526069602052604090205490565b3480156105bb57600080fd5b506067546104e9906001600160a01b031681565b3480156105db57600080fd5b506101896105ea366004611a57565b610c56565b3480156105fb57600080fd5b5061018961060a366004611c13565b610edb565b34801561061b57600080fd5b5061018961062a366004611ca7565b610f78565b34801561063b57600080fd5b506101b061064a3660046119b9565b600090815260686020908152604080832083805290915290205490565b34801561067357600080fd5b506101b0610682366004611a57565b6112ca565b600080805b848110156106d4576106b68686838181106106a9576106a9611d0e565b90506020020135856112ca565b6106c09083611d3a565b9150806106cc81611d52565b91505061068c565b50949350505050565b60006301ffc9a760e01b6001600160e01b03198316148061071757506001600160e01b0319821660009081526001602052604090205460ff165b92915050565b33610726610b0b565b6001600160a01b0316146107555760405162461bcd60e51b815260040161074c90611d6d565b60405180910390fd5b6067546001600160401b03600160a01b9091048116908216116107b15760405162461bcd60e51b815260206004820152601460248201527314d5149150534bd0d0539393d517d49155d2539160621b604482015260640161074c565b606780546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b60006107e96000610a23565b905090565b6107f9816000610c56565b50565b600080805b848110156106d4576068600087878481811061081f5761081f611d0e565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826108669190611d3a565b91508061087281611d52565b915050610801565b60606000826001600160401b0381111561089657610896611a87565b6040519080825280602002602001820160405280156108bf578160200160208202803683370190505b50905060005b815181101561092957606b60008686848181106108e4576108e4611d0e565b9050602002013581526020019081526020016000205482828151811061090c5761090c611d0e565b60209081029190910101528061092181611d52565b9150506108c5565b509392505050565b600061093d600161132d565b90508015610955576000805461ff0019166101001790555b61095d6113c1565b6109656113e8565b61097782600001518360200151611417565b61097f611450565b61099182604001518360600151611487565b80156109d7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6109d78282600033610f78565b336109f1610b0b565b6001600160a01b031614610a175760405162461bcd60e51b815260040161074c90611d6d565b610a2160006114c0565b565b60006001600160a01b038216610a57576001600160a01b038216600090815260696020526040902054610717904790611d3a565b6040516370a0823160e01b81526001600160a01b038316906370a0823190610a83903090600401611c30565b60206040518083038186803b158015610a9b57600080fd5b505afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190611da2565b6001600160a01b0383166000908152606960205260409020546107179190611d3a565b6000610b04838360006107fc565b9392505050565b6034546001600160a01b031690565b33610b23610b0b565b6001600160a01b031614610b495760405162461bcd60e51b815260040161074c90611d6d565b8151815114610b915760405162461bcd60e51b81526020600482015260146024820152730a6a8a48a829a5e82a48ea6be9a92a69a82a886960631b604482015260640161074c565b60675442600160a01b9091046001600160401b031610610bea5760405162461bcd60e51b815260206004820152601460248201527314d5149150534bd0d3d3919251d7d313d0d2d15160621b604482015260640161074c565b60005b8151811015610c4457610c32838281518110610c0b57610c0b611d0e565b6020026020010151838381518110610c2557610c25611d0e565b6020026020010151611512565b80610c3c81611d52565b915050610bed565b505050565b60006107178260006112ca565b60026066541415610c795760405162461bcd60e51b815260040161074c90611dbb565b60026066556067546040516331a9108f60e11b8152600481018490526000916001600160a01b031690636352211e9060240160206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb9190611df2565b90506000610d0984846112ca565b905060008111610d555760405162461bcd60e51b815260206004820152601760248201527653545245414d2f4e4f5448494e475f544f5f434c41494d60481b604482015260640161074c565b60008481526068602090815260408083206001600160a01b038716845290915281208054839290610d87908490611d3a565b909155505060008481526068602090815260408083206001600160a01b0387168452825280832042600190910155606990915281208054839290610dcc908490611d3a565b90915550506001600160a01b038316610df757610df26001600160a01b03831682611589565b610e79565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90610e259085908590600401611e0f565b602060405180830381600087803b158015610e3f57600080fd5b505af1158015610e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e779190611e28565b505b604080513381526001600160a01b038481166020830152818301879052851660608201526080810183905290517fa2d3c4c1fc934d6d2d8f9e862df90c01ae4eb0e920cd8957d242ba26b8dc40789181900360a00190a1505060016066555050565b33610ee4610b0b565b6001600160a01b031614610f0a5760405162461bcd60e51b815260040161074c90611d6d565b6001600160a01b038116610f6f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161074c565b6107f9816114c0565b60026066541415610f9b5760405162461bcd60e51b815260040161074c90611dbb565b60026066556000805b848110156111a757610fc1868683818110610c4457610c44611d0e565b6067546001600160a01b038085169116636352211e888885818110610fe857610fe8611d0e565b905060200201356040518263ffffffff1660e01b815260040161100d91815260200190565b60206040518083038186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d9190611df2565b6001600160a01b0316146110aa5760405162461bcd60e51b815260206004820152601460248201527329aa2922a0a697a727aa2fa7232a2fa7aba722a960611b604482015260640161074c565b60006110ce8787848181106110c1576110c1611d0e565b90506020020135866112ca565b905080156111945780606860008989868181106110ed576110ed611d0e565b9050602002013581526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060000160008282546111379190611d3a565b909155504290506068600089898681811061115457611154611d0e565b6020908102929092013583525081810192909252604090810160009081206001600160a01b038a1682529092529020600101556111918184611d3a565b92505b508061119f81611d52565b915050610fa4565b506001600160a01b038316600090815260696020526040812080548392906111d0908490611d3a565b90915550506001600160a01b0383166111fb576111f66001600160a01b03831682611589565b61127d565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906112299085908590600401611e0f565b602060405180830381600087803b15801561124357600080fd5b505af1158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b9190611e28565b505b7fd84a5c424a4f777bcf4f645712b8e5ebfc550f42bde444fa822fe98ee1b132b13383878787866040516112b696959493929190611e4a565b60405180910390a150506001606655505050565b6000806112e66112df6112dc85610a23565b90565b858561169f565b60008581526068602090815260408083206001600160a01b03881684529091529020549091506113169082611eae565b949350505050565b6001600160a01b03163b151590565b60008054610100900460ff161561137b578160ff16600114801561135757506113553061131e565b155b6113735760405162461bcd60e51b815260040161074c90611ec5565b506000919050565b60005460ff8084169116106113a25760405162461bcd60e51b815260040161074c90611ec5565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610a215760405162461bcd60e51b815260040161074c90611f13565b600054610100900460ff1661140f5760405162461bcd60e51b815260040161074c90611f13565b610a216116c8565b600054610100900460ff1661143e5760405162461bcd60e51b815260040161074c90611f13565b6114466113c1565b6109d782826116f8565b600054610100900460ff166114775760405162461bcd60e51b815260040161074c90611f13565b61147f6113c1565b610a2161175d565b600054610100900460ff166114ae5760405162461bcd60e51b815260040161074c90611f13565b6114b66113c1565b6109d78282611794565b603480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000828152606b60205260409020805490829055606a548190611536908490611d3a565b6115409190611eae565b606a5560408051848152602081018390529081018390527ff81b1f9d8b5d36a5a67d13006a8b091a9b63e2a38b331d315d99c6daefd2ddcc9060600160405180910390a1505050565b804710156115d95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161074c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611626576040519150601f19603f3d011682016040523d82523d6000602084013e61162b565b606091505b5050905080610c445760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606482015260840161074c565b606a546000838152606b60205260408120549091906116be9086611f5e565b6113169190611f7d565b600054610100900460ff166116ef5760405162461bcd60e51b815260040161074c90611f13565b610a21336114c0565b600054610100900460ff1661171f5760405162461bcd60e51b815260040161074c90611f13565b606780546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b038516171790556109d7631ba050e960e21b6117d1565b600054610100900460ff166117845760405162461bcd60e51b815260040161074c90611f13565b610a21631259990960e01b6117d1565b600054610100900460ff166117bb5760405162461bcd60e51b815260040161074c90611f13565b6117c58282610b1a565b6109d76333c7a33f60e11b5b6001600160e01b0319808216141561182a5760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b604482015260640161074c565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60008083601f84011261186457600080fd5b5081356001600160401b0381111561187b57600080fd5b6020830191508360208260051b850101111561189657600080fd5b9250929050565b6001600160a01b03811681146107f957600080fd5b6000806000604084860312156118c757600080fd5b83356001600160401b038111156118dd57600080fd5b6118e986828701611852565b90945092505060208401356118fd8161189d565b809150509250925092565b60006020828403121561191a57600080fd5b81356001600160e01b031981168114610b0457600080fd5b600060208083528351808285015260005b8181101561195f57858101830151858201604001528201611943565b81811115611971576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160401b03811681146113bc57600080fd5b6000602082840312156119b057600080fd5b610b0482611987565b6000602082840312156119cb57600080fd5b5035919050565b600080602083850312156119e557600080fd5b82356001600160401b038111156119fb57600080fd5b611a0785828601611852565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611a4b57835183529284019291840191600101611a2f565b50909695505050505050565b60008060408385031215611a6a57600080fd5b823591506020830135611a7c8161189d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715611abf57611abf611a87565b60405290565b600082601f830112611ad657600080fd5b813560206001600160401b0380831115611af257611af2611a87565b8260051b604051601f19603f83011681018181108482111715611b1757611b17611a87565b604052938452858101830193838101925087851115611b3557600080fd5b83870191505b84821015611b5457813583529183019190830190611b3b565b979650505050505050565b600060208284031215611b7157600080fd5b81356001600160401b0380821115611b8857600080fd5b9083019060808286031215611b9c57600080fd5b611ba4611a9d565b8235611baf8161189d565b8152611bbd60208401611987565b6020820152604083013582811115611bd457600080fd5b611be087828601611ac5565b604083015250606083013582811115611bf857600080fd5b611c0487828601611ac5565b60608301525095945050505050565b600060208284031215611c2557600080fd5b8135610b048161189d565b6001600160a01b0391909116815260200190565b60008060408385031215611c5757600080fd5b82356001600160401b0380821115611c6e57600080fd5b611c7a86838701611ac5565b93506020850135915080821115611c9057600080fd5b50611c9d85828601611ac5565b9150509250929050565b60008060008060608587031215611cbd57600080fd5b84356001600160401b03811115611cd357600080fd5b611cdf87828801611852565b9095509350506020850135611cf38161189d565b91506040850135611d038161189d565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611d4d57611d4d611d24565b500190565b6000600019821415611d6657611d66611d24565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611db457600080fd5b5051919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215611e0457600080fd5b8151610b048161189d565b6001600160a01b03929092168252602082015260400190565b600060208284031215611e3a57600080fd5b81518015158114610b0457600080fd5b6001600160a01b038781168252868116602083015260a06040830181905282018590526000906001600160fb1b03861115611e8457600080fd5b8560051b808860c0860137600090840160c001908152941660608301525060800152949350505050565b600082821015611ec057611ec0611d24565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000816000190483118215151615611f7857611f78611d24565b500290565b600082611f9a57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220f652808cb957f3a485f0e6606d43cdd3b7b8349fdc4410632476bdd48af8b87764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 512,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 515,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5244,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 931,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 392,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "_owner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 504,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1675,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "_status",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 10184,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "ticketToken",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 10186,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "lockedUntilTimestamp",
        "offset": 20,
        "slot": "103",
        "type": "t_uint64"
      },
      {
        "astId": 10193,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "entitlements",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)10182_storage))"
      },
      {
        "astId": 10197,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "_streamTotalClaimed",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11440,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "totalShares",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 11444,
        "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
        "label": "shares",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Entitlement)10182_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721MultiTokenStream.Entitlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Entitlement)10182_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)10182_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ERC721MultiTokenStream.Entitlement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Entitlement)10182_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Entitlement)10182_storage": {
        "encoding": "inplace",
        "label": "struct ERC721MultiTokenStream.Entitlement",
        "members": [
          {
            "astId": 10179,
            "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10181,
            "contract": "contracts/streams/ERC721/presets/ERC721ShareInstantStream.sol:ERC721ShareInstantStream",
            "label": "lastClaimedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}