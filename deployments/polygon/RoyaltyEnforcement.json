{
  "address": "0x70391b81B8A39ddd515a0603eCC3DE306f62d09D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "hasRoyaltyEnforcement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ec9b08b3a36acf26b45ceb0393b0c5a1ba0afb72f8124eb556f98d3b516d607",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x70391b81B8A39ddd515a0603eCC3DE306f62d09D",
    "transactionIndex": 4,
    "gasUsed": "91035",
    "logsBloom": "0x
    "blockHash": "0x63f8daf4fcffe871518d60bb4dcaa8ff92f31be86ecb914e935ba31c938d6e6b",
    "transactionHash": "0x0ec9b08b3a36acf26b45ceb0393b0c5a1ba0afb72f8124eb556f98d3b516d607",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 36136918,
        "transactionHash": "0x0ec9b08b3a36acf26b45ceb0393b0c5a1ba0afb72f8124eb556f98d3b516d607",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001a9717f010e74e0000000000000000000000000000000000000000000000009ecf7b7f0c6e26e600000000000000000000000000000000000000000000004f911681668de15a0c0000000000000000000000000000000000000000000000009eb4e4671c5d3f9800000000000000000000000000000000000000000000004f9131187e7df2415a",
        "logIndex": 15,
        "blockHash": "0x63f8daf4fcffe871518d60bb4dcaa8ff92f31be86ecb914e935ba31c938d6e6b"
      }
    ],
    "blockNumber": 36136918,
    "cumulativeGasUsed": "1088994",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "399fdf9dc926494bd12f97fc92b335ef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"hasRoyaltyEnforcement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Tokens\",\"custom:provides-interfaces\":\"IRoyaltyEnforcement\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Royalty Enforcement\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Shows current state of on-chain royalties enforcement on blocklisting marketplaces.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/finance/royalty/RoyaltyEnforcement.sol\":\"RoyaltyEnforcement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"operator-filter-registry/src/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba\",\"license\":\"MIT\"},\"src/finance/royalty/IRoyaltyEnforcement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Shows if royalties are enforced by blocklisting marketplaces with optional royalty.\\n * @dev Derived from 'operator-filter-registry' NPM repository by OpenSea.\\n */\\ninterface IRoyaltyEnforcement {\\n    function hasRoyaltyEnforcement() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x10f58ff847f53fafb54fd7b6f30d7fef518e7fadef864881ba5f17ae259de37d\",\"license\":\"MIT\"},\"src/finance/royalty/IRoyaltyEnforcementInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Manages where on-chain royalties must be enforced by blocklisting marketplaces with optional royalty.\\n * @dev Derived from 'operator-filter-registry' NPM repository by OpenSea.\\n */\\ninterface IRoyaltyEnforcementInternal {\\n    error OperatorNotAllowed(address operator);\\n}\\n\",\"keccak256\":\"0x836183f44a4c4da24ef14bd40ed25d9da2dd7d2bbe167942c0de5bba53c6aa64\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyEnforcement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./RoyaltyEnforcementInternal.sol\\\";\\nimport \\\"./RoyaltyEnforcementStorage.sol\\\";\\nimport \\\"./IRoyaltyEnforcement.sol\\\";\\n\\n/**\\n * @title Royalty Enforcement\\n * @notice Shows current state of on-chain royalties enforcement on blocklisting marketplaces.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Tokens\\n * @custom:provides-interfaces IRoyaltyEnforcement\\n */\\ncontract RoyaltyEnforcement is IRoyaltyEnforcement, RoyaltyEnforcementInternal {\\n    function hasRoyaltyEnforcement() external view override returns (bool) {\\n        return _hasRoyaltyEnforcement();\\n    }\\n}\\n\",\"keccak256\":\"0x66e58f90f52ad384783e395eca4ce03210b8f4e9bc20a58b90cdaf4803b9db21\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyEnforcementInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"operator-filter-registry/src/IOperatorFilterRegistry.sol\\\";\\n\\nimport \\\"./IRoyaltyEnforcementInternal.sol\\\";\\nimport \\\"./RoyaltyEnforcementStorage.sol\\\";\\n\\n/**\\n * @dev Manages and shows if royalties are enforced by blocklisting marketplaces with optional royalty.\\n * @dev Derived from 'operator-filter-registry' NPM repository by OpenSea.\\n */\\nabstract contract RoyaltyEnforcementInternal is IRoyaltyEnforcementInternal {\\n    // address private constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    IOperatorFilterRegistry private constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    function _hasRoyaltyEnforcement() internal view virtual returns (bool) {\\n        return RoyaltyEnforcementStorage.layout().enforceRoyalties;\\n    }\\n\\n    function _toggleRoyaltyEnforcement(bool enforce) internal virtual {\\n        RoyaltyEnforcementStorage.layout().enforceRoyalties = enforce;\\n    }\\n\\n    function _register(address subscriptionOrRegistrantToCopy, bool subscribe) internal virtual {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        OPERATOR_FILTER_REGISTRY.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), msg.sender)) {\\n                revert OperatorNotAllowed(msg.sender);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3b75d98d206bedcf79ecbe57004384f3580d79193627da968c970b73923bdc98\",\"license\":\"MIT\"},\"src/finance/royalty/RoyaltyEnforcementStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary RoyaltyEnforcementStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.RoyaltyEnforcement\\\");\\n\\n    struct Layout {\\n        bool enforceRoyalties;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae08fcf816a425c667b25c3a0f37b3a39c7584a857bdbce3912a12ae86e7bb99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060ae8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ffa6b6b814602d575b600080fd5b60336047565b604051901515815260200160405180910390f35b600060737f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb2197905460ff1690565b90509056fea264697066735822122007ac6783a6445673f2cd18a3aa23694a8ec1e223dd88662bbf153a8b3baa1d2764736f6c634300080f0033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063ffa6b6b814602d575b600080fd5b60336047565b604051901515815260200160405180910390f35b600060737f9c1f08fc16fa10f59a3ac18a8c5596ea456f2d66793744df41c7c3e4eb2197905460ff1690565b90509056fea264697066735822122007ac6783a6445673f2cd18a3aa23694a8ec1e223dd88662bbf153a8b3baa1d2764736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Tokens",
    "custom:provides-interfaces": "IRoyaltyEnforcement",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "Royalty Enforcement",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Shows current state of on-chain royalties enforcement on blocklisting marketplaces.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}