{
  "address": "0x4FA397DFF5529909713bC7a45fd4fC598F30c599",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockedUntilTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "minStakingDuration",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "maxStakingTotalDurations",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "emissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "emissionTimeUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionEnd",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "totalTickets",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "claimLockedUntil",
              "type": "uint64"
            }
          ],
          "internalType": "struct ERC721LockedStakingEmissionStream.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimMany",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EmergencyPowerRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "claimTokens",
          "type": "address[]"
        }
      ],
      "name": "EmergencyWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLockedUntil",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPowerRevoked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "claimTokens",
          "type": "address[]"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "calcUntil",
          "type": "uint64"
        }
      ],
      "name": "emissionAmountUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionEnd",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionStart",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionTimeUnit",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "entitlements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721EmissionReleaseExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721EqualSplitExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721LockableClaimExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721LockedStakingExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasERC721StakingExtension",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ticketToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockedUntilTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "minStakingDuration",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "maxStakingTotalDurations",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "emissionRate",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "emissionTimeUnit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionStart",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "emissionEnd",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "totalTickets",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "claimLockedUntil",
              "type": "uint64"
            }
          ],
          "internalType": "struct ERC721LockedStakingEmissionStream.Config",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastStakingTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "lockUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedUntilTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakingTotalDurations",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakingDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "calcUntil",
          "type": "uint64"
        }
      ],
      "name": "releasedAmountUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeEmergencyPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "rewardAmountByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "rewardAmountByToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "savedStakedDurations",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setClaimLockedUntil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setEmissionTimeUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setMaxStakingTotalDurations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setMinStakingDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setTotalTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "streamTotalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        }
      ],
      "name": "streamTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "totalStakedDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "totalStakedDuration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ticketTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unlockingTime",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketTokenId",
          "type": "uint256"
        }
      ],
      "name": "unlockingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x482bafc5ea2ae06d896886123d9ed4e5193891e0a62b1a9b909f2ef4b10a949a",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x4FA397DFF5529909713bC7a45fd4fC598F30c599",
    "transactionIndex": 57,
    "gasUsed": "3372666",
    "logsBloom": "0x
    "blockHash": "0x7c703bbe0cfebd23644d4c361353d1291f4b0f2773a20e349fb0e36caf3c6258",
    "transactionHash": "0x482bafc5ea2ae06d896886123d9ed4e5193891e0a62b1a9b909f2ef4b10a949a",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 30949498,
        "transactionHash": "0x482bafc5ea2ae06d896886123d9ed4e5193891e0a62b1a9b909f2ef4b10a949a",
        "address": "0x4FA397DFF5529909713bC7a45fd4fC598F30c599",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 202,
        "blockHash": "0x7c703bbe0cfebd23644d4c361353d1291f4b0f2773a20e349fb0e36caf3c6258"
      },
      {
        "transactionIndex": 57,
        "blockNumber": 30949498,
        "transactionHash": "0x482bafc5ea2ae06d896886123d9ed4e5193891e0a62b1a9b909f2ef4b10a949a",
        "address": "0x4FA397DFF5529909713bC7a45fd4fC598F30c599",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 203,
        "blockHash": "0x7c703bbe0cfebd23644d4c361353d1291f4b0f2773a20e349fb0e36caf3c6258"
      },
      {
        "transactionIndex": 57,
        "blockNumber": 30949498,
        "transactionHash": "0x482bafc5ea2ae06d896886123d9ed4e5193891e0a62b1a9b909f2ef4b10a949a",
        "address": "0x4FA397DFF5529909713bC7a45fd4fC598F30c599",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 204,
        "blockHash": "0x7c703bbe0cfebd23644d4c361353d1291f4b0f2773a20e349fb0e36caf3c6258"
      },
      {
        "transactionIndex": 57,
        "blockNumber": 30949498,
        "transactionHash": "0x482bafc5ea2ae06d896886123d9ed4e5193891e0a62b1a9b909f2ef4b10a949a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x00000000000000000000000040314efbc35bc0db441969bce451bf0167efded1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003777738ba8b17b4000000000000000000000000000000000000000000000000b1e2e8a292b962650000000000000000000000000000000000000000000005d2ef5675eab9769af7000000000000000000000000000000000000000000000000ae6b7169d82e4ab10000000000000000000000000000000000000000000005d2f2cded237401b2ab",
        "logIndex": 205,
        "blockHash": "0x7c703bbe0cfebd23644d4c361353d1291f4b0f2773a20e349fb0e36caf3c6258"
      }
    ],
    "blockNumber": 30949498,
    "cumulativeGasUsed": "14345040",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "ticketToken": "0x0000000000000000000000000000000000000000",
      "lockedUntilTimestamp": 0,
      "minStakingDuration": 0,
      "maxStakingTotalDurations": 0,
      "emissionRate": 0,
      "emissionTimeUnit": 0,
      "emissionStart": 0,
      "emissionEnd": 0,
      "totalTickets": 0,
      "claimLockedUntil": 0
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "6776f3fa3702d11593abc2583d662c65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minStakingDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxStakingTotalDurations\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"emissionTimeUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimLockedUntil\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721LockedStakingEmissionStream.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimMany\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyPowerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"claimTokens\",\"type\":\"address[]\"}],\"name\":\"EmergencyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLockedUntil\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPowerRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"claimTokens\",\"type\":\"address[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"calcUntil\",\"type\":\"uint64\"}],\"name\":\"emissionAmountUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionEnd\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionStart\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionTimeUnit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entitlements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721EmissionReleaseExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721EqualSplitExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721LockableClaimExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721LockedStakingExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasERC721StakingExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ticketToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntilTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minStakingDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxStakingTotalDurations\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"emissionTimeUnit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"emissionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimLockedUntil\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721LockedStakingEmissionStream.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastStakingTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"lockUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedUntilTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakingTotalDurations\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"calcUntil\",\"type\":\"uint64\"}],\"name\":\"releasedAmountUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeEmergencyPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"rewardAmountByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"rewardAmountByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"savedStakedDurations\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setClaimLockedUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setEmissionTimeUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setMaxStakingTotalDurations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setMinStakingDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTotalTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"streamTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"}],\"name\":\"streamTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"totalStakedDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"totalStakedDuration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unlockingTime\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketTokenId\",\"type\":\"uint256\"}],\"name\":\"unlockingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Flair (https://flair.finance)\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol\":\"ERC721LockedStakingEmissionStream\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165Storage is ERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x77bf0086774bab931413c3388d3a0f7d44cf6878965b72147f57bb0fbbf394bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d14e1780f0ea212b19c07b83c8e51b9dc6903017df71e6de1fae364d724e0d\",\"license\":\"MIT\"},\"contracts/collections/ERC721/extensions/ERC721AutoIdMinterExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"./ERC721CollectionMetadataExtension.sol\\\";\\n\\ninterface IERC721AutoIdMinterExtension {\\n    function setMaxSupply(uint256 newValue) external;\\n\\n    function freezeMaxSupply() external;\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension to add minting capability with an auto incremented ID for each token and a maximum supply setting.\\n */\\nabstract contract ERC721AutoIdMinterExtension is\\n    IERC721AutoIdMinterExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    ERC721,\\n    ERC721CollectionMetadataExtension\\n{\\n    using SafeMath for uint256;\\n\\n    uint256 public maxSupply;\\n    bool public maxSupplyFrozen;\\n\\n    uint256 internal _currentTokenId = 0;\\n\\n    function __ERC721AutoIdMinterExtension_init(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721AutoIdMinterExtension_init_unchained(_maxSupply);\\n    }\\n\\n    function __ERC721AutoIdMinterExtension_init_unchained(uint256 _maxSupply)\\n        internal\\n        onlyInitializing\\n    {\\n        maxSupply = _maxSupply;\\n\\n        _registerInterface(type(IERC721AutoIdMinterExtension).interfaceId);\\n        _registerInterface(type(IERC721).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMaxSupply(uint256 newValue) external onlyOwner {\\n        require(!maxSupplyFrozen, \\\"BASE_URI_FROZEN\\\");\\n        maxSupply = newValue;\\n    }\\n\\n    function freezeMaxSupply() external onlyOwner {\\n        maxSupplyFrozen = true;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name()\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.name();\\n    }\\n\\n    function symbol()\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721CollectionMetadataExtension)\\n        returns (string memory)\\n    {\\n        return ERC721CollectionMetadataExtension.symbol();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721, ERC721CollectionMetadataExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _currentTokenId;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _mintTo(address to, uint256 count) internal {\\n        require(totalSupply() + count <= maxSupply, \\\"EXCEEDS_MAX_SUPPLY\\\");\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 newTokenId = _currentTokenId;\\n            _safeMint(to, newTokenId);\\n            _incrementTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Increments the value of _currentTokenId\\n     */\\n    function _incrementTokenId() internal {\\n        _currentTokenId++;\\n    }\\n}\\n\",\"keccak256\":\"0x8213ae7b55faaf9c09a5c1a23b306e264fae49dbd7a6b60ba52168d61acf1705\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721CollectionMetadataExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\ninterface IERC721CollectionMetadataExtension {\\n    function setContractURI(string memory newValue) external;\\n\\n    function contractURI() external view returns (string memory);\\n}\\n\\n/**\\n * @dev Extension to allow configuring contract-level collection metadata URI.\\n */\\nabstract contract ERC721CollectionMetadataExtension is\\n    IERC721CollectionMetadataExtension,\\n    Initializable,\\n    Ownable,\\n    ERC165Storage,\\n    IERC721Metadata\\n{\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    string private _contractURI;\\n\\n    function __ERC721CollectionMetadataExtension_init(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        __ERC721CollectionMetadataExtension_init_unchained(\\n            name_,\\n            symbol_,\\n            contractURI_\\n        );\\n    }\\n\\n    function __ERC721CollectionMetadataExtension_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _contractURI = contractURI_;\\n\\n        _registerInterface(\\n            type(IERC721CollectionMetadataExtension).interfaceId\\n        );\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setContractURI(string memory newValue) external onlyOwner {\\n        _contractURI = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, IERC165)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n}\\n\",\"keccak256\":\"0xa7eabdf899e9deda65348af07b1ddf9d6f4436d43872d014105ea463477e387b\",\"license\":\"AGPL-3.0\"},\"contracts/collections/ERC721/extensions/ERC721LockableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ERC721AutoIdMinterExtension.sol\\\";\\n\\ninterface IERC721LockableExtension {\\n    function locked(uint256 tokenId) external view returns (bool);\\n\\n    function lock(uint256 tokenId) external;\\n\\n    function lock(uint256[] calldata tokenIds) external;\\n\\n    function unlock(uint256 tokenId) external;\\n\\n    function unlock(uint256[] calldata tokenIds) external;\\n}\\n\\n/**\\n * @dev Extension to allow locking NFTs, for use-cases like staking, without leaving holders wallet.\\n */\\nabstract contract ERC721LockableExtension is\\n    IERC721LockableExtension,\\n    Initializable,\\n    ERC165Storage,\\n    ERC721AutoIdMinterExtension,\\n    ReentrancyGuard\\n{\\n    using BitMaps for BitMaps.BitMap;\\n\\n    BitMaps.BitMap internal lockedTokens;\\n\\n    function __ERC721LockableExtension_init() internal onlyInitializing {\\n        __ERC721LockableExtension_init_unchained();\\n    }\\n\\n    function __ERC721LockableExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721LockableExtension).interfaceId);\\n    }\\n\\n    // PUBLIC\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Storage, ERC721AutoIdMinterExtension)\\n        returns (bool)\\n    {\\n        return ERC165Storage.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Returns if a token is locked or not.\\n     */\\n    function locked(uint256 tokenId) public view virtual returns (bool) {\\n        return lockedTokens.get(tokenId);\\n    }\\n\\n    function filterUnlocked(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory unlocked = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            if (!locked(ticketTokenIds[i])) {\\n                unlocked[i] = ticketTokenIds[i];\\n            }\\n        }\\n\\n        return unlocked;\\n    }\\n\\n    /* INTERNAL */\\n\\n    /**\\n     * At this moment staking is only possible from a certain address (usually a smart contract).\\n     *\\n     * This is because in almost all cases you want another contract to perform custom logic on lock and unlock operations,\\n     * without allowing users to directly unlock their tokens and sell them, for example.\\n     */\\n    function _lock(uint256 tokenId) internal virtual {\\n        require(!lockedTokens.get(tokenId), \\\"ERC721/ALREADY_LOCKED\\\");\\n        lockedTokens.set(tokenId);\\n    }\\n\\n    function _unlock(uint256 tokenId) internal virtual {\\n        require(lockedTokens.get(tokenId), \\\"ERC721/NOT_LOCKED\\\");\\n        lockedTokens.unset(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721) {\\n        require(!lockedTokens.get(tokenId), \\\"ERC721/TOKEN_LOCKED\\\");\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x948ea3da9de14fb619d6e3b5eafe3ea311079b60f2746296feadf58df955e13b\",\"license\":\"AGPL-3.0\"},\"contracts/common/EmergencyOwnerWithdrawExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IEmergencyOwnerWithdrawExtension {\\n    function emergencyWithdraw(address[] calldata claimTokens) external;\\n\\n    function revokeEmergencyPower() external;\\n}\\n\\nabstract contract EmergencyOwnerWithdrawExtension is\\n    IEmergencyOwnerWithdrawExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    event EmergencyPowerRevoked();\\n    event EmergencyWithdrawn(address[] claimTokens);\\n\\n    bool public emergencyPowerRevoked;\\n\\n    /* INTERNAL */\\n\\n    function __EmergencyOwnerWithdrawExtension_init()\\n        internal\\n        onlyInitializing\\n    {\\n        __EmergencyOwnerWithdrawExtension_init_unchained();\\n    }\\n\\n    function __EmergencyOwnerWithdrawExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IEmergencyOwnerWithdrawExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function emergencyWithdraw(address[] calldata claimTokens)\\n        public\\n        onlyOwner\\n    {\\n        require(!emergencyPowerRevoked, \\\"EMERGENCY_POWER_REVOKED\\\");\\n\\n        address _owner = owner();\\n\\n        for (uint256 i = 0; i < claimTokens.length; i++) {\\n            if (claimTokens[i] == address(0)) {\\n                payable(_owner).sendValue(address(this).balance);\\n            } else {\\n                IERC20(claimTokens[i]).transfer(\\n                    _owner,\\n                    IERC20(claimTokens[i]).balanceOf(address(this))\\n                );\\n            }\\n        }\\n    }\\n\\n    function revokeEmergencyPower() public onlyOwner {\\n        emergencyPowerRevoked = true;\\n        emit EmergencyPowerRevoked();\\n    }\\n}\\n\",\"keccak256\":\"0x1979325bfede1650d40cbde5a3434f9907281d490abe9f7a7c4c05c3dbf81554\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/base/ERC721MultiTokenStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721MultiTokenStream {\\n    // Claim native currency for a single ticket token\\n    function claim(uint256 ticketTokenId) external;\\n\\n    // Claim an erc20 claim token for a single ticket token\\n    function claim(uint256 ticketTokenId, address claimToken) external;\\n\\n    // Claim native currency for multiple ticket tokens (only if all owned by sender)\\n    function claim(uint256[] calldata ticketTokenIds) external;\\n\\n    // Claim native or erc20 tokens for multiple ticket tokens (only if all owned by `owner`)\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address owner\\n    ) external;\\n\\n    // Total native currency ever supplied to this stream\\n    function streamTotalSupply() external view returns (uint256);\\n\\n    // Total erc20 token ever supplied to this stream by claim token address\\n    function streamTotalSupply(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed from this stream\\n    function streamTotalClaimed() external view returns (uint256);\\n\\n    // Total erc20 token ever claimed from this stream by claim token address\\n    function streamTotalClaimed(address claimToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for a single ticket token\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total native currency ever claimed for multiple token IDs\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Total erc20 token ever claimed for multiple token IDs\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) external view returns (uint256);\\n\\n    // Calculate currently claimable amount for a specific ticket token ID and a specific claim token address\\n    // Pass 0x0000000000000000000000000000000000000000 as claim token to represent native currency\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        external\\n        view\\n        returns (uint256 claimableAmount);\\n}\\n\\nabstract contract ERC721MultiTokenStream is\\n    IERC721MultiTokenStream,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ReentrancyGuard\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    struct Entitlement {\\n        uint256 totalClaimed;\\n        uint256 lastClaimedAt;\\n    }\\n\\n    // Config\\n    address public ticketToken;\\n\\n    // Locks changing the config until this timestamp is reached\\n    uint64 public lockedUntilTimestamp;\\n\\n    // Map of ticket token ID -> claim token address -> entitlement\\n    mapping(uint256 => mapping(address => Entitlement)) public entitlements;\\n\\n    // Map of claim token address -> Total amount claimed by all holders\\n    mapping(address => uint256) internal _streamTotalClaimed;\\n\\n    /* EVENTS */\\n\\n    event Claim(\\n        address operator,\\n        address beneficiary,\\n        uint256 ticketTokenId,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    event ClaimMany(\\n        address operator,\\n        address beneficiary,\\n        uint256[] ticketTokenIds,\\n        address claimToken,\\n        uint256 releasedAmount\\n    );\\n\\n    function __ERC721MultiTokenStream_init(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        __ERC721MultiTokenStream_init_unchained(\\n            _ticketToken,\\n            _lockedUntilTimestamp\\n        );\\n    }\\n\\n    function __ERC721MultiTokenStream_init_unchained(\\n        address _ticketToken,\\n        uint64 _lockedUntilTimestamp\\n    ) internal onlyInitializing {\\n        ticketToken = _ticketToken;\\n        lockedUntilTimestamp = _lockedUntilTimestamp;\\n\\n        _registerInterface(type(IERC721MultiTokenStream).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function lockUntil(uint64 newValue) public onlyOwner {\\n        require(newValue > lockedUntilTimestamp, \\\"STREAM/CANNOT_REWIND\\\");\\n        lockedUntilTimestamp = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    receive() external payable {\\n        require(msg.value > 0);\\n    }\\n\\n    function claim(uint256 ticketTokenId) public {\\n        claim(ticketTokenId, address(0));\\n    }\\n\\n    function claim(uint256 ticketTokenId, address claimToken)\\n        public\\n        nonReentrant\\n    {\\n        /* CHECKS */\\n        address owner = IERC721(ticketToken).ownerOf(ticketTokenId);\\n\\n        _beforeClaim(ticketTokenId, claimToken, owner);\\n\\n        uint256 claimable = streamClaimableAmount(ticketTokenId, claimToken);\\n        require(claimable > 0, \\\"STREAM/NOTHING_TO_CLAIM\\\");\\n\\n        /* EFFECTS */\\n\\n        entitlements[ticketTokenId][claimToken].totalClaimed += claimable;\\n        entitlements[ticketTokenId][claimToken].lastClaimedAt = block.timestamp;\\n\\n        _streamTotalClaimed[claimToken] += claimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(owner)).sendValue(claimable);\\n        } else {\\n            IERC20(claimToken).transfer(owner, claimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit Claim(_msgSender(), owner, ticketTokenId, claimToken, claimable);\\n    }\\n\\n    function claim(uint256[] calldata ticketTokenIds) public {\\n        claim(ticketTokenIds, address(0), _msgSender());\\n    }\\n\\n    function claim(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken,\\n        address owner\\n    ) public nonReentrant {\\n        uint256 totalClaimable;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            _beforeClaim(ticketTokenIds[i], claimToken, owner);\\n\\n            /* CHECKS */\\n            require(\\n                IERC721(ticketToken).ownerOf(ticketTokenIds[i]) == owner,\\n                \\\"STREAM/NOT_NFT_OWNER\\\"\\n            );\\n\\n            /* EFFECTS */\\n            uint256 claimable = streamClaimableAmount(\\n                ticketTokenIds[i],\\n                claimToken\\n            );\\n\\n            if (claimable > 0) {\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .totalClaimed += claimable;\\n                entitlements[ticketTokenIds[i]][claimToken]\\n                    .lastClaimedAt = block.timestamp;\\n\\n                totalClaimable += claimable;\\n            }\\n        }\\n\\n        _streamTotalClaimed[claimToken] += totalClaimable;\\n\\n        /* INTERACTIONS */\\n\\n        if (claimToken == address(0)) {\\n            payable(address(owner)).sendValue(totalClaimable);\\n        } else {\\n            IERC20(claimToken).transfer(owner, totalClaimable);\\n        }\\n\\n        /* LOGS */\\n\\n        emit ClaimMany(\\n            _msgSender(),\\n            owner,\\n            ticketTokenIds,\\n            claimToken,\\n            totalClaimable\\n        );\\n    }\\n\\n    /* READ ONLY */\\n\\n    function streamTotalSupply() public view returns (uint256) {\\n        return streamTotalSupply(address(0));\\n    }\\n\\n    function streamTotalSupply(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (claimToken == address(0)) {\\n            return _streamTotalClaimed[claimToken] + address(this).balance;\\n        }\\n\\n        return\\n            _streamTotalClaimed[claimToken] +\\n            IERC20(claimToken).balanceOf(address(this));\\n    }\\n\\n    function streamTotalClaimed() public view returns (uint256) {\\n        return _streamTotalClaimed[address(0)];\\n    }\\n\\n    function streamTotalClaimed(address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _streamTotalClaimed[claimToken];\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][address(0)].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function streamTotalClaimed(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamTotalClaimed(ticketTokenIds, address(0));\\n    }\\n\\n    function streamTotalClaimed(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimed = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimed += entitlements[ticketTokenIds[i]][claimToken].totalClaimed;\\n        }\\n\\n        return claimed;\\n    }\\n\\n    function streamClaimableAmount(\\n        uint256[] calldata ticketTokenIds,\\n        address claimToken\\n    ) public view returns (uint256) {\\n        uint256 claimable = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            claimable += streamClaimableAmount(ticketTokenIds[i], claimToken);\\n        }\\n\\n        return claimable;\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return streamClaimableAmount(ticketTokenId, address(0));\\n    }\\n\\n    function streamClaimableAmount(uint256 ticketTokenId, address claimToken)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 totalReleased = _totalTokenReleasedAmount(\\n            _totalStreamReleasedAmount(\\n                streamTotalSupply(claimToken),\\n                ticketTokenId,\\n                claimToken\\n            ),\\n            ticketTokenId,\\n            claimToken\\n        );\\n\\n        return\\n            totalReleased -\\n            entitlements[ticketTokenId][claimToken].totalClaimed;\\n    }\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual returns (uint256);\\n\\n    /* INTERNAL */\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address owner_\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xc6e25dd25145169381c694376aa2d42edb9d18a48debab70da1c83239e9ab808\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721EmissionReleaseExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721EmissionReleaseExtension {\\n    function hasERC721EmissionReleaseExtension() external view returns (bool);\\n\\n    function setEmissionRate(uint256 newValue) external;\\n\\n    function setEmissionTimeUnit(uint64 newValue) external;\\n\\n    function setEmissionStart(uint64 newValue) external;\\n\\n    function setEmissionEnd(uint64 newValue) external;\\n\\n    function releasedAmountUntil(uint64 calcUntil)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function emissionAmountUntil(uint64 calcUntil)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721EmissionReleaseExtension is\\n    IERC721EmissionReleaseExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ERC721MultiTokenStream\\n{\\n    // Number of tokens released every `emissionTimeUnit`\\n    uint256 public emissionRate;\\n\\n    // Time unit to release tokens, users can only claim once every `emissionTimeUnit`\\n    uint64 public emissionTimeUnit;\\n\\n    // When emission and calculating tokens starts\\n    uint64 public emissionStart;\\n\\n    // When to stop calculating the tokens released\\n    uint64 public emissionEnd;\\n\\n    /* INIT */\\n\\n    function __ERC721EmissionReleaseExtension_init(\\n        uint256 _emissionRate,\\n        uint64 _emissionTimeUnit,\\n        uint64 _emissionStart,\\n        uint64 _emissionEnd\\n    ) internal onlyInitializing {\\n        __ERC721EmissionReleaseExtension_init_unchained(\\n            _emissionRate,\\n            _emissionTimeUnit,\\n            _emissionStart,\\n            _emissionEnd\\n        );\\n    }\\n\\n    function __ERC721EmissionReleaseExtension_init_unchained(\\n        uint256 _emissionRate,\\n        uint64 _emissionTimeUnit,\\n        uint64 _emissionStart,\\n        uint64 _emissionEnd\\n    ) internal onlyInitializing {\\n        emissionRate = _emissionRate;\\n        emissionTimeUnit = _emissionTimeUnit;\\n        emissionStart = _emissionStart;\\n        emissionEnd = _emissionEnd;\\n\\n        _registerInterface(type(IERC721EmissionReleaseExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setEmissionRate(uint256 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionRate = newValue;\\n    }\\n\\n    function setEmissionTimeUnit(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionTimeUnit = newValue;\\n    }\\n\\n    function setEmissionStart(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionStart = newValue;\\n    }\\n\\n    function setEmissionEnd(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        emissionEnd = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721EmissionReleaseExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function releasedAmountUntil(uint64 calcUntil)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return\\n            emissionRate *\\n            // Intentionally rounded down:\\n            ((calcUntil - emissionStart) / emissionTimeUnit);\\n    }\\n\\n    function emissionAmountUntil(uint64 calcUntil)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return ((calcUntil - emissionStart) * emissionRate) / emissionTimeUnit;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual override returns (uint256) {\\n        streamTotalSupply_;\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        if (block.timestamp < emissionStart) {\\n            return 0;\\n        } else if (emissionEnd > 0 && block.timestamp > emissionEnd) {\\n            return releasedAmountUntil(emissionEnd);\\n        } else {\\n            return releasedAmountUntil(uint64(block.timestamp));\\n        }\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId,\\n        address claimToken,\\n        address owner_\\n    ) internal virtual override {\\n        owner_;\\n\\n        require(emissionStart < block.timestamp, \\\"STREAM/NOT_STARTED\\\");\\n\\n        require(\\n            entitlements[ticketTokenId][claimToken].lastClaimedAt <\\n                block.timestamp - emissionTimeUnit,\\n            \\\"STREAM/TOO_EARLY\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdab45441241958dbb2744341333c022d1a4bbfd616637d2f955d0cbf990bb815\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721EqualSplitExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721EqualSplitExtension {\\n    function hasERC721EqualSplitExtension() external view returns (bool);\\n\\n    function setTotalTickets(uint256 newValue) external;\\n}\\n\\nabstract contract ERC721EqualSplitExtension is\\n    IERC721EqualSplitExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ERC721MultiTokenStream\\n{\\n    // Total number of ERC721 tokens to calculate their equal split share\\n    uint256 public totalTickets;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721EqualSplitExtension_init(uint256 _totalTickets)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721EqualSplitExtension_init_unchained(_totalTickets);\\n    }\\n\\n    function __ERC721EqualSplitExtension_init_unchained(uint256 _totalTickets)\\n        internal\\n        onlyInitializing\\n    {\\n        totalTickets = _totalTickets;\\n\\n        _registerInterface(type(IERC721EqualSplitExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setTotalTickets(uint256 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        totalTickets = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721EqualSplitExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    ) internal view virtual override returns (uint256) {\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        return totalReleasedAmount_ / totalTickets;\\n    }\\n}\\n\",\"keccak256\":\"0xc023ab6ac6318be3764d5d0d190b65473b5cb21efc0c72e4d2678b3c88c6251d\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721LockableClaimExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\ninterface IERC721LockableClaimExtension {\\n    function hasERC721LockableClaimExtension() external view returns (bool);\\n\\n    function setClaimLockedUntil(uint64 newValue) external;\\n}\\n\\nabstract contract ERC721LockableClaimExtension is\\n    IERC721LockableClaimExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ERC721MultiTokenStream\\n{\\n    // Claiming is only possible after this time (unix timestamp)\\n    uint64 public claimLockedUntil;\\n\\n    /* INTERNAL */\\n\\n    function __ERC721LockableClaimExtension_init(uint64 _claimLockedUntil)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC721LockableClaimExtension_init_unchained(_claimLockedUntil);\\n    }\\n\\n    function __ERC721LockableClaimExtension_init_unchained(\\n        uint64 _claimLockedUntil\\n    ) internal onlyInitializing {\\n        claimLockedUntil = _claimLockedUntil;\\n\\n        _registerInterface(type(IERC721LockableClaimExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setClaimLockedUntil(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        claimLockedUntil = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721LockableClaimExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address owner_\\n    ) internal virtual override {\\n        ticketTokenId_;\\n        claimToken_;\\n        owner_;\\n\\n        require(claimLockedUntil < block.timestamp, \\\"STREAM/CLAIM_LOCKED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x31f63a9506b02f54de4bbc5b8cf212a1961ebad22d206abb40a35dbd270bc889\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721LockedStakingExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {IERC721LockableExtension} from \\\"../../../collections/ERC721/extensions/ERC721LockableExtension.sol\\\";\\n\\nimport \\\"./ERC721StakingExtension.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ninterface IERC721LockedStakingExtension {\\n    function hasERC721LockedStakingExtension() external view returns (bool);\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721LockedStakingExtension is\\n    IERC721LockedStakingExtension,\\n    ERC721StakingExtension\\n{\\n    /* INIT */\\n\\n    function __ERC721LockedStakingExtension_init(\\n        uint64 _minStakingDuration,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        __ERC721LockedStakingExtension_init_unchained();\\n        __ERC721StakingExtension_init_unchained(\\n            _minStakingDuration,\\n            _maxStakingTotalDurations\\n        );\\n    }\\n\\n    function __ERC721LockedStakingExtension_init_unchained()\\n        internal\\n        onlyInitializing\\n    {\\n        _registerInterface(type(IERC721LockedStakingExtension).interfaceId);\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721LockedStakingExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function stake(uint256 tokenId) public virtual override {\\n        super.stake(tokenId);\\n        IERC721LockableExtension(ticketToken).lock(tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public virtual override {\\n        super.stake(tokenIds);\\n        IERC721LockableExtension(ticketToken).lock(tokenIds);\\n    }\\n\\n    function unstake(uint256 tokenId) public virtual override {\\n        super.unstake(tokenId);\\n        IERC721LockableExtension(ticketToken).unlock(tokenId);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) public virtual override {\\n        super.stake(tokenIds);\\n        IERC721LockableExtension(ticketToken).unlock(tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0x3fa3c4c867cd012d7d873c66d998cb627a7b92be659e35dfac48664a003bdf3a\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/extensions/ERC721StakingExtension.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../base/ERC721MultiTokenStream.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ninterface IERC721StakingExtension {\\n    function hasERC721StakingExtension() external view returns (bool);\\n\\n    function stake(uint256 tokenId) external;\\n\\n    function stake(uint256[] calldata tokenIds) external;\\n}\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\nabstract contract ERC721StakingExtension is\\n    IERC721StakingExtension,\\n    Initializable,\\n    ERC165Storage,\\n    Ownable,\\n    ERC721MultiTokenStream\\n{\\n    // Minimum seconds that token must be staked before unstaking.\\n    uint64 public minStakingDuration;\\n\\n    // Maximum sum total of all durations staking that will be counted (across all stake/unstakes for each token). Staked durations beyond this number is ignored.\\n    uint64 public maxStakingTotalDurations;\\n\\n    // Map of token ID to the time of last staking\\n    mapping(uint256 => uint64) public lastStakingTime;\\n\\n    // Map of token ID to the sum total of all previous staked durations\\n    mapping(uint256 => uint64) public savedStakedDurations;\\n\\n    /* INIT */\\n\\n    function __ERC721StakingExtension_init(\\n        uint64 _minStakingDuration,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        __ERC721StakingExtension_init_unchained(\\n            _minStakingDuration,\\n            _maxStakingTotalDurations\\n        );\\n    }\\n\\n    function __ERC721StakingExtension_init_unchained(\\n        uint64 _minStakingDuration,\\n        uint64 _maxStakingTotalDurations\\n    ) internal onlyInitializing {\\n        minStakingDuration = _minStakingDuration;\\n        maxStakingTotalDurations = _maxStakingTotalDurations;\\n\\n        _registerInterface(type(IERC721StakingExtension).interfaceId);\\n    }\\n\\n    /* ADMIN */\\n\\n    function setMinStakingDuration(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        minStakingDuration = newValue;\\n    }\\n\\n    function setMaxStakingTotalDurations(uint64 newValue) public onlyOwner {\\n        require(lockedUntilTimestamp < block.timestamp, \\\"STREAM/CONFIG_LOCKED\\\");\\n        maxStakingTotalDurations = newValue;\\n    }\\n\\n    /* PUBLIC */\\n\\n    function hasERC721StakingExtension() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    function stake(uint256 tokenId) public virtual {\\n        require(\\n            _msgSender() == IERC721(ticketToken).ownerOf(tokenId),\\n            \\\"STREAM/NOT_TOKEN_OWNER\\\"\\n        );\\n\\n        require(\\n            totalStakedDuration(tokenId) < maxStakingTotalDurations,\\n            \\\"STREAM/MAX_STAKE_DURATION_EXCEEDED\\\"\\n        );\\n\\n        lastStakingTime[tokenId] = uint64(block.timestamp);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public virtual {\\n        address sender = _msgSender();\\n        uint64 currentTime = uint64(block.timestamp);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(\\n                sender == IERC721(ticketToken).ownerOf(tokenIds[i]),\\n                \\\"STREAM/NOT_TOKEN_OWNER\\\"\\n            );\\n\\n            require(\\n                totalStakedDuration(tokenIds[i]) < maxStakingTotalDurations,\\n                \\\"STREAM/MAX_STAKE_DURATION_EXCEEDED\\\"\\n            );\\n\\n            lastStakingTime[tokenIds[i]] = currentTime;\\n        }\\n    }\\n\\n    function unstake(uint256 tokenId) public virtual {\\n        _unstake(_msgSender(), uint64(block.timestamp), tokenId);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) public virtual {\\n        address operator = _msgSender();\\n        uint64 currentTime = uint64(block.timestamp);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _unstake(operator, currentTime, tokenIds[i]);\\n        }\\n    }\\n\\n    function totalStakedDuration(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        virtual\\n        returns (uint64)\\n    {\\n        uint64 totalDurations = 0;\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            totalDurations += totalStakedDuration(ticketTokenIds[i]);\\n        }\\n\\n        return totalDurations;\\n    }\\n\\n    function totalStakedDuration(uint256 ticketTokenId)\\n        public\\n        view\\n        virtual\\n        returns (uint64)\\n    {\\n        uint64 total = savedStakedDurations[ticketTokenId];\\n\\n        if (lastStakingTime[ticketTokenId] > 0) {\\n            uint64 targetTime = _stakingTimeLimit();\\n\\n            if (targetTime > block.timestamp) {\\n                targetTime = uint64(block.timestamp);\\n            }\\n\\n            if (lastStakingTime[ticketTokenId] > 0) {\\n                if (targetTime > lastStakingTime[ticketTokenId]) {\\n                    total += (targetTime - lastStakingTime[ticketTokenId]);\\n                }\\n            }\\n        }\\n\\n        if (total > maxStakingTotalDurations) {\\n            total = maxStakingTotalDurations;\\n        }\\n\\n        return total;\\n    }\\n\\n    function unlockingTime(uint256 ticketTokenId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            lastStakingTime[ticketTokenId] > 0\\n                ? lastStakingTime[ticketTokenId] + minStakingDuration\\n                : 0;\\n    }\\n\\n    function unlockingTime(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory unlockedAt = new uint256[](ticketTokenIds.length);\\n\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            unlockedAt[i] = unlockingTime(ticketTokenIds[i]);\\n        }\\n\\n        return unlockedAt;\\n    }\\n\\n    /* INTERNAL */\\n\\n    function _stakingTimeLimit() internal view virtual returns (uint64) {\\n        return 18_446_744_073_709_551_615; // max(uint64)\\n    }\\n\\n    function _unstake(\\n        address operator,\\n        uint64 currentTime,\\n        uint256 tokenId\\n    ) internal {\\n        require(lastStakingTime[tokenId] > 0, \\\"STREAM/NOT_STAKED\\\");\\n\\n        require(\\n            currentTime >= lastStakingTime[tokenId] + minStakingDuration,\\n            \\\"STREAM/NOT_STAKED_LONG_ENOUGH\\\"\\n        );\\n\\n        require(\\n            operator == IERC721(ticketToken).ownerOf(tokenId),\\n            \\\"STREAM/NOT_TOKEN_OWNER\\\"\\n        );\\n\\n        savedStakedDurations[tokenId] = totalStakedDuration(tokenId);\\n\\n        lastStakingTime[tokenId] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x59e475bc13330a119ba0f078ab85554b019c9012b83d751226a3fb3eb3d91df2\",\"license\":\"AGPL-3.0\"},\"contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../../../common/EmergencyOwnerWithdrawExtension.sol\\\";\\nimport \\\"../extensions/ERC721EmissionReleaseExtension.sol\\\";\\nimport \\\"../extensions/ERC721EqualSplitExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockedStakingExtension.sol\\\";\\nimport \\\"../extensions/ERC721LockableClaimExtension.sol\\\";\\n\\n/**\\n * @author Flair (https://flair.finance)\\n */\\ncontract ERC721LockedStakingEmissionStream is\\n    Initializable,\\n    Ownable,\\n    EmergencyOwnerWithdrawExtension,\\n    ERC721EmissionReleaseExtension,\\n    ERC721EqualSplitExtension,\\n    ERC721LockedStakingExtension,\\n    ERC721LockableClaimExtension\\n{\\n    using Address for address;\\n    using Address for address payable;\\n\\n    string public constant name = \\\"ERC721 Locked Staking Emission Stream\\\";\\n\\n    string public constant version = \\\"0.1\\\";\\n\\n    struct Config {\\n        // Base\\n        address ticketToken;\\n        uint64 lockedUntilTimestamp;\\n        // Locked staking extension\\n        uint64 minStakingDuration; // in seconds. Minimum time the NFT must stay locked before unstaking.\\n        uint64 maxStakingTotalDurations; // in seconds. Maximum sum total of all durations staking that will be counted (across all stake/unstakes for each token).\\n        // Emission release extension\\n        uint256 emissionRate;\\n        uint64 emissionTimeUnit;\\n        uint64 emissionStart;\\n        uint64 emissionEnd;\\n        // Equal split extension\\n        uint256 totalTickets;\\n        // Lockable claim extension\\n        uint64 claimLockedUntil;\\n    }\\n\\n    /* INTERNAL */\\n\\n    constructor(Config memory config) {\\n        initialize(config, msg.sender);\\n    }\\n\\n    function initialize(Config memory config, address deployer)\\n        public\\n        initializer\\n    {\\n        _transferOwnership(deployer);\\n\\n        __EmergencyOwnerWithdrawExtension_init();\\n        __ERC721MultiTokenStream_init(\\n            config.ticketToken,\\n            config.lockedUntilTimestamp\\n        );\\n        __ERC721LockedStakingExtension_init(\\n            config.minStakingDuration,\\n            config.maxStakingTotalDurations\\n        );\\n        __ERC721EmissionReleaseExtension_init(\\n            config.emissionRate,\\n            config.emissionTimeUnit,\\n            config.emissionStart,\\n            config.emissionEnd\\n        );\\n        __ERC721EqualSplitExtension_init(config.totalTickets);\\n        __ERC721LockableClaimExtension_init(config.claimLockedUntil);\\n    }\\n\\n    function _totalStreamReleasedAmount(\\n        uint256 streamTotalSupply_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    )\\n        internal\\n        view\\n        virtual\\n        override(ERC721MultiTokenStream, ERC721EmissionReleaseExtension)\\n        returns (uint256)\\n    {\\n        // Removing the logic from emission extension because it is irrevelant when staking.\\n        return 0;\\n    }\\n\\n    function _totalTokenReleasedAmount(\\n        uint256 totalReleasedAmount_,\\n        uint256 ticketTokenId_,\\n        address claimToken_\\n    )\\n        internal\\n        view\\n        virtual\\n        override(ERC721MultiTokenStream, ERC721EqualSplitExtension)\\n        returns (uint256)\\n    {\\n        totalReleasedAmount_;\\n        ticketTokenId_;\\n        claimToken_;\\n\\n        // Get the rate per token to calculate based on stake duration\\n        return\\n            (emissionRate / totalTickets) *\\n            // Intentionally rounded down\\n            (totalStakedDuration(ticketTokenId_) / emissionTimeUnit);\\n    }\\n\\n    function _stakingTimeLimit()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint64)\\n    {\\n        if (emissionEnd > 0) {\\n            return emissionEnd;\\n        }\\n\\n        return super._stakingTimeLimit();\\n    }\\n\\n    function _beforeClaim(\\n        uint256 ticketTokenId_,\\n        address claimToken_,\\n        address owner_\\n    )\\n        internal\\n        override(\\n            ERC721MultiTokenStream,\\n            ERC721EmissionReleaseExtension,\\n            ERC721LockableClaimExtension\\n        )\\n    {\\n        ERC721LockableClaimExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            owner_\\n        );\\n        ERC721EmissionReleaseExtension._beforeClaim(\\n            ticketTokenId_,\\n            claimToken_,\\n            owner_\\n        );\\n    }\\n\\n    /* PUBLIC */\\n\\n    function stake(uint256 tokenId) public override {\\n        require(\\n            uint64(block.timestamp) >= emissionStart,\\n            \\\"STREAM/NOT_STARTED_YET\\\"\\n        );\\n\\n        super.stake(tokenId);\\n    }\\n\\n    function stake(uint256[] calldata tokenIds) public override {\\n        require(\\n            uint64(block.timestamp) >= emissionStart,\\n            \\\"STREAM/NOT_STARTED_YET\\\"\\n        );\\n\\n        super.stake(tokenIds);\\n    }\\n\\n    function rewardAmountByToken(uint256 ticketTokenId)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return\\n            (emissionRate * totalStakedDuration(ticketTokenId)) /\\n            emissionTimeUnit;\\n    }\\n\\n    function rewardAmountByToken(uint256[] calldata ticketTokenIds)\\n        public\\n        view\\n        virtual\\n        returns (uint256 total)\\n    {\\n        for (uint256 i = 0; i < ticketTokenIds.length; i++) {\\n            total += rewardAmountByToken(ticketTokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd03b58192afddafc7ed5dfece2135cd3e3aafd004a82963208e3d314f53e1301\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003f8e38038062003f8e833981016040819052620000349162000715565b6200003f3362000057565b6001600355620000508133620000a9565b506200087b565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000620000b76001620001a4565b90508015620000d0576000805461ff0019166101001790555b620000db8262000057565b620000e562000256565b82516020840151620000f891906200028c565b6200011283604001518460600151620002c660201b60201c565b6200013683608001518460a001518560c001518660e001516200030660201b60201c565b610100830151620001479062000344565b61012083015162000158906200037c565b80156200019f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60008054610100900460ff16156200020d578160ff166001148015620001dd5750620001db30620003b160201b620021f61760201c565b155b620002055760405162461bcd60e51b8152600401620001fc90620007e2565b60405180910390fd5b506000919050565b60005460ff808416911610620002375760405162461bcd60e51b8152600401620001fc90620007e2565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16620002805760405162461bcd60e51b8152600401620001fc9062000830565b6200028a620003c0565b565b600054610100900460ff16620002b65760405162461bcd60e51b8152600401620001fc9062000830565b620002c28282620003fc565b5050565b600054610100900460ff16620002f05760405162461bcd60e51b8152600401620001fc9062000830565b620002fa62000466565b620002c28282620004a2565b600054610100900460ff16620003305760405162461bcd60e51b8152600401620001fc9062000830565b6200033e848484846200050b565b50505050565b600054610100900460ff166200036e5760405162461bcd60e51b8152600401620001fc9062000830565b620003798162000596565b50565b600054610100900460ff16620003a65760405162461bcd60e51b8152600401620001fc9062000830565b6200037981620005d7565b6001600160a01b03163b151590565b600054610100900460ff16620003ea5760405162461bcd60e51b8152600401620001fc9062000830565b6200028a6326bcdb3160e01b62000629565b600054610100900460ff16620004265760405162461bcd60e51b8152600401620001fc9062000830565b600480546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b03851617179055620002c2631ba050e960e21b62000629565b600054610100900460ff16620004905760405162461bcd60e51b8152600401620001fc9062000830565b6200028a63d664280160e01b62000629565b600054610100900460ff16620004cc5760405162461bcd60e51b8152600401620001fc9062000830565b600a80546001600160401b0383811668010000000000000000026001600160801b031990921690851617179055620002c2633a41ba5360e11b62000629565b600054610100900460ff16620005355760405162461bcd60e51b8152600401620001fc9062000830565b6007849055600880546001600160401b03838116600160801b02600160801b600160c01b031986831668010000000000000000026001600160801b03199094169288169290921792909217161790556200033e634d0b5a4960e01b62000629565b600054610100900460ff16620005c05760405162461bcd60e51b8152600401620001fc9062000830565b600981905562000379632d5305cb60e21b62000629565b600054610100900460ff16620006015760405162461bcd60e51b8152600401620001fc9062000830565b600d80546001600160401b0319166001600160401b038316179055620003796317b2ef4360e31b5b6001600160e01b03198082161415620006855760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401620001fc565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60405161014081016001600160401b0381118282101715620006df57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200025157600080fd5b80516001600160401b03811681146200025157600080fd5b600061014082840312156200072957600080fd5b62000733620006ad565b6200073e83620006e5565b81526200074e60208401620006fd565b60208201526200076160408401620006fd565b60408201526200077460608401620006fd565b6060820152608083015160808201526200079160a08401620006fd565b60a0820152620007a460c08401620006fd565b60c0820152620007b760e08401620006fd565b60e08201526101008381015190820152610120620007d7818501620006fd565b908201529392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b613703806200088b6000396000f3fe6080604052600436106102d75760003560e01c80630191c0af146102f057806301c1dfba1461032357806301ffc9a71461034357806306fdde031461037357806308289dbe1461039557806308ae7e54146103e35780630c805a44146104035780630fbf0a931461043957806314427a96146104595780631bc51b26146104795780631c725fdc1461048d57806325289bad146104ad578063277d048b146104d45780632890d033146104e95780632c0e1313146104fe5780632e17de781461051e57806333abcdbd1461053e578063379607f51461055e5780633a73f7d61461057e5780633b3f12e21461059e5780633d2dded5146105be5780634abb4c49146105fb5780634e63178314610628578063513da9481461064957806354fd4d501461067057806357dc48c81461069f57806361949636146106f35780636ba4c13814610713578063715018a61461073357806378b094ca14610748578063790c0c73146107685780638368909c1461078857806389c6b815146107af5780638da5cb5b146107cf5780639199690b14610479578063968d9b2c146107f157806396afc450146108115780639edfe83014610827578063a1bdb15e14610847578063a1cf649314610867578063a5549bc6146108aa578063a5b23be7146108ca578063a694fc3a146108ea578063a86b21e81461090a578063a8a67c8c1461092a578063aaf2f9991461094a578063ae890c0a1461096a578063c08818491461098a578063d0d6641d146109c0578063d1335b6914610479578063d4244f24146109e0578063d5ed4d5a14610a07578063d664280114610479578063d97314f514610a27578063dd11247e14610a47578063dda8820f14610479578063ddd5e1b214610a5d578063de76a67614610a7d578063e449f34114610a9d578063f2fde38b14610abd578063f389b6e414610add578063f4415ad614610afd578063f593dfc814610b35578063f66e38c214610b5557600080fd5b366102eb57600034116102e957600080fd5b005b600080fd5b3480156102fc57600080fd5b5061031061030b366004612f06565b610b75565b6040519081526020015b60405180910390f35b34801561032f57600080fd5b506102e961033e366004612f5c565b610bcb565b34801561034f57600080fd5b5061036361035e366004612f9d565b610e1f565b604051901515815260200161031a565b34801561037f57600080fd5b50610388610e5f565b60405161031a9190612fc7565b3480156103a157600080fd5b506103cb6103b036600461301c565b600c602052600090815260409020546001600160401b031681565b6040516001600160401b03909116815260200161031a565b3480156103ef57600080fd5b50600a546103cb906001600160401b031681565b34801561040f57600080fd5b506103cb61041e36600461301c565b600b602052600090815260409020546001600160401b031681565b34801561044557600080fd5b506102e9610454366004612f5c565b610e7b565b34801561046557600080fd5b50600d546103cb906001600160401b031681565b34801561048557600080fd5b506001610363565b34801561049957600080fd5b506102e96104a836600461304c565b610ec0565b3480156104b957600080fd5b506004546103cb90600160a01b90046001600160401b031681565b3480156104e057600080fd5b506102e9610f77565b3480156104f557600080fd5b50610310610fe4565b34801561050a57600080fd5b506102e961051936600461304c565b610ff5565b34801561052a57600080fd5b506102e961053936600461301c565b611078565b34801561054a57600080fd5b506103cb61055936600461301c565b6110e1565b34801561056a57600080fd5b506102e961057936600461301c565b6111d6565b34801561058a57600080fd5b50610310610599366004612f5c565b6111e4565b3480156105aa57600080fd5b506103106105b9366004612f06565b611236565b3480156105ca57600080fd5b506000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f854610310565b34801561060757600080fd5b5061061b610616366004612f5c565b6112b4565b60405161031a9190613067565b34801561063457600080fd5b5060025461036390600160a01b900460ff1681565b34801561065557600080fd5b506008546103cb90600160401b90046001600160401b031681565b34801561067c57600080fd5b5061038860405180604001604052806003815260200162302e3160e81b81525081565b3480156106ab57600080fd5b506106de6106ba3660046130ab565b60056020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161031a565b3480156106ff57600080fd5b506008546103cb906001600160401b031681565b34801561071f57600080fd5b506102e961072e366004612f5c565b61135f565b34801561073f57600080fd5b506102e961136c565b34801561075457600080fd5b506102e961076336600461304c565b6113a7565b34801561077457600080fd5b506103106107833660046130db565b611434565b34801561079457600080fd5b506008546103cb90600160801b90046001600160401b031681565b3480156107bb57600080fd5b506103106107ca366004612f5c565b611507565b3480156107db57600080fd5b506107e461151c565b60405161031a91906130f8565b3480156107fd57600080fd5b5061031061080c36600461301c565b61152b565b34801561081d57600080fd5b5061031060075481565b34801561083357600080fd5b5061031061084236600461304c565b611538565b34801561085357600080fd5b506102e961086236600461301c565b61157d565b34801561087357600080fd5b506103106108823660046130ab565b60009182526005602090815260408084206001600160a01b0393909316845291905290205490565b3480156108b657600080fd5b506102e96108c536600461304c565b6115e3565b3480156108d657600080fd5b506103106108e536600461301c565b611666565b3480156108f657600080fd5b506102e961090536600461301c565b61169e565b34801561091657600080fd5b5061031061092536600461304c565b6116de565b34801561093657600080fd5b506102e9610945366004613159565b61171a565b34801561095657600080fd5b506102e961096536600461304c565b6117f6565b34801561097657600080fd5b506102e961098536600461301c565b611883565b34801561099657600080fd5b506103106109a53660046130db565b6001600160a01b031660009081526006602052604090205490565b3480156109cc57600080fd5b506103106109db36600461301c565b6118e9565b3480156109ec57600080fd5b50600a546103cb90600160401b90046001600160401b031681565b348015610a1357600080fd5b506004546107e4906001600160a01b031681565b348015610a3357600080fd5b506102e9610a4236600461304c565b611943565b348015610a5357600080fd5b5061031060095481565b348015610a6957600080fd5b506102e9610a783660046130ab565b6119c6565b348015610a8957600080fd5b506103cb610a98366004612f5c565b611c58565b348015610aa957600080fd5b506102e9610ab8366004612f5c565b611ca4565b348015610ac957600080fd5b506102e9610ad83660046130db565b611d15565b348015610ae957600080fd5b506102e9610af836600461323a565b611db2565b348015610b0957600080fd5b50610310610b1836600461301c565b600090815260056020908152604080832083805290915290205490565b348015610b4157600080fd5b506102e9610b5036600461304c565b612112565b348015610b6157600080fd5b50610310610b703660046130ab565b61219f565b600080805b84811015610bc257610ba4868683818110610b9757610b976132a1565b905060200201358561219f565b610bae90836132cd565b915080610bba816132e5565b915050610b7a565b50949350505050565b33610bd461151c565b6001600160a01b031614610c035760405162461bcd60e51b8152600401610bfa90613300565b60405180910390fd5b600254600160a01b900460ff1615610c575760405162461bcd60e51b81526020600482015260176024820152761153515491d15390d657d413d5d15497d4915593d2d151604a1b6044820152606401610bfa565b6000610c6161151c565b905060005b82811015610e19576000848483818110610c8257610c826132a1565b9050602002016020810190610c9791906130db565b6001600160a01b03161415610cbe57610cb96001600160a01b03831647612205565b610e07565b838382818110610cd057610cd06132a1565b9050602002016020810190610ce591906130db565b6001600160a01b031663a9059cbb83868685818110610d0657610d066132a1565b9050602002016020810190610d1b91906130db565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d4691906130f8565b60206040518083038186803b158015610d5e57600080fd5b505afa158015610d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d969190613335565b6040518363ffffffff1660e01b8152600401610db392919061334e565b602060405180830381600087803b158015610dcd57600080fd5b505af1158015610de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e059190613367565b505b80610e11816132e5565b915050610c66565b50505050565b60006301ffc9a760e01b6001600160e01b031983161480610e5957506001600160e01b0319821660009081526001602052604090205460ff165b92915050565b6040518060600160405280602581526020016136a96025913981565b6008546001600160401b03600160401b9091048116429091161015610eb25760405162461bcd60e51b8152600401610bfa90613389565b610ebc828261231b565b5050565b33610ec961151c565b6001600160a01b031614610eef5760405162461bcd60e51b8152600401610bfa90613300565b6004546001600160401b03600160a01b909104811690821611610f4b5760405162461bcd60e51b815260206004820152601460248201527314d5149150534bd0d0539393d517d49155d2539160621b6044820152606401610bfa565b600480546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b33610f8061151c565b6001600160a01b031614610fa65760405162461bcd60e51b8152600401610bfa90613300565b6002805460ff60a01b1916600160a01b1790556040517f21fadcdbe90fc4e8062dd78003616bbe56d48e0f1bfc58eacd10b11bba16b79690600090a1565b6000610ff06000611434565b905090565b33610ffe61151c565b6001600160a01b0316146110245760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106110565760405162461bcd60e51b8152600401610bfa906133b9565b600d80546001600160401b0319166001600160401b0392909216919091179055565b61108181612356565b60048054604051636198e33960e01b81529182018390526001600160a01b031690636198e339906024015b600060405180830381600087803b1580156110c657600080fd5b505af11580156110da573d6000803e3d6000fd5b5050505050565b6000818152600c6020908152604080832054600b9092528220546001600160401b0391821691161561119e576000611117612361565b905042816001600160401b0316111561112d5750425b6000848152600b60205260409020546001600160401b03161561119c576000848152600b60205260409020546001600160401b03908116908216111561119c576000848152600b602052604090205461118f906001600160401b0316826133e7565b611199908361340f565b91505b505b600a546001600160401b03600160401b90910481169082161115610e595750600a54600160401b90046001600160401b031692915050565b6111e18160006119c6565b50565b6000805b8281101561122f57611211848483818110611205576112056132a1565b90506020020135611666565b61121b90836132cd565b915080611227816132e5565b9150506111e8565b5092915050565b600080805b84811015610bc25760056000878784818110611259576112596132a1565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826112a091906132cd565b9150806112ac816132e5565b91505061123b565b60606000826001600160401b038111156112d0576112d061310c565b6040519080825280602002602001820160405280156112f9578160200160208202803683370190505b50905060005b838110156113575761132885858381811061131c5761131c6132a1565b905060200201356118e9565b82828151811061133a5761133a6132a1565b60209081029190910101528061134f816132e5565b9150506112ff565b509392505050565b610ebc8282600033611db2565b3361137561151c565b6001600160a01b03161461139b5760405162461bcd60e51b8152600401610bfa90613300565b6113a5600061239f565b565b336113b061151c565b6001600160a01b0316146113d65760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106114085760405162461bcd60e51b8152600401610bfa906133b9565b600880546001600160401b03909216600160801b02600160801b600160c01b0319909216919091179055565b60006001600160a01b038216611468576001600160a01b038216600090815260066020526040902054610e599047906132cd565b6040516370a0823160e01b81526001600160a01b038316906370a08231906114949030906004016130f8565b60206040518083038186803b1580156114ac57600080fd5b505afa1580156114c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e49190613335565b6001600160a01b038316600090815260066020526040902054610e5991906132cd565b600061151583836000611236565b9392505050565b6002546001600160a01b031690565b6000610e5982600061219f565b6008546000906001600160401b038082169161155d91600160401b90910416846133e7565b6115679190613450565b6001600160401b0316600754610e599190613476565b3361158661151c565b6001600160a01b0316146115ac5760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106115de5760405162461bcd60e51b8152600401610bfa906133b9565b600755565b336115ec61151c565b6001600160a01b0316146116125760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106116445760405162461bcd60e51b8152600401610bfa906133b9565b600a80546001600160401b0319166001600160401b0392909216919091179055565b6008546000906001600160401b031661167e836110e1565b6001600160401b03166007546116949190613476565b610e599190613495565b6008546001600160401b03600160401b90910481164290911610156116d55760405162461bcd60e51b8152600401610bfa90613389565b6111e1816123f1565b6008546007546000916001600160401b03808216929161170791600160401b90910416856133e7565b6001600160401b03166116949190613476565b60006117266001612429565b9050801561173e576000805461ff0019166101001790555b6117478261239f565b61174f6124bd565b611761836000015184602001516124ec565b6117738360400151846060015161251d565b61178f83608001518460a001518560c001518660e00151612556565b61179d836101000151612589565b6117ab8361012001516125b9565b80156117f1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b336117ff61151c565b6001600160a01b0316146118255760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106118575760405162461bcd60e51b8152600401610bfa906133b9565b600880546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b3361188c61151c565b6001600160a01b0316146118b25760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106118e45760405162461bcd60e51b8152600401610bfa906133b9565b600955565b6000818152600b60205260408120546001600160401b031661190c576000611934565b600a546000838152600b6020526040902054611934916001600160401b03908116911661340f565b6001600160401b031692915050565b3361194c61151c565b6001600160a01b0316146119725760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106119a45760405162461bcd60e51b8152600401610bfa906133b9565b600880546001600160401b0319166001600160401b0392909216919091179055565b600260035414156119e95760405162461bcd60e51b8152600401610bfa906134a9565b6002600355600480546040516331a9108f60e11b81529182018490526000916001600160a01b0390911690636352211e9060240160206040518083038186803b158015611a3557600080fd5b505afa158015611a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6d91906134e0565b9050611a7a8383836125e9565b6000611a86848461219f565b905060008111611ad25760405162461bcd60e51b815260206004820152601760248201527653545245414d2f4e4f5448494e475f544f5f434c41494d60481b6044820152606401610bfa565b60008481526005602090815260408083206001600160a01b038716845290915281208054839290611b049084906132cd565b909155505060008481526005602090815260408083206001600160a01b0387168452825280832042600190910155600690915281208054839290611b499084906132cd565b90915550506001600160a01b038316611b7457611b6f6001600160a01b03831682612205565b611bf6565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611ba2908590859060040161334e565b602060405180830381600087803b158015611bbc57600080fd5b505af1158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf49190613367565b505b604080513381526001600160a01b038481166020830152818301879052851660608201526080810183905290517fa2d3c4c1fc934d6d2d8f9e862df90c01ae4eb0e920cd8957d242ba26b8dc40789181900360a00190a1505060016003555050565b600080805b8381101561135757611c86858583818110611c7a57611c7a6132a1565b905060200201356110e1565b611c90908361340f565b915080611c9c816132e5565b915050611c5d565b611cae82826125ff565b60048054604051635d36598f60e01b81526001600160a01b0390911691635d36598f91611cdf918691869101613533565b600060405180830381600087803b158015611cf957600080fd5b505af1158015611d0d573d6000803e3d6000fd5b505050505050565b33611d1e61151c565b6001600160a01b031614611d445760405162461bcd60e51b8152600401610bfa90613300565b6001600160a01b038116611da95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bfa565b6111e18161239f565b60026003541415611dd55760405162461bcd60e51b8152600401610bfa906134a9565b60026003556000805b84811015611fef57611e09868683818110611dfb57611dfb6132a1565b9050602002013585856125e9565b6004546001600160a01b038085169116636352211e888885818110611e3057611e306132a1565b905060200201356040518263ffffffff1660e01b8152600401611e5591815260200190565b60206040518083038186803b158015611e6d57600080fd5b505afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea591906134e0565b6001600160a01b031614611ef25760405162461bcd60e51b815260206004820152601460248201527329aa2922a0a697a727aa2fa7232a2fa7aba722a960611b6044820152606401610bfa565b6000611f16878784818110611f0957611f096132a1565b905060200201358661219f565b90508015611fdc578060056000898986818110611f3557611f356132a1565b9050602002013581526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000206000016000828254611f7f91906132cd565b9091555042905060056000898986818110611f9c57611f9c6132a1565b6020908102929092013583525081810192909252604090810160009081206001600160a01b038a168252909252902060010155611fd981846132cd565b92505b5080611fe7816132e5565b915050611dde565b506001600160a01b038316600090815260066020526040812080548392906120189084906132cd565b90915550506001600160a01b0383166120435761203e6001600160a01b03831682612205565b6120c5565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90612071908590859060040161334e565b602060405180830381600087803b15801561208b57600080fd5b505af115801561209f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c39190613367565b505b7fd84a5c424a4f777bcf4f645712b8e5ebfc550f42bde444fa822fe98ee1b132b13383878787866040516120fe96959493929190613547565b60405180910390a150506001600355505050565b3361211b61151c565b6001600160a01b0316146121415760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106121735760405162461bcd60e51b8152600401610bfa906133b9565b600a80546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b6000806121be6121b76121b185611434565b50600090565b8585612785565b60008581526005602090815260408083206001600160a01b03881684529091529020549091506121ee9082613586565b949350505050565b6001600160a01b03163b151590565b804710156122555760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610bfa565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146122a2576040519150601f19603f3d011682016040523d82523d6000602084013e6122a7565b606091505b50509050806117f15760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610bfa565b61232582826125ff565b600480546040516342cb086360e11b81526001600160a01b039091169163859610c691611cdf918691869101613533565b6111e13342836127ca565b600854600090600160801b90046001600160401b0316156123935750600854600160801b90046001600160401b031690565b506001600160401b0390565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6123fa8161299f565b600480546040516337519c1960e21b81529182018390526001600160a01b03169063dd467064906024016110ac565b60008054610100900460ff1615612477578160ff1660011480156124535750612451306121f6565b155b61246f5760405162461bcd60e51b8152600401610bfa9061359d565b506000919050565b60005460ff80841691161061249e5760405162461bcd60e51b8152600401610bfa9061359d565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166124e45760405162461bcd60e51b8152600401610bfa906135eb565b6113a5612ab4565b600054610100900460ff166125135760405162461bcd60e51b8152600401610bfa906135eb565b610ebc8282612aeb565b600054610100900460ff166125445760405162461bcd60e51b8152600401610bfa906135eb565b61254c612b50565b610ebc8282612b87565b600054610100900460ff1661257d5760405162461bcd60e51b8152600401610bfa906135eb565b610e1984848484612be6565b600054610100900460ff166125b05760405162461bcd60e51b8152600401610bfa906135eb565b6111e181612c67565b600054610100900460ff166125e05760405162461bcd60e51b8152600401610bfa906135eb565b6111e181612ca3565b6125f4838383612cf5565b6117f1838383612d47565b334260005b838110156110da576004546001600160a01b0316636352211e86868481811061262f5761262f6132a1565b905060200201356040518263ffffffff1660e01b815260040161265491815260200190565b60206040518083038186803b15801561266c57600080fd5b505afa158015612680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a491906134e0565b6001600160a01b0316836001600160a01b0316146126d45760405162461bcd60e51b8152600401610bfa90613636565b600a54600160401b90046001600160401b03166126fc868684818110611c7a57611c7a6132a1565b6001600160401b0316106127225760405162461bcd60e51b8152600401610bfa90613666565b81600b6000878785818110612739576127396132a1565b90506020020135815260200190815260200160002060006101000a8154816001600160401b0302191690836001600160401b03160217905550808061277d906132e5565b915050612604565b6008546000906001600160401b031661279d846110e1565b6127a79190613450565b6001600160401b03166009546007546127c09190613495565b6121ee9190613476565b6000818152600b60205260409020546001600160401b03166128225760405162461bcd60e51b815260206004820152601160248201527014d5149150534bd393d517d4d51052d151607a1b6044820152606401610bfa565b600a546000828152600b602052604090205461284a916001600160401b03908116911661340f565b6001600160401b0316826001600160401b031610156128ab5760405162461bcd60e51b815260206004820152601d60248201527f53545245414d2f4e4f545f5354414b45445f4c4f4e475f454e4f5547480000006044820152606401610bfa565b600480546040516331a9108f60e11b81529182018390526001600160a01b031690636352211e9060240160206040518083038186803b1580156128ed57600080fd5b505afa158015612901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292591906134e0565b6001600160a01b0316836001600160a01b0316146129555760405162461bcd60e51b8152600401610bfa90613636565b61295e816110e1565b6000918252600c6020908152604080842080546001600160401b03949094166001600160401b0319948516179055600b909152909120805490911690555050565b600480546040516331a9108f60e11b81529182018390526001600160a01b031690636352211e9060240160206040518083038186803b1580156129e157600080fd5b505afa1580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1991906134e0565b6001600160a01b0316336001600160a01b031614612a495760405162461bcd60e51b8152600401610bfa90613636565b600a54600160401b90046001600160401b0316612a65826110e1565b6001600160401b031610612a8b5760405162461bcd60e51b8152600401610bfa90613666565b6000908152600b6020526040902080546001600160401b031916426001600160401b0316179055565b600054610100900460ff16612adb5760405162461bcd60e51b8152600401610bfa906135eb565b6113a56326bcdb3160e01b612e1a565b600054610100900460ff16612b125760405162461bcd60e51b8152600401610bfa906135eb565b600480546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b03851617179055610ebc631ba050e960e21b612e1a565b600054610100900460ff16612b775760405162461bcd60e51b8152600401610bfa906135eb565b6113a563d664280160e01b612e1a565b600054610100900460ff16612bae5760405162461bcd60e51b8152600401610bfa906135eb565b600a80546001600160401b03838116600160401b026001600160801b031990921690851617179055610ebc633a41ba5360e11b612e1a565b600054610100900460ff16612c0d5760405162461bcd60e51b8152600401610bfa906135eb565b6007849055600880546001600160401b03838116600160801b02600160801b600160c01b0319868316600160401b026001600160801b0319909416928816929092179290921716179055610e19634d0b5a4960e01b612e1a565b600054610100900460ff16612c8e5760405162461bcd60e51b8152600401610bfa906135eb565b60098190556111e1632d5305cb60e21b612e1a565b600054610100900460ff16612cca5760405162461bcd60e51b8152600401610bfa906135eb565b600d80546001600160401b0319166001600160401b0383161790556111e16317b2ef4360e31b612e1a565b600d54426001600160401b03909116106117f15760405162461bcd60e51b815260206004820152601360248201527214d5149150534bd0d310525357d313d0d2d151606a1b6044820152606401610bfa565b60085442600160401b9091046001600160401b031610612d9e5760405162461bcd60e51b815260206004820152601260248201527114d5149150534bd393d517d4d5105495115160721b6044820152606401610bfa565b600854612db4906001600160401b031642613586565b60008481526005602090815260408083206001600160a01b0387168452909152902060010154106117f15760405162461bcd60e51b815260206004820152601060248201526f53545245414d2f544f4f5f4541524c5960801b6044820152606401610bfa565b6001600160e01b03198082161415612e735760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610bfa565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60008083601f840112612ead57600080fd5b5081356001600160401b03811115612ec457600080fd5b6020830191508360208260051b8501011115612edf57600080fd5b9250929050565b6001600160a01b03811681146111e157600080fd5b80356124b881612ee6565b600080600060408486031215612f1b57600080fd5b83356001600160401b03811115612f3157600080fd5b612f3d86828701612e9b565b9094509250506020840135612f5181612ee6565b809150509250925092565b60008060208385031215612f6f57600080fd5b82356001600160401b03811115612f8557600080fd5b612f9185828601612e9b565b90969095509350505050565b600060208284031215612faf57600080fd5b81356001600160e01b03198116811461151557600080fd5b600060208083528351808285015260005b81811015612ff457858101830151858201604001528201612fd8565b81811115613006576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561302e57600080fd5b5035919050565b80356001600160401b03811681146124b857600080fd5b60006020828403121561305e57600080fd5b61151582613035565b6020808252825182820181905260009190848201906040850190845b8181101561309f57835183529284019291840191600101613083565b50909695505050505050565b600080604083850312156130be57600080fd5b8235915060208301356130d081612ee6565b809150509250929050565b6000602082840312156130ed57600080fd5b813561151581612ee6565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561315357634e487b7160e01b600052604160045260246000fd5b60405290565b60008082840361016081121561316e57600080fd5b6101408082121561317e57600080fd5b613186613122565b915061319185612efb565b825261319f60208601613035565b60208301526131b060408601613035565b60408301526131c160608601613035565b6060830152608085013560808301526131dc60a08601613035565b60a08301526131ed60c08601613035565b60c08301526131fe60e08601613035565b60e0830152610100858101359083015261012061321c818701613035565b818401525081935061322f818601612efb565b925050509250929050565b6000806000806060858703121561325057600080fd5b84356001600160401b0381111561326657600080fd5b61327287828801612e9b565b909550935050602085013561328681612ee6565b9150604085013561329681612ee6565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156132e0576132e06132b7565b500190565b60006000198214156132f9576132f96132b7565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561334757600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561337957600080fd5b8151801515811461151557600080fd5b60208082526016908201527514d5149150534bd393d517d4d5105495115117d6515560521b604082015260600190565b60208082526014908201527314d5149150534bd0d3d3919251d7d313d0d2d15160621b604082015260600190565b60006001600160401b0383811690831681811015613407576134076132b7565b039392505050565b60006001600160401b03828116848216808303821115613431576134316132b7565b01949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b038381168061346a5761346a61343a565b92169190910492915050565b6000816000190483118215151615613490576134906132b7565b500290565b6000826134a4576134a461343a565b500490565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156134f257600080fd5b815161151581612ee6565b81835260006001600160fb1b0383111561351657600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020815260006121ee6020830184866134fd565b600060018060a01b038089168352808816602084015260a0604084015261357260a0840187896134fd565b941660608301525060800152949350505050565b600082821015613598576135986132b7565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526016908201527529aa2922a0a697a727aa2faa27a5a2a72fa7aba722a960511b604082015260600190565b60208082526022908201527f53545245414d2f4d41585f5354414b455f4455524154494f4e5f455843454544604082015261115160f21b60608201526080019056fe455243373231204c6f636b6564205374616b696e6720456d697373696f6e2053747265616da2646970667358221220580a962c82ee065fb562917b1b504152aa92a7fa58a4c87249f194d6ca9cc53464736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102d75760003560e01c80630191c0af146102f057806301c1dfba1461032357806301ffc9a71461034357806306fdde031461037357806308289dbe1461039557806308ae7e54146103e35780630c805a44146104035780630fbf0a931461043957806314427a96146104595780631bc51b26146104795780631c725fdc1461048d57806325289bad146104ad578063277d048b146104d45780632890d033146104e95780632c0e1313146104fe5780632e17de781461051e57806333abcdbd1461053e578063379607f51461055e5780633a73f7d61461057e5780633b3f12e21461059e5780633d2dded5146105be5780634abb4c49146105fb5780634e63178314610628578063513da9481461064957806354fd4d501461067057806357dc48c81461069f57806361949636146106f35780636ba4c13814610713578063715018a61461073357806378b094ca14610748578063790c0c73146107685780638368909c1461078857806389c6b815146107af5780638da5cb5b146107cf5780639199690b14610479578063968d9b2c146107f157806396afc450146108115780639edfe83014610827578063a1bdb15e14610847578063a1cf649314610867578063a5549bc6146108aa578063a5b23be7146108ca578063a694fc3a146108ea578063a86b21e81461090a578063a8a67c8c1461092a578063aaf2f9991461094a578063ae890c0a1461096a578063c08818491461098a578063d0d6641d146109c0578063d1335b6914610479578063d4244f24146109e0578063d5ed4d5a14610a07578063d664280114610479578063d97314f514610a27578063dd11247e14610a47578063dda8820f14610479578063ddd5e1b214610a5d578063de76a67614610a7d578063e449f34114610a9d578063f2fde38b14610abd578063f389b6e414610add578063f4415ad614610afd578063f593dfc814610b35578063f66e38c214610b5557600080fd5b366102eb57600034116102e957600080fd5b005b600080fd5b3480156102fc57600080fd5b5061031061030b366004612f06565b610b75565b6040519081526020015b60405180910390f35b34801561032f57600080fd5b506102e961033e366004612f5c565b610bcb565b34801561034f57600080fd5b5061036361035e366004612f9d565b610e1f565b604051901515815260200161031a565b34801561037f57600080fd5b50610388610e5f565b60405161031a9190612fc7565b3480156103a157600080fd5b506103cb6103b036600461301c565b600c602052600090815260409020546001600160401b031681565b6040516001600160401b03909116815260200161031a565b3480156103ef57600080fd5b50600a546103cb906001600160401b031681565b34801561040f57600080fd5b506103cb61041e36600461301c565b600b602052600090815260409020546001600160401b031681565b34801561044557600080fd5b506102e9610454366004612f5c565b610e7b565b34801561046557600080fd5b50600d546103cb906001600160401b031681565b34801561048557600080fd5b506001610363565b34801561049957600080fd5b506102e96104a836600461304c565b610ec0565b3480156104b957600080fd5b506004546103cb90600160a01b90046001600160401b031681565b3480156104e057600080fd5b506102e9610f77565b3480156104f557600080fd5b50610310610fe4565b34801561050a57600080fd5b506102e961051936600461304c565b610ff5565b34801561052a57600080fd5b506102e961053936600461301c565b611078565b34801561054a57600080fd5b506103cb61055936600461301c565b6110e1565b34801561056a57600080fd5b506102e961057936600461301c565b6111d6565b34801561058a57600080fd5b50610310610599366004612f5c565b6111e4565b3480156105aa57600080fd5b506103106105b9366004612f06565b611236565b3480156105ca57600080fd5b506000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f854610310565b34801561060757600080fd5b5061061b610616366004612f5c565b6112b4565b60405161031a9190613067565b34801561063457600080fd5b5060025461036390600160a01b900460ff1681565b34801561065557600080fd5b506008546103cb90600160401b90046001600160401b031681565b34801561067c57600080fd5b5061038860405180604001604052806003815260200162302e3160e81b81525081565b3480156106ab57600080fd5b506106de6106ba3660046130ab565b60056020908152600092835260408084209091529082529020805460019091015482565b6040805192835260208301919091520161031a565b3480156106ff57600080fd5b506008546103cb906001600160401b031681565b34801561071f57600080fd5b506102e961072e366004612f5c565b61135f565b34801561073f57600080fd5b506102e961136c565b34801561075457600080fd5b506102e961076336600461304c565b6113a7565b34801561077457600080fd5b506103106107833660046130db565b611434565b34801561079457600080fd5b506008546103cb90600160801b90046001600160401b031681565b3480156107bb57600080fd5b506103106107ca366004612f5c565b611507565b3480156107db57600080fd5b506107e461151c565b60405161031a91906130f8565b3480156107fd57600080fd5b5061031061080c36600461301c565b61152b565b34801561081d57600080fd5b5061031060075481565b34801561083357600080fd5b5061031061084236600461304c565b611538565b34801561085357600080fd5b506102e961086236600461301c565b61157d565b34801561087357600080fd5b506103106108823660046130ab565b60009182526005602090815260408084206001600160a01b0393909316845291905290205490565b3480156108b657600080fd5b506102e96108c536600461304c565b6115e3565b3480156108d657600080fd5b506103106108e536600461301c565b611666565b3480156108f657600080fd5b506102e961090536600461301c565b61169e565b34801561091657600080fd5b5061031061092536600461304c565b6116de565b34801561093657600080fd5b506102e9610945366004613159565b61171a565b34801561095657600080fd5b506102e961096536600461304c565b6117f6565b34801561097657600080fd5b506102e961098536600461301c565b611883565b34801561099657600080fd5b506103106109a53660046130db565b6001600160a01b031660009081526006602052604090205490565b3480156109cc57600080fd5b506103106109db36600461301c565b6118e9565b3480156109ec57600080fd5b50600a546103cb90600160401b90046001600160401b031681565b348015610a1357600080fd5b506004546107e4906001600160a01b031681565b348015610a3357600080fd5b506102e9610a4236600461304c565b611943565b348015610a5357600080fd5b5061031060095481565b348015610a6957600080fd5b506102e9610a783660046130ab565b6119c6565b348015610a8957600080fd5b506103cb610a98366004612f5c565b611c58565b348015610aa957600080fd5b506102e9610ab8366004612f5c565b611ca4565b348015610ac957600080fd5b506102e9610ad83660046130db565b611d15565b348015610ae957600080fd5b506102e9610af836600461323a565b611db2565b348015610b0957600080fd5b50610310610b1836600461301c565b600090815260056020908152604080832083805290915290205490565b348015610b4157600080fd5b506102e9610b5036600461304c565b612112565b348015610b6157600080fd5b50610310610b703660046130ab565b61219f565b600080805b84811015610bc257610ba4868683818110610b9757610b976132a1565b905060200201358561219f565b610bae90836132cd565b915080610bba816132e5565b915050610b7a565b50949350505050565b33610bd461151c565b6001600160a01b031614610c035760405162461bcd60e51b8152600401610bfa90613300565b60405180910390fd5b600254600160a01b900460ff1615610c575760405162461bcd60e51b81526020600482015260176024820152761153515491d15390d657d413d5d15497d4915593d2d151604a1b6044820152606401610bfa565b6000610c6161151c565b905060005b82811015610e19576000848483818110610c8257610c826132a1565b9050602002016020810190610c9791906130db565b6001600160a01b03161415610cbe57610cb96001600160a01b03831647612205565b610e07565b838382818110610cd057610cd06132a1565b9050602002016020810190610ce591906130db565b6001600160a01b031663a9059cbb83868685818110610d0657610d066132a1565b9050602002016020810190610d1b91906130db565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d4691906130f8565b60206040518083038186803b158015610d5e57600080fd5b505afa158015610d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d969190613335565b6040518363ffffffff1660e01b8152600401610db392919061334e565b602060405180830381600087803b158015610dcd57600080fd5b505af1158015610de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e059190613367565b505b80610e11816132e5565b915050610c66565b50505050565b60006301ffc9a760e01b6001600160e01b031983161480610e5957506001600160e01b0319821660009081526001602052604090205460ff165b92915050565b6040518060600160405280602581526020016136a96025913981565b6008546001600160401b03600160401b9091048116429091161015610eb25760405162461bcd60e51b8152600401610bfa90613389565b610ebc828261231b565b5050565b33610ec961151c565b6001600160a01b031614610eef5760405162461bcd60e51b8152600401610bfa90613300565b6004546001600160401b03600160a01b909104811690821611610f4b5760405162461bcd60e51b815260206004820152601460248201527314d5149150534bd0d0539393d517d49155d2539160621b6044820152606401610bfa565b600480546001600160401b03909216600160a01b02600160a01b600160e01b0319909216919091179055565b33610f8061151c565b6001600160a01b031614610fa65760405162461bcd60e51b8152600401610bfa90613300565b6002805460ff60a01b1916600160a01b1790556040517f21fadcdbe90fc4e8062dd78003616bbe56d48e0f1bfc58eacd10b11bba16b79690600090a1565b6000610ff06000611434565b905090565b33610ffe61151c565b6001600160a01b0316146110245760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106110565760405162461bcd60e51b8152600401610bfa906133b9565b600d80546001600160401b0319166001600160401b0392909216919091179055565b61108181612356565b60048054604051636198e33960e01b81529182018390526001600160a01b031690636198e339906024015b600060405180830381600087803b1580156110c657600080fd5b505af11580156110da573d6000803e3d6000fd5b5050505050565b6000818152600c6020908152604080832054600b9092528220546001600160401b0391821691161561119e576000611117612361565b905042816001600160401b0316111561112d5750425b6000848152600b60205260409020546001600160401b03161561119c576000848152600b60205260409020546001600160401b03908116908216111561119c576000848152600b602052604090205461118f906001600160401b0316826133e7565b611199908361340f565b91505b505b600a546001600160401b03600160401b90910481169082161115610e595750600a54600160401b90046001600160401b031692915050565b6111e18160006119c6565b50565b6000805b8281101561122f57611211848483818110611205576112056132a1565b90506020020135611666565b61121b90836132cd565b915080611227816132e5565b9150506111e8565b5092915050565b600080805b84811015610bc25760056000878784818110611259576112596132a1565b9050602002013581526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060000154826112a091906132cd565b9150806112ac816132e5565b91505061123b565b60606000826001600160401b038111156112d0576112d061310c565b6040519080825280602002602001820160405280156112f9578160200160208202803683370190505b50905060005b838110156113575761132885858381811061131c5761131c6132a1565b905060200201356118e9565b82828151811061133a5761133a6132a1565b60209081029190910101528061134f816132e5565b9150506112ff565b509392505050565b610ebc8282600033611db2565b3361137561151c565b6001600160a01b03161461139b5760405162461bcd60e51b8152600401610bfa90613300565b6113a5600061239f565b565b336113b061151c565b6001600160a01b0316146113d65760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106114085760405162461bcd60e51b8152600401610bfa906133b9565b600880546001600160401b03909216600160801b02600160801b600160c01b0319909216919091179055565b60006001600160a01b038216611468576001600160a01b038216600090815260066020526040902054610e599047906132cd565b6040516370a0823160e01b81526001600160a01b038316906370a08231906114949030906004016130f8565b60206040518083038186803b1580156114ac57600080fd5b505afa1580156114c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e49190613335565b6001600160a01b038316600090815260066020526040902054610e5991906132cd565b600061151583836000611236565b9392505050565b6002546001600160a01b031690565b6000610e5982600061219f565b6008546000906001600160401b038082169161155d91600160401b90910416846133e7565b6115679190613450565b6001600160401b0316600754610e599190613476565b3361158661151c565b6001600160a01b0316146115ac5760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106115de5760405162461bcd60e51b8152600401610bfa906133b9565b600755565b336115ec61151c565b6001600160a01b0316146116125760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106116445760405162461bcd60e51b8152600401610bfa906133b9565b600a80546001600160401b0319166001600160401b0392909216919091179055565b6008546000906001600160401b031661167e836110e1565b6001600160401b03166007546116949190613476565b610e599190613495565b6008546001600160401b03600160401b90910481164290911610156116d55760405162461bcd60e51b8152600401610bfa90613389565b6111e1816123f1565b6008546007546000916001600160401b03808216929161170791600160401b90910416856133e7565b6001600160401b03166116949190613476565b60006117266001612429565b9050801561173e576000805461ff0019166101001790555b6117478261239f565b61174f6124bd565b611761836000015184602001516124ec565b6117738360400151846060015161251d565b61178f83608001518460a001518560c001518660e00151612556565b61179d836101000151612589565b6117ab8361012001516125b9565b80156117f1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b336117ff61151c565b6001600160a01b0316146118255760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106118575760405162461bcd60e51b8152600401610bfa906133b9565b600880546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b3361188c61151c565b6001600160a01b0316146118b25760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106118e45760405162461bcd60e51b8152600401610bfa906133b9565b600955565b6000818152600b60205260408120546001600160401b031661190c576000611934565b600a546000838152600b6020526040902054611934916001600160401b03908116911661340f565b6001600160401b031692915050565b3361194c61151c565b6001600160a01b0316146119725760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106119a45760405162461bcd60e51b8152600401610bfa906133b9565b600880546001600160401b0319166001600160401b0392909216919091179055565b600260035414156119e95760405162461bcd60e51b8152600401610bfa906134a9565b6002600355600480546040516331a9108f60e11b81529182018490526000916001600160a01b0390911690636352211e9060240160206040518083038186803b158015611a3557600080fd5b505afa158015611a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6d91906134e0565b9050611a7a8383836125e9565b6000611a86848461219f565b905060008111611ad25760405162461bcd60e51b815260206004820152601760248201527653545245414d2f4e4f5448494e475f544f5f434c41494d60481b6044820152606401610bfa565b60008481526005602090815260408083206001600160a01b038716845290915281208054839290611b049084906132cd565b909155505060008481526005602090815260408083206001600160a01b0387168452825280832042600190910155600690915281208054839290611b499084906132cd565b90915550506001600160a01b038316611b7457611b6f6001600160a01b03831682612205565b611bf6565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611ba2908590859060040161334e565b602060405180830381600087803b158015611bbc57600080fd5b505af1158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf49190613367565b505b604080513381526001600160a01b038481166020830152818301879052851660608201526080810183905290517fa2d3c4c1fc934d6d2d8f9e862df90c01ae4eb0e920cd8957d242ba26b8dc40789181900360a00190a1505060016003555050565b600080805b8381101561135757611c86858583818110611c7a57611c7a6132a1565b905060200201356110e1565b611c90908361340f565b915080611c9c816132e5565b915050611c5d565b611cae82826125ff565b60048054604051635d36598f60e01b81526001600160a01b0390911691635d36598f91611cdf918691869101613533565b600060405180830381600087803b158015611cf957600080fd5b505af1158015611d0d573d6000803e3d6000fd5b505050505050565b33611d1e61151c565b6001600160a01b031614611d445760405162461bcd60e51b8152600401610bfa90613300565b6001600160a01b038116611da95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bfa565b6111e18161239f565b60026003541415611dd55760405162461bcd60e51b8152600401610bfa906134a9565b60026003556000805b84811015611fef57611e09868683818110611dfb57611dfb6132a1565b9050602002013585856125e9565b6004546001600160a01b038085169116636352211e888885818110611e3057611e306132a1565b905060200201356040518263ffffffff1660e01b8152600401611e5591815260200190565b60206040518083038186803b158015611e6d57600080fd5b505afa158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea591906134e0565b6001600160a01b031614611ef25760405162461bcd60e51b815260206004820152601460248201527329aa2922a0a697a727aa2fa7232a2fa7aba722a960611b6044820152606401610bfa565b6000611f16878784818110611f0957611f096132a1565b905060200201358661219f565b90508015611fdc578060056000898986818110611f3557611f356132a1565b9050602002013581526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000206000016000828254611f7f91906132cd565b9091555042905060056000898986818110611f9c57611f9c6132a1565b6020908102929092013583525081810192909252604090810160009081206001600160a01b038a168252909252902060010155611fd981846132cd565b92505b5080611fe7816132e5565b915050611dde565b506001600160a01b038316600090815260066020526040812080548392906120189084906132cd565b90915550506001600160a01b0383166120435761203e6001600160a01b03831682612205565b6120c5565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90612071908590859060040161334e565b602060405180830381600087803b15801561208b57600080fd5b505af115801561209f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c39190613367565b505b7fd84a5c424a4f777bcf4f645712b8e5ebfc550f42bde444fa822fe98ee1b132b13383878787866040516120fe96959493929190613547565b60405180910390a150506001600355505050565b3361211b61151c565b6001600160a01b0316146121415760405162461bcd60e51b8152600401610bfa90613300565b60045442600160a01b9091046001600160401b0316106121735760405162461bcd60e51b8152600401610bfa906133b9565b600a80546001600160401b03909216600160401b02600160401b600160801b0319909216919091179055565b6000806121be6121b76121b185611434565b50600090565b8585612785565b60008581526005602090815260408083206001600160a01b03881684529091529020549091506121ee9082613586565b949350505050565b6001600160a01b03163b151590565b804710156122555760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610bfa565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146122a2576040519150601f19603f3d011682016040523d82523d6000602084013e6122a7565b606091505b50509050806117f15760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610bfa565b61232582826125ff565b600480546040516342cb086360e11b81526001600160a01b039091169163859610c691611cdf918691869101613533565b6111e13342836127ca565b600854600090600160801b90046001600160401b0316156123935750600854600160801b90046001600160401b031690565b506001600160401b0390565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6123fa8161299f565b600480546040516337519c1960e21b81529182018390526001600160a01b03169063dd467064906024016110ac565b60008054610100900460ff1615612477578160ff1660011480156124535750612451306121f6565b155b61246f5760405162461bcd60e51b8152600401610bfa9061359d565b506000919050565b60005460ff80841691161061249e5760405162461bcd60e51b8152600401610bfa9061359d565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166124e45760405162461bcd60e51b8152600401610bfa906135eb565b6113a5612ab4565b600054610100900460ff166125135760405162461bcd60e51b8152600401610bfa906135eb565b610ebc8282612aeb565b600054610100900460ff166125445760405162461bcd60e51b8152600401610bfa906135eb565b61254c612b50565b610ebc8282612b87565b600054610100900460ff1661257d5760405162461bcd60e51b8152600401610bfa906135eb565b610e1984848484612be6565b600054610100900460ff166125b05760405162461bcd60e51b8152600401610bfa906135eb565b6111e181612c67565b600054610100900460ff166125e05760405162461bcd60e51b8152600401610bfa906135eb565b6111e181612ca3565b6125f4838383612cf5565b6117f1838383612d47565b334260005b838110156110da576004546001600160a01b0316636352211e86868481811061262f5761262f6132a1565b905060200201356040518263ffffffff1660e01b815260040161265491815260200190565b60206040518083038186803b15801561266c57600080fd5b505afa158015612680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a491906134e0565b6001600160a01b0316836001600160a01b0316146126d45760405162461bcd60e51b8152600401610bfa90613636565b600a54600160401b90046001600160401b03166126fc868684818110611c7a57611c7a6132a1565b6001600160401b0316106127225760405162461bcd60e51b8152600401610bfa90613666565b81600b6000878785818110612739576127396132a1565b90506020020135815260200190815260200160002060006101000a8154816001600160401b0302191690836001600160401b03160217905550808061277d906132e5565b915050612604565b6008546000906001600160401b031661279d846110e1565b6127a79190613450565b6001600160401b03166009546007546127c09190613495565b6121ee9190613476565b6000818152600b60205260409020546001600160401b03166128225760405162461bcd60e51b815260206004820152601160248201527014d5149150534bd393d517d4d51052d151607a1b6044820152606401610bfa565b600a546000828152600b602052604090205461284a916001600160401b03908116911661340f565b6001600160401b0316826001600160401b031610156128ab5760405162461bcd60e51b815260206004820152601d60248201527f53545245414d2f4e4f545f5354414b45445f4c4f4e475f454e4f5547480000006044820152606401610bfa565b600480546040516331a9108f60e11b81529182018390526001600160a01b031690636352211e9060240160206040518083038186803b1580156128ed57600080fd5b505afa158015612901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292591906134e0565b6001600160a01b0316836001600160a01b0316146129555760405162461bcd60e51b8152600401610bfa90613636565b61295e816110e1565b6000918252600c6020908152604080842080546001600160401b03949094166001600160401b0319948516179055600b909152909120805490911690555050565b600480546040516331a9108f60e11b81529182018390526001600160a01b031690636352211e9060240160206040518083038186803b1580156129e157600080fd5b505afa1580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1991906134e0565b6001600160a01b0316336001600160a01b031614612a495760405162461bcd60e51b8152600401610bfa90613636565b600a54600160401b90046001600160401b0316612a65826110e1565b6001600160401b031610612a8b5760405162461bcd60e51b8152600401610bfa90613666565b6000908152600b6020526040902080546001600160401b031916426001600160401b0316179055565b600054610100900460ff16612adb5760405162461bcd60e51b8152600401610bfa906135eb565b6113a56326bcdb3160e01b612e1a565b600054610100900460ff16612b125760405162461bcd60e51b8152600401610bfa906135eb565b600480546001600160401b038316600160a01b026001600160e01b03199091166001600160a01b03851617179055610ebc631ba050e960e21b612e1a565b600054610100900460ff16612b775760405162461bcd60e51b8152600401610bfa906135eb565b6113a563d664280160e01b612e1a565b600054610100900460ff16612bae5760405162461bcd60e51b8152600401610bfa906135eb565b600a80546001600160401b03838116600160401b026001600160801b031990921690851617179055610ebc633a41ba5360e11b612e1a565b600054610100900460ff16612c0d5760405162461bcd60e51b8152600401610bfa906135eb565b6007849055600880546001600160401b03838116600160801b02600160801b600160c01b0319868316600160401b026001600160801b0319909416928816929092179290921716179055610e19634d0b5a4960e01b612e1a565b600054610100900460ff16612c8e5760405162461bcd60e51b8152600401610bfa906135eb565b60098190556111e1632d5305cb60e21b612e1a565b600054610100900460ff16612cca5760405162461bcd60e51b8152600401610bfa906135eb565b600d80546001600160401b0319166001600160401b0383161790556111e16317b2ef4360e31b612e1a565b600d54426001600160401b03909116106117f15760405162461bcd60e51b815260206004820152601360248201527214d5149150534bd0d310525357d313d0d2d151606a1b6044820152606401610bfa565b60085442600160401b9091046001600160401b031610612d9e5760405162461bcd60e51b815260206004820152601260248201527114d5149150534bd393d517d4d5105495115160721b6044820152606401610bfa565b600854612db4906001600160401b031642613586565b60008481526005602090815260408083206001600160a01b0387168452909152902060010154106117f15760405162461bcd60e51b815260206004820152601060248201526f53545245414d2f544f4f5f4541524c5960801b6044820152606401610bfa565b6001600160e01b03198082161415612e735760405162461bcd60e51b815260206004820152601c60248201527b115490cc4d8d4e881a5b9d985b1a59081a5b9d195c999858d9481a5960221b6044820152606401610bfa565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b60008083601f840112612ead57600080fd5b5081356001600160401b03811115612ec457600080fd5b6020830191508360208260051b8501011115612edf57600080fd5b9250929050565b6001600160a01b03811681146111e157600080fd5b80356124b881612ee6565b600080600060408486031215612f1b57600080fd5b83356001600160401b03811115612f3157600080fd5b612f3d86828701612e9b565b9094509250506020840135612f5181612ee6565b809150509250925092565b60008060208385031215612f6f57600080fd5b82356001600160401b03811115612f8557600080fd5b612f9185828601612e9b565b90969095509350505050565b600060208284031215612faf57600080fd5b81356001600160e01b03198116811461151557600080fd5b600060208083528351808285015260005b81811015612ff457858101830151858201604001528201612fd8565b81811115613006576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561302e57600080fd5b5035919050565b80356001600160401b03811681146124b857600080fd5b60006020828403121561305e57600080fd5b61151582613035565b6020808252825182820181905260009190848201906040850190845b8181101561309f57835183529284019291840191600101613083565b50909695505050505050565b600080604083850312156130be57600080fd5b8235915060208301356130d081612ee6565b809150509250929050565b6000602082840312156130ed57600080fd5b813561151581612ee6565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561315357634e487b7160e01b600052604160045260246000fd5b60405290565b60008082840361016081121561316e57600080fd5b6101408082121561317e57600080fd5b613186613122565b915061319185612efb565b825261319f60208601613035565b60208301526131b060408601613035565b60408301526131c160608601613035565b6060830152608085013560808301526131dc60a08601613035565b60a08301526131ed60c08601613035565b60c08301526131fe60e08601613035565b60e0830152610100858101359083015261012061321c818701613035565b818401525081935061322f818601612efb565b925050509250929050565b6000806000806060858703121561325057600080fd5b84356001600160401b0381111561326657600080fd5b61327287828801612e9b565b909550935050602085013561328681612ee6565b9150604085013561329681612ee6565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156132e0576132e06132b7565b500190565b60006000198214156132f9576132f96132b7565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561334757600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561337957600080fd5b8151801515811461151557600080fd5b60208082526016908201527514d5149150534bd393d517d4d5105495115117d6515560521b604082015260600190565b60208082526014908201527314d5149150534bd0d3d3919251d7d313d0d2d15160621b604082015260600190565b60006001600160401b0383811690831681811015613407576134076132b7565b039392505050565b60006001600160401b03828116848216808303821115613431576134316132b7565b01949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b038381168061346a5761346a61343a565b92169190910492915050565b6000816000190483118215151615613490576134906132b7565b500290565b6000826134a4576134a461343a565b500490565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156134f257600080fd5b815161151581612ee6565b81835260006001600160fb1b0383111561351657600080fd5b8260051b8083602087013760009401602001938452509192915050565b6020815260006121ee6020830184866134fd565b600060018060a01b038089168352808816602084015260a0604084015261357260a0840187896134fd565b941660608301525060800152949350505050565b600082821015613598576135986132b7565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526016908201527529aa2922a0a697a727aa2faa27a5a2a72fa7aba722a960511b604082015260600190565b60208082526022908201527f53545245414d2f4d41585f5354414b455f4455524154494f4e5f455843454544604082015261115160f21b60608201526080019056fe455243373231204c6f636b6564205374616b696e6720456d697373696f6e2053747265616da2646970667358221220580a962c82ee065fb562917b1b504152aa92a7fa58a4c87249f194d6ca9cc53464736f6c63430008090033",
  "devdoc": {
    "author": "Flair (https://flair.finance)",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 886,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 889,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4693,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 782,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12716,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "emergencyPowerRevoked",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1124,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13891,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "ticketToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13893,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "lockedUntilTimestamp",
        "offset": 20,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 13900,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "entitlements",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)13889_storage))"
      },
      {
        "astId": 13904,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "_streamTotalClaimed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14622,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "emissionRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14624,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "emissionTimeUnit",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 14626,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "emissionStart",
        "offset": 8,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 14628,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "emissionEnd",
        "offset": 16,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 14931,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "totalTickets",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 15693,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "minStakingDuration",
        "offset": 0,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 15695,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "maxStakingTotalDurations",
        "offset": 8,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 15699,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "lastStakingTime",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint64)"
      },
      {
        "astId": 15703,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "savedStakedDurations",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint64)"
      },
      {
        "astId": 15123,
        "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
        "label": "claimLockedUntil",
        "offset": 0,
        "slot": "13",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Entitlement)13889_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721MultiTokenStream.Entitlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Entitlement)13889_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Entitlement)13889_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ERC721MultiTokenStream.Entitlement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Entitlement)13889_storage)"
      },
      "t_mapping(t_uint256,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_struct(Entitlement)13889_storage": {
        "encoding": "inplace",
        "label": "struct ERC721MultiTokenStream.Entitlement",
        "members": [
          {
            "astId": 13886,
            "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
            "label": "totalClaimed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13888,
            "contract": "contracts/streams/ERC721/presets/ERC721LockedStakingEmissionStream.sol:ERC721LockedStakingEmissionStream",
            "label": "lastClaimedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}