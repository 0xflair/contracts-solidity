{
  "address": "0x03b6AEd42C5eEB623C1C7b0c39211999f5DcF8a8",
  "abi": [
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb228c58f3cfc2a7c051c8e7c5205f14f07543dc4a344cf3d190ca71ede380431",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x03b6AEd42C5eEB623C1C7b0c39211999f5DcF8a8",
    "transactionIndex": 27,
    "gasUsed": "170683",
    "logsBloom": "0x
    "blockHash": "0xaf5026c80500665b6ec21c8c03fe2c4362716f246ba0164d93e4b3278708165a",
    "transactionHash": "0xb228c58f3cfc2a7c051c8e7c5205f14f07543dc4a344cf3d190ca71ede380431",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 28739514,
        "transactionHash": "0xb228c58f3cfc2a7c051c8e7c5205f14f07543dc4a344cf3d190ca71ede380431",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000e8da596055000000000000000000000000000000000000000000000000001c815d1a9c6432ee0000000000000000000000000000000000000000000016f4a4454831c89536b30000000000000000000000000000000000000000000000001c8074404303ddee0000000000000000000000000000000000000000000016f4a446310c21f58bb3",
        "logIndex": 113,
        "blockHash": "0xaf5026c80500665b6ec21c8c03fe2c4362716f246ba0164d93e4b3278708165a"
      }
    ],
    "blockNumber": 28739514,
    "cumulativeGasUsed": "3567836",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48f4524ebff8b0366d06eec787eed08d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Tokens\",\"custom:provides-interfaces\":\"IMetadata\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Metadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides contract name and symbol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/common/metadata/Metadata.sol\":\"Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/token/common/metadata/IMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IMetadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfb2be5baa663f41de00f7210b19a268b8614fb0bf03b7ab5612c3e449425d2e6\",\"license\":\"MIT\"},\"src/token/common/metadata/Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IMetadata.sol\\\";\\nimport \\\"./MetadataStorage.sol\\\";\\n\\n/**\\n * @title Metadata\\n * @notice Provides contract name and symbol.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Tokens\\n * @custom:provides-interfaces IMetadata\\n */\\ncontract Metadata is IMetadata {\\n    function name() external view virtual override returns (string memory) {\\n        return MetadataStorage.layout().name;\\n    }\\n\\n    function symbol() external view virtual override returns (string memory) {\\n        return MetadataStorage.layout().symbol;\\n    }\\n}\\n\",\"keccak256\":\"0x6378dd7744a7cb44851de26ec17e1230329d27451b05afedd75a47b07bd7efe9\",\"license\":\"MIT\"},\"src/token/common/metadata/MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.Metadata\\\");\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        bool nameAndSymbolLocked;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc40b23a3c652d05174c270e1a95d402320a5a6e33ae48f78927f3f481ce568c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610221806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806395d89b4114610059575b600080fd5b610043610061565b6040516100509190610143565b60405180910390f35b610043610112565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc805461008f90610198565b80601f01602080910402602001604051908101604052809291908181526020018280546100bb90610198565b80156101085780601f106100dd57610100808354040283529160200191610108565b820191906000526020600020905b8154815290600101906020018083116100eb57829003601f168201915b5050505050905090565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600101805461008f90610198565b600060208083528351808285015260005b8181101561017057858101830151858201604001528201610154565b81811115610182576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806101ac57607f821691505b6020821081036101e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220fc848f62ea1a62c08a725c92b0237f2217bf9a2983d3531b637a8a713911c82c64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806395d89b4114610059575b600080fd5b610043610061565b6040516100509190610143565b60405180910390f35b610043610112565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc805461008f90610198565b80601f01602080910402602001604051908101604052809291908181526020018280546100bb90610198565b80156101085780601f106100dd57610100808354040283529160200191610108565b820191906000526020600020905b8154815290600101906020018083116100eb57829003601f168201915b5050505050905090565b60607f70612f47e27b43eb7f87867b7b8f899a5e08503dcccf1bf322c9eef06483a1fc600101805461008f90610198565b600060208083528351808285015260005b8181101561017057858101830151858201604001528201610154565b81811115610182576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806101ac57607f821691505b6020821081036101e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220fc848f62ea1a62c08a725c92b0237f2217bf9a2983d3531b637a8a713911c82c64736f6c634300080f0033",
  "devdoc": {
    "custom:category": "Tokens",
    "custom:provides-interfaces": "IMetadata",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "Metadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Provides contract name and symbol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}