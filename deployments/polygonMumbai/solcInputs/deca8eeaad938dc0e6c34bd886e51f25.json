{
  "language": "Solidity",
  "sources": {
    "src/token/ERC721/facets/minting/ERC721MintableRoleBasedERC2771.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../metatx/ERC2771ContextInternal.sol\";\nimport \"./ERC721MintableRoleBased.sol\";\n\n/**\n * @dev Extension of {ERC721} to mint by MINTER_ROLE\n */\n/**\n * @title ERC721 - Mint as role - with meta-transactions\n * @notice Allow minting for senders with MINTER_ROLE to mint new tokens with meta-transactions supported via ERC2771 (supports ERC721A).\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:required-dependencies IERC721MintableExtension\n * @custom:provides-interfaces IERC721MintableRoleBased\n */\ncontract ERC721MintableRoleBasedERC2771 is ERC721MintableRoleBased, ERC2771ContextInternal {\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\n        return ERC2771ContextInternal._msgSender();\n    }\n\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\n        return ERC2771ContextInternal._msgData();\n    }\n}\n"
    },
    "src/metatx/ERC2771ContextInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"./ERC2771ContextStorage.sol\";\n\nabstract contract ERC2771ContextInternal is Context {\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (_isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (_isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "src/token/ERC721/facets/minting/ERC721MintableRoleBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"../../../../common/Errors.sol\";\nimport \"../../../../access/roles/AccessControlInternal.sol\";\nimport \"../../extensions/mintable/IERC721MintableExtension.sol\";\nimport \"../../../common/metadata/TokenMetadataAdminInternal.sol\";\nimport \"../../../ERC721/extensions/supply/ERC721SupplyStorage.sol\";\nimport \"./IERC721MintableRoleBased.sol\";\n\n/**\n * @title ERC721 - Mint as role\n * @notice Allow minting for senders with MINTER_ROLE to mint new tokens (supports ERC721A).\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:required-dependencies IERC721MintableExtension\n * @custom:provides-interfaces IERC721MintableRoleBased\n */\ncontract ERC721MintableRoleBased is IERC721MintableRoleBased, AccessControlInternal, TokenMetadataAdminInternal {\n    using ERC721SupplyStorage for ERC721SupplyStorage.Layout;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    /**\n     * @inheritdoc IERC721MintableRoleBased\n     */\n    function mintByRole(address to, uint256 amount) public virtual onlyRole(MINTER_ROLE) {\n        IERC721MintableExtension(address(this)).mintByFacet(to, amount);\n    }\n\n    /**\n     * @inheritdoc IERC721MintableRoleBased\n     */\n    function mintByRole(address[] calldata tos, uint256[] calldata amounts) public virtual onlyRole(MINTER_ROLE) {\n        IERC721MintableExtension(address(this)).mintByFacet(tos, amounts);\n    }\n\n    /**\n     * @inheritdoc IERC721MintableRoleBased\n     */\n    function mintByRole(\n        address to,\n        uint256 amount,\n        string[] calldata tokenURIs\n    ) public virtual onlyRole(MINTER_ROLE) {\n        uint256 nextTokenId = ERC721SupplyStorage.layout().currentIndex;\n\n        IERC721MintableExtension(address(this)).mintByFacet(to, amount);\n\n        for (uint256 i = 0; i < amount; i++) {\n            _setURI(nextTokenId + i, tokenURIs[i]);\n        }\n    }\n}\n"
    },
    "src/metatx/ERC2771ContextStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary ERC2771ContextStorage {\n    struct Layout {\n        address trustedForwarder;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.ERC2771Context\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/common/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * The caller must be the current contract itself.\n */\nerror ErrSenderIsNotSelf();\n"
    },
    "src/access/roles/AccessControlInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./AccessControlStorage.sol\";\nimport \"./IAccessControlEvents.sol\";\n\nabstract contract AccessControlInternal is Context, IAccessControlEvents {\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function _hasRole(bytes32 role, address account) internal view virtual returns (bool) {\n        return AccessControlStorage.layout().roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!_hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function _getRoleAdmin(bytes32 role) internal view virtual returns (bytes32) {\n        return AccessControlStorage.layout().roles[role].adminRole;\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _renounceRole(bytes32 role, address account) internal virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = _getRoleAdmin(role);\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!_hasRole(role, account)) {\n            AccessControlStorage.layout().roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (_hasRole(role, account)) {\n            AccessControlStorage.layout().roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "src/token/ERC721/extensions/mintable/IERC721MintableExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC721A} that allows other facets from the diamond to mint tokens.\n */\ninterface IERC721MintableExtension {\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC721A-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must be diamond itself (other facets).\n     */\n    function mintByFacet(address to, uint256 amount) external;\n\n    function mintByFacet(address[] memory tos, uint256[] memory amounts) external;\n}\n"
    },
    "src/token/common/metadata/TokenMetadataAdminInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"./ITokenMetadataInternal.sol\";\nimport \"./TokenMetadataStorage.sol\";\n\nabstract contract TokenMetadataAdminInternal is ITokenMetadataInternal {\n    function _setBaseURI(string memory baseURI) internal virtual {\n        require(!TokenMetadataStorage.layout().baseURILocked, \"Metadata: baseURI locked\");\n        TokenMetadataStorage.layout().baseURI = baseURI;\n    }\n\n    function _setFallbackURI(string memory baseURI) internal virtual {\n        require(!TokenMetadataStorage.layout().fallbackURILocked, \"Metadata: fallbackURI locked\");\n        TokenMetadataStorage.layout().baseURI = baseURI;\n    }\n\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\n        require(tokenId <= TokenMetadataStorage.layout().lastLockedTokenId, \"Metadata: tokenURI locked\");\n        TokenMetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\n        emit URI(tokenURI, tokenId);\n    }\n\n    function _setURISuffix(string memory uriSuffix) internal virtual {\n        require(!TokenMetadataStorage.layout().uriSuffixLocked, \"Metadata: uriSuffix locked\");\n        TokenMetadataStorage.layout().uriSuffix = uriSuffix;\n    }\n\n    function _lockBaseURI() internal virtual {\n        TokenMetadataStorage.layout().baseURILocked = true;\n    }\n\n    function _lockFallbackURI() internal virtual {\n        TokenMetadataStorage.layout().fallbackURILocked = true;\n    }\n\n    function _lockURIUntil(uint256 tokenId) internal virtual {\n        TokenMetadataStorage.layout().lastLockedTokenId = tokenId;\n    }\n\n    function _lockURISuffix() internal virtual {\n        TokenMetadataStorage.layout().uriSuffixLocked = true;\n    }\n}\n"
    },
    "src/token/ERC721/extensions/supply/ERC721SupplyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary ERC721SupplyStorage {\n    struct Layout {\n        // The next token ID to be minted.\n        uint256 currentIndex;\n        // The number of tokens burned.\n        uint256 burnCounter;\n        // Maximum possible supply of tokens.\n        uint256 maxSupply;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.ERC721Supply\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/token/ERC721/facets/minting/IERC721MintableRoleBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC721} that allows a specific role to mint tokens.\n */\ninterface IERC721MintableRoleBased {\n    /**\n     * @dev Mints `amount` new tokens for `to`.\n     */\n    function mintByRole(address to, uint256 amount) external;\n\n    /**\n     * @dev Mints multiple `amount`s of new tokens for every single address in `tos`.\n     */\n    function mintByRole(address[] calldata tos, uint256[] calldata amounts) external;\n\n    /**\n     * @dev Mint a new token with a dedicated tokenURI.\n     */\n    function mintByRole(\n        address to,\n        uint256 amount,\n        string[] calldata tokenURIs\n    ) external;\n}\n"
    },
    "src/access/roles/AccessControlStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary AccessControlStorage {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    struct Layout {\n        mapping(bytes32 => RoleData) roles;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.AccessControl\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "src/access/roles/IAccessControlEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlEvents {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "src/token/common/metadata/ITokenMetadataInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface ITokenMetadataInternal {\n    event URI(string value, uint256 indexed tokenId);\n}\n"
    },
    "src/token/common/metadata/TokenMetadataStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary TokenMetadataStorage {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.TokenMetadata\");\n\n    struct Layout {\n        string baseURI;\n        bool baseURILocked;\n        string fallbackURI;\n        bool fallbackURILocked;\n        string uriSuffix;\n        bool uriSuffixLocked;\n        uint256 lastLockedTokenId;\n        mapping(uint256 => string) tokenURIs;\n    }\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1337
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}