{
  "address": "0xf56F052e7F19C8ceF2FBf3E881587D14De95C70a",
  "abi": [
    {
      "inputs": [],
      "name": "ErrMaxSupplyExceeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "TierSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MERCHANT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "eligibleForTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxMintable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintByTier",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintByTierByRole",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "onTierAllowlist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "remainingForTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservedMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "tierMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPerWallet",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "reserved",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAllocation",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITieredSalesInternal.Tier",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "walletMintedByTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e8553f09c52a256c8c8f3a26f9a2e48eb659d5181a9857c5ba96c9347b46016",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xf56F052e7F19C8ceF2FBf3E881587D14De95C70a",
    "transactionIndex": 0,
    "gasUsed": "1560958",
    "logsBloom": "0x
    "blockHash": "0xeba26e5cf393fddb930c8c7716b17702bdbb0ff8cb46a7275d439550b048f61d",
    "transactionHash": "0x3e8553f09c52a256c8c8f3a26f9a2e48eb659d5181a9857c5ba96c9347b46016",
    "logs": [],
    "blockNumber": 110981837,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "0caef732459256ed443151237936b3f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ErrMaxSupplyExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"TierSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERCHANT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"eligibleForTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintByTier\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintByTierByRole\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"onTierAllowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"remainingForTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"tierMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"reserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllocation\",\"type\":\"uint256\"}],\"internalType\":\"struct ITieredSalesInternal.Tier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"walletMintedByTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"Tokens\",\"custom:provides-interfaces\":\"ITieredSales ITieredSalesRoleBased\",\"custom:required-dependencies\":\"IERC20MintableExtension IERC20SupplyExtension\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC20 - Tiered Sales\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Sales mechanism for ERC20 tokens with multiple tiered pricing, allowlist and allocation plans.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/ERC20/facets/sales/ERC20TieredSales.sol\":\"ERC20TieredSales\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d14e1780f0ea212b19c07b83c8e51b9dc6903017df71e6de1fae364d724e0d\",\"license\":\"MIT\"},\"src/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xe2a19d82d7050c0cd1afb542253f65ce34a650d7d99c0ffcdec6b4274fc51e31\",\"license\":\"MIT\"},\"src/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0x1f1b08cba51a05c8cea04e13251f9f8b8fc895017071cb205b0b4170900d1e5b\",\"license\":\"MIT\"},\"src/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xaf69959fcc5b87a74426939bc35b8517566494e3ba575b5cfdb1b5c788c0636a\",\"license\":\"MIT\"},\"src/access/roles/AccessControlInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./AccessControlStorage.sol\\\";\\nimport \\\"./IAccessControlEvents.sol\\\";\\n\\nabstract contract AccessControlInternal is Context, IAccessControlEvents {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function _hasRole(bytes32 role, address account) internal view virtual returns (bool) {\\n        return AccessControlStorage.layout().roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function _getRoleAdmin(bytes32 role) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _renounceRole(bytes32 role, address account) internal virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!_hasRole(role, account)) {\\n            AccessControlStorage.layout().roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (_hasRole(role, account)) {\\n            AccessControlStorage.layout().roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6bdd401d768e7df6002d060fc2e5287512a803ce2abc42ad99367b131e41f9bc\",\"license\":\"MIT\"},\"src/access/roles/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.AccessControl\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81acdea32dd524f817e7c8f4999f1c24e803dad4680a647d1be35675637a10b3\",\"license\":\"MIT\"},\"src/access/roles/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlEvents {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n}\\n\",\"keccak256\":\"0x7574c6d5a71b386e40e071bd7ba50eb0e43bb265385637af3620704b84d7666d\",\"license\":\"MIT\"},\"src/finance/sales/ITieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./ITieredSalesInternal.sol\\\";\\n\\ninterface ITieredSales is ITieredSalesInternal {\\n    function onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external view returns (bool);\\n\\n    function eligibleForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external view returns (uint256);\\n\\n    function mintByTier(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external payable;\\n\\n    function remainingForTier(uint256 tierId) external view returns (uint256);\\n\\n    function walletMintedByTier(uint256 tierId, address wallet) external view returns (uint256);\\n\\n    function tierMints(uint256 tierId) external view returns (uint256);\\n\\n    function totalReserved() external view returns (uint256);\\n\\n    function reservedMints() external view returns (uint256);\\n\\n    function tiers(uint256 tierId) external view returns (Tier memory);\\n}\\n\",\"keccak256\":\"0x8f938120b37a6fefbeb97b002945a3ab1fcabdbfd3d70ad1d7cd6b37a3e20c48\",\"license\":\"MIT\"},\"src/finance/sales/ITieredSalesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ITieredSalesInternal {\\n    struct Tier {\\n        uint256 start;\\n        uint256 end;\\n        address currency;\\n        uint256 price;\\n        uint256 maxPerWallet;\\n        bytes32 merkleRoot;\\n        uint256 reserved;\\n        uint256 maxAllocation;\\n    }\\n\\n    event TierSale(uint256 indexed tierId, address indexed operator, address indexed minter, uint256 count);\\n}\\n\",\"keccak256\":\"0xd644293c15bc109089d2fbef799184380b3b6f7df4508f132c94a8e8ded0273b\",\"license\":\"MIT\"},\"src/finance/sales/ITieredSalesRoleBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface ITieredSalesRoleBased {\\n    function mintByTierByRole(\\n        address minter,\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x8ad5bca045b2396949dc5a0a65d07dcc08c78ecc632f192fd4d4dc228e44ca66\",\"license\":\"MIT\"},\"src/finance/sales/TieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./ITieredSales.sol\\\";\\nimport \\\"./TieredSalesInternal.sol\\\";\\n\\n/**\\n * @title Abstract sales mechanism for any asset (e.g NFTs) with multiple tiered pricing, allowlist and allocation plans.\\n */\\nabstract contract TieredSales is ITieredSales, TieredSalesInternal {\\n    function onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) public view virtual returns (bool) {\\n        return super._onTierAllowlist(tierId, minter, maxAllowance, proof);\\n    }\\n\\n    function eligibleForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) public view virtual returns (uint256 maxMintable) {\\n        return super._eligibleForTier(tierId, minter, maxAllowance, proof);\\n    }\\n\\n    function remainingForTier(uint256 tierId) public view virtual returns (uint256) {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        uint256 availableSupply = _availableSupplyForTier(tierId);\\n        uint256 availableAllocation = l.tiers[tierId].maxAllocation - l.tierMints[tierId];\\n\\n        if (availableSupply < availableAllocation) {\\n            return availableSupply;\\n        } else {\\n            return availableAllocation;\\n        }\\n    }\\n\\n    function walletMintedByTier(uint256 tierId, address wallet) public view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().walletMinted[tierId][wallet];\\n    }\\n\\n    function tierMints(uint256 tierId) public view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().tierMints[tierId];\\n    }\\n\\n    function totalReserved() external view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().totalReserved;\\n    }\\n\\n    function reservedMints() external view virtual returns (uint256) {\\n        return TieredSalesStorage.layout().reservedMints;\\n    }\\n\\n    function tiers(uint256 tierId) external view virtual returns (Tier memory) {\\n        return TieredSalesStorage.layout().tiers[tierId];\\n    }\\n}\\n\",\"keccak256\":\"0xfb9d39df48e23476b2baf05bb292cab16a5e21a9f4262a6b47688a2437f15ad5\",\"license\":\"MIT\"},\"src/finance/sales/TieredSalesInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ITieredSalesInternal.sol\\\";\\nimport \\\"./TieredSalesStorage.sol\\\";\\n\\nimport \\\"../../access/ownable/OwnableInternal.sol\\\";\\n\\n/**\\n * @title Sales mechanism for NFTs with multiple tiered pricing, allowlist and allocation plans\\n */\\nabstract contract TieredSalesInternal is ITieredSalesInternal, Context, OwnableInternal {\\n    using TieredSalesStorage for TieredSalesStorage.Layout;\\n\\n    function _configureTiering(uint256 tierId, Tier calldata tier) internal virtual {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        require(tier.maxAllocation >= l.tierMints[tierId], \\\"LOWER_THAN_MINTED\\\");\\n\\n        if (l.tiers[tierId].reserved > 0) {\\n            require(tier.reserved >= l.tierMints[tierId], \\\"LOW_RESERVE_AMOUNT\\\");\\n        }\\n\\n        l.totalReserved -= l.tiers[tierId].reserved;\\n        l.tiers[tierId] = tier;\\n        l.totalReserved += tier.reserved;\\n    }\\n\\n    function _configureTiering(uint256[] calldata _tierIds, Tier[] calldata _tiers) internal virtual {\\n        for (uint256 i = 0; i < _tierIds.length; i++) {\\n            _configureTiering(_tierIds[i], _tiers[i]);\\n        }\\n    }\\n\\n    function _onTierAllowlist(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) internal view virtual returns (bool) {\\n        return\\n            MerkleProof.verify(\\n                proof,\\n                TieredSalesStorage.layout().tiers[tierId].merkleRoot,\\n                _generateMerkleLeaf(minter, maxAllowance)\\n            );\\n    }\\n\\n    function _eligibleForTier(\\n        uint256 tierId,\\n        address minter,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) internal view virtual returns (uint256 maxMintable) {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        require(l.tiers[tierId].maxPerWallet > 0, \\\"NOT_EXISTS\\\");\\n        require(block.timestamp >= l.tiers[tierId].start, \\\"NOT_STARTED\\\");\\n        require(block.timestamp <= l.tiers[tierId].end, \\\"ALREADY_ENDED\\\");\\n\\n        maxMintable = l.tiers[tierId].maxPerWallet - l.walletMinted[tierId][minter];\\n\\n        if (l.tiers[tierId].merkleRoot != bytes32(0)) {\\n            require(l.walletMinted[tierId][minter] < maxAllowance, \\\"MAXED_ALLOWANCE\\\");\\n            require(_onTierAllowlist(tierId, minter, maxAllowance, proof), \\\"NOT_ALLOWLISTED\\\");\\n\\n            uint256 remainingAllowance = maxAllowance - l.walletMinted[tierId][minter];\\n\\n            if (maxMintable > remainingAllowance) {\\n                maxMintable = remainingAllowance;\\n            }\\n        }\\n    }\\n\\n    function _availableSupplyForTier(uint256 tierId) internal view virtual returns (uint256 remaining) {\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        // Substract all the remaining reserved spots from the total remaining supply...\\n        remaining = _remainingSupply(tierId) - (l.totalReserved - l.reservedMints);\\n\\n        // If this tier has reserved spots, add remaining spots back to result...\\n        if (l.tiers[tierId].reserved > 0) {\\n            remaining += (l.tiers[tierId].reserved - l.tierMints[tierId]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes common operations of a sale for a given tier. Checks max allocation of the tier,\\n     *      max allowance per wallet, allowlist eligiblity and amount of payment.\\n     *      Caller of this internal method must provide the assets to the buyer based on any custom logic.\\n     *\\n     * @param tierId Tier ID\\n     * @param count Number of units (NFTs, Tokens, etc) to be sold\\n     * @param maxAllowance Maximum allowance of this wallet defined in the allowlist (only if tier needs an allowlist)\\n     * @param proof Merkle proof of the wallet in the allowlist (only if tier needs an allowlist)\\n     */\\n    function _executeSale(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) internal virtual {\\n        address minter = _msgSender();\\n\\n        uint256 maxMintable = _eligibleForTier(tierId, minter, maxAllowance, proof);\\n\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        require(count <= maxMintable, \\\"EXCEEDS_MAX\\\");\\n        require(count <= _availableSupplyForTier(tierId), \\\"EXCEEDS_SUPPLY\\\");\\n        require(count + l.tierMints[tierId] <= l.tiers[tierId].maxAllocation, \\\"EXCEEDS_ALLOCATION\\\");\\n\\n        _processPayment(tierId, minter, l.tiers[tierId].currency, count, l.tiers[tierId].price);\\n\\n        l.walletMinted[tierId][minter] += count;\\n        l.tierMints[tierId] += count;\\n\\n        if (l.tiers[tierId].reserved > 0) {\\n            l.reservedMints += count;\\n        }\\n\\n        emit TierSale(tierId, minter, minter, count);\\n    }\\n\\n    function _processPayment(\\n        uint256 tierId,\\n        address minter,\\n        address currency,\\n        uint256 count,\\n        uint256 price\\n    ) internal virtual {\\n        tierId;\\n\\n        if (price > 0) {\\n            if (currency == address(0)) {\\n                require(price * count <= msg.value, \\\"INSUFFICIENT_AMOUNT\\\");\\n            } else {\\n                IERC20(currency).transferFrom(minter, address(this), price * count);\\n            }\\n        }\\n    }\\n\\n    function _executeSaleSkipPayment(\\n        address minter,\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) internal virtual {\\n        uint256 maxMintable = _eligibleForTier(tierId, minter, maxAllowance, proof);\\n\\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\\n\\n        require(count <= maxMintable, \\\"EXCEEDS_MAX\\\");\\n        require(count <= _availableSupplyForTier(tierId), \\\"EXCEEDS_SUPPLY\\\");\\n        require(count + l.tierMints[tierId] <= l.tiers[tierId].maxAllocation, \\\"EXCEEDS_ALLOCATION\\\");\\n\\n        l.walletMinted[tierId][minter] += count;\\n        l.tierMints[tierId] += count;\\n\\n        if (l.tiers[tierId].reserved > 0) {\\n            l.reservedMints += count;\\n        }\\n\\n        emit TierSale(tierId, _msgSender(), minter, count);\\n    }\\n\\n    function _remainingSupply(\\n        uint256 /*tierId*/\\n    ) internal view virtual returns (uint256) {\\n        // By default assume supply is unlimited (that means reserving allocation for tiers is irrelevant)\\n        return type(uint256).max;\\n    }\\n\\n    /* PRIVATE */\\n\\n    function _generateMerkleLeaf(address account, uint256 maxAllowance) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account, maxAllowance));\\n    }\\n}\\n\",\"keccak256\":\"0xf878b99ca51bad14a27acb298e553882c3b0da6686408310b0b24bc13b45860c\",\"license\":\"MIT\"},\"src/finance/sales/TieredSalesStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./ITieredSales.sol\\\";\\n\\nlibrary TieredSalesStorage {\\n    struct Layout {\\n        uint256 totalReserved;\\n        uint256 reservedMints;\\n        mapping(uint256 => ITieredSales.Tier) tiers;\\n        mapping(uint256 => uint256) tierMints;\\n        mapping(uint256 => mapping(address => uint256)) walletMinted;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.TieredSales\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5fb660c6c664e63cf412affebe775aaee69f3b1d963fcb45c46cc6e23ad1e0b3\",\"license\":\"MIT\"},\"src/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.ERC165\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId) internal view returns (bool) {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x8f7ee2e4f1d03abed56da30ff881baeff0f95aca7468e0c48261a4f613b5186b\",\"license\":\"MIT\"},\"src/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport { ReentrancyGuardStorage } from \\\"./ReentrancyGuardStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    using ReentrancyGuardStorage for ReentrancyGuardStorage.Layout;\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(ReentrancyGuardStorage.layout()._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        ReentrancyGuardStorage.layout()._status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        ReentrancyGuardStorage.layout()._status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x4bc4be7d7fab61f39f6e81f8430ad95a3ee6eba664a7bdb4fe1eb095f71c8a3b\",\"license\":\"MIT\"},\"src/security/ReentrancyGuardStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ReentrancyGuardStorage {\\n    struct Layout {\\n        uint256 _status;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ReentrancyGuard\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf949d5ea9e6ff1af5da384c7d20834e3a62b814d56e830f662f559f61e1c8931\",\"license\":\"MIT\"},\"src/token/ERC20/base/ERC20BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport { IERC20BaseInternal } from \\\"./IERC20BaseInternal.sol\\\";\\nimport { ERC20BaseStorage } from \\\"./ERC20BaseStorage.sol\\\";\\n\\n/**\\n * @title Base ERC20 internal functions, excluding optional extensions\\n */\\nabstract contract ERC20BaseInternal is Context, IERC20BaseInternal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function _totalSupply() internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().totalSupply;\\n    }\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account) internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().balances[account];\\n    }\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function _allowance(address holder, address spender) internal view virtual returns (uint256) {\\n        return ERC20BaseStorage.layout().allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @notice enable spender to spend tokens on behalf of holder\\n     * @param holder address on whose behalf tokens may be spent\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        require(holder != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        ERC20BaseStorage.layout().allowances[holder][spender] = amount;\\n\\n        emit Approval(holder, spender, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice mint tokens for given account\\n     * @param account recipient of minted tokens\\n     * @param amount quantity of tokens minted\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        l.totalSupply += amount;\\n        l.balances[account] += amount;\\n\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @notice burn tokens held by given account\\n     * @param account holder of burned tokens\\n     * @param amount quantity of tokens burned\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        uint256 balance = l.balances[account];\\n        require(balance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            l.balances[account] = balance - amount;\\n        }\\n        l.totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens from holder to recipient\\n     * @param holder owner of tokens to be transferred\\n     * @param recipient beneficiary of transfer\\n     * @param amount quantity of tokens transferred\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function _transfer(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        require(holder != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(holder, recipient, amount);\\n\\n        ERC20BaseStorage.Layout storage l = ERC20BaseStorage.layout();\\n        uint256 holderBalance = l.balances[holder];\\n        require(holderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            l.balances[holder] = holderBalance - amount;\\n        }\\n        l.balances[recipient] += amount;\\n\\n        emit Transfer(holder, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function _transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual returns (bool) {\\n        uint256 currentAllowance = _allowance(holder, _msgSender());\\n\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n\\n        unchecked {\\n            _approve(holder, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        _transfer(holder, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice ERC20 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param amount quantity of tokens transferred\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa5fb819585b11678cf475778cae162f8e53c0e63fc85a75cfc1f9d811b9c0e72\",\"license\":\"MIT\"},\"src/token/ERC20/base/ERC20BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC20BaseStorage {\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 totalSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC20Base\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1143563f62ebcfa1e9f33bc811326777472ad88db4b4ee8e0480526b1436bb43\",\"license\":\"MIT\"},\"src/token/ERC20/base/IERC20BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20BaseInternal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6dc671c578d0bb2fa16ae70edb63756b3694e412d9f72c72d490171df19e8695\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/mintable/IERC20MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC20} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC20MintableExtension {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(address to, uint256 amount) external;\\n\\n    function mintByFacet(address[] memory tos, uint256[] memory amounts) external;\\n}\\n\",\"keccak256\":\"0x825fce5331786c12949eac166522bdcc762898be1551a27ad5bc42e50275cff1\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/supply/ERC20SupplyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\nimport \\\"../../base/ERC20BaseInternal.sol\\\";\\nimport \\\"./IERC20SupplyInternal.sol\\\";\\nimport \\\"./ERC20SupplyStorage.sol\\\";\\n\\nabstract contract ERC20SupplyInternal is IERC20SupplyInternal {\\n    using ERC20SupplyStorage for ERC20SupplyStorage.Layout;\\n\\n    function _maxSupply() internal view returns (uint256) {\\n        return ERC20SupplyStorage.layout().maxSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xc5cfb7d1aecbfaca0e39e782ad82db655b57d0a14ebbe681f9dc4d50ea75802b\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/supply/ERC20SupplyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC20SupplyStorage {\\n    struct Layout {\\n        // Maximum possible supply of tokens.\\n        uint256 maxSupply;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC20Supply\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafb8dddd36d656553d51620a153c5fc57d5c36ae7a4c9a37dc18a5dfcf5085d9\",\"license\":\"MIT\"},\"src/token/ERC20/extensions/supply/IERC20SupplyInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20SupplyInternal {\\n    error ErrMaxSupplyExceeded();\\n}\\n\",\"keccak256\":\"0x4d347c01b8b17e52b8125d62f49b5f71bee2968a36dce3aaa2296bbc5f5e271c\",\"license\":\"MIT\"},\"src/token/ERC20/facets/metadata/ERC20MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary ERC20MetadataStorage {\\n    struct Layout {\\n        uint8 decimals;\\n        bool decimalsLocked;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v2.flair.contracts.storage.ERC20Metadata\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62148e2c731baf6badbae460d125fa8b698993013b8e2619966e832d8b437b7c\",\"license\":\"MIT\"},\"src/token/ERC20/facets/sales/ERC20TieredSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../../../../security/ReentrancyGuard.sol\\\";\\nimport \\\"../../../../introspection/ERC165Storage.sol\\\";\\nimport \\\"../../../../access/roles/AccessControlInternal.sol\\\";\\nimport \\\"../../../../finance/sales/TieredSales.sol\\\";\\nimport \\\"../../../../finance/sales/ITieredSalesRoleBased.sol\\\";\\nimport \\\"../../extensions/mintable/IERC20MintableExtension.sol\\\";\\nimport \\\"../../extensions/supply/ERC20SupplyStorage.sol\\\";\\nimport \\\"../../extensions/supply/ERC20SupplyInternal.sol\\\";\\nimport \\\"../metadata/ERC20MetadataStorage.sol\\\";\\n\\n/**\\n * @title ERC20 - Tiered Sales\\n * @notice Sales mechanism for ERC20 tokens with multiple tiered pricing, allowlist and allocation plans.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category Tokens\\n * @custom:required-dependencies IERC20MintableExtension IERC20SupplyExtension\\n * @custom:provides-interfaces ITieredSales ITieredSalesRoleBased\\n */\\ncontract ERC20TieredSales is\\n    ITieredSalesRoleBased,\\n    ReentrancyGuard,\\n    TieredSales,\\n    ERC20BaseInternal,\\n    ERC20SupplyInternal,\\n    AccessControlInternal\\n{\\n    using ERC165Storage for ERC165Storage.Layout;\\n    using ERC20SupplyStorage for ERC20SupplyStorage.Layout;\\n    using ERC20MetadataStorage for ERC20MetadataStorage.Layout;\\n\\n    bytes32 public constant MERCHANT_ROLE = keccak256(\\\"MERCHANT_ROLE\\\");\\n\\n    function mintByTier(\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external payable virtual nonReentrant {\\n        super._executeSale(tierId, count, maxAllowance, proof);\\n\\n        IERC20MintableExtension(address(this)).mintByFacet(_msgSender(), count);\\n    }\\n\\n    function mintByTierByRole(\\n        address minter,\\n        uint256 tierId,\\n        uint256 count,\\n        uint256 maxAllowance,\\n        bytes32[] calldata proof\\n    ) external payable virtual nonReentrant onlyRole(MERCHANT_ROLE) {\\n        super._executeSaleSkipPayment(minter, tierId, count, maxAllowance, proof);\\n\\n        IERC20MintableExtension(address(this)).mintByFacet(minter, count);\\n    }\\n\\n    function _processPayment(\\n        uint256 tierId,\\n        address minter,\\n        address currency,\\n        uint256 count,\\n        uint256 price\\n    ) internal virtual override {\\n        tierId;\\n\\n        if (price > 0) {\\n            if (currency == address(0)) {\\n                require(\\n                    (price * count) <= msg.value * (10**ERC20MetadataStorage.layout().decimals),\\n                    \\\"INSUFFICIENT_AMOUNT\\\"\\n                );\\n            } else {\\n                uint256 amountTotal = (price * count) / (10**ERC20MetadataStorage.layout().decimals);\\n                require(amountTotal > 0, \\\"INCORRECT_COUNT\\\");\\n                IERC20(currency).transferFrom(minter, address(this), amountTotal);\\n            }\\n        }\\n    }\\n\\n    function _remainingSupply(uint256) internal view virtual override returns (uint256) {\\n        uint256 remainingSupply = ERC20SupplyStorage.layout().maxSupply - _totalSupply();\\n\\n        return remainingSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xa88f15d0d4fdba6adc817838272324ebcee962632cd95850c691c9f41da72523\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b5d806100206000396000f3fe6080604052600436106100c75760003560e01c80635ea2c91b11610074578063b3d358391161004e578063b3d358391461029a578063bd2c18f7146102ce578063c71b0e1c146102ee57600080fd5b80635ea2c91b1461024257806368c7d37c14610255578063a217fddf1461028557600080fd5b8063352a90bb116100a5578063352a90bb146101c157806353367f08146101d65780635897f8781461022257600080fd5b8063039af9eb146100cc5780631123f2ef1461015f5780632cb9b2ac1461018d575b600080fd5b3480156100d857600080fd5b506100ec6100e7366004611682565b610322565b604051610156919060006101008201905082518252602083015160208301526001600160a01b036040840151166040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b60405180910390f35b34801561016b57600080fd5b5061017f61017a3660046116b7565b61040c565b604051908152602001610156565b34801561019957600080fd5b507fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbc5461017f565b6101d46101cf36600461172f565b610455565b005b3480156101e257600080fd5b5061017f6101f1366004611682565b60009081527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbe602052604090205490565b34801561022e57600080fd5b5061017f61023d366004611682565b6105d3565b6101d46102503660046117a0565b61064a565b34801561026157600080fd5b50610275610270366004611801565b61079c565b6040519015158152602001610156565b34801561029157600080fd5b5061017f600081565b3480156102a657600080fd5b5061017f7f3c4a2d89ed8b4cf4347fec87df1c38410f8fc538bf9fd64c10f2717bc0feff3681565b3480156102da57600080fd5b5061017f6102e9366004611801565b6107b5565b3480156102fa57600080fd5b507fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb5461017f565b610376604051806101000160405280600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000801916815260200160008152602001600081525090565b5060009081527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbd60209081526040918290208251610100810184528154815260018201549281019290925260028101546001600160a01b0316928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e082015290565b60008281527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbf602090815260408083206001600160a01b03851684529091529020545b92915050565b60027f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e054036104cb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60027f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e0557f3c4a2d89ed8b4cf4347fec87df1c38410f8fc538bf9fd64c10f2717bc0feff36610519816107e8565b6105278787878787876107f5565b6040517f2d4f475f0000000000000000000000000000000000000000000000000000000081526001600160a01b0388166004820152602481018690523090632d4f475f90604401600060405180830381600087803b15801561058857600080fd5b505af115801561059c573d6000803e3d6000fd5b505050505060016105ca7f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e090565b55505050505050565b60007fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb8161060084610a32565b60008581526003840160209081526040808320546002870190925282206007015492935090916106309190611862565b90508082101561064257509392505050565b949350505050565b60027f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e054036106bb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104c2565b60027f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e0556106ec8585858585610af1565b30632d4f475f336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101879052604401600060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b5050505060016107947f3d9e0cf98d8ac76a756d900415e06fbccac0f9e61251a384452695e2330be6e090565b555050505050565b60006107ab8686868686610d52565b9695505050505050565b60006107ab8686868686610e0e565b7fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb90565b6107f281336110e0565b50565b60006108048688868686610e0e565b90507fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb818611156108775760405162461bcd60e51b815260206004820152600b60248201527f455843454544535f4d415800000000000000000000000000000000000000000060448201526064016104c2565b61088087610a32565b8611156108cf5760405162461bcd60e51b815260206004820152600e60248201527f455843454544535f535550504c5900000000000000000000000000000000000060448201526064016104c2565b600087815260028201602090815260408083206007015460038501909252909120546108fb9088611879565b11156109495760405162461bcd60e51b815260206004820152601260248201527f455843454544535f414c4c4f434154494f4e000000000000000000000000000060448201526064016104c2565b600087815260048201602090815260408083206001600160a01b038c1684529091528120805488929061097d908490611879565b90915550506000878152600382016020526040812080548892906109a2908490611879565b90915550506000878152600282016020526040902060060154156109da57858160010160008282546109d49190611879565b90915550505b6001600160a01b038816336001600160a01b0316887f6b995c2a6f13fda3bb1769289588283f7687b909bdceba7789276ad33ad422f789604051610a2091815260200190565b60405180910390a45050505050505050565b7fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbc547fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb8054600092610a8391611862565b610a8c84611178565b610a969190611862565b600084815260028301602052604090206006015490925015610aeb5760008381526003820160209081526040808320546002850190925290912060060154610ade9190611862565b610ae89083611879565b91505b50919050565b336000610b018783878787610e0e565b90507fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb81871115610b745760405162461bcd60e51b815260206004820152600b60248201527f455843454544535f4d415800000000000000000000000000000000000000000060448201526064016104c2565b610b7d88610a32565b871115610bcc5760405162461bcd60e51b815260206004820152600e60248201527f455843454544535f535550504c5900000000000000000000000000000000000060448201526064016104c2565b60008881526002820160209081526040808320600701546003850190925290912054610bf89089611879565b1115610c465760405162461bcd60e51b815260206004820152601260248201527f455843454544535f414c4c4f434154494f4e000000000000000000000000000060448201526064016104c2565b60008881526002808301602052604090912090810154600390910154610c7b918a9186916001600160a01b0316908b906111d6565b600088815260048201602090815260408083206001600160a01b038716845290915281208054899290610caf908490611879565b9091555050600088815260038201602052604081208054899290610cd4908490611879565b9091555050600088815260028201602052604090206006015415610d0c5786816001016000828254610d069190611879565b90915550505b826001600160a01b0316836001600160a01b0316897f6b995c2a6f13fda3bb1769289588283f7687b909bdceba7789276ad33ad422f78a604051610a2091815260200190565b60006107ab838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610d9492506107c4915050565b60008981526002919091016020526040902060050154610e0988886040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b6113b5565b60008581527fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbd60205260408120600401547fb7471df0c7246ed3d4a380504edfbb03f5845b709c7716243791636e4ba46cbb90610ead5760405162461bcd60e51b815260206004820152600a60248201527f4e4f545f4558495354530000000000000000000000000000000000000000000060448201526064016104c2565b6000878152600282016020526040902054421015610f0d5760405162461bcd60e51b815260206004820152600b60248201527f4e4f545f5354415254454400000000000000000000000000000000000000000060448201526064016104c2565b6000878152600282016020526040902060010154421115610f705760405162461bcd60e51b815260206004820152600d60248201527f414c52454144595f454e4445440000000000000000000000000000000000000060448201526064016104c2565b60008781526004808301602090815260408084206001600160a01b038b1685528252808420548b8552600286019092529092200154610faf9190611862565b6000888152600283016020526040902060050154909250156110d657600087815260048201602090815260408083206001600160a01b038a168452909152902054851161103e5760405162461bcd60e51b815260206004820152600f60248201527f4d415845445f414c4c4f57414e4345000000000000000000000000000000000060448201526064016104c2565b61104b8787878787610d52565b6110975760405162461bcd60e51b815260206004820152600f60248201527f4e4f545f414c4c4f574c4953544544000000000000000000000000000000000060448201526064016104c2565b600087815260048201602090815260408083206001600160a01b038a1684529091528120546110c69087611862565b9050808311156110d4578092505b505b5095945050505050565b60008281527f2e59e4c2e927cdddbb64e181e0668d9a0fa70dd88f94d999cd87d5496a20da62602090815260408083206001600160a01b038516845290915290205460ff1661117457611132816113cb565b61113d8360206113dd565b60405160200161114e9291906118c1565b60408051601f198184030181529082905262461bcd60e51b82526104c291600401611942565b5050565b6000806111a37fe2463c7b61902c74336138227f8649cf55ec352748fb1d5f5a2a227dbcc19e075490565b7f992082eab08422324340bd25ada2736d6cd62f0b0f29a637f182303af822d56e546111cf9190611862565b9392505050565b80156113ae576001600160a01b038316611281577f3b67c745df1d17403ada58f538de4780e4768549f9387f877a18fb6c6b3a7b4b5461121a9060ff16600a611a59565b6112249034611a68565b61122e8383611a68565b111561127c5760405162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e540000000000000000000000000060448201526064016104c2565b6113ae565b60007f3b67c745df1d17403ada58f538de4780e4768549f9387f877a18fb6c6b3a7b4b546112b39060ff16600a611a59565b6112bd8484611a68565b6112c79190611a87565b9050600081116113195760405162461bcd60e51b815260206004820152600f60248201527f494e434f52524543545f434f554e54000000000000000000000000000000000060448201526064016104c2565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152306024830152604482018390528516906323b872dd906064016020604051808303816000875af1158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190611aa9565b50505b5050505050565b6000826113c28584611606565b14949350505050565b606061044f6001600160a01b03831660145b606060006113ec836002611a68565b6113f7906002611879565b67ffffffffffffffff81111561140f5761140f611acb565b6040519080825280601f01601f191660200182016040528015611439576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061147057611470611ae1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106114d3576114d3611ae1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061150f846002611a68565b61151a906001611879565b90505b60018111156115b7577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061155b5761155b611ae1565b1a60f81b82828151811061157157611571611ae1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936115b081611af7565b905061151d565b5083156111cf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104c2565b600081815b845181101561164b576116378286838151811061162a5761162a611ae1565b6020026020010151611653565b91508061164381611b0e565b91505061160b565b509392505050565b600081831061166f5760008281526020849052604090206111cf565b60008381526020839052604090206111cf565b60006020828403121561169457600080fd5b5035919050565b80356001600160a01b03811681146116b257600080fd5b919050565b600080604083850312156116ca57600080fd5b823591506116da6020840161169b565b90509250929050565b60008083601f8401126116f557600080fd5b50813567ffffffffffffffff81111561170d57600080fd5b6020830191508360208260051b850101111561172857600080fd5b9250929050565b60008060008060008060a0878903121561174857600080fd5b6117518761169b565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff81111561178257600080fd5b61178e89828a016116e3565b979a9699509497509295939492505050565b6000806000806000608086880312156117b857600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff8111156117e457600080fd5b6117f0888289016116e3565b969995985093965092949392505050565b60008060008060006080868803121561181957600080fd5b853594506118296020870161169b565b935060408601359250606086013567ffffffffffffffff8111156117e457600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156118745761187461184c565b500390565b6000821982111561188c5761188c61184c565b500190565b60005b838110156118ac578181015183820152602001611894565b838111156118bb576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118f9816017850160208801611891565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611936816028840160208801611891565b01602801949350505050565b6020815260008251806020840152611961816040850160208701611891565b601f01601f19169190910160400192915050565b600181815b808511156119b05781600019048211156119965761199661184c565b808516156119a357918102915b93841c939080029061197a565b509250929050565b6000826119c75750600161044f565b816119d45750600061044f565b81600181146119ea57600281146119f457611a10565b600191505061044f565b60ff841115611a0557611a0561184c565b50506001821b61044f565b5060208310610133831016604e8410600b8410161715611a33575081810a61044f565b611a3d8383611975565b8060001904821115611a5157611a5161184c565b029392505050565b60006111cf60ff8416836119b8565b6000816000190483118215151615611a8257611a8261184c565b500290565b600082611aa457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611abb57600080fd5b815180151581146111cf57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611b0657611b0661184c565b506000190190565b600060018201611b2057611b2061184c565b506001019056fea2646970667358221220bd226e26babfff1b8fc15ebd27dbb10ce6a8301b4bf4312199fbe6ee70451ce364736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "custom:category": "Tokens",
    "custom:provides-interfaces": "ITieredSales ITieredSalesRoleBased",
    "custom:required-dependencies": "IERC20MintableExtension IERC20SupplyExtension",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "ERC20 - Tiered Sales",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Sales mechanism for ERC20 tokens with multiple tiered pricing, allowlist and allocation plans.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}