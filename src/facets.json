{
  "flair-sdk:access/roles/AccessControl": {
    "addresses": {
      "5": "0x942241f517203838D2318086CcF80E8E2dCd77Fa",
      "goerli": "0x942241f517203838D2318086CcF80E8E2dCd77Fa"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "getRoleAdmin(bytes32)",
      "grantRole(bytes32,address)",
      "hasRole(bytes32,address)",
      "renounceRole(bytes32,address)",
      "revokeRole(bytes32,address)"
    ],
    "fqn": "flair-sdk:access/roles/AccessControl",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x7965db0b"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Access",
    "title": "Roles",
    "notice": "Role-based access control for write functions based on OpenZeppelin's AccessControl",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/access/roles/AccessControl.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:access/roles/AccessControlAdmin": {
    "addresses": {
      "5": "0x1a7c5FD331A388acE3385592b0a53da810ef9dC4",
      "goerli": "0x1a7c5FD331A388acE3385592b0a53da810ef9dC4"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "grantAdminRole(address)"
    ],
    "fqn": "flair-sdk:access/roles/AccessControlAdmin",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xc634b78e"
    ],
    "peerDependencies": [
      "0x7965db0b"
    ],
    "requiredDependencies": [],
    "category": "Access",
    "title": "Roles - Admin",
    "notice": "Allows you to initiate access controls as current contract owner by giving DEFAULT_ADMIN_ROLE to an address.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/access/roles/AccessControlAdmin.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:access/roles/AccessControlERC2771": {
    "addresses": {
      "5": "0xafD33B31c15E56769B67794f4B5C460395F1314A",
      "goerli": "0xafD33B31c15E56769B67794f4B5C460395F1314A"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "getRoleAdmin(bytes32)",
      "grantRole(bytes32,address)",
      "hasRole(bytes32,address)",
      "renounceRole(bytes32,address)",
      "revokeRole(bytes32,address)"
    ],
    "fqn": "flair-sdk:access/roles/AccessControlERC2771",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x7965db0b"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Access",
    "title": "Roles - with meta-transactions",
    "notice": "Role-based access control with meta-transactions enabled (mainly for grantRole, revokeRole, renounceRole)",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/access/roles/AccessControlERC2771.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/common/burnable/BurnableOwnable": {
    "addresses": {
      "5": "0x8457d8dAAc4f875B1380263A0e73B01F2392dE06",
      "goerli": "0x8457d8dAAc4f875B1380263A0e73B01F2392dE06"
    },
    "functionSelectors": [
      "setBurnablePausedUntil(uint256)"
    ],
    "fqn": "flair-sdk:token/common/burnable/BurnableOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x710fb577"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "Burnable - Admin - Ownable",
    "notice": "Allow contract owner to manage burning mechanism.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/common/burnable/BurnableOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:finance/depository/Depository": {
    "addresses": {
      "5": "0x4498a21260157D3c06B9329f3a43654aB3FC1364",
      "goerli": "0x4498a21260157D3c06B9329f3a43654aB3FC1364"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "DEPOSITOR_ROLE()",
      "transferERC20(address,address,uint256)",
      "transferERC20(address[],address[],uint256[])",
      "transferNative(address,uint256)",
      "transferNative(address[],uint256[])"
    ],
    "fqn": "flair-sdk:finance/depository/Depository",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xf5164e15"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Finance",
    "title": "Depository",
    "notice": "A simple depository contract to hold native or ERC20 tokens and allow certain roles to transfer or disperse.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/finance/depository/Depository.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:finance/depository/DepositoryWithERC2771": {
    "addresses": {
      "5": "0x8226f05C9Fbecb29713155a0354FB56172f36034",
      "goerli": "0x8226f05C9Fbecb29713155a0354FB56172f36034"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "DEPOSITOR_ROLE()",
      "transferERC20(address,address,uint256)",
      "transferERC20(address[],address[],uint256[])",
      "transferNative(address,uint256)",
      "transferNative(address[],uint256[])"
    ],
    "fqn": "flair-sdk:finance/depository/DepositoryWithERC2771",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xf5164e15"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Finance",
    "title": "Depository - with meta-transactions",
    "notice": "A simple depository contract, with ERC2771 context for meta-transactions to hold native or ERC20 tokens and allow certain roles to transfer or disperse.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/finance/depository/DepositoryWithERC2771.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:diamond/DiamondCut": {
    "addresses": {
      "5": "0x91E2D99eEddFB281CBBc2B96e5ff83E7e6e6A548",
      "goerli": "0x91E2D99eEddFB281CBBc2B96e5ff83E7e6e6A548"
    },
    "functionSelectors": [
      "diamondCut((address,uint8,bytes4[])[],address,bytes)"
    ],
    "fqn": "flair-sdk:diamond/DiamondCut",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x1f931c1c"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Diamonds",
    "title": "Diamond - Cut",
    "notice": "Standard EIP-2535 cut functionality to add, replace and remove facets from a diamond.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/diamond/DiamondCut.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:diamond/DiamondLoupe": {
    "addresses": {
      "5": "0x5fab35bf5f7f6e57781f548ca75d15254413d6c8",
      "goerli": "0x5fab35bf5f7f6e57781f548ca75d15254413d6c8"
    },
    "functionSelectors": [
      "facetAddress(bytes4)",
      "facetAddresses()",
      "facetFunctionSelectors(address)",
      "facets()"
    ],
    "fqn": "flair-sdk:diamond/DiamondLoupe",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x48e2b093"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Diamonds",
    "title": "Diamond - Loupe",
    "notice": "Standard EIP-2535 loupe functions to allow inspecting a diamond for explorers.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/diamond/DiamondLoupe.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/ERC1155": {
    "addresses": {
      "5": "0xa1aa81597bb7fddeaa02224498aa613daa01986d",
      "goerli": "0xa1aa81597bb7fddeaa02224498aa613daa01986d"
    },
    "functionSelectors": [
      "balanceOf(address,uint256)",
      "balanceOfBatch(address[],uint256[])",
      "burn(address,uint256,uint256)",
      "burnBatch(address,uint256[],uint256[])",
      "burnBatchByFacet(address,uint256[],uint256[])",
      "burnByFacet(address,uint256,uint256)",
      "exists(uint256)",
      "isApprovedForAll(address,address)",
      "lockByFacet(address,uint256,uint256)",
      "lockByFacet(address[],uint256[],uint256[])",
      "locked(address,uint256)",
      "locked(address,uint256[])",
      "maxSupply(uint256)",
      "mintByFacet(address,uint256,uint256,bytes)",
      "mintByFacet(address[],uint256[],uint256[],bytes[])",
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
      "safeTransferFrom(address,address,uint256,uint256,bytes)",
      "setApprovalForAll(address,bool)",
      "totalSupply(uint256)",
      "unlockByFacet(address,uint256,uint256)",
      "unlockByFacet(address[],uint256[],uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC1155/ERC1155",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xd9b67a26",
      "0xdc290004",
      "0x37773a16",
      "0xbb774d48",
      "0x744f4bd4"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "ERC1155 - Standard",
    "notice": "Standard EIP-1155 NFTs with core capabilities of Mintable, Burnable and Lockable.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/ERC1155.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/facets/locking/ERC1155LockableOwnable": {
    "addresses": {
      "5": "0x7509048f8a798a60596f3Bb48587Ca2a533f288a",
      "goerli": "0x7509048f8a798a60596f3Bb48587Ca2a533f288a"
    },
    "functionSelectors": [
      "lockByOwner(address,uint256,uint256)",
      "lockByOwner(address[],uint256[],uint256[])",
      "unlockByOwner(address,uint256,uint256)",
      "unlockByOwner(address[],uint256[],uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC1155/facets/locking/ERC1155LockableOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x7b535f1c"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0x37773a16"
    ],
    "category": "NFTs",
    "title": "ERC1155 - Lock as owner",
    "notice": "Allow locking tokens as the contract owner.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/facets/locking/ERC1155LockableOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/facets/locking/ERC1155LockableRoleBased": {
    "addresses": {
      "5": "0x20bccA536307cEd175391e893061BAf5cE80e36F",
      "goerli": "0x20bccA536307cEd175391e893061BAf5cE80e36F"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "LOCKER_ROLE()",
      "lockByRole(address,uint256,uint256)",
      "lockByRole(address[],uint256[],uint256[])",
      "unlockByRole(address,uint256,uint256)",
      "unlockByRole(address[],uint256[],uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC1155/facets/locking/ERC1155LockableRoleBased",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xd40d0af6"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0x37773a16"
    ],
    "category": "NFTs",
    "title": "ERC1155 - Lock as role",
    "notice": "Allow locking tokens by any sender who has the LOCKER_ROLE.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/facets/locking/ERC1155LockableRoleBased.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/facets/metadata/ERC1155Metadata": {
    "addresses": {
      "5": "0x8F8E67fEa0ed0dd5eD79ef465497D5d31c619943",
      "goerli": "0x8F8E67fEa0ed0dd5eD79ef465497D5d31c619943"
    },
    "functionSelectors": [
      "name()",
      "symbol()",
      "uri(uint256)"
    ],
    "fqn": "flair-sdk:token/ERC1155/facets/metadata/ERC1155Metadata",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x52496f06",
      "0x0e89341c"
    ],
    "peerDependencies": [
      "0xd9b67a26"
    ],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "ERC1155 - Metadata",
    "notice": "Provides metadata for ERC1155 tokens according to standard.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/facets/metadata/ERC1155Metadata.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/facets/minting/ERC1155MintableOwnable": {
    "addresses": {
      "5": "0xA7B51baD8d1ad82154879e3D868b726eE9417a1F",
      "goerli": "0xA7B51baD8d1ad82154879e3D868b726eE9417a1F"
    },
    "functionSelectors": [
      "mintByOwner(address,uint256,uint256,bytes)",
      "mintByOwner(address[],uint256[],uint256[],bytes[])"
    ],
    "fqn": "flair-sdk:token/ERC1155/facets/minting/ERC1155MintableOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x6c5e99c7"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0xbb774d48"
    ],
    "category": "NFTs",
    "title": "ERC1155 - Mint as owner",
    "notice": "Allow minting as contract owner with no restrictions.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/facets/minting/ERC1155MintableOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/facets/minting/ERC1155MintableOwnableERC2771": {
    "addresses": {
      "5": "0x826E57fA5830f277d5c13D835fEe019fE2133Aa3",
      "goerli": "0x826E57fA5830f277d5c13D835fEe019fE2133Aa3"
    },
    "functionSelectors": [
      "mintByOwner(address,uint256,uint256,bytes)",
      "mintByOwner(address[],uint256[],uint256[],bytes[])"
    ],
    "fqn": "flair-sdk:token/ERC1155/facets/minting/ERC1155MintableOwnableERC2771",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x6c5e99c7"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0xbb774d48"
    ],
    "category": "NFTs",
    "title": "ERC1155 - Mint as owner - with meta transactions",
    "notice": "Allow minting as owner via ERC2771 Context meta transactions (signed by the owner private key)",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/facets/minting/ERC1155MintableOwnableERC2771.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/facets/minting/ERC1155MintableRoleBased": {
    "addresses": {
      "5": "0x70391b81B8A39ddd515a0603eCC3DE306f62d09D",
      "goerli": "0x70391b81B8A39ddd515a0603eCC3DE306f62d09D"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "MINTER_ROLE()",
      "mintByRole(address,uint256,uint256,bytes)",
      "mintByRole(address[],uint256[],uint256[],bytes[])"
    ],
    "fqn": "flair-sdk:token/ERC1155/facets/minting/ERC1155MintableRoleBased",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x1abe36ba"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0xbb774d48"
    ],
    "category": "NFTs",
    "title": "ERC1155 - Mint as role",
    "notice": "Allow minting for grantees of MINTER_ROLE.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/facets/minting/ERC1155MintableRoleBased.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/facets/minting/ERC1155MintableRoleBasedERC2771": {
    "addresses": {
      "5": "0xDa766C39473FF06E282271bB2e2aA10100712410",
      "goerli": "0xDa766C39473FF06E282271bB2e2aA10100712410"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "MINTER_ROLE()",
      "mintByRole(address,uint256,uint256,bytes)",
      "mintByRole(address[],uint256[],uint256[],bytes[])"
    ],
    "fqn": "flair-sdk:token/ERC1155/facets/minting/ERC1155MintableRoleBasedERC2771",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x1abe36ba"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0xbb774d48"
    ],
    "category": "NFTs",
    "title": "ERC1155 - Mint as role - with meta transactions",
    "notice": "Allow minting for grantees of MINTER_ROLE with meta-transactions supported via ERC2771.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/facets/minting/ERC1155MintableRoleBasedERC2771.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/facets/supply/ERC1155SupplyOwnable": {
    "addresses": {
      "5": "0xda25087323285AE25e00E8C373a9184fb558D831",
      "goerli": "0xda25087323285AE25e00E8C373a9184fb558D831"
    },
    "functionSelectors": [
      "freezeMaxSupply(uint256)",
      "freezeMaxSupplyBatch(uint256[])",
      "setMaxSupply(uint256,uint256)",
      "setMaxSupplyBatch(uint256[],uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC1155/facets/supply/ERC1155SupplyOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xf0d6039e"
    ],
    "peerDependencies": [
      "0x744f4bd4"
    ],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "ERC1155 - Supply - Admin - Ownable",
    "notice": "Allows owner of a EIP-1155 contract to change max supply of token IDs.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/facets/supply/ERC1155SupplyOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/facets/sales/ERC1155TieredSales": {
    "addresses": {
      "5": "0x2e8fAafb1CFc3941d94436Adaf0910b0F9a5833b",
      "goerli": "0x2e8fAafb1CFc3941d94436Adaf0910b0F9a5833b"
    },
    "functionSelectors": [
      "eligibleForTier(uint256,address,uint256,bytes32[])",
      "mintByTier(uint256,uint256,uint256,bytes32[])",
      "onTierAllowlist(uint256,address,uint256,bytes32[])",
      "remainingForTier(uint256)",
      "reservedMints()",
      "tierMints(uint256)",
      "tierToTokenId(uint256)",
      "tierToTokenId(uint256[])",
      "tiers(uint256)",
      "totalReserved()",
      "walletMintedByTier(uint256,address)"
    ],
    "fqn": "flair-sdk:token/ERC1155/facets/sales/ERC1155TieredSales",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x79f33254",
      "0x5ae18a74"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0xbb774d48"
    ],
    "category": "NFTs",
    "title": "ERC1155 - Tiered Sales",
    "notice": "Sales mechanism for ERC1155 NFTs with multiple tiered pricing, allowlist and allocation plans.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/facets/sales/ERC1155TieredSales.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/facets/sales/ERC1155TieredSalesOwnable": {
    "addresses": {
      "5": "0xb1589F9197F2D0ec885E109D58A8e02D293900ab",
      "goerli": "0xb1589F9197F2D0ec885E109D58A8e02D293900ab"
    },
    "functionSelectors": [
      "configureTierTokenId(uint256,uint256)",
      "configureTierTokenId(uint256[],uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC1155/facets/sales/ERC1155TieredSalesOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x76c5dd21"
    ],
    "peerDependencies": [
      "0x5ae18a74"
    ],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "ERC1155 - Tiered Sales - Admin - Ownable",
    "notice": "Used to manage which ERC1155 token is related to which the sales tier.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/facets/sales/ERC1155TieredSalesOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC1155/ERC1155WithERC2771": {
    "addresses": {
      "5": "0x1903d9d83B82F541a1c022410C4Aca7223cBE230",
      "goerli": "0x1903d9d83B82F541a1c022410C4Aca7223cBE230"
    },
    "functionSelectors": [
      "balanceOf(address,uint256)",
      "balanceOfBatch(address[],uint256[])",
      "burn(address,uint256,uint256)",
      "burnBatch(address,uint256[],uint256[])",
      "burnBatchByFacet(address,uint256[],uint256[])",
      "burnByFacet(address,uint256,uint256)",
      "exists(uint256)",
      "isApprovedForAll(address,address)",
      "lockByFacet(address,uint256,uint256)",
      "lockByFacet(address[],uint256[],uint256[])",
      "locked(address,uint256)",
      "locked(address,uint256[])",
      "maxSupply(uint256)",
      "mintByFacet(address,uint256,uint256,bytes)",
      "mintByFacet(address[],uint256[],uint256[],bytes[])",
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
      "safeTransferFrom(address,address,uint256,uint256,bytes)",
      "setApprovalForAll(address,bool)",
      "totalSupply(uint256)",
      "unlockByFacet(address,uint256,uint256)",
      "unlockByFacet(address[],uint256[],uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC1155/ERC1155WithERC2771",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xd9b67a26",
      "0xdc290004",
      "0x37773a16",
      "0xbb774d48",
      "0x744f4bd4"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "ERC1155 - with meta-transactions",
    "notice": "Standard EIP-1155 with ability to accept meta transactions (mainly transfer or burn methods).",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC1155/ERC1155WithERC2771.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:introspection/ERC165": {
    "addresses": {
      "5": "0x956Cd6d2F31EaA815dF44C9A3969Fc7e1395EdeF",
      "goerli": "0x956Cd6d2F31EaA815dF44C9A3969Fc7e1395EdeF"
    },
    "functionSelectors": [
      "supportsInterface(bytes4)"
    ],
    "fqn": "flair-sdk:introspection/ERC165",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x01ffc9a7"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Introspection",
    "title": "ERC165",
    "notice": "Standard EIP-165 facet which would be already included as a core facet in Flair's Diamond contract.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/introspection/ERC165.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:introspection/ERC165Ownable": {
    "addresses": {
      "5": "0x3c0176CDFB21675377e41a9987d8c31f90d293AA",
      "goerli": "0x3c0176CDFB21675377e41a9987d8c31f90d293AA"
    },
    "functionSelectors": [
      "setERC165(bytes4[],bytes4[])"
    ],
    "fqn": "flair-sdk:introspection/ERC165Ownable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x2a848091"
    ],
    "peerDependencies": [
      "0x01ffc9a7"
    ],
    "requiredDependencies": [],
    "category": "Diamonds",
    "title": "ERC165 - Admin - Ownable",
    "notice": "Standard EIP-165 management facet using Ownable extension for access control.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/introspection/ERC165Ownable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:metatx/ERC2771ContextOwnable": {
    "addresses": {
      "5": "0xb3Fd2744e07B739Ee408c07b3A63F2642b25425F",
      "goerli": "0xb3Fd2744e07B739Ee408c07b3A63F2642b25425F"
    },
    "functionSelectors": [
      "setTrustedForwarder(address)"
    ],
    "fqn": "flair-sdk:metatx/ERC2771ContextOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xda742228"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Meta Transactions",
    "title": "ERC2771 Context - Admin - Ownable",
    "notice": "Controls trusted forwarder used to accept meta transactions according to EIP-2771.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/metatx/ERC2771ContextOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/ERC721A": {
    "addresses": {
      "5": "0x867f1acc9d8132911e5e6bdaa4599d176da91e1c",
      "goerli": "0x867f1acc9d8132911e5e6bdaa4599d176da91e1c"
    },
    "functionSelectors": [
      "approve(address,uint256)",
      "balanceOf(address)",
      "burn(uint256)",
      "burnBatch(uint256[])",
      "burnBatchByFacet(uint256[])",
      "burnByFacet(uint256)",
      "getApproved(uint256)",
      "isApprovedForAll(address,address)",
      "lockByFacet(uint256)",
      "lockByFacet(uint256[])",
      "locked(uint256)",
      "locked(uint256[])",
      "maxSupply()",
      "mintByFacet(address,uint256)",
      "mintByFacet(address[],uint256[])",
      "ownerOf(uint256)",
      "safeTransferFrom(address,address,uint256)",
      "safeTransferFrom(address,address,uint256,bytes)",
      "setApprovalForAll(address,bool)",
      "totalSupply()",
      "transferFrom(address,address,uint256)",
      "unlockByFacet(uint256)",
      "unlockByFacet(uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC721/ERC721A",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x8153916a",
      "0x80ac58cd",
      "0xcdbde6dc",
      "0x645b6d4b",
      "0xc82b5d4d",
      "0x459bd11c",
      "0xb45a3c0e"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "ERC721 (A) - Standard",
    "notice": "Azuki's implementation of standard EIP-721 NFTs with core capabilities of Mintable, Burnable and Lockable.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/ERC721A.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/ERC721AWithERC2771": {
    "addresses": {
      "5": "0x6190ff680bad8Abd11A3f872AC20A65046235B21",
      "goerli": "0x6190ff680bad8Abd11A3f872AC20A65046235B21"
    },
    "functionSelectors": [
      "approve(address,uint256)",
      "balanceOf(address)",
      "burn(uint256)",
      "burnBatch(uint256[])",
      "burnBatchByFacet(uint256[])",
      "burnByFacet(uint256)",
      "getApproved(uint256)",
      "isApprovedForAll(address,address)",
      "lockByFacet(uint256)",
      "lockByFacet(uint256[])",
      "locked(uint256)",
      "locked(uint256[])",
      "maxSupply()",
      "mintByFacet(address,uint256)",
      "mintByFacet(address[],uint256[])",
      "ownerOf(uint256)",
      "safeTransferFrom(address,address,uint256)",
      "safeTransferFrom(address,address,uint256,bytes)",
      "setApprovalForAll(address,bool)",
      "totalSupply()",
      "transferFrom(address,address,uint256)",
      "unlockByFacet(uint256)",
      "unlockByFacet(uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC721/ERC721AWithERC2771",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x8153916a",
      "0x80ac58cd",
      "0xcdbde6dc",
      "0x645b6d4b",
      "0x459bd11c",
      "0xc82b5d4d"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "ERC721 (A) - with meta-transactions",
    "notice": "Azuki's implemntation of standard EIP-721 with ability to accept meta transactions (mainly transfer or burn methods).",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/ERC721AWithERC2771.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/facets/locking/ERC721LockableOwnable": {
    "addresses": {
      "5": "0xb778984e1a1EEd7d7e29bbD69850c055AdC11120",
      "goerli": "0xb778984e1a1EEd7d7e29bbD69850c055AdC11120"
    },
    "functionSelectors": [
      "lockByOwner(uint256)",
      "lockByOwner(uint256[])",
      "unlockByOwner(uint256)",
      "unlockByOwner(uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC721/facets/locking/ERC721LockableOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x822b3992"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0x459bd11c"
    ],
    "category": "NFTs",
    "title": "ERC721 - Lock as owner",
    "notice": "Allow locking tokens as the contract owner.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/facets/locking/ERC721LockableOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/facets/locking/ERC721LockableRoleBased": {
    "addresses": {
      "5": "0x973c3d592122DFa4f40F5748b3785457C85B1Fd5",
      "goerli": "0x973c3d592122DFa4f40F5748b3785457C85B1Fd5"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "LOCKER_ROLE()",
      "lockByRole(uint256)",
      "lockByRole(uint256[])",
      "unlockByRole(uint256)",
      "unlockByRole(uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC721/facets/locking/ERC721LockableRoleBased",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x28ed446a"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0x459bd11c"
    ],
    "category": "NFTs",
    "title": "ERC721 - Lock as role",
    "notice": "Allow locking tokens by any sender who has the LOCKER_ROLE.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/facets/locking/ERC721LockableRoleBased.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/facets/metadata/ERC721Metadata": {
    "addresses": {
      "5": "0x9fD97813197377Fef180B8E4acDcF5c1F6509AA9",
      "goerli": "0x9fD97813197377Fef180B8E4acDcF5c1F6509AA9"
    },
    "functionSelectors": [
      "name()",
      "symbol()",
      "tokenURI(uint256)"
    ],
    "fqn": "flair-sdk:token/ERC721/facets/metadata/ERC721Metadata",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x5b5e139f"
    ],
    "peerDependencies": [
      "0x8153916a"
    ],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "ERC721 - Metadata",
    "notice": "Provides metadata for ERC721 tokens according to standard.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/facets/metadata/ERC721Metadata.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/facets/minting/ERC721MintableOwnable": {
    "addresses": {
      "5": "0xFD348987ed2e39e899C68988A0FBF8A8cA9DF311",
      "goerli": "0xFD348987ed2e39e899C68988A0FBF8A8cA9DF311"
    },
    "functionSelectors": [
      "mintByOwner(address,uint256)",
      "mintByOwner(address[],uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC721/facets/minting/ERC721MintableOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x197f2429"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0x645b6d4b"
    ],
    "category": "NFTs",
    "title": "ERC721 - Mint as owner",
    "notice": "Allow minting as contract owner with no restrictions (supports ERC721A).",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/facets/minting/ERC721MintableOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/facets/minting/ERC721MintableOwnableERC2771": {
    "addresses": {
      "5": "0x134eDea1fD79F9F2F19DD3e21af0881B65A4a365",
      "goerli": "0x134eDea1fD79F9F2F19DD3e21af0881B65A4a365"
    },
    "functionSelectors": [
      "mintByOwner(address,uint256)",
      "mintByOwner(address[],uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC721/facets/minting/ERC721MintableOwnableERC2771",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x197f2429"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0x645b6d4b"
    ],
    "category": "NFTs",
    "title": "ERC721 - Mint as owner - With ERC2771 Context",
    "notice": "Allow minting as owner via meta transactions, signed by the owner private key. (supports ERC721A)",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/facets/minting/ERC721MintableOwnableERC2771.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/facets/minting/ERC721MintableRoleBased": {
    "addresses": {
      "5": "0x76e43De9addA1cDCe8d946e93531C46E9D1147d9",
      "goerli": "0x76e43De9addA1cDCe8d946e93531C46E9D1147d9"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "MINTER_ROLE()",
      "mintByRole(address,uint256)",
      "mintByRole(address[],uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC721/facets/minting/ERC721MintableRoleBased",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xa3a11183"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0x645b6d4b"
    ],
    "category": "NFTs",
    "title": "ERC721 - Mint as role",
    "notice": "Allow minting for senders with MINTER_ROLE to mint new tokens (supports ERC721A).",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/facets/minting/ERC721MintableRoleBased.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/facets/minting/ERC721MintableRoleBasedERC2771": {
    "addresses": {
      "5": "0x5E4DF8657cBc91c6641143971729ff7303496a23",
      "goerli": "0x5E4DF8657cBc91c6641143971729ff7303496a23"
    },
    "functionSelectors": [
      "DEFAULT_ADMIN_ROLE()",
      "MINTER_ROLE()",
      "mintByRole(address,uint256)",
      "mintByRole(address[],uint256[])"
    ],
    "fqn": "flair-sdk:token/ERC721/facets/minting/ERC721MintableRoleBasedERC2771",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xa3a11183"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0x645b6d4b"
    ],
    "category": "NFTs",
    "title": "ERC721 - Mint as role - with meta-transactions",
    "notice": "Allow minting for senders with MINTER_ROLE to mint new tokens with meta-transactions supported via ERC2771 (supports ERC721A).",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/facets/minting/ERC721MintableRoleBasedERC2771.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/facets/supply/ERC721SupplyOwnable": {
    "addresses": {
      "5": "0x96C3d4e3Bc2A28E8188C2f3FC1EfA1BA8a013977",
      "goerli": "0x96C3d4e3Bc2A28E8188C2f3FC1EfA1BA8a013977"
    },
    "functionSelectors": [
      "freezeMaxSupply()",
      "maxSupplyFrozen()",
      "setMaxSupply(uint256)"
    ],
    "fqn": "flair-sdk:token/ERC721/facets/supply/ERC721SupplyOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x8a7b7298"
    ],
    "peerDependencies": [
      "0xcdbde6dc"
    ],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "ERC721 - Supply - Admin - Ownable",
    "notice": "Allows owner of a EIP-721 contract to change max supply of tokens.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/facets/supply/ERC721SupplyOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/facets/sales/ERC721TieredSales": {
    "addresses": {
      "5": "0xFC8D2Baa496D28D63b0D3f3B30Fb510EFaA33d8C",
      "goerli": "0xFC8D2Baa496D28D63b0D3f3B30Fb510EFaA33d8C"
    },
    "functionSelectors": [
      "eligibleForTier(uint256,address,uint256,bytes32[])",
      "mintByTier(uint256,uint256,uint256,bytes32[])",
      "onTierAllowlist(uint256,address,uint256,bytes32[])",
      "remainingForTier(uint256)",
      "reservedMints()",
      "tierMints(uint256)",
      "tiers(uint256)",
      "totalReserved()",
      "walletMintedByTier(uint256,address)"
    ],
    "fqn": "flair-sdk:token/ERC721/facets/sales/ERC721TieredSales",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x79f33254"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0x645b6d4b",
      "0xcdbde6dc"
    ],
    "category": "NFTs",
    "title": "ERC721 - Tiered Sales",
    "notice": "Sales mechanism for ERC721 NFTs with multiple tiered pricing, allowlist and allocation plans.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/facets/sales/ERC721TieredSales.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/ERC721/facets/sales/ERC721TieredSalesERC2771": {
    "addresses": {
      "5": "0x417CB4a563C5cf2F9C607963bE9Bf22F513b7750",
      "goerli": "0x417CB4a563C5cf2F9C607963bE9Bf22F513b7750"
    },
    "functionSelectors": [
      "eligibleForTier(uint256,address,uint256,bytes32[])",
      "mintByTier(uint256,uint256,uint256,bytes32[])",
      "onTierAllowlist(uint256,address,uint256,bytes32[])",
      "remainingForTier(uint256)",
      "reservedMints()",
      "tierMints(uint256)",
      "tiers(uint256)",
      "totalReserved()",
      "walletMintedByTier(uint256,address)"
    ],
    "fqn": "flair-sdk:token/ERC721/facets/sales/ERC721TieredSalesERC2771",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x79f33254"
    ],
    "peerDependencies": [],
    "requiredDependencies": [
      "0x645b6d4b"
    ],
    "category": "NFTs",
    "title": "ERC721 - Tiered Sales - with meta-transactions",
    "notice": "Sales mechanism for ERC721 NFTs with ERC2771 meta-transactions support (e.g. credit card minting).",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/ERC721/facets/sales/ERC721TieredSalesERC2771.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:legal/license/License": {
    "addresses": {
      "5": "0x6A1c6F516ca7FA869449931af883d91Ed8A90a2D",
      "goerli": "0x6A1c6F516ca7FA869449931af883d91Ed8A90a2D"
    },
    "functionSelectors": [
      "customLicenseName()",
      "customLicenseURI()",
      "getLicenseName()",
      "getLicenseURI()",
      "licenseVersion()"
    ],
    "fqn": "flair-sdk:legal/license/License",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x88a1e8f3",
      "0x649a51a8"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Legal",
    "title": "License",
    "notice": "Add license name and content URI for interacting or holding assets of this contract. Based on a16z's \"Can't Be Evil\".",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/legal/license/License.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:legal/license/LicenseOwnable": {
    "addresses": {
      "5": "0xea9e49bf118ed2ef37b94474b8702b18ad2f7f6a",
      "goerli": "0xea9e49bf118ed2ef37b94474b8702b18ad2f7f6a"
    },
    "functionSelectors": [
      "licenseVersionLocked()",
      "lockLicenseVersion()",
      "setLicenseVersion(uint8)"
    ],
    "fqn": "flair-sdk:legal/license/LicenseOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x06ff95be"
    ],
    "peerDependencies": [
      "0x88a1e8f3",
      "0x649a51a8"
    ],
    "requiredDependencies": [],
    "category": "Legal",
    "title": "License - Admin - Ownable",
    "notice": "Allow contract owner to manage license version, name and URI.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/legal/license/LicenseOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/common/metadata/Metadata": {
    "addresses": {
      "5": "0xc89E1364c377731893CE0250dfF6d2E94A3516E3",
      "goerli": "0xc89E1364c377731893CE0250dfF6d2E94A3516E3"
    },
    "functionSelectors": [
      "baseURI()",
      "baseURILocked()",
      "fallbackURI()",
      "fallbackURILocked()",
      "lastLockedTokenId()",
      "name()",
      "nameAndSymbolLocked()",
      "symbol()",
      "uriSuffix()",
      "uriSuffixLocked()"
    ],
    "fqn": "flair-sdk:token/common/metadata/Metadata",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x52496f06"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "Metadata",
    "notice": "Provides common functions for various token metadata standards. This extension supports base URI, per-token URI, and a fallback URI. You can also freeze URIs until a certain token ID.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/common/metadata/Metadata.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:token/common/metadata/MetadataOwnable": {
    "addresses": {
      "5": "0x37612c9c923359a4273d22d6aba6b7e410dd2201",
      "goerli": "0x37612c9c923359a4273d22d6aba6b7e410dd2201"
    },
    "functionSelectors": [
      "lockBaseURI()",
      "lockFallbackURI()",
      "lockNameAndSymbol()",
      "lockURISuffix()",
      "lockURIUntil(uint256)",
      "setBaseURI(string)",
      "setFallbackURI(string)",
      "setName(string)",
      "setSymbol(string)",
      "setURI(uint256,string)",
      "setURIBatch(uint256[],string[])",
      "setURISuffix(string)"
    ],
    "fqn": "flair-sdk:token/common/metadata/MetadataOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x209d7394"
    ],
    "peerDependencies": [
      "0x52496f06"
    ],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "Metadata - Admin - Ownable",
    "notice": "Allows diamond owner to change base, per-token, and fallback URIs, as wel as freezing URIs.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/token/common/metadata/MetadataOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:access/ownable/Ownable": {
    "addresses": {
      "5": "0x29199f2D68A91Bc227229DD1e11185CC639f134e",
      "goerli": "0x29199f2D68A91Bc227229DD1e11185CC639f134e"
    },
    "functionSelectors": [
      "owner()",
      "renounceOwnership()",
      "transferOwnership(address)"
    ],
    "fqn": "flair-sdk:access/ownable/Ownable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x7f5828d0"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Access",
    "title": "ERC173 - Ownable",
    "notice": "Ownership access control facet based on EIP-173 which would be already included as a core facet in Flair's Diamond contract.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/access/ownable/Ownable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:finance/royalty/Royalty": {
    "addresses": {
      "5": "0x175e1b379E8f07FCf83cD13F5eE2B3eF00a18018",
      "goerli": "0x175e1b379E8f07FCf83cD13F5eE2B3eF00a18018"
    },
    "functionSelectors": [
      "defaultRoyalty()",
      "getFeeBps(uint256)",
      "getFeeRecipients(uint256)",
      "getFees(uint256)",
      "getRaribleV2Royalties(uint256)",
      "getTokenRoyaltiesCount()",
      "getTokenRoyaltyByIndex(uint256)",
      "royaltyInfo(uint256,uint256)"
    ],
    "fqn": "flair-sdk:finance/royalty/Royalty",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x2a55205a",
      "0x821be678",
      "0xb7799584",
      "0xcad96cca",
      "0xd5a06d4c",
      "0xc7627428"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Finance",
    "title": "ERC2981 - Royalty",
    "notice": "Provide standard on-chain EIP-2981 royalty support for ERC721 or ERC1155 tokens, and additional functions for Rarible and Foundation.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/finance/royalty/Royalty.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:finance/royalty/RoyaltyOwnable": {
    "addresses": {
      "5": "0xC9DFaCC52F42d6a5A2C8221434DB48273A78960b",
      "goerli": "0xC9DFaCC52F42d6a5A2C8221434DB48273A78960b"
    },
    "functionSelectors": [
      "setDefaultRoyalty((address,uint16))",
      "setTokenRoyalties((uint256,address,uint16)[])"
    ],
    "fqn": "flair-sdk:finance/royalty/RoyaltyOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xbe561268"
    ],
    "peerDependencies": [
      "0x821be678",
      "0x2a55205a"
    ],
    "requiredDependencies": [],
    "category": "Finance",
    "title": "ERC2981 - Royalty - Admin - Ownable",
    "notice": "Allow contract owner to manage token royalties based on EIP-2981 standard.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/finance/royalty/RoyaltyOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:finance/sales/TieredSalesOwnable": {
    "addresses": {
      "5": "0x5a43EfdAfc930d6A47bb1C228F490c691344aC1a",
      "goerli": "0x5a43EfdAfc930d6A47bb1C228F490c691344aC1a"
    },
    "functionSelectors": [
      "configureTiering(uint256,(uint256,uint256,address,uint256,uint256,bytes32,uint256,uint256))",
      "configureTiering(uint256[],(uint256,uint256,address,uint256,uint256,bytes32,uint256,uint256)[])"
    ],
    "fqn": "flair-sdk:finance/sales/TieredSalesOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xf8458dcd"
    ],
    "peerDependencies": [
      "0x79f33254"
    ],
    "requiredDependencies": [],
    "category": "NFTs",
    "title": "Tiered Sales - Admin - Ownable",
    "notice": "Allow contract owner to manage sale tiers.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/finance/sales/TieredSalesOwnable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:finance/withdraw/Withdrawable": {
    "addresses": {
      "5": "0x1B66A8947730a857B938F7191D2603635A61Afe2",
      "goerli": "0x1B66A8947730a857B938F7191D2603635A61Afe2"
    },
    "functionSelectors": [
      "withdraw(address[],uint256[])",
      "withdrawMode()",
      "withdrawModeLocked()",
      "withdrawPowerRevoked()",
      "withdrawRecipient()",
      "withdrawRecipientLocked()"
    ],
    "fqn": "flair-sdk:finance/withdraw/Withdrawable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0xa9c00e2f"
    ],
    "peerDependencies": [],
    "requiredDependencies": [],
    "category": "Finance",
    "title": "Withdrawable",
    "notice": "Allow withdrwaing any ERC20 or native tokens from the contract.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/finance/withdraw/Withdrawable.sol",
    "author": "flair-sdk.eth"
  },
  "flair-sdk:finance/withdraw/WithdrawableOwnable": {
    "addresses": {
      "5": "0x607E2580c3377584596C8B02B5527CB23259E191",
      "goerli": "0x607E2580c3377584596C8B02B5527CB23259E191"
    },
    "functionSelectors": [
      "lockWithdrawMode()",
      "lockWithdrawRecipient()",
      "revokeWithdrawPower()",
      "setWithdrawMode(uint8)",
      "setWithdrawRecipient(address)"
    ],
    "fqn": "flair-sdk:finance/withdraw/WithdrawableOwnable",
    "version": "2.17.0",
    "providesInterfaces": [
      "0x7246cea5"
    ],
    "peerDependencies": [
      "0xa9c00e2f"
    ],
    "requiredDependencies": [],
    "category": "Finance",
    "title": "Withdrawable - Admin - Ownable",
    "notice": "Allow contract owner to manage who can withdraw funds and how.",
    "source": "https://github.com/flair-sdk/contracts/blob/v2.17.0/src/finance/withdraw/WithdrawableOwnable.sol",
    "author": "flair-sdk.eth"
  }
}
