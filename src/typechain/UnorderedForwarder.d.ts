/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UnorderedForwarderInterface extends ethers.utils.Interface {
  functions: {
    "batchExecute(tuple[],bytes[])": FunctionFragment;
    "execute((address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
    "verify((address,address,uint256,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchExecute",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      }[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export class UnorderedForwarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UnorderedForwarderInterface;

  functions: {
    batchExecute(
      mtxs: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      mtx: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      mtx: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { mtxHash: string }>;
  };

  batchExecute(
    mtxs: {
      from: string;
      to: string;
      value: BigNumberish;
      minGasPrice: BigNumberish;
      maxGasPrice: BigNumberish;
      expiresAt: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    }[],
    signatures: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    mtx: {
      from: string;
      to: string;
      value: BigNumberish;
      minGasPrice: BigNumberish;
      maxGasPrice: BigNumberish;
      expiresAt: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    mtx: {
      from: string;
      to: string;
      value: BigNumberish;
      minGasPrice: BigNumberish;
      maxGasPrice: BigNumberish;
      expiresAt: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    batchExecute(
      mtxs: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    execute(
      mtx: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    verify(
      mtx: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    batchExecute(
      mtxs: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      mtx: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      mtx: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchExecute(
      mtxs: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      }[],
      signatures: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      mtx: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      mtx: {
        from: string;
        to: string;
        value: BigNumberish;
        minGasPrice: BigNumberish;
        maxGasPrice: BigNumberish;
        expiresAt: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
