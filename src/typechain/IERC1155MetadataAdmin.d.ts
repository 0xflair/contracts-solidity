/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IERC1155MetadataAdminInterface extends ethers.utils.Interface {
  functions: {
    "lockBaseURI()": FunctionFragment;
    "lockFallbackURI()": FunctionFragment;
    "lockURISuffix()": FunctionFragment;
    "lockURIUntil(uint256)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setFallbackURI(string)": FunctionFragment;
    "setURI(uint256,string)": FunctionFragment;
    "setURIBatch(uint256[],string[])": FunctionFragment;
    "setURISuffix(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lockBaseURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockFallbackURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockURISuffix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockURIUntil",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFallbackURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setURIBatch",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setURISuffix",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "lockBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockFallbackURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockURISuffix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockURIUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setURIBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setURISuffix",
    data: BytesLike
  ): Result;

  events: {};
}

export class IERC1155MetadataAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IERC1155MetadataAdminInterface;

  functions: {
    lockBaseURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockFallbackURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockURISuffix(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockURIUntil(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFallbackURI(
      newFallbackURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setURI(
      tokenId: BigNumberish,
      newTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setURIBatch(
      tokenIds: BigNumberish[],
      newTokenURIs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setURISuffix(
      newURIPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  lockBaseURI(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockFallbackURI(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockURISuffix(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockURIUntil(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    newBaseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFallbackURI(
    newFallbackURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setURI(
    tokenId: BigNumberish,
    newTokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setURIBatch(
    tokenIds: BigNumberish[],
    newTokenURIs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setURISuffix(
    newURIPrefix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lockBaseURI(overrides?: CallOverrides): Promise<void>;

    lockFallbackURI(overrides?: CallOverrides): Promise<void>;

    lockURISuffix(overrides?: CallOverrides): Promise<void>;

    lockURIUntil(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(newBaseURI: string, overrides?: CallOverrides): Promise<void>;

    setFallbackURI(
      newFallbackURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setURI(
      tokenId: BigNumberish,
      newTokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setURIBatch(
      tokenIds: BigNumberish[],
      newTokenURIs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setURISuffix(
      newURIPrefix: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    lockBaseURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockFallbackURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockURISuffix(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockURIUntil(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFallbackURI(
      newFallbackURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setURI(
      tokenId: BigNumberish,
      newTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setURIBatch(
      tokenIds: BigNumberish[],
      newTokenURIs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setURISuffix(
      newURIPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lockBaseURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockFallbackURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockURISuffix(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockURIUntil(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFallbackURI(
      newFallbackURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setURI(
      tokenId: BigNumberish,
      newTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setURIBatch(
      tokenIds: BigNumberish[],
      newTokenURIs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setURISuffix(
      newURIPrefix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
