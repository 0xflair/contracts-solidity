/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

export interface ERC1155MetadataInterface extends ethers.utils.Interface {
  functions: {
    "baseURI()": FunctionFragment;
    "baseURILocked()": FunctionFragment;
    "fallbackURI()": FunctionFragment;
    "fallbackURILocked()": FunctionFragment;
    "lastLockedTokenId()": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "uriBatch(uint256[])": FunctionFragment;
    "uriSuffix()": FunctionFragment;
    "uriSuffixLocked()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseURILocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fallbackURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fallbackURILocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastLockedTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "uriBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "uriSuffix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uriSuffixLocked",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseURILocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fallbackURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fallbackURILocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLockedTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uriBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uriSuffix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uriSuffixLocked",
    data: BytesLike
  ): Result;

  events: {
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type URIEvent = TypedEvent<
  [string, BigNumber] & { value: string; tokenId: BigNumber }
>;

export class ERC1155Metadata extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC1155MetadataInterface;

  functions: {
    baseURI(overrides?: CallOverrides): Promise<[string]>;

    baseURILocked(overrides?: CallOverrides): Promise<[boolean]>;

    fallbackURI(overrides?: CallOverrides): Promise<[string]>;

    fallbackURILocked(overrides?: CallOverrides): Promise<[boolean]>;

    lastLockedTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    uri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    uriBatch(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    uriSuffix(overrides?: CallOverrides): Promise<[string]>;

    uriSuffixLocked(overrides?: CallOverrides): Promise<[boolean]>;
  };

  baseURI(overrides?: CallOverrides): Promise<string>;

  baseURILocked(overrides?: CallOverrides): Promise<boolean>;

  fallbackURI(overrides?: CallOverrides): Promise<string>;

  fallbackURILocked(overrides?: CallOverrides): Promise<boolean>;

  lastLockedTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  uri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  uriBatch(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  uriSuffix(overrides?: CallOverrides): Promise<string>;

  uriSuffixLocked(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    baseURI(overrides?: CallOverrides): Promise<string>;

    baseURILocked(overrides?: CallOverrides): Promise<boolean>;

    fallbackURI(overrides?: CallOverrides): Promise<string>;

    fallbackURILocked(overrides?: CallOverrides): Promise<boolean>;

    lastLockedTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    uri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    uriBatch(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    uriSuffix(overrides?: CallOverrides): Promise<string>;

    uriSuffixLocked(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "URI(string,uint256)"(
      value?: null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { value: string; tokenId: BigNumber }
    >;

    URI(
      value?: null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { value: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    baseURILocked(overrides?: CallOverrides): Promise<BigNumber>;

    fallbackURI(overrides?: CallOverrides): Promise<BigNumber>;

    fallbackURILocked(overrides?: CallOverrides): Promise<BigNumber>;

    lastLockedTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    uri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    uriBatch(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uriSuffix(overrides?: CallOverrides): Promise<BigNumber>;

    uriSuffixLocked(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURILocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fallbackURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fallbackURILocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastLockedTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uri(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uriBatch(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uriSuffix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uriSuffixLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
